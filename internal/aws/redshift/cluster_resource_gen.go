// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package redshift

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_redshift_cluster", clusterResource)
}

// clusterResource returns the Terraform awscc_redshift_cluster resource.
// This Terraform resource corresponds to the CloudFormation AWS::Redshift::Cluster resource.
func clusterResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AllowVersionUpgrade
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default value is True",
		//	  "type": "boolean"
		//	}
		"allow_version_upgrade": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default value is True",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AquaConfigurationStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored. Possible values include the following.\n\nenabled - Use AQUA if it is available for the current Region and Amazon Redshift node type.\ndisabled - Don't use AQUA.\nauto - Amazon Redshift determines whether to use AQUA.\n",
		//	  "type": "string"
		//	}
		"aqua_configuration_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored. Possible values include the following.\n\nenabled - Use AQUA if it is available for the current Region and Amazon Redshift node type.\ndisabled - Don't use AQUA.\nauto - Amazon Redshift determines whether to use AQUA.\n",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AutomatedSnapshotRetentionPeriod
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Default value is 1",
		//	  "type": "integer"
		//	}
		"automated_snapshot_retention_period": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Default value is 1",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint",
		//	  "type": "string"
		//	}
		"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZoneRelocation
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.",
		//	  "type": "boolean"
		//	}
		"availability_zone_relocation": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZoneRelocationStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The availability zone relocation status of the cluster",
		//	  "type": "string"
		//	}
		"availability_zone_relocation_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The availability zone relocation status of the cluster",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Classic
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false , the resize type is elastic.",
		//	  "type": "boolean"
		//	}
		"classic": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to false , the resize type is elastic.",
			Optional:    true,
			// Classic is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: ClusterIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account",
		//	  "maxLength": 63,
		//	  "type": "string"
		//	}
		"cluster_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. All alphabetical characters must be lower case, no hypens at the end, no two consecutive hyphens. Cluster name should be unique for all clusters within an AWS account",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(63),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ClusterNamespaceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the cluster namespace.",
		//	  "type": "string"
		//	}
		"cluster_namespace_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the cluster namespace.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ClusterParameterGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the parameter group to be associated with this cluster.",
		//	  "maxLength": 255,
		//	  "type": "string"
		//	}
		"cluster_parameter_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the parameter group to be associated with this cluster.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ClusterSecurityGroups
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of security groups to be associated with this cluster.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "anyOf": [
		//	      {},
		//	      {}
		//	    ],
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"cluster_security_groups": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of security groups to be associated with this cluster.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ClusterSubnetGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of a cluster subnet group to be associated with this cluster.",
		//	  "type": "string"
		//	}
		"cluster_subnet_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of a cluster subnet group to be associated with this cluster.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ClusterType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the cluster. When cluster type is specified as single-node, the NumberOfNodes parameter is not required and if multi-node, the NumberOfNodes parameter is required",
		//	  "type": "string"
		//	}
		"cluster_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the cluster. When cluster type is specified as single-node, the NumberOfNodes parameter is not required and if multi-node, the NumberOfNodes parameter is required",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: ClusterVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The version of the Amazon Redshift engine software that you want to deploy on the cluster.The version selected runs on all the nodes in the cluster.",
		//	  "type": "string"
		//	}
		"cluster_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The version of the Amazon Redshift engine software that you want to deploy on the cluster.The version selected runs on all the nodes in the cluster.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DBName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database.",
		//	  "type": "string"
		//	}
		"db_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DeferMaintenance
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A boolean indicating whether to enable the deferred maintenance window.",
		//	  "type": "boolean"
		//	}
		"defer_maintenance": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "A boolean indicating whether to enable the deferred maintenance window.",
			Optional:    true,
			// DeferMaintenance is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: DeferMaintenanceDuration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.",
		//	  "type": "integer"
		//	}
		"defer_maintenance_duration": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.",
			Optional:    true,
			// DeferMaintenanceDuration is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: DeferMaintenanceEndTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.",
		//	  "type": "string"
		//	}
		"defer_maintenance_end_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DeferMaintenanceIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique identifier for the deferred maintenance window.",
		//	  "type": "string"
		//	}
		"defer_maintenance_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique identifier for the deferred maintenance window.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DeferMaintenanceStartTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A timestamp indicating the start time for the deferred maintenance window.",
		//	  "type": "string"
		//	}
		"defer_maintenance_start_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A timestamp indicating the start time for the deferred maintenance window.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DestinationRegion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The destination AWS Region that you want to copy snapshots to. Constraints: Must be the name of a valid AWS Region. For more information, see Regions and Endpoints in the Amazon Web Services [https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region] General Reference",
		//	  "type": "string"
		//	}
		"destination_region": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The destination AWS Region that you want to copy snapshots to. Constraints: Must be the name of a valid AWS Region. For more information, see Regions and Endpoints in the Amazon Web Services [https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region] General Reference",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ElasticIp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Elastic IP (EIP) address for the cluster.",
		//	  "type": "string"
		//	}
		"elastic_ip": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Elastic IP (EIP) address for the cluster.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Encrypted
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "If true, the data in the cluster is encrypted at rest.",
		//	  "type": "boolean"
		//	}
		"encrypted": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "If true, the data in the cluster is encrypted at rest.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Endpoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Address": {
		//	      "type": "string"
		//	    },
		//	    "Port": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"endpoint": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Address
				"address": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Port
				"port": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EnhancedVpcRouting
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide.\n\nIf this option is true , enhanced VPC routing is enabled.\n\nDefault: false",
		//	  "type": "boolean"
		//	}
		"enhanced_vpc_routing": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide.\n\nIf this option is true , enhanced VPC routing is enabled.\n\nDefault: false",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: HsmClientCertificateIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM",
		//	  "type": "string"
		//	}
		"hsm_client_certificate_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: HsmConfigurationIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.",
		//	  "type": "string"
		//	}
		"hsm_configuration_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IamRoles
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 50 IAM roles in a single request",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "relationshipRef": {
		//	      "propertyPath": "/properties/Arn",
		//	      "typeName": "AWS::IAM::Role"
		//	    },
		//	    "type": "string"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array"
		//	}
		"iam_roles": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 50 IAM roles in a single request",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeAtMost(50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: KmsKeyId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "anyOf": [
		//	    {},
		//	    {}
		//	  ],
		//	  "description": "The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.",
		//	  "type": "string"
		//	}
		"kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LoggingProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BucketName": {
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/BucketName",
		//	        "typeName": "AWS::S3::Bucket"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "LogDestinationType": {
		//	      "type": "string"
		//	    },
		//	    "LogExports": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "maxItems": 3,
		//	      "type": "array"
		//	    },
		//	    "S3KeyPrefix": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"logging_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BucketName
				"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LogDestinationType
				"log_destination_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LogExports
				"log_exports": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Optional:    true,
					Computed:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.SizeAtMost(3),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						generic.Multiset(),
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: S3KeyPrefix
				"s3_key_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaintenanceTrackName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.",
		//	  "type": "string"
		//	}
		"maintenance_track_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the PendingModifiedValues for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ManageMasterPassword
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A boolean indicating if the redshift cluster's admin user credentials is managed by Redshift or not. You can't use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's password.",
		//	  "type": "boolean"
		//	}
		"manage_master_password": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "A boolean indicating if the redshift cluster's admin user credentials is managed by Redshift or not. You can't use MasterUserPassword if ManageMasterPassword is true. If ManageMasterPassword is false or not set, Amazon Redshift uses MasterUserPassword for the admin user account's password.",
			Optional:    true,
			// ManageMasterPassword is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: ManualSnapshotRetentionPeriod
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely.\n\nThe value must be either -1 or an integer between 1 and 3,653.",
		//	  "type": "integer"
		//	}
		"manual_snapshot_retention_period": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is -1, the manual snapshot is retained indefinitely.\n\nThe value must be either -1 or an integer between 1 and 3,653.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MasterPasswordSecretArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.",
		//	  "type": "string"
		//	}
		"master_password_secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) for the cluster's admin user credentials secret.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MasterPasswordSecretKmsKeyId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "anyOf": [
		//	    {},
		//	    {}
		//	  ],
		//	  "description": "The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin user credentials secret.",
		//	  "type": "string"
		//	}
		"master_password_secret_kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Key Management Service (KMS) key used to encrypt and store the cluster's admin user credentials secret.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MasterUserPassword
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The password associated with the master user account for the cluster that is being created. You can't use MasterUserPassword if ManageMasterPassword is true. Password must be between 8 and 64 characters in length, should have at least one uppercase letter.Must contain at least one lowercase letter.Must contain one number.Can be any printable ASCII character.",
		//	  "maxLength": 64,
		//	  "type": "string"
		//	}
		"master_user_password": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The password associated with the master user account for the cluster that is being created. You can't use MasterUserPassword if ManageMasterPassword is true. Password must be between 8 and 64 characters in length, should have at least one uppercase letter.Must contain at least one lowercase letter.Must contain one number.Can be any printable ASCII character.",
			Optional:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(64),
			}, /*END VALIDATORS*/
			// MasterUserPassword is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: MasterUsername
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The user name associated with the master user account for the cluster that is being created. The user name can't be PUBLIC and first character must be a letter.",
		//	  "maxLength": 128,
		//	  "type": "string"
		//	}
		"master_username": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The user name associated with the master user account for the cluster that is being created. The user name can't be PUBLIC and first character must be a letter.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(128),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MultiAZ
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A boolean indicating if the redshift cluster is multi-az or not. If you don't provide this parameter or set the value to false, the redshift cluster will be single-az.",
		//	  "type": "boolean"
		//	}
		"multi_az": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "A boolean indicating if the redshift cluster is multi-az or not. If you don't provide this parameter or set the value to false, the redshift cluster will be single-az.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NamespaceResourcePolicy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The namespace resource policy document that will be attached to a Redshift cluster.",
		//	  "type": "object"
		//	}
		"namespace_resource_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  jsontypes.NormalizedType{},
			Description: "The namespace resource policy document that will be attached to a Redshift cluster.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NodeType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The node type to be provisioned for the cluster.Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.4xlarge | ra3.16xlarge",
		//	  "type": "string"
		//	}
		"node_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The node type to be provisioned for the cluster.Valid Values: ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge | dc2.large | dc2.8xlarge | ra3.4xlarge | ra3.16xlarge",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: NumberOfNodes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node.",
		//	  "type": "integer"
		//	}
		"number_of_nodes": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OwnerAccount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"owner_account": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Port
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings",
		//	  "type": "integer"
		//	}
		"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PreferredMaintenanceWindow
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The weekly time range (in UTC) during which automated cluster maintenance can occur.",
		//	  "type": "string"
		//	}
		"preferred_maintenance_window": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The weekly time range (in UTC) during which automated cluster maintenance can occur.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PubliclyAccessible
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "If true, the cluster can be accessed from a public network.",
		//	  "type": "boolean"
		//	}
		"publicly_accessible": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "If true, the cluster can be accessed from a public network.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ResourceAction
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Redshift operation to be performed. Resource Action supports pause-cluster, resume-cluster, failover-primary-compute APIs",
		//	  "type": "string"
		//	}
		"resource_action": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Redshift operation to be performed. Resource Action supports pause-cluster, resume-cluster, failover-primary-compute APIs",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RevisionTarget
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the database revision. You can retrieve this value from the response to the DescribeClusterDbRevisions request.",
		//	  "type": "string"
		//	}
		"revision_target": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the database revision. You can retrieve this value from the response to the DescribeClusterDbRevisions request.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RotateEncryptionKey
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A boolean indicating if we want to rotate Encryption Keys.",
		//	  "type": "boolean"
		//	}
		"rotate_encryption_key": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "A boolean indicating if we want to rotate Encryption Keys.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SnapshotClusterIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.",
		//	  "type": "string"
		//	}
		"snapshot_cluster_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SnapshotCopyGrantName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.",
		//	  "type": "string"
		//	}
		"snapshot_copy_grant_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SnapshotCopyManual
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.",
		//	  "type": "boolean"
		//	}
		"snapshot_copy_manual": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SnapshotCopyRetentionPeriod
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of days to retain automated snapshots in the destination region after they are copied from the source region. \n\n Default is 7. \n\n Constraints: Must be at least 1 and no more than 35.",
		//	  "type": "integer"
		//	}
		"snapshot_copy_retention_period": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of days to retain automated snapshots in the destination region after they are copied from the source region. \n\n Default is 7. \n\n Constraints: Must be at least 1 and no more than 35.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SnapshotIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.",
		//	  "type": "string"
		//	}
		"snapshot_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// SnapshotIdentifier is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The list of tags for the cluster parameter group.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 127,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 127),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 255),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The list of tags for the cluster parameter group.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeAtMost(50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VpcSecurityGroupIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "relationshipRef": {
		//	      "propertyPath": "/properties/VpcId",
		//	      "typeName": "AWS::EC2::VPC"
		//	    },
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"vpc_security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "An example resource schema demonstrating some basic constructs and validation rules.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Redshift::Cluster").WithTerraformTypeName("awscc_redshift_cluster")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"address":                             "Address",
		"allow_version_upgrade":               "AllowVersionUpgrade",
		"aqua_configuration_status":           "AquaConfigurationStatus",
		"automated_snapshot_retention_period": "AutomatedSnapshotRetentionPeriod",
		"availability_zone":                   "AvailabilityZone",
		"availability_zone_relocation":        "AvailabilityZoneRelocation",
		"availability_zone_relocation_status": "AvailabilityZoneRelocationStatus",
		"bucket_name":                         "BucketName",
		"classic":                             "Classic",
		"cluster_identifier":                  "ClusterIdentifier",
		"cluster_namespace_arn":               "ClusterNamespaceArn",
		"cluster_parameter_group_name":        "ClusterParameterGroupName",
		"cluster_security_groups":             "ClusterSecurityGroups",
		"cluster_subnet_group_name":           "ClusterSubnetGroupName",
		"cluster_type":                        "ClusterType",
		"cluster_version":                     "ClusterVersion",
		"db_name":                             "DBName",
		"defer_maintenance":                   "DeferMaintenance",
		"defer_maintenance_duration":          "DeferMaintenanceDuration",
		"defer_maintenance_end_time":          "DeferMaintenanceEndTime",
		"defer_maintenance_identifier":        "DeferMaintenanceIdentifier",
		"defer_maintenance_start_time":        "DeferMaintenanceStartTime",
		"destination_region":                  "DestinationRegion",
		"elastic_ip":                          "ElasticIp",
		"encrypted":                           "Encrypted",
		"endpoint":                            "Endpoint",
		"enhanced_vpc_routing":                "EnhancedVpcRouting",
		"hsm_client_certificate_identifier":   "HsmClientCertificateIdentifier",
		"hsm_configuration_identifier":        "HsmConfigurationIdentifier",
		"iam_roles":                           "IamRoles",
		"key":                                 "Key",
		"kms_key_id":                          "KmsKeyId",
		"log_destination_type":                "LogDestinationType",
		"log_exports":                         "LogExports",
		"logging_properties":                  "LoggingProperties",
		"maintenance_track_name":              "MaintenanceTrackName",
		"manage_master_password":              "ManageMasterPassword",
		"manual_snapshot_retention_period":    "ManualSnapshotRetentionPeriod",
		"master_password_secret_arn":          "MasterPasswordSecretArn",
		"master_password_secret_kms_key_id":   "MasterPasswordSecretKmsKeyId",
		"master_user_password":                "MasterUserPassword",
		"master_username":                     "MasterUsername",
		"multi_az":                            "MultiAZ",
		"namespace_resource_policy":           "NamespaceResourcePolicy",
		"node_type":                           "NodeType",
		"number_of_nodes":                     "NumberOfNodes",
		"owner_account":                       "OwnerAccount",
		"port":                                "Port",
		"preferred_maintenance_window":        "PreferredMaintenanceWindow",
		"publicly_accessible":                 "PubliclyAccessible",
		"resource_action":                     "ResourceAction",
		"revision_target":                     "RevisionTarget",
		"rotate_encryption_key":               "RotateEncryptionKey",
		"s3_key_prefix":                       "S3KeyPrefix",
		"snapshot_cluster_identifier":         "SnapshotClusterIdentifier",
		"snapshot_copy_grant_name":            "SnapshotCopyGrantName",
		"snapshot_copy_manual":                "SnapshotCopyManual",
		"snapshot_copy_retention_period":      "SnapshotCopyRetentionPeriod",
		"snapshot_identifier":                 "SnapshotIdentifier",
		"tags":                                "Tags",
		"value":                               "Value",
		"vpc_security_group_ids":              "VpcSecurityGroupIds",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/MasterUserPassword",
		"/properties/Classic",
		"/properties/SnapshotIdentifier",
		"/properties/DeferMaintenance",
		"/properties/DeferMaintenanceDuration",
		"/properties/ManageMasterPassword",
	})
	opts = opts.WithCreateTimeoutInMinutes(2160).WithDeleteTimeoutInMinutes(2160)

	opts = opts.WithUpdateTimeoutInMinutes(2160)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
