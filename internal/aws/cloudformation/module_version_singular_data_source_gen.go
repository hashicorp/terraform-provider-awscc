// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cloudformation

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_cloudformation_module_version", moduleVersionDataSourceType)
}

// moduleVersionDataSourceType returns the Terraform awscc_cloudformation_module_version data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::CloudFormation::ModuleVersion resource type.
func moduleVersionDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon Resource Name (ARN) of the module.",
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The Amazon Resource Name (ARN) of the module.",
			Type:        types.StringType,
			Computed:    true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "description": "The description of the registered module.",
			//   "maxLength": 1024,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "The description of the registered module.",
			Type:        types.StringType,
			Computed:    true,
		},
		"documentation_url": {
			// Property: DocumentationUrl
			// CloudFormation resource type schema:
			// {
			//   "description": "The URL of a page providing detailed documentation for this module.",
			//   "maxLength": 4096,
			//   "type": "string"
			// }
			Description: "The URL of a page providing detailed documentation for this module.",
			Type:        types.StringType,
			Computed:    true,
		},
		"is_default_version": {
			// Property: IsDefaultVersion
			// CloudFormation resource type schema:
			// {
			//   "description": "Indicator of whether this module version is the current default version",
			//   "type": "boolean"
			// }
			Description: "Indicator of whether this module version is the current default version",
			Type:        types.BoolType,
			Computed:    true,
		},
		"module_name": {
			// Property: ModuleName
			// CloudFormation resource type schema:
			// {
			//   "description": "The name of the module being registered.\n\nRecommended module naming pattern: company_or_organization::service::type::MODULE.",
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The name of the module being registered.\n\nRecommended module naming pattern: company_or_organization::service::type::MODULE.",
			Type:        types.StringType,
			Computed:    true,
		},
		"module_package": {
			// Property: ModulePackage
			// CloudFormation resource type schema:
			// {
			//   "description": "The url to the S3 bucket containing the schema and template fragment for the module you want to register.",
			//   "type": "string"
			// }
			Description: "The url to the S3 bucket containing the schema and template fragment for the module you want to register.",
			Type:        types.StringType,
			Computed:    true,
		},
		"schema": {
			// Property: Schema
			// CloudFormation resource type schema:
			// {
			//   "description": "The schema defining input parameters to and resources generated by the module.",
			//   "maxLength": 16777216,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "The schema defining input parameters to and resources generated by the module.",
			Type:        types.StringType,
			Computed:    true,
		},
		"time_created": {
			// Property: TimeCreated
			// CloudFormation resource type schema:
			// {
			//   "description": "The time that the specified module version was registered.",
			//   "type": "string"
			// }
			Description: "The time that the specified module version was registered.",
			Type:        types.StringType,
			Computed:    true,
		},
		"version_id": {
			// Property: VersionId
			// CloudFormation resource type schema:
			// {
			//   "description": "The version ID of the module represented by this module instance.",
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The version ID of the module represented by this module instance.",
			Type:        types.StringType,
			Computed:    true,
		},
		"visibility": {
			// Property: Visibility
			// CloudFormation resource type schema:
			// {
			//   "description": "The scope at which the type is visible and usable in CloudFormation operations.\n\nThe only allowed value at present is:\n\nPRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.",
			//   "enum": [
			//     "PRIVATE"
			//   ],
			//   "type": "string"
			// }
			Description: "The scope at which the type is visible and usable in CloudFormation operations.\n\nThe only allowed value at present is:\n\nPRIVATE: The type is only visible and usable within the account in which it is registered. Currently, AWS CloudFormation marks any types you register as PRIVATE.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::CloudFormation::ModuleVersion",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::CloudFormation::ModuleVersion").WithTerraformTypeName("awscc_cloudformation_module_version")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                "Arn",
		"description":        "Description",
		"documentation_url":  "DocumentationUrl",
		"is_default_version": "IsDefaultVersion",
		"module_name":        "ModuleName",
		"module_package":     "ModulePackage",
		"schema":             "Schema",
		"time_created":       "TimeCreated",
		"version_id":         "VersionId",
		"visibility":         "Visibility",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_cloudformation_module_version", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
