// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package verifiedpermissions

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_verifiedpermissions_policy", policyDataSource)
}

// policyDataSource returns the Terraform awscc_verifiedpermissions_policy data source.
// This Terraform data source corresponds to the CloudFormation AWS::VerifiedPermissions::Policy resource.
func policyDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Definition
		// CloudFormation resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "Static": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Description": {
		//	          "maxLength": 150,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Statement": {
		//	          "maxLength": 10000,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Statement"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "TemplateLinked": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "PolicyTemplateId": {
		//	          "maxLength": 200,
		//	          "minLength": 1,
		//	          "pattern": "^[a-zA-Z0-9-]*$",
		//	          "type": "string"
		//	        },
		//	        "Principal": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "EntityId": {
		//	              "maxLength": 200,
		//	              "minLength": 1,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            },
		//	            "EntityType": {
		//	              "maxLength": 200,
		//	              "minLength": 1,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "EntityId",
		//	            "EntityType"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Resource": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "EntityId": {
		//	              "maxLength": 200,
		//	              "minLength": 1,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            },
		//	            "EntityType": {
		//	              "maxLength": 200,
		//	              "minLength": 1,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "EntityId",
		//	            "EntityType"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "PolicyTemplateId"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"definition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Static
				"static": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Description
						"description": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Statement
						"statement": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TemplateLinked
				"template_linked": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: PolicyTemplateId
						"policy_template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Principal
						"principal": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EntityId
								"entity_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EntityType
								"entity_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Resource
						"resource": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EntityId
								"entity_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EntityType
								"entity_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 200,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9-]*$",
		//	  "type": "string"
		//	}
		"policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyStoreId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 200,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9-]*$",
		//	  "type": "string"
		//	}
		"policy_store_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "STATIC",
		//	    "TEMPLATE_LINKED"
		//	  ],
		//	  "type": "string"
		//	}
		"policy_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::VerifiedPermissions::Policy",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::VerifiedPermissions::Policy").WithTerraformTypeName("awscc_verifiedpermissions_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"definition":         "Definition",
		"description":        "Description",
		"entity_id":          "EntityId",
		"entity_type":        "EntityType",
		"policy_id":          "PolicyId",
		"policy_store_id":    "PolicyStoreId",
		"policy_template_id": "PolicyTemplateId",
		"policy_type":        "PolicyType",
		"principal":          "Principal",
		"resource":           "Resource",
		"statement":          "Statement",
		"static":             "Static",
		"template_linked":    "TemplateLinked",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
