// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package securityhub

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_securityhub_organization_configuration", organizationConfigurationResource)
	registry.AddListResourceFactory("awscc_securityhub_organization_configuration", generic.NewListResource(organizationConfigurationResource))
}

// organizationConfigurationResource returns the Terraform awscc_securityhub_organization_configuration resource.
// This Terraform resource corresponds to the CloudFormation AWS::SecurityHub::OrganizationConfiguration resource.
func organizationConfigurationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AutoEnable
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Whether to automatically enable Security Hub in new member accounts when they join the organization.",
		//	  "type": "boolean"
		//	}
		"auto_enable": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Whether to automatically enable Security Hub in new member accounts when they join the organization.",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: AutoEnableStandards
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Whether to automatically enable Security Hub default standards in new member accounts when they join the organization.",
		//	  "enum": [
		//	    "DEFAULT",
		//	    "NONE"
		//	  ],
		//	  "type": "string"
		//	}
		"auto_enable_standards": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Whether to automatically enable Security Hub default standards in new member accounts when they join the organization.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"DEFAULT",
					"NONE",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ConfigurationType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether the organization uses local or central configuration.",
		//	  "enum": [
		//	    "CENTRAL",
		//	    "LOCAL"
		//	  ],
		//	  "type": "string"
		//	}
		"configuration_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether the organization uses local or central configuration.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"CENTRAL",
					"LOCAL",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MemberAccountLimitReached
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Whether the maximum number of allowed member accounts are already associated with the Security Hub administrator account.",
		//	  "type": "boolean"
		//	}
		"member_account_limit_reached": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Whether the maximum number of allowed member accounts are already associated with the Security Hub administrator account.",
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OrganizationConfigurationIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the OrganizationConfiguration being created and assigned as the unique identifier.",
		//	  "pattern": "^[0-9]{12}/[a-zA-Z0-9-]{1,32}/securityhub-organization-configuration$",
		//	  "type": "string"
		//	}
		"organization_configuration_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the OrganizationConfiguration being created and assigned as the unique identifier.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Describes whether central configuration could be enabled as the ConfigurationType for the organization.",
		//	  "enum": [
		//	    "PENDING",
		//	    "ENABLED",
		//	    "FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Describes whether central configuration could be enabled as the ConfigurationType for the organization.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StatusMessage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Provides an explanation if the value of Status is equal to FAILED when ConfigurationType is equal to CENTRAL.",
		//	  "type": "string"
		//	}
		"status_message": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Provides an explanation if the value of Status is equal to FAILED when ConfigurationType is equal to CENTRAL.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "The AWS::SecurityHub::OrganizationConfiguration resource represents the configuration of your organization in Security Hub. Only the Security Hub administrator account can create Organization Configuration resource in each region and can opt-in to Central Configuration only in the aggregation region of FindingAggregator.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SecurityHub::OrganizationConfiguration").WithTerraformTypeName("awscc_securityhub_organization_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "organization_configuration_identifier",
			Description:       "The identifier of the OrganizationConfiguration being created and assigned as the unique identifier",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"auto_enable":                           "AutoEnable",
		"auto_enable_standards":                 "AutoEnableStandards",
		"configuration_type":                    "ConfigurationType",
		"member_account_limit_reached":          "MemberAccountLimitReached",
		"organization_configuration_identifier": "OrganizationConfigurationIdentifier",
		"status":                                "Status",
		"status_message":                        "StatusMessage",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
