// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package securityhub

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_securityhub_product_subscription", productSubscriptionDataSource)
}

// productSubscriptionDataSource returns the Terraform awscc_securityhub_product_subscription data source.
// This Terraform data source corresponds to the CloudFormation AWS::SecurityHub::ProductSubscription resource.
func productSubscriptionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ProductArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The generic ARN of the product being subscribed to",
		//	  "pattern": "arn:aws\\S*:securityhub:\\S*",
		//	  "type": "string"
		//	}
		"product_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The generic ARN of the product being subscribed to",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProductSubscriptionArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the product subscription for the account",
		//	  "pattern": "arn:aws\\S*:securityhub:\\S*",
		//	  "type": "string"
		//	}
		"product_subscription_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the product subscription for the account",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SecurityHub::ProductSubscription",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SecurityHub::ProductSubscription").WithTerraformTypeName("awscc_securityhub_product_subscription")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"product_arn":              "ProductArn",
		"product_subscription_arn": "ProductSubscriptionArn",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
