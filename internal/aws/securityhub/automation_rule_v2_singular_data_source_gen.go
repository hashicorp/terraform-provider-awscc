// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package securityhub

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_securityhub_automation_rule_v2", automationRuleV2DataSource)
}

// automationRuleV2DataSource returns the Terraform awscc_securityhub_automation_rule_v2 data source.
// This Terraform data source corresponds to the CloudFormation AWS::SecurityHub::AutomationRuleV2 resource.
func automationRuleV2DataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Actions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of actions to be performed when the rule criteria is met",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Allows you to configure automated responses",
		//	    "properties": {
		//	      "ExternalIntegrationConfiguration": {
		//	        "additionalProperties": false,
		//	        "description": "The settings for integrating automation rule actions with external systems or service",
		//	        "properties": {
		//	          "ConnectorArn": {
		//	            "description": "The ARN of the connector that establishes the integration",
		//	            "pattern": ".*\\S.*",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "FindingFieldsUpdate": {
		//	        "additionalProperties": false,
		//	        "description": "The changes to be applied to fields in a security finding when an automation rule is triggered",
		//	        "properties": {
		//	          "Comment": {
		//	            "description": "Notes or contextual information for findings that are modified by the automation rule",
		//	            "pattern": ".*\\S.*",
		//	            "type": "string"
		//	          },
		//	          "SeverityId": {
		//	            "description": "The severity level to be assigned to findings that match the automation rule criteria",
		//	            "type": "integer"
		//	          },
		//	          "StatusId": {
		//	            "description": "The status to be applied to findings that match automation rule criteria",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Type": {
		//	        "description": "The category of action to be executed by the automation rule",
		//	        "enum": [
		//	          "FINDING_FIELDS_UPDATE",
		//	          "EXTERNAL_INTEGRATION"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Type"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 1,
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"actions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ExternalIntegrationConfiguration
					"external_integration_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ConnectorArn
							"connector_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The ARN of the connector that establishes the integration",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "The settings for integrating automation rule actions with external systems or service",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: FindingFieldsUpdate
					"finding_fields_update": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comment
							"comment": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Notes or contextual information for findings that are modified by the automation rule",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: SeverityId
							"severity_id": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The severity level to be assigned to findings that match the automation rule criteria",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: StatusId
							"status_id": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The status to be applied to findings that match automation rule criteria",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "The changes to be applied to fields in a security finding when an automation rule is triggered",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The category of action to be executed by the automation rule",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of actions to be performed when the rule criteria is met",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The timestamp formatted in ISO8601",
		//	  "pattern": "^(\\d\\d\\d\\d)-([0][1-9]|[1][0-2])-([0][1-9]|[1-2](\\d)|[3][0-1])[T](?:([0-1](\\d)|[2][0-3]):[0-5](\\d):[0-5](\\d)|23:59:60)(?:\\.(\\d)+)?([Z]|[+-](\\d\\d)(:?(\\d\\d))?)$",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The timestamp formatted in ISO8601",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Criteria
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Defines the parameters and conditions used to evaluate and filter security findings",
		//	  "properties": {
		//	    "OcsfFindingCriteria": {
		//	      "additionalProperties": false,
		//	      "description": "The filtering conditions that align with OCSF standards",
		//	      "properties": {
		//	        "CompositeFilters": {
		//	          "description": "Enables the creation of complex filtering conditions by combining filter",
		//	          "insertionOrder": true,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "Enables the creation of filtering criteria for security findings",
		//	            "properties": {
		//	              "BooleanFilters": {
		//	                "description": "Enables filtering based on boolean field values",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Enables filtering of security findings based on boolean field values in OCSF",
		//	                  "properties": {
		//	                    "FieldName": {
		//	                      "description": "The name of the field",
		//	                      "enum": [
		//	                        "compliance.assessments.meets_criteria",
		//	                        "vulnerabilities.is_exploit_available",
		//	                        "vulnerabilities.is_fix_available"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "Filter": {
		//	                      "additionalProperties": false,
		//	                      "description": "Boolean filter for querying findings",
		//	                      "properties": {
		//	                        "Value": {
		//	                          "description": "The value of the boolean",
		//	                          "type": "boolean"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Value"
		//	                      ],
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "FieldName",
		//	                    "Filter"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "maxItems": 20,
		//	                "minItems": 1,
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "DateFilters": {
		//	                "description": "Enables filtering based on date and timestamp fields",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Enables filtering of security findings based on date and timestamp fields in OCSF",
		//	                  "properties": {
		//	                    "FieldName": {
		//	                      "description": "The name of the field",
		//	                      "enum": [
		//	                        "finding_info.created_time_dt",
		//	                        "finding_info.first_seen_time_dt",
		//	                        "finding_info.last_seen_time_dt",
		//	                        "finding_info.modified_time_dt"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "Filter": {
		//	                      "additionalProperties": false,
		//	                      "description": "A date filter for querying findings",
		//	                      "properties": {
		//	                        "DateRange": {
		//	                          "additionalProperties": false,
		//	                          "description": "A date range for the date filter",
		//	                          "properties": {
		//	                            "Unit": {
		//	                              "description": "A date range unit for the date filter",
		//	                              "enum": [
		//	                                "DAYS"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Value": {
		//	                              "description": "A date range value for the date filter",
		//	                              "type": "number"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "Unit",
		//	                            "Value"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "End": {
		//	                          "description": "The timestamp formatted in ISO8601",
		//	                          "pattern": "^(\\d\\d\\d\\d)-([0][1-9]|[1][0-2])-([0][1-9]|[1-2](\\d)|[3][0-1])[T](?:([0-1](\\d)|[2][0-3]):[0-5](\\d):[0-5](\\d)|23:59:60)(?:\\.(\\d)+)?([Z]|[+-](\\d\\d)(:?(\\d\\d))?)$",
		//	                          "type": "string"
		//	                        },
		//	                        "Start": {
		//	                          "description": "The timestamp formatted in ISO8601",
		//	                          "pattern": "^(\\d\\d\\d\\d)-([0][1-9]|[1][0-2])-([0][1-9]|[1-2](\\d)|[3][0-1])[T](?:([0-1](\\d)|[2][0-3]):[0-5](\\d):[0-5](\\d)|23:59:60)(?:\\.(\\d)+)?([Z]|[+-](\\d\\d)(:?(\\d\\d))?)$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "FieldName",
		//	                    "Filter"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "maxItems": 20,
		//	                "minItems": 1,
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "MapFilters": {
		//	                "description": "Enables filtering based on map field value",
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Enables filtering of security findings based on map field values in OCSF",
		//	                  "properties": {
		//	                    "FieldName": {
		//	                      "description": "The name of the field",
		//	                      "enum": [
		//	                        "resources.tags"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "Filter": {
		//	                      "additionalProperties": false,
		//	                      "description": "A map filter for filtering findings",
		//	                      "properties": {
		//	                        "Comparison": {
		//	                          "description": "The condition to apply to the key value when filtering findings with a map filter",
		//	                          "enum": [
		//	                            "EQUALS",
		//	                            "NOT_EQUALS"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Key": {
		//	                          "description": "The key of the map filter",
		//	                          "maxLength": 4096,
		//	                          "minLength": 1,
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "description": "The value for the key in the map filter",
		//	                          "maxLength": 4096,
		//	                          "minLength": 1,
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Comparison",
		//	                        "Key",
		//	                        "Value"
		//	                      ],
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "FieldName",
		//	                    "Filter"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "maxItems": 20,
		//	                "minItems": 1,
		//	                "type": "array"
		//	              },
		//	              "NumberFilters": {
		//	                "description": "Enables filtering based on numerical field values",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Enables filtering of security findings based on numerical field values in OCSF",
		//	                  "properties": {
		//	                    "FieldName": {
		//	                      "description": "The name of the field",
		//	                      "enum": [
		//	                        "activity_id",
		//	                        "compliance.status_id",
		//	                        "confidence_score",
		//	                        "severity_id",
		//	                        "status_id",
		//	                        "finding_info.related_events_count"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "Filter": {
		//	                      "additionalProperties": false,
		//	                      "description": "A number filter for querying findings",
		//	                      "properties": {
		//	                        "Eq": {
		//	                          "description": "The equal-to condition to be applied to a single field when querying for findings",
		//	                          "type": "number"
		//	                        },
		//	                        "Gte": {
		//	                          "description": "The greater-than-equal condition to be applied to a single field when querying for findings",
		//	                          "type": "number"
		//	                        },
		//	                        "Lte": {
		//	                          "description": "The less-than-equal condition to be applied to a single field when querying for findings",
		//	                          "type": "number"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "FieldName",
		//	                    "Filter"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "maxItems": 20,
		//	                "minItems": 1,
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Operator": {
		//	                "description": "The logical operator used to combine multiple conditions",
		//	                "enum": [
		//	                  "AND",
		//	                  "OR"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "StringFilters": {
		//	                "description": "Enables filtering based on string field values",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Enables filtering of security findings based on string field values in OCSF",
		//	                  "properties": {
		//	                    "FieldName": {
		//	                      "description": "The name of the field",
		//	                      "enum": [
		//	                        "metadata.uid",
		//	                        "activity_name",
		//	                        "cloud.account.name",
		//	                        "cloud.account.uid",
		//	                        "cloud.provider",
		//	                        "cloud.region",
		//	                        "compliance.assessments.category",
		//	                        "compliance.assessments.name",
		//	                        "compliance.control",
		//	                        "compliance.status",
		//	                        "compliance.standards",
		//	                        "finding_info.desc",
		//	                        "finding_info.src_url",
		//	                        "finding_info.title",
		//	                        "finding_info.types",
		//	                        "finding_info.uid",
		//	                        "finding_info.related_events.uid",
		//	                        "finding_info.related_events.product.uid",
		//	                        "finding_info.related_events.title",
		//	                        "metadata.product.feature.uid",
		//	                        "metadata.product.name",
		//	                        "metadata.product.uid",
		//	                        "metadata.product.vendor_name",
		//	                        "remediation.desc",
		//	                        "remediation.references",
		//	                        "resources.cloud_partition",
		//	                        "resources.name",
		//	                        "resources.region",
		//	                        "resources.type",
		//	                        "resources.uid",
		//	                        "severity",
		//	                        "status",
		//	                        "comment",
		//	                        "vulnerabilities.fix_coverage",
		//	                        "class_name"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "Filter": {
		//	                      "additionalProperties": false,
		//	                      "description": "A string filter for filtering findings",
		//	                      "properties": {
		//	                        "Comparison": {
		//	                          "description": "The condition to apply to a string value when filtering findings",
		//	                          "enum": [
		//	                            "EQUALS",
		//	                            "PREFIX",
		//	                            "NOT_EQUALS",
		//	                            "PREFIX_NOT_EQUALS",
		//	                            "CONTAINS"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "description": "The string filter value",
		//	                          "maxLength": 4096,
		//	                          "minLength": 1,
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Value",
		//	                        "Comparison"
		//	                      ],
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "FieldName",
		//	                    "Filter"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "maxItems": 20,
		//	                "minItems": 1,
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        },
		//	        "CompositeOperator": {
		//	          "description": "The logical operator used to combine multiple conditions",
		//	          "enum": [
		//	            "AND",
		//	            "OR"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"criteria": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: OcsfFindingCriteria
				"ocsf_finding_criteria": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CompositeFilters
						"composite_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BooleanFilters
									"boolean_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: FieldName
												"field_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the field",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Filter
												"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Value
														"value": schema.BoolAttribute{ /*START ATTRIBUTE*/
															Description: "The value of the boolean",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Boolean filter for querying findings",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "Enables filtering based on boolean field values",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: DateFilters
									"date_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: FieldName
												"field_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the field",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Filter
												"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DateRange
														"date_range": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: Unit
																"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "A date range unit for the date filter",
																	Computed:    true,
																}, /*END ATTRIBUTE*/
																// Property: Value
																"value": schema.Float64Attribute{ /*START ATTRIBUTE*/
																	Description: "A date range value for the date filter",
																	Computed:    true,
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "A date range for the date filter",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: End
														"end": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The timestamp formatted in ISO8601",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Start
														"start": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The timestamp formatted in ISO8601",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "A date filter for querying findings",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "Enables filtering based on date and timestamp fields",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: MapFilters
									"map_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: FieldName
												"field_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the field",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Filter
												"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Comparison
														"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The condition to apply to the key value when filtering findings with a map filter",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Key
														"key": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The key of the map filter",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The value for the key in the map filter",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "A map filter for filtering findings",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "Enables filtering based on map field value",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: NumberFilters
									"number_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: FieldName
												"field_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the field",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Filter
												"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Eq
														"eq": schema.Float64Attribute{ /*START ATTRIBUTE*/
															Description: "The equal-to condition to be applied to a single field when querying for findings",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Gte
														"gte": schema.Float64Attribute{ /*START ATTRIBUTE*/
															Description: "The greater-than-equal condition to be applied to a single field when querying for findings",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Lte
														"lte": schema.Float64Attribute{ /*START ATTRIBUTE*/
															Description: "The less-than-equal condition to be applied to a single field when querying for findings",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "A number filter for querying findings",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "Enables filtering based on numerical field values",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Operator
									"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The logical operator used to combine multiple conditions",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: StringFilters
									"string_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: FieldName
												"field_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the field",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Filter
												"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Comparison
														"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The condition to apply to a string value when filtering findings",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The string filter value",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "A string filter for filtering findings",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "Enables filtering based on string field values",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Description: "Enables the creation of complex filtering conditions by combining filter",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: CompositeOperator
						"composite_operator": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The logical operator used to combine multiple conditions",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The filtering conditions that align with OCSF standards",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Defines the parameters and conditions used to evaluate and filter security findings",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A description of the automation rule",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": ".*\\S.*",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A description of the automation rule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RuleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the automation rule",
		//	  "pattern": "^arn:aws\\S*:securityhub:[a-z0-9-]+:[0-9]{12}:automation-rulev2/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	  "type": "string"
		//	}
		"rule_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the automation rule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RuleId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the automation rule",
		//	  "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	  "type": "string"
		//	}
		"rule_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the automation rule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RuleName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the automation rule",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": ".*\\S.*",
		//	  "type": "string"
		//	}
		"rule_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the automation rule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RuleOrder
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The value for the rule priority",
		//	  "maximum": 1000.0,
		//	  "minimum": 1.0,
		//	  "type": "number"
		//	}
		"rule_order": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "The value for the rule priority",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RuleStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the automation rule",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"rule_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the automation rule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A key-value pair to associate with a resource.",
		//	  "patternProperties": {
		//	    "": {
		//	      "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	      "maxLength": 256,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A key-value pair to associate with a resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The timestamp formatted in ISO8601",
		//	  "pattern": "^(\\d\\d\\d\\d)-([0][1-9]|[1][0-2])-([0][1-9]|[1-2](\\d)|[3][0-1])[T](?:([0-1](\\d)|[2][0-3]):[0-5](\\d):[0-5](\\d)|23:59:60)(?:\\.(\\d)+)?([Z]|[+-](\\d\\d)(:?(\\d\\d))?)$",
		//	  "type": "string"
		//	}
		"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The timestamp formatted in ISO8601",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SecurityHub::AutomationRuleV2",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SecurityHub::AutomationRuleV2").WithTerraformTypeName("awscc_securityhub_automation_rule_v2")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"actions":                            "Actions",
		"boolean_filters":                    "BooleanFilters",
		"comment":                            "Comment",
		"comparison":                         "Comparison",
		"composite_filters":                  "CompositeFilters",
		"composite_operator":                 "CompositeOperator",
		"connector_arn":                      "ConnectorArn",
		"created_at":                         "CreatedAt",
		"criteria":                           "Criteria",
		"date_filters":                       "DateFilters",
		"date_range":                         "DateRange",
		"description":                        "Description",
		"end":                                "End",
		"eq":                                 "Eq",
		"external_integration_configuration": "ExternalIntegrationConfiguration",
		"field_name":                         "FieldName",
		"filter":                             "Filter",
		"finding_fields_update":              "FindingFieldsUpdate",
		"gte":                                "Gte",
		"key":                                "Key",
		"lte":                                "Lte",
		"map_filters":                        "MapFilters",
		"number_filters":                     "NumberFilters",
		"ocsf_finding_criteria":              "OcsfFindingCriteria",
		"operator":                           "Operator",
		"rule_arn":                           "RuleArn",
		"rule_id":                            "RuleId",
		"rule_name":                          "RuleName",
		"rule_order":                         "RuleOrder",
		"rule_status":                        "RuleStatus",
		"severity_id":                        "SeverityId",
		"start":                              "Start",
		"status_id":                          "StatusId",
		"string_filters":                     "StringFilters",
		"tags":                               "Tags",
		"type":                               "Type",
		"unit":                               "Unit",
		"updated_at":                         "UpdatedAt",
		"value":                              "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
