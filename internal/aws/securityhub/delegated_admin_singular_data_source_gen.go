// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package securityhub

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_securityhub_delegated_admin", delegatedAdminDataSource)
}

// delegatedAdminDataSource returns the Terraform awscc_securityhub_delegated_admin data source.
// This Terraform data source corresponds to the CloudFormation AWS::SecurityHub::DelegatedAdmin resource.
func delegatedAdminDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AdminAccountId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS-account identifier of the account to designate as the Security Hub administrator account.",
		//	  "pattern": "^[0-9]{12}$",
		//	  "type": "string"
		//	}
		"admin_account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS-account identifier of the account to designate as the Security Hub administrator account.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DelegatedAdminIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "pattern": "^[0-9]{12}/[a-zA-Z0-9-]{1,32}$",
		//	  "type": "string"
		//	}
		"delegated_admin_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLE_IN_PROGRESS"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SecurityHub::DelegatedAdmin",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SecurityHub::DelegatedAdmin").WithTerraformTypeName("awscc_securityhub_delegated_admin")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"admin_account_id":           "AdminAccountId",
		"delegated_admin_identifier": "DelegatedAdminIdentifier",
		"status":                     "Status",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
