// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package quicksight

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_quicksight_refresh_schedule", refreshScheduleResource)
}

// refreshScheduleResource returns the Terraform awscc_quicksight_refresh_schedule resource.
// This Terraform resource corresponds to the CloudFormation AWS::QuickSight::RefreshSchedule resource.
func refreshScheduleResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the data source.\u003c/p\u003e",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The Amazon Resource Name (ARN) of the data source.</p>",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AwsAccountId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 12,
		//	  "minLength": 12,
		//	  "pattern": "^[0-9]{12}$",
		//	  "type": "string"
		//	}
		"aws_account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(12, 12),
				stringvalidator.RegexMatches(regexp.MustCompile("^[0-9]{12}$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DataSetId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"data_set_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Schedule
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "RefreshType": {
		//	      "enum": [
		//	        "FULL_REFRESH",
		//	        "INCREMENTAL_REFRESH"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "ScheduleFrequency": {
		//	      "additionalProperties": false,
		//	      "description": "\u003cp\u003eInformation about the schedule frequency.\u003c/p\u003e",
		//	      "properties": {
		//	        "Interval": {
		//	          "enum": [
		//	            "MINUTE15",
		//	            "MINUTE30",
		//	            "HOURLY",
		//	            "DAILY",
		//	            "WEEKLY",
		//	            "MONTHLY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "RefreshOnDay": {
		//	          "additionalProperties": false,
		//	          "description": "\u003cp\u003eThe day scheduled for refresh.\u003c/p\u003e",
		//	          "properties": {
		//	            "DayOfMonth": {
		//	              "description": "\u003cp\u003eThe Day Of Month for scheduled refresh.\u003c/p\u003e",
		//	              "maxLength": 128,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            },
		//	            "DayOfWeek": {
		//	              "enum": [
		//	                "SUNDAY",
		//	                "MONDAY",
		//	                "TUESDAY",
		//	                "WEDNESDAY",
		//	                "THURSDAY",
		//	                "FRIDAY",
		//	                "SATURDAY"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "TimeOfTheDay": {
		//	          "description": "\u003cp\u003eThe time of the day for scheduled refresh.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "TimeZone": {
		//	          "description": "\u003cp\u003eThe timezone for scheduled refresh.\u003c/p\u003e",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ScheduleId": {
		//	      "description": "\u003cp\u003eAn unique identifier for the refresh schedule.\u003c/p\u003e",
		//	      "maxLength": 128,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "StartAfterDateTime": {
		//	      "description": "\u003cp\u003eThe date time after which refresh is to be scheduled\u003c/p\u003e",
		//	      "maxLength": 128,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"schedule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: RefreshType
				"refresh_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"FULL_REFRESH",
							"INCREMENTAL_REFRESH",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ScheduleFrequency
				"schedule_frequency": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Interval
						"interval": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.OneOf(
									"MINUTE15",
									"MINUTE30",
									"HOURLY",
									"DAILY",
									"WEEKLY",
									"MONTHLY",
								),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: RefreshOnDay
						"refresh_on_day": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DayOfMonth
								"day_of_month": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "<p>The Day Of Month for scheduled refresh.</p>",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthBetween(1, 128),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: DayOfWeek
								"day_of_week": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"SUNDAY",
											"MONDAY",
											"TUESDAY",
											"WEDNESDAY",
											"THURSDAY",
											"FRIDAY",
											"SATURDAY",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "<p>The day scheduled for refresh.</p>",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: TimeOfTheDay
						"time_of_the_day": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>The time of the day for scheduled refresh.</p>",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(1, 128),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: TimeZone
						"time_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>The timezone for scheduled refresh.</p>",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(1, 128),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>Information about the schedule frequency.</p>",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ScheduleId
				"schedule_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "<p>An unique identifier for the refresh schedule.</p>",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(1, 128),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
						stringplanmodifier.RequiresReplaceIfConfigured(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: StartAfterDateTime
				"start_after_date_time": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "<p>The date time after which refresh is to be scheduled</p>",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(1, 128),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Definition of the AWS::QuickSight::RefreshSchedule Resource Type.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::QuickSight::RefreshSchedule").WithTerraformTypeName("awscc_quicksight_refresh_schedule")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "aws_account_id",
			RequiredForImport: true,
		},
		identity.Identifier{
			Name:              "data_set_id",
			RequiredForImport: true,
		},
		identity.Identifier{
			Name:              "schedule_schedule_id",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                   "Arn",
		"aws_account_id":        "AwsAccountId",
		"data_set_id":           "DataSetId",
		"day_of_month":          "DayOfMonth",
		"day_of_week":           "DayOfWeek",
		"interval":              "Interval",
		"refresh_on_day":        "RefreshOnDay",
		"refresh_type":          "RefreshType",
		"schedule":              "Schedule",
		"schedule_frequency":    "ScheduleFrequency",
		"schedule_id":           "ScheduleId",
		"start_after_date_time": "StartAfterDateTime",
		"time_of_the_day":       "TimeOfTheDay",
		"time_zone":             "TimeZone",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
