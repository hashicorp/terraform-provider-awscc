// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package quicksight

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_quicksight_data_set", dataSetDataSourceType)
}

// dataSetDataSourceType returns the Terraform awscc_quicksight_data_set data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::QuickSight::DataSet resource type.
func dataSetDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the resource.\u003c/p\u003e",
			//   "type": "string"
			// }
			Description: "<p>The Amazon Resource Name (ARN) of the resource.</p>",
			Type:        types.StringType,
			Computed:    true,
		},
		"aws_account_id": {
			// Property: AwsAccountId
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 12,
			//   "minLength": 12,
			//   "pattern": "",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"column_groups": {
			// Property: ColumnGroups
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eGroupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.\u003c/p\u003e",
			//   "items": {
			//     "description": "\u003cp\u003eGroupings of columns that work together in certain Amazon QuickSight features. This is\n            a variant type structure. For this structure to be valid, only one of the attributes can\n            be non-null.\u003c/p\u003e",
			//     "properties": {
			//       "GeoSpatialColumnGroup": {
			//         "description": "\u003cp\u003eGeospatial column group that denotes a hierarchy.\u003c/p\u003e",
			//         "properties": {
			//           "Columns": {
			//             "description": "\u003cp\u003eColumns in this hierarchy.\u003c/p\u003e",
			//             "items": {
			//               "maxLength": 128,
			//               "minLength": 1,
			//               "type": "string"
			//             },
			//             "maxItems": 16,
			//             "minItems": 1,
			//             "type": "array"
			//           },
			//           "CountryCode": {
			//             "enum": [
			//               "US"
			//             ],
			//             "type": "string"
			//           },
			//           "Name": {
			//             "description": "\u003cp\u003eA display name for the hierarchy.\u003c/p\u003e",
			//             "maxLength": 64,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Columns",
			//           "Name"
			//         ],
			//         "type": "object"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "maxItems": 8,
			//   "minItems": 1,
			//   "type": "array"
			// }
			Description: "<p>Groupings of columns that work together in certain QuickSight features. Currently, only geospatial hierarchy is supported.</p>",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"geo_spatial_column_group": {
						// Property: GeoSpatialColumnGroup
						Description: "<p>Geospatial column group that denotes a hierarchy.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"columns": {
									// Property: Columns
									Description: "<p>Columns in this hierarchy.</p>",
									Type:        types.ListType{ElemType: types.StringType},
									Computed:    true,
								},
								"country_code": {
									// Property: CountryCode
									Type:     types.StringType,
									Computed: true,
								},
								"name": {
									// Property: Name
									Description: "<p>A display name for the hierarchy.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
		"column_level_permission_rules": {
			// Property: ColumnLevelPermissionRules
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "properties": {
			//       "ColumnNames": {
			//         "items": {
			//           "type": "string"
			//         },
			//         "minItems": 1,
			//         "type": "array"
			//       },
			//       "Principals": {
			//         "items": {
			//           "type": "string"
			//         },
			//         "maxItems": 100,
			//         "minItems": 1,
			//         "type": "array"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "minItems": 1,
			//   "type": "array"
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"column_names": {
						// Property: ColumnNames
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
					"principals": {
						// Property: Principals
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
		"consumed_spice_capacity_in_bytes": {
			// Property: ConsumedSpiceCapacityInBytes
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't\n            imported into SPICE.\u003c/p\u003e",
			//   "type": "number"
			// }
			Description: "<p>The amount of SPICE capacity used by this dataset. This is 0 if the dataset isn't\n            imported into SPICE.</p>",
			Type:        types.NumberType,
			Computed:    true,
		},
		"created_time": {
			// Property: CreatedTime
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe time that this dataset was created.\u003c/p\u003e",
			//   "format": "string",
			//   "type": "string"
			// }
			Description: "<p>The time that this dataset was created.</p>",
			Type:        types.StringType,
			Computed:    true,
		},
		"data_set_id": {
			// Property: DataSetId
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"field_folders": {
			// Property: FieldFolders
			// CloudFormation resource type schema:
			// {
			//   "patternProperties": {
			//     "": {
			//       "properties": {
			//         "Columns": {
			//           "items": {
			//             "type": "string"
			//           },
			//           "maxItems": 5000,
			//           "minItems": 0,
			//           "type": "array"
			//         },
			//         "Description": {
			//           "maxLength": 500,
			//           "minLength": 0,
			//           "type": "string"
			//         }
			//       },
			//       "type": "object"
			//     }
			//   },
			//   "type": "object"
			// }
			// Pattern: ""
			Attributes: tfsdk.MapNestedAttributes(
				map[string]tfsdk.Attribute{
					"columns": {
						// Property: Columns
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
					"description": {
						// Property: Description
						Type:     types.StringType,
						Computed: true,
					},
				},
				tfsdk.MapNestedAttributesOptions{},
			),
			Computed: true,
		},
		"import_mode": {
			// Property: ImportMode
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "SPICE",
			//     "DIRECT_QUERY"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"ingestion_wait_policy": {
			// Property: IngestionWaitPolicy
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eWait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.\u003c/p\u003e",
			//   "properties": {
			//     "IngestionWaitTimeInHours": {
			//       "description": "\u003cp\u003eThe maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.\n Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.\u003c/p\u003e",
			//       "maximum": 36,
			//       "minimum": 1,
			//       "type": "number"
			//     },
			//     "WaitForSpiceIngestion": {
			//       "description": "\u003cp\u003eWait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).\n  Applicable only when DataSetImportMode mode is set to SPICE.\u003c/p\u003e",
			//       "type": "boolean"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "<p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.</p>",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"ingestion_wait_time_in_hours": {
						// Property: IngestionWaitTimeInHours
						Description: "<p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.\n Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>",
						Type:        types.NumberType,
						Computed:    true,
					},
					"wait_for_spice_ingestion": {
						// Property: WaitForSpiceIngestion
						Description: "<p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).\n  Applicable only when DataSetImportMode mode is set to SPICE.</p>",
						Type:        types.BoolType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"last_updated_time": {
			// Property: LastUpdatedTime
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe last time that this dataset was updated.\u003c/p\u003e",
			//   "format": "string",
			//   "type": "string"
			// }
			Description: "<p>The last time that this dataset was updated.</p>",
			Type:        types.StringType,
			Computed:    true,
		},
		"logical_table_map": {
			// Property: LogicalTableMap
			// CloudFormation resource type schema:
			// {
			//   "patternProperties": {
			//     "": {
			//       "description": "\u003cp\u003eA \u003ci\u003elogical table\u003c/i\u003e is a unit that joins and that data\n            transformations operate on. A logical table has a source, which can be either a physical\n            table or result of a join. When a logical table points to a physical table, the logical\n            table acts as a mutable copy of that physical table through transform operations.\u003c/p\u003e",
			//       "properties": {
			//         "Alias": {
			//           "description": "\u003cp\u003eA display name for the logical table.\u003c/p\u003e",
			//           "maxLength": 64,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "DataTransforms": {
			//           "description": "\u003cp\u003eTransform operations that act on this logical table.\u003c/p\u003e",
			//           "items": {
			//             "description": "\u003cp\u003eA data transformation on a logical table. This is a variant type structure. For this\n            structure to be valid, only one of the attributes can be non-null.\u003c/p\u003e",
			//             "properties": {
			//               "CastColumnTypeOperation": {
			//                 "description": "\u003cp\u003eA transform operation that casts a column to a different type.\u003c/p\u003e",
			//                 "properties": {
			//                   "ColumnName": {
			//                     "description": "\u003cp\u003eColumn name.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Format": {
			//                     "description": "\u003cp\u003eWhen casting a column from string to datetime type, you can supply a string in a\n            format supported by Amazon QuickSight to denote the source data format.\u003c/p\u003e",
			//                     "maxLength": 32,
			//                     "minLength": 0,
			//                     "type": "string"
			//                   },
			//                   "NewColumnType": {
			//                     "enum": [
			//                       "STRING",
			//                       "INTEGER",
			//                       "DECIMAL",
			//                       "DATETIME"
			//                     ],
			//                     "type": "string"
			//                   }
			//                 },
			//                 "required": [
			//                   "ColumnName",
			//                   "NewColumnType"
			//                 ],
			//                 "type": "object"
			//               },
			//               "CreateColumnsOperation": {
			//                 "description": "\u003cp\u003eA transform operation that creates calculated columns. Columns created in one such\n            operation form a lexical closure.\u003c/p\u003e",
			//                 "properties": {
			//                   "Columns": {
			//                     "description": "\u003cp\u003eCalculated columns to create.\u003c/p\u003e",
			//                     "items": {
			//                       "description": "\u003cp\u003eA calculated column for a dataset.\u003c/p\u003e",
			//                       "properties": {
			//                         "ColumnId": {
			//                           "description": "\u003cp\u003eA unique ID to identify a calculated column. During a dataset update, if the column ID\n            of a calculated column matches that of an existing calculated column, Amazon QuickSight\n            preserves the existing calculated column.\u003c/p\u003e",
			//                           "maxLength": 64,
			//                           "minLength": 1,
			//                           "type": "string"
			//                         },
			//                         "ColumnName": {
			//                           "description": "\u003cp\u003eColumn name.\u003c/p\u003e",
			//                           "maxLength": 128,
			//                           "minLength": 1,
			//                           "type": "string"
			//                         },
			//                         "Expression": {
			//                           "description": "\u003cp\u003eAn expression that defines the calculated column.\u003c/p\u003e",
			//                           "maxLength": 4096,
			//                           "minLength": 1,
			//                           "type": "string"
			//                         }
			//                       },
			//                       "required": [
			//                         "ColumnId",
			//                         "ColumnName",
			//                         "Expression"
			//                       ],
			//                       "type": "object"
			//                     },
			//                     "maxItems": 128,
			//                     "minItems": 1,
			//                     "type": "array"
			//                   }
			//                 },
			//                 "required": [
			//                   "Columns"
			//                 ],
			//                 "type": "object"
			//               },
			//               "FilterOperation": {
			//                 "description": "\u003cp\u003eA transform operation that filters rows based on a condition.\u003c/p\u003e",
			//                 "properties": {
			//                   "ConditionExpression": {
			//                     "description": "\u003cp\u003eAn expression that must evaluate to a Boolean value. Rows for which the expression\n            evaluates to true are kept in the dataset.\u003c/p\u003e",
			//                     "maxLength": 4096,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   }
			//                 },
			//                 "required": [
			//                   "ConditionExpression"
			//                 ],
			//                 "type": "object"
			//               },
			//               "ProjectOperation": {
			//                 "description": "\u003cp\u003eA transform operation that projects columns. Operations that come after a projection\n            can only refer to projected columns.\u003c/p\u003e",
			//                 "properties": {
			//                   "ProjectedColumns": {
			//                     "description": "\u003cp\u003eProjected columns.\u003c/p\u003e",
			//                     "items": {
			//                       "type": "string"
			//                     },
			//                     "maxItems": 2000,
			//                     "minItems": 1,
			//                     "type": "array"
			//                   }
			//                 },
			//                 "required": [
			//                   "ProjectedColumns"
			//                 ],
			//                 "type": "object"
			//               },
			//               "RenameColumnOperation": {
			//                 "description": "\u003cp\u003eA transform operation that renames a column.\u003c/p\u003e",
			//                 "properties": {
			//                   "ColumnName": {
			//                     "description": "\u003cp\u003eThe name of the column to be renamed.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "NewColumnName": {
			//                     "description": "\u003cp\u003eThe new name for the column.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   }
			//                 },
			//                 "required": [
			//                   "ColumnName",
			//                   "NewColumnName"
			//                 ],
			//                 "type": "object"
			//               },
			//               "TagColumnOperation": {
			//                 "description": "\u003cp\u003eA transform operation that tags a column with additional information.\u003c/p\u003e",
			//                 "properties": {
			//                   "ColumnName": {
			//                     "description": "\u003cp\u003eThe column that this operation acts on.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Tags": {
			//                     "description": "\u003cp\u003eThe dataset column tag, currently only used for geospatial type tagging. .\u003c/p\u003e\n        \u003cnote\u003e\n            \u003cp\u003eThis is not tags for the AWS tagging feature. .\u003c/p\u003e\n        \u003c/note\u003e",
			//                     "items": {
			//                       "description": "\u003cp\u003eA tag for a column in a \u003ca\u003eTagColumnOperation\u003c/a\u003e structure. This is a\n            variant type structure. For this structure to be valid, only one of the attributes can\n            be non-null.\u003c/p\u003e",
			//                       "properties": {
			//                         "ColumnDescription": {
			//                           "description": "\u003cp\u003eMetadata that contains a description for a column.\u003c/p\u003e",
			//                           "properties": {
			//                             "Text": {
			//                               "description": "\u003cp\u003eThe text of a description for a column.\u003c/p\u003e",
			//                               "maxLength": 500,
			//                               "minLength": 0,
			//                               "type": "string"
			//                             }
			//                           },
			//                           "type": "object"
			//                         },
			//                         "ColumnGeographicRole": {
			//                           "enum": [
			//                             "COUNTRY",
			//                             "STATE",
			//                             "COUNTY",
			//                             "CITY",
			//                             "POSTCODE",
			//                             "LONGITUDE",
			//                             "LATITUDE",
			//                             "POLITICAL1"
			//                           ],
			//                           "type": "string"
			//                         }
			//                       },
			//                       "type": "object"
			//                     },
			//                     "maxItems": 16,
			//                     "minItems": 1,
			//                     "type": "array"
			//                   }
			//                 },
			//                 "required": [
			//                   "ColumnName",
			//                   "Tags"
			//                 ],
			//                 "type": "object"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "maxItems": 2048,
			//           "minItems": 1,
			//           "type": "array"
			//         },
			//         "Source": {
			//           "description": "\u003cp\u003eInformation about the source of a logical table. This is a variant type structure. For\n            this structure to be valid, only one of the attributes can be non-null.\u003c/p\u003e",
			//           "properties": {
			//             "JoinInstruction": {
			//               "description": "\u003cp\u003eJoin instruction.\u003c/p\u003e",
			//               "properties": {
			//                 "LeftJoinKeyProperties": {
			//                   "properties": {
			//                     "UniqueKey": {
			//                       "type": "boolean"
			//                     }
			//                   },
			//                   "type": "object"
			//                 },
			//                 "LeftOperand": {
			//                   "description": "\u003cp\u003eLeft operand.\u003c/p\u003e",
			//                   "maxLength": 64,
			//                   "minLength": 1,
			//                   "pattern": "",
			//                   "type": "string"
			//                 },
			//                 "OnClause": {
			//                   "description": "\u003cp\u003eOn Clause.\u003c/p\u003e",
			//                   "maxLength": 512,
			//                   "minLength": 1,
			//                   "type": "string"
			//                 },
			//                 "RightJoinKeyProperties": {
			//                   "properties": {
			//                     "UniqueKey": {
			//                       "type": "boolean"
			//                     }
			//                   },
			//                   "type": "object"
			//                 },
			//                 "RightOperand": {
			//                   "description": "\u003cp\u003eRight operand.\u003c/p\u003e",
			//                   "maxLength": 64,
			//                   "minLength": 1,
			//                   "pattern": "",
			//                   "type": "string"
			//                 },
			//                 "Type": {
			//                   "enum": [
			//                     "INNER",
			//                     "OUTER",
			//                     "LEFT",
			//                     "RIGHT"
			//                   ],
			//                   "type": "string"
			//                 }
			//               },
			//               "required": [
			//                 "LeftOperand",
			//                 "OnClause",
			//                 "RightOperand",
			//                 "Type"
			//               ],
			//               "type": "object"
			//             },
			//             "PhysicalTableId": {
			//               "description": "\u003cp\u003ePhysical table ID.\u003c/p\u003e",
			//               "maxLength": 64,
			//               "minLength": 1,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "type": "object"
			//         }
			//       },
			//       "required": [
			//         "Alias",
			//         "Source"
			//       ],
			//       "type": "object"
			//     }
			//   },
			//   "type": "object"
			// }
			// Pattern: ""
			Attributes: tfsdk.MapNestedAttributes(
				map[string]tfsdk.Attribute{
					"alias": {
						// Property: Alias
						Description: "<p>A display name for the logical table.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
					"data_transforms": {
						// Property: DataTransforms
						Description: "<p>Transform operations that act on this logical table.</p>",
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"cast_column_type_operation": {
									// Property: CastColumnTypeOperation
									Description: "<p>A transform operation that casts a column to a different type.</p>",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"column_name": {
												// Property: ColumnName
												Description: "<p>Column name.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"format": {
												// Property: Format
												Description: "<p>When casting a column from string to datetime type, you can supply a string in a\n            format supported by Amazon QuickSight to denote the source data format.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"new_column_type": {
												// Property: NewColumnType
												Type:     types.StringType,
												Computed: true,
											},
										},
									),
									Computed: true,
								},
								"create_columns_operation": {
									// Property: CreateColumnsOperation
									Description: "<p>A transform operation that creates calculated columns. Columns created in one such\n            operation form a lexical closure.</p>",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"columns": {
												// Property: Columns
												Description: "<p>Calculated columns to create.</p>",
												Attributes: tfsdk.ListNestedAttributes(
													map[string]tfsdk.Attribute{
														"column_id": {
															// Property: ColumnId
															Description: "<p>A unique ID to identify a calculated column. During a dataset update, if the column ID\n            of a calculated column matches that of an existing calculated column, Amazon QuickSight\n            preserves the existing calculated column.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"column_name": {
															// Property: ColumnName
															Description: "<p>Column name.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"expression": {
															// Property: Expression
															Description: "<p>An expression that defines the calculated column.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
													},
													tfsdk.ListNestedAttributesOptions{},
												),
												Computed: true,
											},
										},
									),
									Computed: true,
								},
								"filter_operation": {
									// Property: FilterOperation
									Description: "<p>A transform operation that filters rows based on a condition.</p>",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"condition_expression": {
												// Property: ConditionExpression
												Description: "<p>An expression that must evaluate to a Boolean value. Rows for which the expression\n            evaluates to true are kept in the dataset.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
										},
									),
									Computed: true,
								},
								"project_operation": {
									// Property: ProjectOperation
									Description: "<p>A transform operation that projects columns. Operations that come after a projection\n            can only refer to projected columns.</p>",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"projected_columns": {
												// Property: ProjectedColumns
												Description: "<p>Projected columns.</p>",
												Type:        types.ListType{ElemType: types.StringType},
												Computed:    true,
											},
										},
									),
									Computed: true,
								},
								"rename_column_operation": {
									// Property: RenameColumnOperation
									Description: "<p>A transform operation that renames a column.</p>",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"column_name": {
												// Property: ColumnName
												Description: "<p>The name of the column to be renamed.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"new_column_name": {
												// Property: NewColumnName
												Description: "<p>The new name for the column.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
										},
									),
									Computed: true,
								},
								"tag_column_operation": {
									// Property: TagColumnOperation
									Description: "<p>A transform operation that tags a column with additional information.</p>",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"column_name": {
												// Property: ColumnName
												Description: "<p>The column that this operation acts on.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"tags": {
												// Property: Tags
												Description: "<p>The dataset column tag, currently only used for geospatial type tagging. .</p>\n        <note>\n            <p>This is not tags for the AWS tagging feature. .</p>\n        </note>",
												Attributes: tfsdk.ListNestedAttributes(
													map[string]tfsdk.Attribute{
														"column_description": {
															// Property: ColumnDescription
															Description: "<p>Metadata that contains a description for a column.</p>",
															Attributes: tfsdk.SingleNestedAttributes(
																map[string]tfsdk.Attribute{
																	"text": {
																		// Property: Text
																		Description: "<p>The text of a description for a column.</p>",
																		Type:        types.StringType,
																		Computed:    true,
																	},
																},
															),
															Computed: true,
														},
														"column_geographic_role": {
															// Property: ColumnGeographicRole
															Type:     types.StringType,
															Computed: true,
														},
													},
													tfsdk.ListNestedAttributesOptions{},
												),
												Computed: true,
											},
										},
									),
									Computed: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Computed: true,
					},
					"source": {
						// Property: Source
						Description: "<p>Information about the source of a logical table. This is a variant type structure. For\n            this structure to be valid, only one of the attributes can be non-null.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"join_instruction": {
									// Property: JoinInstruction
									Description: "<p>Join instruction.</p>",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"left_join_key_properties": {
												// Property: LeftJoinKeyProperties
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"unique_key": {
															// Property: UniqueKey
															Type:     types.BoolType,
															Computed: true,
														},
													},
												),
												Computed: true,
											},
											"left_operand": {
												// Property: LeftOperand
												Description: "<p>Left operand.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"on_clause": {
												// Property: OnClause
												Description: "<p>On Clause.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"right_join_key_properties": {
												// Property: RightJoinKeyProperties
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"unique_key": {
															// Property: UniqueKey
															Type:     types.BoolType,
															Computed: true,
														},
													},
												),
												Computed: true,
											},
											"right_operand": {
												// Property: RightOperand
												Description: "<p>Right operand.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"type": {
												// Property: Type
												Type:     types.StringType,
												Computed: true,
											},
										},
									),
									Computed: true,
								},
								"physical_table_id": {
									// Property: PhysicalTableId
									Description: "<p>Physical table ID.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
				},
				tfsdk.MapNestedAttributesOptions{},
			),
			Computed: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe display name for the dataset.\u003c/p\u003e",
			//   "maxLength": 128,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "<p>The display name for the dataset.</p>",
			Type:        types.StringType,
			Computed:    true,
		},
		"output_columns": {
			// Property: OutputColumns
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe list of columns after all transforms. These columns are available in templates,\n            analyses, and dashboards.\u003c/p\u003e",
			//   "items": {
			//     "description": "\u003cp\u003eOutput column.\u003c/p\u003e",
			//     "properties": {
			//       "Description": {
			//         "description": "\u003cp\u003eA description for a column.\u003c/p\u003e",
			//         "maxLength": 500,
			//         "minLength": 0,
			//         "type": "string"
			//       },
			//       "Name": {
			//         "description": "\u003cp\u003eA display name for the dataset.\u003c/p\u003e",
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Type": {
			//         "enum": [
			//           "STRING",
			//           "INTEGER",
			//           "DECIMAL",
			//           "DATETIME"
			//         ],
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Description: "<p>The list of columns after all transforms. These columns are available in templates,\n            analyses, and dashboards.</p>",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"description": {
						// Property: Description
						Description: "<p>A description for a column.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
					"name": {
						// Property: Name
						Description: "<p>A display name for the dataset.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
					"type": {
						// Property: Type
						Type:     types.StringType,
						Computed: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
		"permissions": {
			// Property: Permissions
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eA list of resource permissions on the dataset.\u003c/p\u003e",
			//   "items": {
			//     "description": "\u003cp\u003ePermission for the resource.\u003c/p\u003e",
			//     "properties": {
			//       "Actions": {
			//         "description": "\u003cp\u003eThe IAM action to grant or revoke permissions on.\u003c/p\u003e",
			//         "items": {
			//           "type": "string"
			//         },
			//         "maxItems": 16,
			//         "minItems": 1,
			//         "type": "array"
			//       },
			//       "Principal": {
			//         "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the principal. This can be one of the\n            following:\u003c/p\u003e\n        \u003cul\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)\u003c/p\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)\u003c/p\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an AWS account root: This is an IAM ARN rather than a QuickSight\n                    ARN. Use this option only to share resources (templates) across AWS accounts.\n                    (This is less common.) \u003c/p\u003e\n            \u003c/li\u003e\n         \u003c/ul\u003e",
			//         "maxLength": 256,
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Actions",
			//       "Principal"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 64,
			//   "minItems": 1,
			//   "type": "array"
			// }
			Description: "<p>A list of resource permissions on the dataset.</p>",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"actions": {
						// Property: Actions
						Description: "<p>The IAM action to grant or revoke permissions on.</p>",
						Type:        types.ListType{ElemType: types.StringType},
						Computed:    true,
					},
					"principal": {
						// Property: Principal
						Description: "<p>The Amazon Resource Name (ARN) of the principal. This can be one of the\n            following:</p>\n        <ul>\n            <li>\n                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>\n            </li>\n            <li>\n                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>\n            </li>\n            <li>\n                <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight\n                    ARN. Use this option only to share resources (templates) across AWS accounts.\n                    (This is less common.) </p>\n            </li>\n         </ul>",
						Type:        types.StringType,
						Computed:    true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
		"physical_table_map": {
			// Property: PhysicalTableMap
			// CloudFormation resource type schema:
			// {
			//   "patternProperties": {
			//     "": {
			//       "description": "\u003cp\u003eA view of a data source that contains information about the shape of the data in the\n            underlying source. This is a variant type structure. For this structure to be valid,\n            only one of the attributes can be non-null.\u003c/p\u003e",
			//       "properties": {
			//         "CustomSql": {
			//           "description": "\u003cp\u003eA physical table type built from the results of the custom SQL query.\u003c/p\u003e",
			//           "properties": {
			//             "Columns": {
			//               "description": "\u003cp\u003eThe column schema from the SQL query result set.\u003c/p\u003e",
			//               "items": {
			//                 "description": "\u003cp\u003eMetadata for a column that is used as the input of a transform operation.\u003c/p\u003e",
			//                 "properties": {
			//                   "Name": {
			//                     "description": "\u003cp\u003eThe name of this column in the underlying data source.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Type": {
			//                     "enum": [
			//                       "STRING",
			//                       "INTEGER",
			//                       "DECIMAL",
			//                       "DATETIME",
			//                       "BIT",
			//                       "BOOLEAN",
			//                       "JSON"
			//                     ],
			//                     "type": "string"
			//                   }
			//                 },
			//                 "required": [
			//                   "Name",
			//                   "Type"
			//                 ],
			//                 "type": "object"
			//               },
			//               "maxItems": 2048,
			//               "minItems": 1,
			//               "type": "array"
			//             },
			//             "DataSourceArn": {
			//               "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the data source.\u003c/p\u003e",
			//               "type": "string"
			//             },
			//             "Name": {
			//               "description": "\u003cp\u003eA display name for the SQL query result.\u003c/p\u003e",
			//               "maxLength": 128,
			//               "minLength": 1,
			//               "type": "string"
			//             },
			//             "SqlQuery": {
			//               "description": "\u003cp\u003eThe SQL query.\u003c/p\u003e",
			//               "maxLength": 65536,
			//               "minLength": 1,
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Columns",
			//             "DataSourceArn",
			//             "Name",
			//             "SqlQuery"
			//           ],
			//           "type": "object"
			//         },
			//         "RelationalTable": {
			//           "description": "\u003cp\u003eA physical table type for relational data sources.\u003c/p\u003e",
			//           "properties": {
			//             "Catalog": {
			//               "maxLength": 256,
			//               "minLength": 0,
			//               "type": "string"
			//             },
			//             "DataSourceArn": {
			//               "description": "\u003cp\u003eThe Amazon Resource Name (ARN) for the data source.\u003c/p\u003e",
			//               "type": "string"
			//             },
			//             "InputColumns": {
			//               "description": "\u003cp\u003eThe column schema of the table.\u003c/p\u003e",
			//               "items": {
			//                 "description": "\u003cp\u003eMetadata for a column that is used as the input of a transform operation.\u003c/p\u003e",
			//                 "properties": {
			//                   "Name": {
			//                     "description": "\u003cp\u003eThe name of this column in the underlying data source.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Type": {
			//                     "enum": [
			//                       "STRING",
			//                       "INTEGER",
			//                       "DECIMAL",
			//                       "DATETIME",
			//                       "BIT",
			//                       "BOOLEAN",
			//                       "JSON"
			//                     ],
			//                     "type": "string"
			//                   }
			//                 },
			//                 "required": [
			//                   "Name",
			//                   "Type"
			//                 ],
			//                 "type": "object"
			//               },
			//               "maxItems": 2048,
			//               "minItems": 1,
			//               "type": "array"
			//             },
			//             "Name": {
			//               "description": "\u003cp\u003eThe name of the relational table.\u003c/p\u003e",
			//               "maxLength": 64,
			//               "minLength": 1,
			//               "type": "string"
			//             },
			//             "Schema": {
			//               "description": "\u003cp\u003eThe schema name. This name applies to certain relational database engines.\u003c/p\u003e",
			//               "maxLength": 64,
			//               "minLength": 0,
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "DataSourceArn",
			//             "InputColumns",
			//             "Name"
			//           ],
			//           "type": "object"
			//         },
			//         "S3Source": {
			//           "description": "\u003cp\u003eA physical table type for as S3 data source.\u003c/p\u003e",
			//           "properties": {
			//             "DataSourceArn": {
			//               "description": "\u003cp\u003eThe amazon Resource Name (ARN) for the data source.\u003c/p\u003e",
			//               "type": "string"
			//             },
			//             "InputColumns": {
			//               "description": "\u003cp\u003eA physical table type for as S3 data source.\u003c/p\u003e",
			//               "items": {
			//                 "description": "\u003cp\u003eMetadata for a column that is used as the input of a transform operation.\u003c/p\u003e",
			//                 "properties": {
			//                   "Name": {
			//                     "description": "\u003cp\u003eThe name of this column in the underlying data source.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Type": {
			//                     "enum": [
			//                       "STRING",
			//                       "INTEGER",
			//                       "DECIMAL",
			//                       "DATETIME",
			//                       "BIT",
			//                       "BOOLEAN",
			//                       "JSON"
			//                     ],
			//                     "type": "string"
			//                   }
			//                 },
			//                 "required": [
			//                   "Name",
			//                   "Type"
			//                 ],
			//                 "type": "object"
			//               },
			//               "maxItems": 2048,
			//               "minItems": 1,
			//               "type": "array"
			//             },
			//             "UploadSettings": {
			//               "description": "\u003cp\u003eInformation about the format for a source file or files.\u003c/p\u003e",
			//               "properties": {
			//                 "ContainsHeader": {
			//                   "description": "\u003cp\u003eWhether the file has a header row, or the files each have a header row.\u003c/p\u003e",
			//                   "type": "boolean"
			//                 },
			//                 "Delimiter": {
			//                   "description": "\u003cp\u003eThe delimiter between values in the file.\u003c/p\u003e",
			//                   "maxLength": 1,
			//                   "minLength": 1,
			//                   "type": "string"
			//                 },
			//                 "Format": {
			//                   "enum": [
			//                     "CSV",
			//                     "TSV",
			//                     "CLF",
			//                     "ELF",
			//                     "XLSX",
			//                     "JSON"
			//                   ],
			//                   "type": "string"
			//                 },
			//                 "StartFromRow": {
			//                   "description": "\u003cp\u003eA row number to start reading data from.\u003c/p\u003e",
			//                   "minimum": 1,
			//                   "type": "number"
			//                 },
			//                 "TextQualifier": {
			//                   "enum": [
			//                     "DOUBLE_QUOTE",
			//                     "SINGLE_QUOTE"
			//                   ],
			//                   "type": "string"
			//                 }
			//               },
			//               "type": "object"
			//             }
			//           },
			//           "required": [
			//             "DataSourceArn",
			//             "InputColumns"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "type": "object"
			//     }
			//   },
			//   "type": "object"
			// }
			// Pattern: ""
			Attributes: tfsdk.MapNestedAttributes(
				map[string]tfsdk.Attribute{
					"custom_sql": {
						// Property: CustomSql
						Description: "<p>A physical table type built from the results of the custom SQL query.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"columns": {
									// Property: Columns
									Description: "<p>The column schema from the SQL query result set.</p>",
									Attributes: tfsdk.ListNestedAttributes(
										map[string]tfsdk.Attribute{
											"name": {
												// Property: Name
												Description: "<p>The name of this column in the underlying data source.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"type": {
												// Property: Type
												Type:     types.StringType,
												Computed: true,
											},
										},
										tfsdk.ListNestedAttributesOptions{},
									),
									Computed: true,
								},
								"data_source_arn": {
									// Property: DataSourceArn
									Description: "<p>The Amazon Resource Name (ARN) of the data source.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"name": {
									// Property: Name
									Description: "<p>A display name for the SQL query result.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"sql_query": {
									// Property: SqlQuery
									Description: "<p>The SQL query.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"relational_table": {
						// Property: RelationalTable
						Description: "<p>A physical table type for relational data sources.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"catalog": {
									// Property: Catalog
									Type:     types.StringType,
									Computed: true,
								},
								"data_source_arn": {
									// Property: DataSourceArn
									Description: "<p>The Amazon Resource Name (ARN) for the data source.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"input_columns": {
									// Property: InputColumns
									Description: "<p>The column schema of the table.</p>",
									Attributes: tfsdk.ListNestedAttributes(
										map[string]tfsdk.Attribute{
											"name": {
												// Property: Name
												Description: "<p>The name of this column in the underlying data source.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"type": {
												// Property: Type
												Type:     types.StringType,
												Computed: true,
											},
										},
										tfsdk.ListNestedAttributesOptions{},
									),
									Computed: true,
								},
								"name": {
									// Property: Name
									Description: "<p>The name of the relational table.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"schema": {
									// Property: Schema
									Description: "<p>The schema name. This name applies to certain relational database engines.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"s3_source": {
						// Property: S3Source
						Description: "<p>A physical table type for as S3 data source.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"data_source_arn": {
									// Property: DataSourceArn
									Description: "<p>The amazon Resource Name (ARN) for the data source.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"input_columns": {
									// Property: InputColumns
									Description: "<p>A physical table type for as S3 data source.</p>",
									Attributes: tfsdk.ListNestedAttributes(
										map[string]tfsdk.Attribute{
											"name": {
												// Property: Name
												Description: "<p>The name of this column in the underlying data source.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"type": {
												// Property: Type
												Type:     types.StringType,
												Computed: true,
											},
										},
										tfsdk.ListNestedAttributesOptions{},
									),
									Computed: true,
								},
								"upload_settings": {
									// Property: UploadSettings
									Description: "<p>Information about the format for a source file or files.</p>",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"contains_header": {
												// Property: ContainsHeader
												Description: "<p>Whether the file has a header row, or the files each have a header row.</p>",
												Type:        types.BoolType,
												Computed:    true,
											},
											"delimiter": {
												// Property: Delimiter
												Description: "<p>The delimiter between values in the file.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"format": {
												// Property: Format
												Type:     types.StringType,
												Computed: true,
											},
											"start_from_row": {
												// Property: StartFromRow
												Description: "<p>A row number to start reading data from.</p>",
												Type:        types.NumberType,
												Computed:    true,
											},
											"text_qualifier": {
												// Property: TextQualifier
												Type:     types.StringType,
												Computed: true,
											},
										},
									),
									Computed: true,
								},
							},
						),
						Computed: true,
					},
				},
				tfsdk.MapNestedAttributesOptions{},
			),
			Computed: true,
		},
		"row_level_permission_data_set": {
			// Property: RowLevelPermissionDataSet
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe row-level security configuration for the dataset.\u003c/p\u003e",
			//   "properties": {
			//     "Arn": {
			//       "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the permission dataset.\u003c/p\u003e",
			//       "type": "string"
			//     },
			//     "FormatVersion": {
			//       "enum": [
			//         "VERSION_1",
			//         "VERSION_2"
			//       ],
			//       "type": "string"
			//     },
			//     "Namespace": {
			//       "description": "\u003cp\u003eThe namespace associated with the row-level permissions dataset.\u003c/p\u003e",
			//       "maxLength": 64,
			//       "minLength": 0,
			//       "pattern": "",
			//       "type": "string"
			//     },
			//     "PermissionPolicy": {
			//       "enum": [
			//         "GRANT_ACCESS",
			//         "DENY_ACCESS"
			//       ],
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "Arn",
			//     "PermissionPolicy"
			//   ],
			//   "type": "object"
			// }
			Description: "<p>The row-level security configuration for the dataset.</p>",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"arn": {
						// Property: Arn
						Description: "<p>The Amazon Resource Name (ARN) of the permission dataset.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
					"format_version": {
						// Property: FormatVersion
						Type:     types.StringType,
						Computed: true,
					},
					"namespace": {
						// Property: Namespace
						Description: "<p>The namespace associated with the row-level permissions dataset.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
					"permission_policy": {
						// Property: PermissionPolicy
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eContains a map of the key-value pairs for the resource tag or tags assigned to the dataset.\u003c/p\u003e",
			//   "items": {
			//     "description": "\u003cp\u003eThe key or keys of the key-value pairs for the resource tag or tags assigned to the\n            resource.\u003c/p\u003e",
			//     "properties": {
			//       "Key": {
			//         "description": "\u003cp\u003eTag key.\u003c/p\u003e",
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "description": "\u003cp\u003eTag value.\u003c/p\u003e",
			//         "maxLength": 256,
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 200,
			//   "minItems": 1,
			//   "type": "array"
			// }
			Description: "<p>Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.</p>",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "<p>Tag key.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
					"value": {
						// Property: Value
						Description: "<p>Tag value.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::QuickSight::DataSet",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::QuickSight::DataSet").WithTerraformTypeName("awscc_quicksight_data_set")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"actions":                          "Actions",
		"alias":                            "Alias",
		"arn":                              "Arn",
		"aws_account_id":                   "AwsAccountId",
		"cast_column_type_operation":       "CastColumnTypeOperation",
		"catalog":                          "Catalog",
		"column_description":               "ColumnDescription",
		"column_geographic_role":           "ColumnGeographicRole",
		"column_groups":                    "ColumnGroups",
		"column_id":                        "ColumnId",
		"column_level_permission_rules":    "ColumnLevelPermissionRules",
		"column_name":                      "ColumnName",
		"column_names":                     "ColumnNames",
		"columns":                          "Columns",
		"condition_expression":             "ConditionExpression",
		"consumed_spice_capacity_in_bytes": "ConsumedSpiceCapacityInBytes",
		"contains_header":                  "ContainsHeader",
		"country_code":                     "CountryCode",
		"create_columns_operation":         "CreateColumnsOperation",
		"created_time":                     "CreatedTime",
		"custom_sql":                       "CustomSql",
		"data_set_id":                      "DataSetId",
		"data_source_arn":                  "DataSourceArn",
		"data_transforms":                  "DataTransforms",
		"delimiter":                        "Delimiter",
		"description":                      "Description",
		"expression":                       "Expression",
		"field_folders":                    "FieldFolders",
		"filter_operation":                 "FilterOperation",
		"format":                           "Format",
		"format_version":                   "FormatVersion",
		"geo_spatial_column_group":         "GeoSpatialColumnGroup",
		"import_mode":                      "ImportMode",
		"ingestion_wait_policy":            "IngestionWaitPolicy",
		"ingestion_wait_time_in_hours":     "IngestionWaitTimeInHours",
		"input_columns":                    "InputColumns",
		"join_instruction":                 "JoinInstruction",
		"key":                              "Key",
		"last_updated_time":                "LastUpdatedTime",
		"left_join_key_properties":         "LeftJoinKeyProperties",
		"left_operand":                     "LeftOperand",
		"logical_table_map":                "LogicalTableMap",
		"name":                             "Name",
		"namespace":                        "Namespace",
		"new_column_name":                  "NewColumnName",
		"new_column_type":                  "NewColumnType",
		"on_clause":                        "OnClause",
		"output_columns":                   "OutputColumns",
		"permission_policy":                "PermissionPolicy",
		"permissions":                      "Permissions",
		"physical_table_id":                "PhysicalTableId",
		"physical_table_map":               "PhysicalTableMap",
		"principal":                        "Principal",
		"principals":                       "Principals",
		"project_operation":                "ProjectOperation",
		"projected_columns":                "ProjectedColumns",
		"relational_table":                 "RelationalTable",
		"rename_column_operation":          "RenameColumnOperation",
		"right_join_key_properties":        "RightJoinKeyProperties",
		"right_operand":                    "RightOperand",
		"row_level_permission_data_set":    "RowLevelPermissionDataSet",
		"s3_source":                        "S3Source",
		"schema":                           "Schema",
		"source":                           "Source",
		"sql_query":                        "SqlQuery",
		"start_from_row":                   "StartFromRow",
		"tag_column_operation":             "TagColumnOperation",
		"tags":                             "Tags",
		"text":                             "Text",
		"text_qualifier":                   "TextQualifier",
		"type":                             "Type",
		"unique_key":                       "UniqueKey",
		"upload_settings":                  "UploadSettings",
		"value":                            "Value",
		"wait_for_spice_ingestion":         "WaitForSpiceIngestion",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_quicksight_data_set", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
