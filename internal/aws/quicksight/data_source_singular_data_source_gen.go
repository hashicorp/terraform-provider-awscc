// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package quicksight

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_quicksight_data_source", dataSourceDataSourceType)
}

// dataSourceDataSourceType returns the Terraform awscc_quicksight_data_source data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::QuickSight::DataSource resource type.
func dataSourceDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"alternate_data_source_parameters": {
			// Property: AlternateDataSourceParameters
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eA set of alternate data source parameters that you want to share for the credentials\n            stored with this data source. The credentials are applied in tandem with the data source\n            parameters when you copy a data source by using a create or update request. The API\n            operation compares the \u003ccode\u003eDataSourceParameters\u003c/code\u003e structure that's in the request\n            with the structures in the \u003ccode\u003eAlternateDataSourceParameters\u003c/code\u003e allow list. If the\n            structures are an exact match, the request is allowed to use the credentials from this\n            existing data source. If the \u003ccode\u003eAlternateDataSourceParameters\u003c/code\u003e list is null,\n            the \u003ccode\u003eCredentials\u003c/code\u003e originally used with this \u003ccode\u003eDataSourceParameters\u003c/code\u003e\n            are automatically allowed.\u003c/p\u003e",
			//   "items": {
			//     "description": "\u003cp\u003eThe parameters that Amazon QuickSight uses to connect to your underlying data source.\n            This is a variant type structure. For this structure to be valid, only one of the\n            attributes can be non-null.\u003c/p\u003e",
			//     "properties": {
			//       "AmazonElasticsearchParameters": {
			//         "description": "\u003cp\u003eAmazon Elasticsearch Service parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Domain": {
			//             "description": "\u003cp\u003eThe Amazon Elasticsearch Service domain.\u003c/p\u003e",
			//             "maxLength": 64,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Domain"
			//         ],
			//         "type": "object"
			//       },
			//       "AthenaParameters": {
			//         "description": "\u003cp\u003eAmazon Athena parameters.\u003c/p\u003e",
			//         "properties": {
			//           "WorkGroup": {
			//             "description": "\u003cp\u003eThe workgroup that Amazon Athena uses.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "AuroraParameters": {
			//         "description": "\u003cp\u003eAmazon Aurora parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Database": {
			//             "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//             "maximum": 65535,
			//             "minimum": 1,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Database",
			//           "Host",
			//           "Port"
			//         ],
			//         "type": "object"
			//       },
			//       "AuroraPostgreSqlParameters": {
			//         "description": "\u003cp\u003eAmazon Aurora with PostgreSQL compatibility parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Database": {
			//             "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//             "maximum": 65535,
			//             "minimum": 1,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Database",
			//           "Host",
			//           "Port"
			//         ],
			//         "type": "object"
			//       },
			//       "MariaDbParameters": {
			//         "description": "\u003cp\u003eMariaDB parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Database": {
			//             "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//             "maximum": 65535,
			//             "minimum": 1,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Database",
			//           "Host",
			//           "Port"
			//         ],
			//         "type": "object"
			//       },
			//       "MySqlParameters": {
			//         "description": "\u003cp\u003eMySQL parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Database": {
			//             "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//             "maximum": 65535,
			//             "minimum": 1,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Database",
			//           "Host",
			//           "Port"
			//         ],
			//         "type": "object"
			//       },
			//       "OracleParameters": {
			//         "properties": {
			//           "Database": {
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "maximum": 65535,
			//             "minimum": 1,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Database",
			//           "Host",
			//           "Port"
			//         ],
			//         "type": "object"
			//       },
			//       "PostgreSqlParameters": {
			//         "description": "\u003cp\u003ePostgreSQL parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Database": {
			//             "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//             "maximum": 65535,
			//             "minimum": 1,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Database",
			//           "Host",
			//           "Port"
			//         ],
			//         "type": "object"
			//       },
			//       "PrestoParameters": {
			//         "description": "\u003cp\u003ePresto parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Catalog": {
			//             "description": "\u003cp\u003eCatalog.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 0,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//             "maximum": 65535,
			//             "minimum": 1,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Catalog",
			//           "Host",
			//           "Port"
			//         ],
			//         "type": "object"
			//       },
			//       "RdsParameters": {
			//         "description": "\u003cp\u003eAmazon RDS parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Database": {
			//             "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "InstanceId": {
			//             "description": "\u003cp\u003eInstance ID.\u003c/p\u003e",
			//             "maxLength": 64,
			//             "minLength": 1,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Database",
			//           "InstanceId"
			//         ],
			//         "type": "object"
			//       },
			//       "RedshiftParameters": {
			//         "description": "\u003cp\u003eAmazon Redshift parameters. The \u003ccode\u003eClusterId\u003c/code\u003e field can be blank if\n            \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are both set. The \u003ccode\u003eHost\u003c/code\u003e and\n            \u003ccode\u003ePort\u003c/code\u003e fields can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e field is set.\u003c/p\u003e",
			//         "properties": {
			//           "ClusterId": {
			//             "description": "\u003cp\u003eCluster ID. This field can be blank if the \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are\n            provided.\u003c/p\u003e",
			//             "maxLength": 64,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Database": {
			//             "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "description": "\u003cp\u003eHost. This field can be blank if \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "description": "\u003cp\u003ePort. This field can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
			//             "maximum": 65535,
			//             "minimum": 0,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Database"
			//         ],
			//         "type": "object"
			//       },
			//       "S3Parameters": {
			//         "description": "\u003cp\u003eS3 parameters.\u003c/p\u003e",
			//         "properties": {
			//           "ManifestFileLocation": {
			//             "description": "\u003cp\u003eAmazon S3 manifest file location.\u003c/p\u003e",
			//             "properties": {
			//               "Bucket": {
			//                 "description": "\u003cp\u003eAmazon S3 bucket.\u003c/p\u003e",
			//                 "maxLength": 1024,
			//                 "minLength": 1,
			//                 "type": "string"
			//               },
			//               "Key": {
			//                 "description": "\u003cp\u003eAmazon S3 key that identifies an object.\u003c/p\u003e",
			//                 "maxLength": 1024,
			//                 "minLength": 1,
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Bucket",
			//               "Key"
			//             ],
			//             "type": "object"
			//           }
			//         },
			//         "required": [
			//           "ManifestFileLocation"
			//         ],
			//         "type": "object"
			//       },
			//       "SnowflakeParameters": {
			//         "description": "\u003cp\u003eSnowflake parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Database": {
			//             "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Warehouse": {
			//             "description": "\u003cp\u003eWarehouse.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 0,
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Database",
			//           "Host",
			//           "Warehouse"
			//         ],
			//         "type": "object"
			//       },
			//       "SparkParameters": {
			//         "description": "\u003cp\u003eSpark parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Host": {
			//             "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//             "maximum": 65535,
			//             "minimum": 1,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Host",
			//           "Port"
			//         ],
			//         "type": "object"
			//       },
			//       "SqlServerParameters": {
			//         "description": "\u003cp\u003eSQL Server parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Database": {
			//             "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//             "maximum": 65535,
			//             "minimum": 1,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Database",
			//           "Host",
			//           "Port"
			//         ],
			//         "type": "object"
			//       },
			//       "TeradataParameters": {
			//         "description": "\u003cp\u003eTeradata parameters.\u003c/p\u003e",
			//         "properties": {
			//           "Database": {
			//             "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//             "maxLength": 128,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Host": {
			//             "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//             "maxLength": 256,
			//             "minLength": 1,
			//             "type": "string"
			//           },
			//           "Port": {
			//             "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//             "maximum": 65535,
			//             "minimum": 1,
			//             "type": "number"
			//           }
			//         },
			//         "required": [
			//           "Database",
			//           "Host",
			//           "Port"
			//         ],
			//         "type": "object"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "maxItems": 50,
			//   "minItems": 1,
			//   "type": "array"
			// }
			Description: "<p>A set of alternate data source parameters that you want to share for the credentials\n            stored with this data source. The credentials are applied in tandem with the data source\n            parameters when you copy a data source by using a create or update request. The API\n            operation compares the <code>DataSourceParameters</code> structure that's in the request\n            with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the\n            structures are an exact match, the request is allowed to use the credentials from this\n            existing data source. If the <code>AlternateDataSourceParameters</code> list is null,\n            the <code>Credentials</code> originally used with this <code>DataSourceParameters</code>\n            are automatically allowed.</p>",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"amazon_elasticsearch_parameters": {
						// Property: AmazonElasticsearchParameters
						Description: "<p>Amazon Elasticsearch Service parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"domain": {
									// Property: Domain
									Description: "<p>The Amazon Elasticsearch Service domain.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"athena_parameters": {
						// Property: AthenaParameters
						Description: "<p>Amazon Athena parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"work_group": {
									// Property: WorkGroup
									Description: "<p>The workgroup that Amazon Athena uses.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"aurora_parameters": {
						// Property: AuroraParameters
						Description: "<p>Amazon Aurora parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"aurora_postgre_sql_parameters": {
						// Property: AuroraPostgreSqlParameters
						Description: "<p>Amazon Aurora with PostgreSQL compatibility parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"maria_db_parameters": {
						// Property: MariaDbParameters
						Description: "<p>MariaDB parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"my_sql_parameters": {
						// Property: MySqlParameters
						Description: "<p>MySQL parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"oracle_parameters": {
						// Property: OracleParameters
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Type:     types.StringType,
									Computed: true,
								},
								"host": {
									// Property: Host
									Type:     types.StringType,
									Computed: true,
								},
								"port": {
									// Property: Port
									Type:     types.NumberType,
									Computed: true,
								},
							},
						),
						Computed: true,
					},
					"postgre_sql_parameters": {
						// Property: PostgreSqlParameters
						Description: "<p>PostgreSQL parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"presto_parameters": {
						// Property: PrestoParameters
						Description: "<p>Presto parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"catalog": {
									// Property: Catalog
									Description: "<p>Catalog.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"rds_parameters": {
						// Property: RdsParameters
						Description: "<p>Amazon RDS parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"instance_id": {
									// Property: InstanceId
									Description: "<p>Instance ID.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"redshift_parameters": {
						// Property: RedshiftParameters
						Description: "<p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if\n            <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and\n            <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"cluster_id": {
									// Property: ClusterId
									Description: "<p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are\n            provided.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"s3_parameters": {
						// Property: S3Parameters
						Description: "<p>S3 parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"manifest_file_location": {
									// Property: ManifestFileLocation
									Description: "<p>Amazon S3 manifest file location.</p>",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"bucket": {
												// Property: Bucket
												Description: "<p>Amazon S3 bucket.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"key": {
												// Property: Key
												Description: "<p>Amazon S3 key that identifies an object.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
										},
									),
									Computed: true,
								},
							},
						),
						Computed: true,
					},
					"snowflake_parameters": {
						// Property: SnowflakeParameters
						Description: "<p>Snowflake parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"warehouse": {
									// Property: Warehouse
									Description: "<p>Warehouse.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"spark_parameters": {
						// Property: SparkParameters
						Description: "<p>Spark parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"sql_server_parameters": {
						// Property: SqlServerParameters
						Description: "<p>SQL Server parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"teradata_parameters": {
						// Property: TeradataParameters
						Description: "<p>Teradata parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the data source.\u003c/p\u003e",
			//   "type": "string"
			// }
			Description: "<p>The Amazon Resource Name (ARN) of the data source.</p>",
			Type:        types.StringType,
			Computed:    true,
		},
		"aws_account_id": {
			// Property: AwsAccountId
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 12,
			//   "minLength": 12,
			//   "pattern": "",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"created_time": {
			// Property: CreatedTime
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe time that this data source was created.\u003c/p\u003e",
			//   "format": "date-time",
			//   "type": "string"
			// }
			Description: "<p>The time that this data source was created.</p>",
			Type:        types.StringType,
			Computed:    true,
		},
		"credentials": {
			// Property: Credentials
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eData source credentials. This is a variant type structure. For this structure to be\n            valid, only one of the attributes can be non-null.\u003c/p\u003e",
			//   "properties": {
			//     "CopySourceArn": {
			//       "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of a data source that has the credential pair that you\n            want to use. When \u003ccode\u003eCopySourceArn\u003c/code\u003e is not null, the credential pair from the\n            data source in the ARN is used as the credentials for the\n            \u003ccode\u003eDataSourceCredentials\u003c/code\u003e structure.\u003c/p\u003e",
			//       "pattern": "",
			//       "type": "string"
			//     },
			//     "CredentialPair": {
			//       "description": "\u003cp\u003eThe combination of user name and password that are used as credentials.\u003c/p\u003e",
			//       "properties": {
			//         "AlternateDataSourceParameters": {
			//           "description": "\u003cp\u003eA set of alternate data source parameters that you want to share for these\n            credentials. The credentials are applied in tandem with the data source parameters when\n            you copy a data source by using a create or update request. The API operation compares\n            the \u003ccode\u003eDataSourceParameters\u003c/code\u003e structure that's in the request with the\n            structures in the \u003ccode\u003eAlternateDataSourceParameters\u003c/code\u003e allow list. If the\n            structures are an exact match, the request is allowed to use the new data source with\n            the existing credentials. If the \u003ccode\u003eAlternateDataSourceParameters\u003c/code\u003e list is\n            null, the \u003ccode\u003eDataSourceParameters\u003c/code\u003e originally used with these\n                \u003ccode\u003eCredentials\u003c/code\u003e is automatically allowed.\u003c/p\u003e",
			//           "items": {
			//             "description": "\u003cp\u003eThe parameters that Amazon QuickSight uses to connect to your underlying data source.\n            This is a variant type structure. For this structure to be valid, only one of the\n            attributes can be non-null.\u003c/p\u003e",
			//             "properties": {
			//               "AmazonElasticsearchParameters": {
			//                 "description": "\u003cp\u003eAmazon Elasticsearch Service parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Domain": {
			//                     "description": "\u003cp\u003eThe Amazon Elasticsearch Service domain.\u003c/p\u003e",
			//                     "maxLength": 64,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   }
			//                 },
			//                 "required": [
			//                   "Domain"
			//                 ],
			//                 "type": "object"
			//               },
			//               "AthenaParameters": {
			//                 "description": "\u003cp\u003eAmazon Athena parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "WorkGroup": {
			//                     "description": "\u003cp\u003eThe workgroup that Amazon Athena uses.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   }
			//                 },
			//                 "type": "object"
			//               },
			//               "AuroraParameters": {
			//                 "description": "\u003cp\u003eAmazon Aurora parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Database": {
			//                     "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//                     "maximum": 65535,
			//                     "minimum": 1,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database",
			//                   "Host",
			//                   "Port"
			//                 ],
			//                 "type": "object"
			//               },
			//               "AuroraPostgreSqlParameters": {
			//                 "description": "\u003cp\u003eAmazon Aurora with PostgreSQL compatibility parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Database": {
			//                     "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//                     "maximum": 65535,
			//                     "minimum": 1,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database",
			//                   "Host",
			//                   "Port"
			//                 ],
			//                 "type": "object"
			//               },
			//               "MariaDbParameters": {
			//                 "description": "\u003cp\u003eMariaDB parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Database": {
			//                     "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//                     "maximum": 65535,
			//                     "minimum": 1,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database",
			//                   "Host",
			//                   "Port"
			//                 ],
			//                 "type": "object"
			//               },
			//               "MySqlParameters": {
			//                 "description": "\u003cp\u003eMySQL parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Database": {
			//                     "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//                     "maximum": 65535,
			//                     "minimum": 1,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database",
			//                   "Host",
			//                   "Port"
			//                 ],
			//                 "type": "object"
			//               },
			//               "OracleParameters": {
			//                 "properties": {
			//                   "Database": {
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "maximum": 65535,
			//                     "minimum": 1,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database",
			//                   "Host",
			//                   "Port"
			//                 ],
			//                 "type": "object"
			//               },
			//               "PostgreSqlParameters": {
			//                 "description": "\u003cp\u003ePostgreSQL parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Database": {
			//                     "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//                     "maximum": 65535,
			//                     "minimum": 1,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database",
			//                   "Host",
			//                   "Port"
			//                 ],
			//                 "type": "object"
			//               },
			//               "PrestoParameters": {
			//                 "description": "\u003cp\u003ePresto parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Catalog": {
			//                     "description": "\u003cp\u003eCatalog.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 0,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//                     "maximum": 65535,
			//                     "minimum": 1,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Catalog",
			//                   "Host",
			//                   "Port"
			//                 ],
			//                 "type": "object"
			//               },
			//               "RdsParameters": {
			//                 "description": "\u003cp\u003eAmazon RDS parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Database": {
			//                     "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "InstanceId": {
			//                     "description": "\u003cp\u003eInstance ID.\u003c/p\u003e",
			//                     "maxLength": 64,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database",
			//                   "InstanceId"
			//                 ],
			//                 "type": "object"
			//               },
			//               "RedshiftParameters": {
			//                 "description": "\u003cp\u003eAmazon Redshift parameters. The \u003ccode\u003eClusterId\u003c/code\u003e field can be blank if\n            \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are both set. The \u003ccode\u003eHost\u003c/code\u003e and\n            \u003ccode\u003ePort\u003c/code\u003e fields can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e field is set.\u003c/p\u003e",
			//                 "properties": {
			//                   "ClusterId": {
			//                     "description": "\u003cp\u003eCluster ID. This field can be blank if the \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are\n            provided.\u003c/p\u003e",
			//                     "maxLength": 64,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Database": {
			//                     "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost. This field can be blank if \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "description": "\u003cp\u003ePort. This field can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
			//                     "maximum": 65535,
			//                     "minimum": 0,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database"
			//                 ],
			//                 "type": "object"
			//               },
			//               "S3Parameters": {
			//                 "description": "\u003cp\u003eS3 parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "ManifestFileLocation": {
			//                     "description": "\u003cp\u003eAmazon S3 manifest file location.\u003c/p\u003e",
			//                     "properties": {
			//                       "Bucket": {
			//                         "description": "\u003cp\u003eAmazon S3 bucket.\u003c/p\u003e",
			//                         "maxLength": 1024,
			//                         "minLength": 1,
			//                         "type": "string"
			//                       },
			//                       "Key": {
			//                         "description": "\u003cp\u003eAmazon S3 key that identifies an object.\u003c/p\u003e",
			//                         "maxLength": 1024,
			//                         "minLength": 1,
			//                         "type": "string"
			//                       }
			//                     },
			//                     "required": [
			//                       "Bucket",
			//                       "Key"
			//                     ],
			//                     "type": "object"
			//                   }
			//                 },
			//                 "required": [
			//                   "ManifestFileLocation"
			//                 ],
			//                 "type": "object"
			//               },
			//               "SnowflakeParameters": {
			//                 "description": "\u003cp\u003eSnowflake parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Database": {
			//                     "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Warehouse": {
			//                     "description": "\u003cp\u003eWarehouse.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 0,
			//                     "type": "string"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database",
			//                   "Host",
			//                   "Warehouse"
			//                 ],
			//                 "type": "object"
			//               },
			//               "SparkParameters": {
			//                 "description": "\u003cp\u003eSpark parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//                     "maximum": 65535,
			//                     "minimum": 1,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Host",
			//                   "Port"
			//                 ],
			//                 "type": "object"
			//               },
			//               "SqlServerParameters": {
			//                 "description": "\u003cp\u003eSQL Server parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Database": {
			//                     "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//                     "maximum": 65535,
			//                     "minimum": 1,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database",
			//                   "Host",
			//                   "Port"
			//                 ],
			//                 "type": "object"
			//               },
			//               "TeradataParameters": {
			//                 "description": "\u003cp\u003eTeradata parameters.\u003c/p\u003e",
			//                 "properties": {
			//                   "Database": {
			//                     "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//                     "maxLength": 128,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Host": {
			//                     "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//                     "maxLength": 256,
			//                     "minLength": 1,
			//                     "type": "string"
			//                   },
			//                   "Port": {
			//                     "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//                     "maximum": 65535,
			//                     "minimum": 1,
			//                     "type": "number"
			//                   }
			//                 },
			//                 "required": [
			//                   "Database",
			//                   "Host",
			//                   "Port"
			//                 ],
			//                 "type": "object"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "maxItems": 50,
			//           "minItems": 1,
			//           "type": "array"
			//         },
			//         "Password": {
			//           "description": "\u003cp\u003ePassword.\u003c/p\u003e",
			//           "maxLength": 1024,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Username": {
			//           "description": "\u003cp\u003eUser name.\u003c/p\u003e",
			//           "maxLength": 64,
			//           "minLength": 1,
			//           "type": "string"
			//         }
			//       },
			//       "required": [
			//         "Password",
			//         "Username"
			//       ],
			//       "type": "object"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "<p>Data source credentials. This is a variant type structure. For this structure to be\n            valid, only one of the attributes can be non-null.</p>",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"copy_source_arn": {
						// Property: CopySourceArn
						Description: "<p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you\n            want to use. When <code>CopySourceArn</code> is not null, the credential pair from the\n            data source in the ARN is used as the credentials for the\n            <code>DataSourceCredentials</code> structure.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
					"credential_pair": {
						// Property: CredentialPair
						Description: "<p>The combination of user name and password that are used as credentials.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"alternate_data_source_parameters": {
									// Property: AlternateDataSourceParameters
									Description: "<p>A set of alternate data source parameters that you want to share for these\n            credentials. The credentials are applied in tandem with the data source parameters when\n            you copy a data source by using a create or update request. The API operation compares\n            the <code>DataSourceParameters</code> structure that's in the request with the\n            structures in the <code>AlternateDataSourceParameters</code> allow list. If the\n            structures are an exact match, the request is allowed to use the new data source with\n            the existing credentials. If the <code>AlternateDataSourceParameters</code> list is\n            null, the <code>DataSourceParameters</code> originally used with these\n                <code>Credentials</code> is automatically allowed.</p>",
									Attributes: tfsdk.ListNestedAttributes(
										map[string]tfsdk.Attribute{
											"amazon_elasticsearch_parameters": {
												// Property: AmazonElasticsearchParameters
												Description: "<p>Amazon Elasticsearch Service parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"domain": {
															// Property: Domain
															Description: "<p>The Amazon Elasticsearch Service domain.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"athena_parameters": {
												// Property: AthenaParameters
												Description: "<p>Amazon Athena parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"work_group": {
															// Property: WorkGroup
															Description: "<p>The workgroup that Amazon Athena uses.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"aurora_parameters": {
												// Property: AuroraParameters
												Description: "<p>Amazon Aurora parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"database": {
															// Property: Database
															Description: "<p>Database.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"host": {
															// Property: Host
															Description: "<p>Host.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"port": {
															// Property: Port
															Description: "<p>Port.</p>",
															Type:        types.NumberType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"aurora_postgre_sql_parameters": {
												// Property: AuroraPostgreSqlParameters
												Description: "<p>Amazon Aurora with PostgreSQL compatibility parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"database": {
															// Property: Database
															Description: "<p>Database.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"host": {
															// Property: Host
															Description: "<p>Host.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"port": {
															// Property: Port
															Description: "<p>Port.</p>",
															Type:        types.NumberType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"maria_db_parameters": {
												// Property: MariaDbParameters
												Description: "<p>MariaDB parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"database": {
															// Property: Database
															Description: "<p>Database.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"host": {
															// Property: Host
															Description: "<p>Host.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"port": {
															// Property: Port
															Description: "<p>Port.</p>",
															Type:        types.NumberType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"my_sql_parameters": {
												// Property: MySqlParameters
												Description: "<p>MySQL parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"database": {
															// Property: Database
															Description: "<p>Database.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"host": {
															// Property: Host
															Description: "<p>Host.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"port": {
															// Property: Port
															Description: "<p>Port.</p>",
															Type:        types.NumberType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"oracle_parameters": {
												// Property: OracleParameters
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"database": {
															// Property: Database
															Type:     types.StringType,
															Computed: true,
														},
														"host": {
															// Property: Host
															Type:     types.StringType,
															Computed: true,
														},
														"port": {
															// Property: Port
															Type:     types.NumberType,
															Computed: true,
														},
													},
												),
												Computed: true,
											},
											"postgre_sql_parameters": {
												// Property: PostgreSqlParameters
												Description: "<p>PostgreSQL parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"database": {
															// Property: Database
															Description: "<p>Database.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"host": {
															// Property: Host
															Description: "<p>Host.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"port": {
															// Property: Port
															Description: "<p>Port.</p>",
															Type:        types.NumberType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"presto_parameters": {
												// Property: PrestoParameters
												Description: "<p>Presto parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"catalog": {
															// Property: Catalog
															Description: "<p>Catalog.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"host": {
															// Property: Host
															Description: "<p>Host.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"port": {
															// Property: Port
															Description: "<p>Port.</p>",
															Type:        types.NumberType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"rds_parameters": {
												// Property: RdsParameters
												Description: "<p>Amazon RDS parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"database": {
															// Property: Database
															Description: "<p>Database.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"instance_id": {
															// Property: InstanceId
															Description: "<p>Instance ID.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"redshift_parameters": {
												// Property: RedshiftParameters
												Description: "<p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if\n            <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and\n            <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"cluster_id": {
															// Property: ClusterId
															Description: "<p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are\n            provided.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"database": {
															// Property: Database
															Description: "<p>Database.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"host": {
															// Property: Host
															Description: "<p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"port": {
															// Property: Port
															Description: "<p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>",
															Type:        types.NumberType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"s3_parameters": {
												// Property: S3Parameters
												Description: "<p>S3 parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"manifest_file_location": {
															// Property: ManifestFileLocation
															Description: "<p>Amazon S3 manifest file location.</p>",
															Attributes: tfsdk.SingleNestedAttributes(
																map[string]tfsdk.Attribute{
																	"bucket": {
																		// Property: Bucket
																		Description: "<p>Amazon S3 bucket.</p>",
																		Type:        types.StringType,
																		Computed:    true,
																	},
																	"key": {
																		// Property: Key
																		Description: "<p>Amazon S3 key that identifies an object.</p>",
																		Type:        types.StringType,
																		Computed:    true,
																	},
																},
															),
															Computed: true,
														},
													},
												),
												Computed: true,
											},
											"snowflake_parameters": {
												// Property: SnowflakeParameters
												Description: "<p>Snowflake parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"database": {
															// Property: Database
															Description: "<p>Database.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"host": {
															// Property: Host
															Description: "<p>Host.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"warehouse": {
															// Property: Warehouse
															Description: "<p>Warehouse.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"spark_parameters": {
												// Property: SparkParameters
												Description: "<p>Spark parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"host": {
															// Property: Host
															Description: "<p>Host.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"port": {
															// Property: Port
															Description: "<p>Port.</p>",
															Type:        types.NumberType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"sql_server_parameters": {
												// Property: SqlServerParameters
												Description: "<p>SQL Server parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"database": {
															// Property: Database
															Description: "<p>Database.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"host": {
															// Property: Host
															Description: "<p>Host.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"port": {
															// Property: Port
															Description: "<p>Port.</p>",
															Type:        types.NumberType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
											"teradata_parameters": {
												// Property: TeradataParameters
												Description: "<p>Teradata parameters.</p>",
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"database": {
															// Property: Database
															Description: "<p>Database.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"host": {
															// Property: Host
															Description: "<p>Host.</p>",
															Type:        types.StringType,
															Computed:    true,
														},
														"port": {
															// Property: Port
															Description: "<p>Port.</p>",
															Type:        types.NumberType,
															Computed:    true,
														},
													},
												),
												Computed: true,
											},
										},
										tfsdk.ListNestedAttributesOptions{},
									),
									Computed: true,
								},
								"password": {
									// Property: Password
									Description: "<p>Password.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"username": {
									// Property: Username
									Description: "<p>User name.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"data_source_id": {
			// Property: DataSourceId
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"data_source_parameters": {
			// Property: DataSourceParameters
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe parameters that Amazon QuickSight uses to connect to your underlying data source.\n            This is a variant type structure. For this structure to be valid, only one of the\n            attributes can be non-null.\u003c/p\u003e",
			//   "properties": {
			//     "AmazonElasticsearchParameters": {
			//       "description": "\u003cp\u003eAmazon Elasticsearch Service parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Domain": {
			//           "description": "\u003cp\u003eThe Amazon Elasticsearch Service domain.\u003c/p\u003e",
			//           "maxLength": 64,
			//           "minLength": 1,
			//           "type": "string"
			//         }
			//       },
			//       "required": [
			//         "Domain"
			//       ],
			//       "type": "object"
			//     },
			//     "AthenaParameters": {
			//       "description": "\u003cp\u003eAmazon Athena parameters.\u003c/p\u003e",
			//       "properties": {
			//         "WorkGroup": {
			//           "description": "\u003cp\u003eThe workgroup that Amazon Athena uses.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "AuroraParameters": {
			//       "description": "\u003cp\u003eAmazon Aurora parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Database": {
			//           "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//           "maximum": 65535,
			//           "minimum": 1,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Database",
			//         "Host",
			//         "Port"
			//       ],
			//       "type": "object"
			//     },
			//     "AuroraPostgreSqlParameters": {
			//       "description": "\u003cp\u003eAmazon Aurora with PostgreSQL compatibility parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Database": {
			//           "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//           "maximum": 65535,
			//           "minimum": 1,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Database",
			//         "Host",
			//         "Port"
			//       ],
			//       "type": "object"
			//     },
			//     "MariaDbParameters": {
			//       "description": "\u003cp\u003eMariaDB parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Database": {
			//           "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//           "maximum": 65535,
			//           "minimum": 1,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Database",
			//         "Host",
			//         "Port"
			//       ],
			//       "type": "object"
			//     },
			//     "MySqlParameters": {
			//       "description": "\u003cp\u003eMySQL parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Database": {
			//           "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//           "maximum": 65535,
			//           "minimum": 1,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Database",
			//         "Host",
			//         "Port"
			//       ],
			//       "type": "object"
			//     },
			//     "OracleParameters": {
			//       "properties": {
			//         "Database": {
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "maximum": 65535,
			//           "minimum": 1,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Database",
			//         "Host",
			//         "Port"
			//       ],
			//       "type": "object"
			//     },
			//     "PostgreSqlParameters": {
			//       "description": "\u003cp\u003ePostgreSQL parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Database": {
			//           "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//           "maximum": 65535,
			//           "minimum": 1,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Database",
			//         "Host",
			//         "Port"
			//       ],
			//       "type": "object"
			//     },
			//     "PrestoParameters": {
			//       "description": "\u003cp\u003ePresto parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Catalog": {
			//           "description": "\u003cp\u003eCatalog.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 0,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//           "maximum": 65535,
			//           "minimum": 1,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Catalog",
			//         "Host",
			//         "Port"
			//       ],
			//       "type": "object"
			//     },
			//     "RdsParameters": {
			//       "description": "\u003cp\u003eAmazon RDS parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Database": {
			//           "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "InstanceId": {
			//           "description": "\u003cp\u003eInstance ID.\u003c/p\u003e",
			//           "maxLength": 64,
			//           "minLength": 1,
			//           "type": "string"
			//         }
			//       },
			//       "required": [
			//         "Database",
			//         "InstanceId"
			//       ],
			//       "type": "object"
			//     },
			//     "RedshiftParameters": {
			//       "description": "\u003cp\u003eAmazon Redshift parameters. The \u003ccode\u003eClusterId\u003c/code\u003e field can be blank if\n            \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are both set. The \u003ccode\u003eHost\u003c/code\u003e and\n            \u003ccode\u003ePort\u003c/code\u003e fields can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e field is set.\u003c/p\u003e",
			//       "properties": {
			//         "ClusterId": {
			//           "description": "\u003cp\u003eCluster ID. This field can be blank if the \u003ccode\u003eHost\u003c/code\u003e and \u003ccode\u003ePort\u003c/code\u003e are\n            provided.\u003c/p\u003e",
			//           "maxLength": 64,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Database": {
			//           "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "description": "\u003cp\u003eHost. This field can be blank if \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "description": "\u003cp\u003ePort. This field can be blank if the \u003ccode\u003eClusterId\u003c/code\u003e is provided.\u003c/p\u003e",
			//           "maximum": 65535,
			//           "minimum": 0,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Database"
			//       ],
			//       "type": "object"
			//     },
			//     "S3Parameters": {
			//       "description": "\u003cp\u003eS3 parameters.\u003c/p\u003e",
			//       "properties": {
			//         "ManifestFileLocation": {
			//           "description": "\u003cp\u003eAmazon S3 manifest file location.\u003c/p\u003e",
			//           "properties": {
			//             "Bucket": {
			//               "description": "\u003cp\u003eAmazon S3 bucket.\u003c/p\u003e",
			//               "maxLength": 1024,
			//               "minLength": 1,
			//               "type": "string"
			//             },
			//             "Key": {
			//               "description": "\u003cp\u003eAmazon S3 key that identifies an object.\u003c/p\u003e",
			//               "maxLength": 1024,
			//               "minLength": 1,
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Bucket",
			//             "Key"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "required": [
			//         "ManifestFileLocation"
			//       ],
			//       "type": "object"
			//     },
			//     "SnowflakeParameters": {
			//       "description": "\u003cp\u003eSnowflake parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Database": {
			//           "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Warehouse": {
			//           "description": "\u003cp\u003eWarehouse.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 0,
			//           "type": "string"
			//         }
			//       },
			//       "required": [
			//         "Database",
			//         "Host",
			//         "Warehouse"
			//       ],
			//       "type": "object"
			//     },
			//     "SparkParameters": {
			//       "description": "\u003cp\u003eSpark parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Host": {
			//           "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//           "maximum": 65535,
			//           "minimum": 1,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Host",
			//         "Port"
			//       ],
			//       "type": "object"
			//     },
			//     "SqlServerParameters": {
			//       "description": "\u003cp\u003eSQL Server parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Database": {
			//           "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//           "maximum": 65535,
			//           "minimum": 1,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Database",
			//         "Host",
			//         "Port"
			//       ],
			//       "type": "object"
			//     },
			//     "TeradataParameters": {
			//       "description": "\u003cp\u003eTeradata parameters.\u003c/p\u003e",
			//       "properties": {
			//         "Database": {
			//           "description": "\u003cp\u003eDatabase.\u003c/p\u003e",
			//           "maxLength": 128,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Host": {
			//           "description": "\u003cp\u003eHost.\u003c/p\u003e",
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "Port": {
			//           "description": "\u003cp\u003ePort.\u003c/p\u003e",
			//           "maximum": 65535,
			//           "minimum": 1,
			//           "type": "number"
			//         }
			//       },
			//       "required": [
			//         "Database",
			//         "Host",
			//         "Port"
			//       ],
			//       "type": "object"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "<p>The parameters that Amazon QuickSight uses to connect to your underlying data source.\n            This is a variant type structure. For this structure to be valid, only one of the\n            attributes can be non-null.</p>",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"amazon_elasticsearch_parameters": {
						// Property: AmazonElasticsearchParameters
						Description: "<p>Amazon Elasticsearch Service parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"domain": {
									// Property: Domain
									Description: "<p>The Amazon Elasticsearch Service domain.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"athena_parameters": {
						// Property: AthenaParameters
						Description: "<p>Amazon Athena parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"work_group": {
									// Property: WorkGroup
									Description: "<p>The workgroup that Amazon Athena uses.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"aurora_parameters": {
						// Property: AuroraParameters
						Description: "<p>Amazon Aurora parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"aurora_postgre_sql_parameters": {
						// Property: AuroraPostgreSqlParameters
						Description: "<p>Amazon Aurora with PostgreSQL compatibility parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"maria_db_parameters": {
						// Property: MariaDbParameters
						Description: "<p>MariaDB parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"my_sql_parameters": {
						// Property: MySqlParameters
						Description: "<p>MySQL parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"oracle_parameters": {
						// Property: OracleParameters
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Type:     types.StringType,
									Computed: true,
								},
								"host": {
									// Property: Host
									Type:     types.StringType,
									Computed: true,
								},
								"port": {
									// Property: Port
									Type:     types.NumberType,
									Computed: true,
								},
							},
						),
						Computed: true,
					},
					"postgre_sql_parameters": {
						// Property: PostgreSqlParameters
						Description: "<p>PostgreSQL parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"presto_parameters": {
						// Property: PrestoParameters
						Description: "<p>Presto parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"catalog": {
									// Property: Catalog
									Description: "<p>Catalog.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"rds_parameters": {
						// Property: RdsParameters
						Description: "<p>Amazon RDS parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"instance_id": {
									// Property: InstanceId
									Description: "<p>Instance ID.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"redshift_parameters": {
						// Property: RedshiftParameters
						Description: "<p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if\n            <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and\n            <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"cluster_id": {
									// Property: ClusterId
									Description: "<p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are\n            provided.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"s3_parameters": {
						// Property: S3Parameters
						Description: "<p>S3 parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"manifest_file_location": {
									// Property: ManifestFileLocation
									Description: "<p>Amazon S3 manifest file location.</p>",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"bucket": {
												// Property: Bucket
												Description: "<p>Amazon S3 bucket.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
											"key": {
												// Property: Key
												Description: "<p>Amazon S3 key that identifies an object.</p>",
												Type:        types.StringType,
												Computed:    true,
											},
										},
									),
									Computed: true,
								},
							},
						),
						Computed: true,
					},
					"snowflake_parameters": {
						// Property: SnowflakeParameters
						Description: "<p>Snowflake parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"warehouse": {
									// Property: Warehouse
									Description: "<p>Warehouse.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"spark_parameters": {
						// Property: SparkParameters
						Description: "<p>Spark parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"sql_server_parameters": {
						// Property: SqlServerParameters
						Description: "<p>SQL Server parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
					"teradata_parameters": {
						// Property: TeradataParameters
						Description: "<p>Teradata parameters.</p>",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"database": {
									// Property: Database
									Description: "<p>Database.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"host": {
									// Property: Host
									Description: "<p>Host.</p>",
									Type:        types.StringType,
									Computed:    true,
								},
								"port": {
									// Property: Port
									Description: "<p>Port.</p>",
									Type:        types.NumberType,
									Computed:    true,
								},
							},
						),
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"error_info": {
			// Property: ErrorInfo
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eError information for the data source creation or update.\u003c/p\u003e",
			//   "properties": {
			//     "Message": {
			//       "description": "\u003cp\u003eError message.\u003c/p\u003e",
			//       "type": "string"
			//     },
			//     "Type": {
			//       "enum": [
			//         "ACCESS_DENIED",
			//         "COPY_SOURCE_NOT_FOUND",
			//         "TIMEOUT",
			//         "ENGINE_VERSION_NOT_SUPPORTED",
			//         "UNKNOWN_HOST",
			//         "GENERIC_SQL_FAILURE",
			//         "CONFLICT",
			//         "UNKNOWN"
			//       ],
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "<p>Error information for the data source creation or update.</p>",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"message": {
						// Property: Message
						Description: "<p>Error message.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
					"type": {
						// Property: Type
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"last_updated_time": {
			// Property: LastUpdatedTime
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eThe last time that this data source was updated.\u003c/p\u003e",
			//   "format": "date-time",
			//   "type": "string"
			// }
			Description: "<p>The last time that this data source was updated.</p>",
			Type:        types.StringType,
			Computed:    true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eA display name for the data source.\u003c/p\u003e",
			//   "maxLength": 128,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "<p>A display name for the data source.</p>",
			Type:        types.StringType,
			Computed:    true,
		},
		"permissions": {
			// Property: Permissions
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eA list of resource permissions on the data source.\u003c/p\u003e",
			//   "items": {
			//     "description": "\u003cp\u003ePermission for the resource.\u003c/p\u003e",
			//     "properties": {
			//       "Actions": {
			//         "description": "\u003cp\u003eThe IAM action to grant or revoke permissions on.\u003c/p\u003e",
			//         "items": {
			//           "type": "string"
			//         },
			//         "maxItems": 16,
			//         "minItems": 1,
			//         "type": "array"
			//       },
			//       "Principal": {
			//         "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the principal. This can be one of the\n            following:\u003c/p\u003e\n        \u003cul\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)\u003c/p\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)\u003c/p\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an AWS account root: This is an IAM ARN rather than a QuickSight\n                    ARN. Use this option only to share resources (templates) across AWS accounts.\n                    (This is less common.) \u003c/p\u003e\n            \u003c/li\u003e\n         \u003c/ul\u003e",
			//         "maxLength": 256,
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Actions",
			//       "Principal"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 64,
			//   "minItems": 1,
			//   "type": "array"
			// }
			Description: "<p>A list of resource permissions on the data source.</p>",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"actions": {
						// Property: Actions
						Description: "<p>The IAM action to grant or revoke permissions on.</p>",
						Type:        types.ListType{ElemType: types.StringType},
						Computed:    true,
					},
					"principal": {
						// Property: Principal
						Description: "<p>The Amazon Resource Name (ARN) of the principal. This can be one of the\n            following:</p>\n        <ul>\n            <li>\n                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>\n            </li>\n            <li>\n                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>\n            </li>\n            <li>\n                <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight\n                    ARN. Use this option only to share resources (templates) across AWS accounts.\n                    (This is less common.) </p>\n            </li>\n         </ul>",
						Type:        types.StringType,
						Computed:    true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
		"ssl_properties": {
			// Property: SslProperties
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eSecure Socket Layer (SSL) properties that apply when QuickSight connects to your\n            underlying data source.\u003c/p\u003e",
			//   "properties": {
			//     "DisableSsl": {
			//       "description": "\u003cp\u003eA Boolean option to control whether SSL should be disabled.\u003c/p\u003e",
			//       "type": "boolean"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "<p>Secure Socket Layer (SSL) properties that apply when QuickSight connects to your\n            underlying data source.</p>",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"disable_ssl": {
						// Property: DisableSsl
						Description: "<p>A Boolean option to control whether SSL should be disabled.</p>",
						Type:        types.BoolType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"status": {
			// Property: Status
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "CREATION_IN_PROGRESS",
			//     "CREATION_SUCCESSFUL",
			//     "CREATION_FAILED",
			//     "UPDATE_IN_PROGRESS",
			//     "UPDATE_SUCCESSFUL",
			//     "UPDATE_FAILED",
			//     "DELETED"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eContains a map of the key-value pairs for the resource tag or tags assigned to the data source.\u003c/p\u003e",
			//   "items": {
			//     "description": "\u003cp\u003eThe key or keys of the key-value pairs for the resource tag or tags assigned to the\n            resource.\u003c/p\u003e",
			//     "properties": {
			//       "Key": {
			//         "description": "\u003cp\u003eTag key.\u003c/p\u003e",
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "description": "\u003cp\u003eTag value.\u003c/p\u003e",
			//         "maxLength": 256,
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 200,
			//   "minItems": 1,
			//   "type": "array"
			// }
			Description: "<p>Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.</p>",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "<p>Tag key.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
					"value": {
						// Property: Value
						Description: "<p>Tag value.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
		"type": {
			// Property: Type
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "ADOBE_ANALYTICS",
			//     "AMAZON_ELASTICSEARCH",
			//     "ATHENA",
			//     "AURORA",
			//     "AURORA_POSTGRESQL",
			//     "AWS_IOT_ANALYTICS",
			//     "GITHUB",
			//     "JIRA",
			//     "MARIADB",
			//     "MYSQL",
			//     "ORACLE",
			//     "POSTGRESQL",
			//     "PRESTO",
			//     "REDSHIFT",
			//     "S3",
			//     "SALESFORCE",
			//     "SERVICENOW",
			//     "SNOWFLAKE",
			//     "SPARK",
			//     "SQLSERVER",
			//     "TERADATA",
			//     "TWITTER",
			//     "TIMESTREAM"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"vpc_connection_properties": {
			// Property: VpcConnectionProperties
			// CloudFormation resource type schema:
			// {
			//   "description": "\u003cp\u003eVPC connection properties.\u003c/p\u003e",
			//   "properties": {
			//     "VpcConnectionArn": {
			//       "description": "\u003cp\u003eThe Amazon Resource Name (ARN) for the VPC connection.\u003c/p\u003e",
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "VpcConnectionArn"
			//   ],
			//   "type": "object"
			// }
			Description: "<p>VPC connection properties.</p>",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"vpc_connection_arn": {
						// Property: VpcConnectionArn
						Description: "<p>The Amazon Resource Name (ARN) for the VPC connection.</p>",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::QuickSight::DataSource",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::QuickSight::DataSource").WithTerraformTypeName("awscc_quicksight_data_source")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"actions":                          "Actions",
		"alternate_data_source_parameters": "AlternateDataSourceParameters",
		"amazon_elasticsearch_parameters":  "AmazonElasticsearchParameters",
		"arn":                              "Arn",
		"athena_parameters":                "AthenaParameters",
		"aurora_parameters":                "AuroraParameters",
		"aurora_postgre_sql_parameters":    "AuroraPostgreSqlParameters",
		"aws_account_id":                   "AwsAccountId",
		"bucket":                           "Bucket",
		"catalog":                          "Catalog",
		"cluster_id":                       "ClusterId",
		"copy_source_arn":                  "CopySourceArn",
		"created_time":                     "CreatedTime",
		"credential_pair":                  "CredentialPair",
		"credentials":                      "Credentials",
		"data_source_id":                   "DataSourceId",
		"data_source_parameters":           "DataSourceParameters",
		"database":                         "Database",
		"disable_ssl":                      "DisableSsl",
		"domain":                           "Domain",
		"error_info":                       "ErrorInfo",
		"host":                             "Host",
		"instance_id":                      "InstanceId",
		"key":                              "Key",
		"last_updated_time":                "LastUpdatedTime",
		"manifest_file_location":           "ManifestFileLocation",
		"maria_db_parameters":              "MariaDbParameters",
		"message":                          "Message",
		"my_sql_parameters":                "MySqlParameters",
		"name":                             "Name",
		"oracle_parameters":                "OracleParameters",
		"password":                         "Password",
		"permissions":                      "Permissions",
		"port":                             "Port",
		"postgre_sql_parameters":           "PostgreSqlParameters",
		"presto_parameters":                "PrestoParameters",
		"principal":                        "Principal",
		"rds_parameters":                   "RdsParameters",
		"redshift_parameters":              "RedshiftParameters",
		"s3_parameters":                    "S3Parameters",
		"snowflake_parameters":             "SnowflakeParameters",
		"spark_parameters":                 "SparkParameters",
		"sql_server_parameters":            "SqlServerParameters",
		"ssl_properties":                   "SslProperties",
		"status":                           "Status",
		"tags":                             "Tags",
		"teradata_parameters":              "TeradataParameters",
		"type":                             "Type",
		"username":                         "Username",
		"value":                            "Value",
		"vpc_connection_arn":               "VpcConnectionArn",
		"vpc_connection_properties":        "VpcConnectionProperties",
		"warehouse":                        "Warehouse",
		"work_group":                       "WorkGroup",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_quicksight_data_source", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
