// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package quicksight

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_quicksight_vpc_connection", vPCConnectionDataSource)
}

// vPCConnectionDataSource returns the Terraform awscc_quicksight_vpc_connection data source.
// This Terraform data source corresponds to the CloudFormation AWS::QuickSight::VPCConnection resource.
func vPCConnectionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the VPC connection.\u003c/p\u003e",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The Amazon Resource Name (ARN) of the VPC connection.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "AVAILABLE",
		//	    "UNAVAILABLE",
		//	    "PARTIALLY_AVAILABLE"
		//	  ],
		//	  "type": "string"
		//	}
		"availability_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: AwsAccountId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 12,
		//	  "minLength": 12,
		//	  "pattern": "^[0-9]{12}$",
		//	  "type": "string"
		//	}
		"aws_account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe time that the VPC connection was created.\u003c/p\u003e",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "<p>The time that the VPC connection was created.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DnsResolvers
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"dns_resolvers": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastUpdatedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe time that the VPC connection was last updated.\u003c/p\u003e",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"last_updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "<p>The time that the VPC connection was last updated.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkInterfaces
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eA list of network interfaces.\u003c/p\u003e",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "\u003cp\u003eThe structure that contains information about a network interface.\u003c/p\u003e",
		//	    "properties": {
		//	      "AvailabilityZone": {
		//	        "description": "\u003cp\u003eThe availability zone that the network interface resides in.\u003c/p\u003e",
		//	        "type": "string"
		//	      },
		//	      "ErrorMessage": {
		//	        "description": "\u003cp\u003eAn error message.\u003c/p\u003e",
		//	        "type": "string"
		//	      },
		//	      "NetworkInterfaceId": {
		//	        "description": "\u003cp\u003eThe network interface ID.\u003c/p\u003e",
		//	        "maxLength": 255,
		//	        "minLength": 0,
		//	        "pattern": "^eni-[0-9a-z]*$",
		//	        "type": "string"
		//	      },
		//	      "Status": {
		//	        "enum": [
		//	          "CREATING",
		//	          "AVAILABLE",
		//	          "CREATION_FAILED",
		//	          "UPDATING",
		//	          "UPDATE_FAILED",
		//	          "DELETING",
		//	          "DELETED",
		//	          "DELETION_FAILED",
		//	          "DELETION_SCHEDULED",
		//	          "ATTACHMENT_FAILED_ROLLBACK_FAILED"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "SubnetId": {
		//	        "description": "\u003cp\u003eThe subnet ID associated with the network interface.\u003c/p\u003e",
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "pattern": "^subnet-[0-9a-z]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 15,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"network_interfaces": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AvailabilityZone
					"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>The availability zone that the network interface resides in.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ErrorMessage
					"error_message": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>An error message.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: NetworkInterfaceId
					"network_interface_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>The network interface ID.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Status
					"status": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SubnetId
					"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>The subnet ID associated with the network interface.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "<p>A list of network interfaces.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SecurityGroupIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "maxLength": 255,
		//	    "minLength": 1,
		//	    "pattern": "^sg-[0-9a-z]*$",
		//	    "type": "string"
		//	  },
		//	  "maxItems": 16,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "CREATION_IN_PROGRESS",
		//	    "CREATION_SUCCESSFUL",
		//	    "CREATION_FAILED",
		//	    "UPDATE_IN_PROGRESS",
		//	    "UPDATE_SUCCESSFUL",
		//	    "UPDATE_FAILED",
		//	    "DELETION_IN_PROGRESS",
		//	    "DELETION_FAILED",
		//	    "DELETED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SubnetIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "maxLength": 255,
		//	    "minLength": 1,
		//	    "pattern": "^subnet-[0-9a-z]*$",
		//	    "type": "string"
		//	  },
		//	  "maxItems": 15,
		//	  "minItems": 2,
		//	  "type": "array"
		//	}
		"subnet_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "\u003cp\u003eThe key or keys of the key-value pairs for the resource tag or tags assigned to the\n            resource.\u003c/p\u003e",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "\u003cp\u003eTag key.\u003c/p\u003e",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "\u003cp\u003eTag value.\u003c/p\u003e",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>Tag key.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>Tag value.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: VPCConnectionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 1000,
		//	  "minLength": 1,
		//	  "pattern": "[\\w\\-]+",
		//	  "type": "string"
		//	}
		"vpc_connection_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: VPCId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe Amazon EC2 VPC ID associated with the VPC connection.\u003c/p\u003e",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The Amazon EC2 VPC ID associated with the VPC connection.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::QuickSight::VPCConnection",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::QuickSight::VPCConnection").WithTerraformTypeName("awscc_quicksight_vpc_connection")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                  "Arn",
		"availability_status":  "AvailabilityStatus",
		"availability_zone":    "AvailabilityZone",
		"aws_account_id":       "AwsAccountId",
		"created_time":         "CreatedTime",
		"dns_resolvers":        "DnsResolvers",
		"error_message":        "ErrorMessage",
		"key":                  "Key",
		"last_updated_time":    "LastUpdatedTime",
		"name":                 "Name",
		"network_interface_id": "NetworkInterfaceId",
		"network_interfaces":   "NetworkInterfaces",
		"role_arn":             "RoleArn",
		"security_group_ids":   "SecurityGroupIds",
		"status":               "Status",
		"subnet_id":            "SubnetId",
		"subnet_ids":           "SubnetIds",
		"tags":                 "Tags",
		"value":                "Value",
		"vpc_connection_id":    "VPCConnectionId",
		"vpc_id":               "VPCId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
