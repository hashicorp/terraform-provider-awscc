// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package quicksight

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_quicksight_analysis", analysisDataSource)
}

// analysisDataSource returns the Terraform awscc_quicksight_analysis data source.
// This Terraform data source corresponds to the CloudFormation AWS::QuickSight::Analysis resource.
func analysisDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AnalysisId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "pattern": "[\\w\\-]+",
		//	  "type": "string"
		//	}
		"analysis_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the analysis.\u003c/p\u003e",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The Amazon Resource Name (ARN) of the analysis.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AwsAccountId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 12,
		//	  "minLength": 12,
		//	  "pattern": "^[0-9]{12}$",
		//	  "type": "string"
		//	}
		"aws_account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe time that the analysis was created.\u003c/p\u003e",
		//	  "format": "string",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The time that the analysis was created.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DataSetArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe ARNs of the datasets of the analysis.\u003c/p\u003e",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "maxItems": 100,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"data_set_arns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "<p>The ARNs of the datasets of the analysis.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Errors
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eErrors associated with the analysis.\u003c/p\u003e",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "\u003cp\u003eA metadata error structure for an analysis.\u003c/p\u003e",
		//	    "properties": {
		//	      "Message": {
		//	        "description": "\u003cp\u003eThe message associated with the analysis error.\u003c/p\u003e",
		//	        "pattern": ".*\\S.*",
		//	        "type": "string"
		//	      },
		//	      "Type": {
		//	        "enum": [
		//	          "ACCESS_DENIED",
		//	          "SOURCE_NOT_FOUND",
		//	          "DATA_SET_NOT_FOUND",
		//	          "INTERNAL_FAILURE",
		//	          "PARAMETER_VALUE_INCOMPATIBLE",
		//	          "PARAMETER_TYPE_INVALID",
		//	          "PARAMETER_NOT_FOUND",
		//	          "COLUMN_TYPE_MISMATCH",
		//	          "COLUMN_GEOGRAPHIC_ROLE_MISMATCH",
		//	          "COLUMN_REPLACEMENT_MISSING"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"errors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Message
					"message": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>The message associated with the analysis error.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "<p>Errors associated with the analysis.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastUpdatedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe time that the analysis was last updated.\u003c/p\u003e",
		//	  "format": "string",
		//	  "type": "string"
		//	}
		"last_updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The time that the analysis was last updated.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe descriptive name of the analysis.\u003c/p\u003e",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The descriptive name of the analysis.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Parameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "\u003cp\u003eA list of QuickSight parameters and the list's override values.\u003c/p\u003e",
		//	  "properties": {
		//	    "DateTimeParameters": {
		//	      "description": "\u003cp\u003eDate-time parameters.\u003c/p\u003e",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "\u003cp\u003eA date-time parameter.\u003c/p\u003e",
		//	        "properties": {
		//	          "Name": {
		//	            "description": "\u003cp\u003eA display name for the date-time parameter.\u003c/p\u003e",
		//	            "pattern": ".*\\S.*",
		//	            "type": "string"
		//	          },
		//	          "Values": {
		//	            "description": "\u003cp\u003eThe values for the date-time parameter.\u003c/p\u003e",
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name",
		//	          "Values"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 100,
		//	      "minItems": 0,
		//	      "type": "array"
		//	    },
		//	    "DecimalParameters": {
		//	      "description": "\u003cp\u003eDecimal parameters.\u003c/p\u003e",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "\u003cp\u003eA decimal parameter.\u003c/p\u003e",
		//	        "properties": {
		//	          "Name": {
		//	            "description": "\u003cp\u003eA display name for the decimal parameter.\u003c/p\u003e",
		//	            "pattern": ".*\\S.*",
		//	            "type": "string"
		//	          },
		//	          "Values": {
		//	            "description": "\u003cp\u003eThe values for the decimal parameter.\u003c/p\u003e",
		//	            "items": {
		//	              "type": "number"
		//	            },
		//	            "type": "array"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name",
		//	          "Values"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 100,
		//	      "minItems": 0,
		//	      "type": "array"
		//	    },
		//	    "IntegerParameters": {
		//	      "description": "\u003cp\u003eInteger parameters.\u003c/p\u003e",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "\u003cp\u003eAn integer parameter.\u003c/p\u003e",
		//	        "properties": {
		//	          "Name": {
		//	            "description": "\u003cp\u003eThe name of the integer parameter.\u003c/p\u003e",
		//	            "pattern": ".*\\S.*",
		//	            "type": "string"
		//	          },
		//	          "Values": {
		//	            "description": "\u003cp\u003eThe values for the integer parameter.\u003c/p\u003e",
		//	            "items": {
		//	              "type": "number"
		//	            },
		//	            "type": "array"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name",
		//	          "Values"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 100,
		//	      "minItems": 0,
		//	      "type": "array"
		//	    },
		//	    "StringParameters": {
		//	      "description": "\u003cp\u003eString parameters.\u003c/p\u003e",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "\u003cp\u003eA string parameter.\u003c/p\u003e",
		//	        "properties": {
		//	          "Name": {
		//	            "description": "\u003cp\u003eA display name for a string parameter.\u003c/p\u003e",
		//	            "pattern": ".*\\S.*",
		//	            "type": "string"
		//	          },
		//	          "Values": {
		//	            "description": "\u003cp\u003eThe values of a string parameter.\u003c/p\u003e",
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name",
		//	          "Values"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 100,
		//	      "minItems": 0,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DateTimeParameters
				"date_time_parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>A display name for the date-time parameter.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Values
							"values": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "<p>The values for the date-time parameter.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "<p>Date-time parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: DecimalParameters
				"decimal_parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>A display name for the decimal parameter.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Values
							"values": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.Float64Type,
								Description: "<p>The values for the decimal parameter.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "<p>Decimal parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IntegerParameters
				"integer_parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>The name of the integer parameter.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Values
							"values": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.Float64Type,
								Description: "<p>The values for the integer parameter.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "<p>Integer parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: StringParameters
				"string_parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "<p>A display name for a string parameter.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Values
							"values": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "<p>The values of a string parameter.</p>",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "<p>String parameters.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "<p>A list of QuickSight parameters and the list's override values.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Permissions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eA structure that describes the principals and the resource-level permissions on an\n            analysis. You can use the \u003ccode\u003ePermissions\u003c/code\u003e structure to grant permissions by\n            providing a list of AWS Identity and Access Management (IAM) action information for each\n            principal listed by Amazon Resource Name (ARN). \u003c/p\u003e\n\n        \u003cp\u003eTo specify no permissions, omit \u003ccode\u003ePermissions\u003c/code\u003e.\u003c/p\u003e",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "\u003cp\u003ePermission for the resource.\u003c/p\u003e",
		//	    "properties": {
		//	      "Actions": {
		//	        "description": "\u003cp\u003eThe IAM action to grant or revoke permissions on.\u003c/p\u003e",
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "maxItems": 16,
		//	        "minItems": 1,
		//	        "type": "array"
		//	      },
		//	      "Principal": {
		//	        "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the principal. This can be one of the\n            following:\u003c/p\u003e\n        \u003cul\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)\u003c/p\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)\u003c/p\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003cp\u003eThe ARN of an AWS account root: This is an IAM ARN rather than a QuickSight\n                    ARN. Use this option only to share resources (templates) across AWS accounts.\n                    (This is less common.) \u003c/p\u003e\n            \u003c/li\u003e\n         \u003c/ul\u003e",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Actions",
		//	      "Principal"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 64,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"permissions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Actions
					"actions": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "<p>The IAM action to grant or revoke permissions on.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Principal
					"principal": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>The Amazon Resource Name (ARN) of the principal. This can be one of the\n            following:</p>\n        <ul>\n            <li>\n                <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>\n            </li>\n            <li>\n                <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>\n            </li>\n            <li>\n                <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight\n                    ARN. Use this option only to share resources (templates) across AWS accounts.\n                    (This is less common.) </p>\n            </li>\n         </ul>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "<p>A structure that describes the principals and the resource-level permissions on an\n            analysis. You can use the <code>Permissions</code> structure to grant permissions by\n            providing a list of AWS Identity and Access Management (IAM) action information for each\n            principal listed by Amazon Resource Name (ARN). </p>\n\n        <p>To specify no permissions, omit <code>Permissions</code>.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Sheets
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eA list of the associated sheets with the unique identifier and name of each sheet.\u003c/p\u003e",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "\u003cp\u003eA \u003ci\u003esheet\u003c/i\u003e, which is an object that contains a set of visuals that\n            are viewed together on one page in the Amazon QuickSight console. Every analysis and dashboard\n            contains at least one sheet. Each sheet contains at least one visualization widget, for\n            example a chart, pivot table, or narrative insight. Sheets can be associated with other\n            components, such as controls, filters, and so on.\u003c/p\u003e",
		//	    "properties": {
		//	      "Name": {
		//	        "description": "\u003cp\u003eThe name of a sheet. This name is displayed on the sheet's tab in the QuickSight\n            console.\u003c/p\u003e",
		//	        "pattern": ".*\\S.*",
		//	        "type": "string"
		//	      },
		//	      "SheetId": {
		//	        "description": "\u003cp\u003eThe unique identifier associated with a sheet.\u003c/p\u003e",
		//	        "maxLength": 2048,
		//	        "minLength": 1,
		//	        "pattern": "[\\w\\-]+",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 20,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"sheets": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>The name of a sheet. This name is displayed on the sheet's tab in the QuickSight\n            console.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: SheetId
					"sheet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>The unique identifier associated with a sheet.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "<p>A list of the associated sheets with the unique identifier and name of each sheet.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceEntity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "\u003cp\u003eThe source entity of an analysis.\u003c/p\u003e",
		//	  "properties": {
		//	    "SourceTemplate": {
		//	      "additionalProperties": false,
		//	      "description": "\u003cp\u003eThe source template of an analysis.\u003c/p\u003e",
		//	      "properties": {
		//	        "Arn": {
		//	          "description": "\u003cp\u003eThe Amazon Resource Name (ARN) of the source template of an analysis.\u003c/p\u003e",
		//	          "type": "string"
		//	        },
		//	        "DataSetReferences": {
		//	          "description": "\u003cp\u003eThe dataset references of the source template of an analysis.\u003c/p\u003e",
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "\u003cp\u003eDataset reference.\u003c/p\u003e",
		//	            "properties": {
		//	              "DataSetArn": {
		//	                "description": "\u003cp\u003eDataset Amazon Resource Name (ARN).\u003c/p\u003e",
		//	                "type": "string"
		//	              },
		//	              "DataSetPlaceholder": {
		//	                "description": "\u003cp\u003eDataset placeholder.\u003c/p\u003e",
		//	                "pattern": ".*\\S.*",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "DataSetArn",
		//	              "DataSetPlaceholder"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "minItems": 1,
		//	          "type": "array"
		//	        }
		//	      },
		//	      "required": [
		//	        "Arn",
		//	        "DataSetReferences"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"source_entity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: SourceTemplate
				"source_template": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Arn
						"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "<p>The Amazon Resource Name (ARN) of the source template of an analysis.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DataSetReferences
						"data_set_references": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DataSetArn
									"data_set_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "<p>Dataset Amazon Resource Name (ARN).</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: DataSetPlaceholder
									"data_set_placeholder": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "<p>Dataset placeholder.</p>",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Description: "<p>The dataset references of the source template of an analysis.</p>",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "<p>The source template of an analysis.</p>",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "<p>The source entity of an analysis.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "CREATION_IN_PROGRESS",
		//	    "CREATION_SUCCESSFUL",
		//	    "CREATION_FAILED",
		//	    "UPDATE_IN_PROGRESS",
		//	    "UPDATE_SUCCESSFUL",
		//	    "UPDATE_FAILED",
		//	    "DELETED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eContains a map of the key-value pairs for the resource tag or tags assigned to the\n            analysis.\u003c/p\u003e",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "\u003cp\u003eThe key or keys of the key-value pairs for the resource tag or tags assigned to the\n            resource.\u003c/p\u003e",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "\u003cp\u003eTag key.\u003c/p\u003e",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "\u003cp\u003eTag value.\u003c/p\u003e",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>Tag key.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "<p>Tag value.</p>",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "<p>Contains a map of the key-value pairs for the resource tag or tags assigned to the\n            analysis.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ThemeArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "\u003cp\u003eThe ARN of the theme of the analysis.\u003c/p\u003e",
		//	  "type": "string"
		//	}
		"theme_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "<p>The ARN of the theme of the analysis.</p>",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::QuickSight::Analysis",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::QuickSight::Analysis").WithTerraformTypeName("awscc_quicksight_analysis")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"actions":              "Actions",
		"analysis_id":          "AnalysisId",
		"arn":                  "Arn",
		"aws_account_id":       "AwsAccountId",
		"created_time":         "CreatedTime",
		"data_set_arn":         "DataSetArn",
		"data_set_arns":        "DataSetArns",
		"data_set_placeholder": "DataSetPlaceholder",
		"data_set_references":  "DataSetReferences",
		"date_time_parameters": "DateTimeParameters",
		"decimal_parameters":   "DecimalParameters",
		"errors":               "Errors",
		"integer_parameters":   "IntegerParameters",
		"key":                  "Key",
		"last_updated_time":    "LastUpdatedTime",
		"message":              "Message",
		"name":                 "Name",
		"parameters":           "Parameters",
		"permissions":          "Permissions",
		"principal":            "Principal",
		"sheet_id":             "SheetId",
		"sheets":               "Sheets",
		"source_entity":        "SourceEntity",
		"source_template":      "SourceTemplate",
		"status":               "Status",
		"string_parameters":    "StringParameters",
		"tags":                 "Tags",
		"theme_arn":            "ThemeArn",
		"type":                 "Type",
		"value":                "Value",
		"values":               "Values",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
