// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package sagemaker

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_sagemaker_endpoint", endpointDataSource)
}

// endpointDataSource returns the Terraform awscc_sagemaker_endpoint data source.
// This Terraform data source corresponds to the CloudFormation AWS::SageMaker::Endpoint resource.
func endpointDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DeploymentConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Specifies deployment configuration for updating the SageMaker endpoint. Includes rollback and update policies.",
		//	  "properties": {
		//	    "AutoRollbackConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Configuration for automatic rollback if an error occurs during deployment.",
		//	      "properties": {
		//	        "Alarms": {
		//	          "description": "List of CloudWatch alarms to monitor during the deployment. If any alarm goes off, the deployment is rolled back.",
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "AlarmName": {
		//	                "description": "The name of the CloudWatch alarm.",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "AlarmName"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "required": [
		//	        "Alarms"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "BlueGreenUpdatePolicy": {
		//	      "additionalProperties": false,
		//	      "description": "Configuration for blue-green update deployment policies.",
		//	      "properties": {
		//	        "MaximumExecutionTimeoutInSeconds": {
		//	          "description": "The maximum time allowed for the blue/green update, in seconds.",
		//	          "type": "integer"
		//	        },
		//	        "TerminationWaitInSeconds": {
		//	          "description": "The wait time before terminating the old endpoint during a blue/green deployment.",
		//	          "type": "integer"
		//	        },
		//	        "TrafficRoutingConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "The traffic routing configuration for the blue/green deployment.",
		//	          "properties": {
		//	            "CanarySize": {
		//	              "additionalProperties": false,
		//	              "description": "Specifies the size of the canary traffic in a canary deployment.",
		//	              "properties": {
		//	                "Type": {
		//	                  "description": "Specifies whether the `Value` is an instance count or a capacity unit.",
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "description": "The value representing either the number of instances or the number of capacity units.",
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "Type",
		//	                "Value"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "LinearStepSize": {
		//	              "additionalProperties": false,
		//	              "description": "Specifies the step size for linear traffic routing.",
		//	              "properties": {
		//	                "Type": {
		//	                  "description": "Specifies whether the `Value` is an instance count or a capacity unit.",
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "description": "The value representing either the number of instances or the number of capacity units.",
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "Type",
		//	                "Value"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "Type": {
		//	              "description": "Specifies the type of traffic routing (e.g., 'AllAtOnce', 'Canary', 'Linear').",
		//	              "type": "string"
		//	            },
		//	            "WaitIntervalInSeconds": {
		//	              "description": "Specifies the wait interval between traffic shifts, in seconds.",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "required": [
		//	            "Type"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "TrafficRoutingConfiguration"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "RollingUpdatePolicy": {
		//	      "additionalProperties": false,
		//	      "description": "Configuration for rolling update deployment policies.",
		//	      "properties": {
		//	        "MaximumBatchSize": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the maximum batch size for each rolling update.",
		//	          "properties": {
		//	            "Type": {
		//	              "description": "Specifies whether the `Value` is an instance count or a capacity unit.",
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "description": "The value representing either the number of instances or the number of capacity units.",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "required": [
		//	            "Type",
		//	            "Value"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "MaximumExecutionTimeoutInSeconds": {
		//	          "description": "The maximum time allowed for the rolling update, in seconds.",
		//	          "type": "integer"
		//	        },
		//	        "RollbackMaximumBatchSize": {
		//	          "additionalProperties": false,
		//	          "description": "The maximum batch size for rollback during an update failure.",
		//	          "properties": {
		//	            "Type": {
		//	              "description": "Specifies whether the `Value` is an instance count or a capacity unit.",
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "description": "The value representing either the number of instances or the number of capacity units.",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "required": [
		//	            "Type",
		//	            "Value"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "WaitIntervalInSeconds": {
		//	          "description": "The time to wait between steps during the rolling update, in seconds.",
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "required": [
		//	        "MaximumBatchSize",
		//	        "WaitIntervalInSeconds"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"deployment_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AutoRollbackConfiguration
				"auto_rollback_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Alarms
						"alarms": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AlarmName
									"alarm_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The name of the CloudWatch alarm.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Description: "List of CloudWatch alarms to monitor during the deployment. If any alarm goes off, the deployment is rolled back.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Configuration for automatic rollback if an error occurs during deployment.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: BlueGreenUpdatePolicy
				"blue_green_update_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MaximumExecutionTimeoutInSeconds
						"maximum_execution_timeout_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The maximum time allowed for the blue/green update, in seconds.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TerminationWaitInSeconds
						"termination_wait_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The wait time before terminating the old endpoint during a blue/green deployment.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TrafficRoutingConfiguration
						"traffic_routing_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CanarySize
								"canary_size": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Type
										"type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Specifies whether the `Value` is an instance count or a capacity unit.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Description: "The value representing either the number of instances or the number of capacity units.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "Specifies the size of the canary traffic in a canary deployment.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: LinearStepSize
								"linear_step_size": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Type
										"type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Specifies whether the `Value` is an instance count or a capacity unit.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Description: "The value representing either the number of instances or the number of capacity units.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "Specifies the step size for linear traffic routing.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Type
								"type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies the type of traffic routing (e.g., 'AllAtOnce', 'Canary', 'Linear').",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: WaitIntervalInSeconds
								"wait_interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "Specifies the wait interval between traffic shifts, in seconds.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The traffic routing configuration for the blue/green deployment.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Configuration for blue-green update deployment policies.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RollingUpdatePolicy
				"rolling_update_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MaximumBatchSize
						"maximum_batch_size": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Type
								"type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies whether the `Value` is an instance count or a capacity unit.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The value representing either the number of instances or the number of capacity units.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Specifies the maximum batch size for each rolling update.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumExecutionTimeoutInSeconds
						"maximum_execution_timeout_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The maximum time allowed for the rolling update, in seconds.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RollbackMaximumBatchSize
						"rollback_maximum_batch_size": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Type
								"type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies whether the `Value` is an instance count or a capacity unit.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The value representing either the number of instances or the number of capacity units.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The maximum batch size for rollback during an update failure.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: WaitIntervalInSeconds
						"wait_interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The time to wait between steps during the rolling update, in seconds.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Configuration for rolling update deployment policies.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Specifies deployment configuration for updating the SageMaker endpoint. Includes rollback and update policies.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the endpoint.",
		//	  "type": "string"
		//	}
		"endpoint_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the endpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointConfigName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the endpoint configuration for the SageMaker endpoint. This is a required property.",
		//	  "type": "string"
		//	}
		"endpoint_config_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the endpoint configuration for the SageMaker endpoint. This is a required property.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the SageMaker endpoint. This name must be unique within an AWS Region.",
		//	  "type": "string"
		//	}
		"endpoint_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the SageMaker endpoint. This name must be unique within an AWS Region.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ExcludeRetainedVariantProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies a list of variant properties that you want to exclude when updating an endpoint.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "VariantPropertyType": {
		//	        "description": "The type of variant property (e.g., 'DesiredInstanceCount', 'DesiredWeight', 'DataCaptureConfig').",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"exclude_retained_variant_properties": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: VariantPropertyType
					"variant_property_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The type of variant property (e.g., 'DesiredInstanceCount', 'DesiredWeight', 'DataCaptureConfig').",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Specifies a list of variant properties that you want to exclude when updating an endpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RetainAllVariantProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "When set to true, retains all variant properties for an endpoint when it is updated.",
		//	  "type": "boolean"
		//	}
		"retain_all_variant_properties": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "When set to true, retains all variant properties for an endpoint when it is updated.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RetainDeploymentConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "When set to true, retains the deployment configuration during endpoint updates.",
		//	  "type": "boolean"
		//	}
		"retain_deployment_config": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "When set to true, retains the deployment configuration during endpoint updates.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key of the tag.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value of the tag.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key of the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value of the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SageMaker::Endpoint",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SageMaker::Endpoint").WithTerraformTypeName("awscc_sagemaker_endpoint")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"alarm_name":                           "AlarmName",
		"alarms":                               "Alarms",
		"auto_rollback_configuration":          "AutoRollbackConfiguration",
		"blue_green_update_policy":             "BlueGreenUpdatePolicy",
		"canary_size":                          "CanarySize",
		"deployment_config":                    "DeploymentConfig",
		"endpoint_arn":                         "EndpointArn",
		"endpoint_config_name":                 "EndpointConfigName",
		"endpoint_name":                        "EndpointName",
		"exclude_retained_variant_properties":  "ExcludeRetainedVariantProperties",
		"key":                                  "Key",
		"linear_step_size":                     "LinearStepSize",
		"maximum_batch_size":                   "MaximumBatchSize",
		"maximum_execution_timeout_in_seconds": "MaximumExecutionTimeoutInSeconds",
		"retain_all_variant_properties":        "RetainAllVariantProperties",
		"retain_deployment_config":             "RetainDeploymentConfig",
		"rollback_maximum_batch_size":          "RollbackMaximumBatchSize",
		"rolling_update_policy":                "RollingUpdatePolicy",
		"tags":                                 "Tags",
		"termination_wait_in_seconds":          "TerminationWaitInSeconds",
		"traffic_routing_configuration":        "TrafficRoutingConfiguration",
		"type":                                 "Type",
		"value":                                "Value",
		"variant_property_type":                "VariantPropertyType",
		"wait_interval_in_seconds":             "WaitIntervalInSeconds",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
