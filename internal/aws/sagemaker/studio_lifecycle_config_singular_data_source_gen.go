// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package sagemaker

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_sagemaker_studio_lifecycle_config", studioLifecycleConfigDataSource)
}

// studioLifecycleConfigDataSource returns the Terraform awscc_sagemaker_studio_lifecycle_config data source.
// This Terraform data source corresponds to the CloudFormation AWS::SageMaker::StudioLifecycleConfig resource.
func studioLifecycleConfigDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: StudioLifecycleConfigAppType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The App type that the Lifecycle Configuration is attached to.",
		//	  "enum": [
		//	    "JupyterServer",
		//	    "KernelGateway",
		//	    "CodeEditor",
		//	    "JupyterLab"
		//	  ],
		//	  "type": "string"
		//	}
		"studio_lifecycle_config_app_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The App type that the Lifecycle Configuration is attached to.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StudioLifecycleConfigArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the Lifecycle Configuration.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:studio-lifecycle-config/.*",
		//	  "type": "string"
		//	}
		"studio_lifecycle_config_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the Lifecycle Configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StudioLifecycleConfigContent
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The content of your Amazon SageMaker Studio Lifecycle Configuration script. This content must be base64 encoded.",
		//	  "maxLength": 16384,
		//	  "minLength": 1,
		//	  "pattern": "[\\S\\s]+",
		//	  "type": "string"
		//	}
		"studio_lifecycle_config_content": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The content of your Amazon SageMaker Studio Lifecycle Configuration script. This content must be base64 encoded.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StudioLifecycleConfigName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the Amazon SageMaker Studio Lifecycle Configuration.",
		//	  "maxLength": 63,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}",
		//	  "type": "string"
		//	}
		"studio_lifecycle_config_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the Amazon SageMaker Studio Lifecycle Configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Tags to be associated with the Lifecycle Configuration. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Tags to be associated with the Lifecycle Configuration. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SageMaker::StudioLifecycleConfig",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SageMaker::StudioLifecycleConfig").WithTerraformTypeName("awscc_sagemaker_studio_lifecycle_config")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"key":                              "Key",
		"studio_lifecycle_config_app_type": "StudioLifecycleConfigAppType",
		"studio_lifecycle_config_arn":      "StudioLifecycleConfigArn",
		"studio_lifecycle_config_content":  "StudioLifecycleConfigContent",
		"studio_lifecycle_config_name":     "StudioLifecycleConfigName",
		"tags":                             "Tags",
		"value":                            "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
