// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package mediapackage

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_mediapackage_packaging_configuration", packagingConfigurationDataSource)
}

// packagingConfigurationDataSource returns the Terraform awscc_mediapackage_packaging_configuration data source.
// This Terraform data source corresponds to the CloudFormation AWS::MediaPackage::PackagingConfiguration resource.
func packagingConfigurationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the PackagingConfiguration.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the PackagingConfiguration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CmafPackage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A CMAF packaging configuration.",
		//	  "properties": {
		//	    "Encryption": {
		//	      "additionalProperties": false,
		//	      "description": "A CMAF encryption configuration.",
		//	      "properties": {
		//	        "SpekeKeyProvider": {
		//	          "additionalProperties": false,
		//	          "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
		//	          "properties": {
		//	            "EncryptionContractConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
		//	              "properties": {
		//	                "PresetSpeke20Audio": {
		//	                  "description": "A collection of audio encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-AUDIO-1",
		//	                    "PRESET-AUDIO-2",
		//	                    "PRESET-AUDIO-3",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "PresetSpeke20Video": {
		//	                  "description": "A collection of video encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-VIDEO-1",
		//	                    "PRESET-VIDEO-2",
		//	                    "PRESET-VIDEO-3",
		//	                    "PRESET-VIDEO-4",
		//	                    "PRESET-VIDEO-5",
		//	                    "PRESET-VIDEO-6",
		//	                    "PRESET-VIDEO-7",
		//	                    "PRESET-VIDEO-8",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "PresetSpeke20Audio",
		//	                "PresetSpeke20Video"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "RoleArn": {
		//	              "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "SystemIds": {
		//	              "description": "The system IDs to include in key requests.",
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Url": {
		//	              "description": "The URL of the external key provider service.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "RoleArn",
		//	            "SystemIds",
		//	            "Url"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "SpekeKeyProvider"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "HlsManifests": {
		//	      "description": "A list of HLS manifest configurations.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "An HTTP Live Streaming (HLS) manifest configuration.",
		//	        "properties": {
		//	          "AdMarkers": {
		//	            "description": "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source.",
		//	            "enum": [
		//	              "NONE",
		//	              "SCTE35_ENHANCED",
		//	              "PASSTHROUGH"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "IncludeIframeOnlyStream": {
		//	            "description": "When enabled, an I-Frame only stream will be included in the output.",
		//	            "type": "boolean"
		//	          },
		//	          "ManifestName": {
		//	            "description": "An optional string to include in the name of the manifest.",
		//	            "type": "string"
		//	          },
		//	          "ProgramDateTimeIntervalSeconds": {
		//	            "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
		//	            "type": "integer"
		//	          },
		//	          "RepeatExtXKey": {
		//	            "description": "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
		//	            "type": "boolean"
		//	          },
		//	          "StreamSelection": {
		//	            "additionalProperties": false,
		//	            "description": "A StreamSelection configuration.",
		//	            "properties": {
		//	              "MaxVideoBitsPerSecond": {
		//	                "description": "The maximum video bitrate (bps) to include in output.",
		//	                "type": "integer"
		//	              },
		//	              "MinVideoBitsPerSecond": {
		//	                "description": "The minimum video bitrate (bps) to include in output.",
		//	                "type": "integer"
		//	              },
		//	              "StreamOrder": {
		//	                "description": "A directive that determines the order of streams in the output.",
		//	                "enum": [
		//	                  "ORIGINAL",
		//	                  "VIDEO_BITRATE_ASCENDING",
		//	                  "VIDEO_BITRATE_DESCENDING"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "IncludeEncoderConfigurationInSegments": {
		//	      "description": "When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.",
		//	      "type": "boolean"
		//	    },
		//	    "SegmentDurationSeconds": {
		//	      "description": "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "HlsManifests"
		//	  ],
		//	  "type": "object"
		//	}
		"cmaf_package": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Encryption
				"encryption": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: SpekeKeyProvider
						"speke_key_provider": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EncryptionContractConfiguration
								"encryption_contract_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: PresetSpeke20Audio
										"preset_speke_20_audio": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of audio encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: PresetSpeke20Video
										"preset_speke_20_video": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of video encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SystemIds
								"system_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The system IDs to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Url
								"url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The URL of the external key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A CMAF encryption configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: HlsManifests
				"hls_manifests": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AdMarkers
							"ad_markers": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: IncludeIframeOnlyStream
							"include_iframe_only_stream": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "When enabled, an I-Frame only stream will be included in the output.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ManifestName
							"manifest_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "An optional string to include in the name of the manifest.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ProgramDateTimeIntervalSeconds
							"program_date_time_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: RepeatExtXKey
							"repeat_ext_x_key": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: StreamSelection
							"stream_selection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MaxVideoBitsPerSecond
									"max_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The maximum video bitrate (bps) to include in output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: MinVideoBitsPerSecond
									"min_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The minimum video bitrate (bps) to include in output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: StreamOrder
									"stream_order": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "A directive that determines the order of streams in the output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "A StreamSelection configuration.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A list of HLS manifest configurations.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IncludeEncoderConfigurationInSegments
				"include_encoder_configuration_in_segments": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentDurationSeconds
				"segment_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A CMAF packaging configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DashPackage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
		//	  "properties": {
		//	    "DashManifests": {
		//	      "description": "A list of DASH manifest configurations.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "A DASH manifest configuration.",
		//	        "properties": {
		//	          "ManifestLayout": {
		//	            "description": "Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.",
		//	            "enum": [
		//	              "FULL",
		//	              "COMPACT"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "ManifestName": {
		//	            "description": "An optional string to include in the name of the manifest.",
		//	            "type": "string"
		//	          },
		//	          "MinBufferTimeSeconds": {
		//	            "description": "Minimum duration (in seconds) that a player will buffer media before starting the presentation.",
		//	            "type": "integer"
		//	          },
		//	          "Profile": {
		//	            "description": "The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled.",
		//	            "enum": [
		//	              "NONE",
		//	              "HBBTV_1_5"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "ScteMarkersSource": {
		//	            "description": "The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.",
		//	            "enum": [
		//	              "SEGMENTS",
		//	              "MANIFEST"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "StreamSelection": {
		//	            "additionalProperties": false,
		//	            "description": "A StreamSelection configuration.",
		//	            "properties": {
		//	              "MaxVideoBitsPerSecond": {
		//	                "description": "The maximum video bitrate (bps) to include in output.",
		//	                "type": "integer"
		//	              },
		//	              "MinVideoBitsPerSecond": {
		//	                "description": "The minimum video bitrate (bps) to include in output.",
		//	                "type": "integer"
		//	              },
		//	              "StreamOrder": {
		//	                "description": "A directive that determines the order of streams in the output.",
		//	                "enum": [
		//	                  "ORIGINAL",
		//	                  "VIDEO_BITRATE_ASCENDING",
		//	                  "VIDEO_BITRATE_DESCENDING"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "Encryption": {
		//	      "additionalProperties": false,
		//	      "description": "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.",
		//	      "properties": {
		//	        "SpekeKeyProvider": {
		//	          "additionalProperties": false,
		//	          "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
		//	          "properties": {
		//	            "EncryptionContractConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
		//	              "properties": {
		//	                "PresetSpeke20Audio": {
		//	                  "description": "A collection of audio encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-AUDIO-1",
		//	                    "PRESET-AUDIO-2",
		//	                    "PRESET-AUDIO-3",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "PresetSpeke20Video": {
		//	                  "description": "A collection of video encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-VIDEO-1",
		//	                    "PRESET-VIDEO-2",
		//	                    "PRESET-VIDEO-3",
		//	                    "PRESET-VIDEO-4",
		//	                    "PRESET-VIDEO-5",
		//	                    "PRESET-VIDEO-6",
		//	                    "PRESET-VIDEO-7",
		//	                    "PRESET-VIDEO-8",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "PresetSpeke20Audio",
		//	                "PresetSpeke20Video"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "RoleArn": {
		//	              "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "SystemIds": {
		//	              "description": "The system IDs to include in key requests.",
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Url": {
		//	              "description": "The URL of the external key provider service.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "RoleArn",
		//	            "SystemIds",
		//	            "Url"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "SpekeKeyProvider"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "IncludeEncoderConfigurationInSegments": {
		//	      "description": "When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.",
		//	      "type": "boolean"
		//	    },
		//	    "IncludeIframeOnlyStream": {
		//	      "description": "When enabled, an I-Frame only stream will be included in the output.",
		//	      "type": "boolean"
		//	    },
		//	    "PeriodTriggers": {
		//	      "description": "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains \"ADS\", new periods will be created where the Asset contains SCTE-35 ad markers.",
		//	      "items": {
		//	        "enum": [
		//	          "ADS"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "SegmentDurationSeconds": {
		//	      "description": "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
		//	      "type": "integer"
		//	    },
		//	    "SegmentTemplateFormat": {
		//	      "description": "Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.",
		//	      "enum": [
		//	        "NUMBER_WITH_TIMELINE",
		//	        "TIME_WITH_TIMELINE",
		//	        "NUMBER_WITH_DURATION"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "DashManifests"
		//	  ],
		//	  "type": "object"
		//	}
		"dash_package": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DashManifests
				"dash_manifests": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ManifestLayout
							"manifest_layout": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ManifestName
							"manifest_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "An optional string to include in the name of the manifest.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: MinBufferTimeSeconds
							"min_buffer_time_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "Minimum duration (in seconds) that a player will buffer media before starting the presentation.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Profile
							"profile": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ScteMarkersSource
							"scte_markers_source": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: StreamSelection
							"stream_selection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MaxVideoBitsPerSecond
									"max_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The maximum video bitrate (bps) to include in output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: MinVideoBitsPerSecond
									"min_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The minimum video bitrate (bps) to include in output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: StreamOrder
									"stream_order": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "A directive that determines the order of streams in the output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "A StreamSelection configuration.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A list of DASH manifest configurations.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Encryption
				"encryption": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: SpekeKeyProvider
						"speke_key_provider": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EncryptionContractConfiguration
								"encryption_contract_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: PresetSpeke20Audio
										"preset_speke_20_audio": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of audio encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: PresetSpeke20Video
										"preset_speke_20_video": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of video encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SystemIds
								"system_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The system IDs to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Url
								"url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The URL of the external key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IncludeEncoderConfigurationInSegments
				"include_encoder_configuration_in_segments": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IncludeIframeOnlyStream
				"include_iframe_only_stream": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "When enabled, an I-Frame only stream will be included in the output.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PeriodTriggers
				"period_triggers": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains \"ADS\", new periods will be created where the Asset contains SCTE-35 ad markers.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentDurationSeconds
				"segment_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentTemplateFormat
				"segment_template_format": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HlsPackage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "An HTTP Live Streaming (HLS) packaging configuration.",
		//	  "properties": {
		//	    "Encryption": {
		//	      "additionalProperties": false,
		//	      "description": "An HTTP Live Streaming (HLS) encryption configuration.",
		//	      "properties": {
		//	        "ConstantInitializationVector": {
		//	          "description": "An HTTP Live Streaming (HLS) encryption configuration.",
		//	          "type": "string"
		//	        },
		//	        "EncryptionMethod": {
		//	          "description": "The encryption method to use.",
		//	          "enum": [
		//	            "AES_128",
		//	            "SAMPLE_AES"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "SpekeKeyProvider": {
		//	          "additionalProperties": false,
		//	          "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
		//	          "properties": {
		//	            "EncryptionContractConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
		//	              "properties": {
		//	                "PresetSpeke20Audio": {
		//	                  "description": "A collection of audio encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-AUDIO-1",
		//	                    "PRESET-AUDIO-2",
		//	                    "PRESET-AUDIO-3",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "PresetSpeke20Video": {
		//	                  "description": "A collection of video encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-VIDEO-1",
		//	                    "PRESET-VIDEO-2",
		//	                    "PRESET-VIDEO-3",
		//	                    "PRESET-VIDEO-4",
		//	                    "PRESET-VIDEO-5",
		//	                    "PRESET-VIDEO-6",
		//	                    "PRESET-VIDEO-7",
		//	                    "PRESET-VIDEO-8",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "PresetSpeke20Audio",
		//	                "PresetSpeke20Video"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "RoleArn": {
		//	              "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "SystemIds": {
		//	              "description": "The system IDs to include in key requests.",
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Url": {
		//	              "description": "The URL of the external key provider service.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "RoleArn",
		//	            "SystemIds",
		//	            "Url"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "SpekeKeyProvider"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "HlsManifests": {
		//	      "description": "A list of HLS manifest configurations.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "An HTTP Live Streaming (HLS) manifest configuration.",
		//	        "properties": {
		//	          "AdMarkers": {
		//	            "description": "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source.",
		//	            "enum": [
		//	              "NONE",
		//	              "SCTE35_ENHANCED",
		//	              "PASSTHROUGH"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "IncludeIframeOnlyStream": {
		//	            "description": "When enabled, an I-Frame only stream will be included in the output.",
		//	            "type": "boolean"
		//	          },
		//	          "ManifestName": {
		//	            "description": "An optional string to include in the name of the manifest.",
		//	            "type": "string"
		//	          },
		//	          "ProgramDateTimeIntervalSeconds": {
		//	            "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
		//	            "type": "integer"
		//	          },
		//	          "RepeatExtXKey": {
		//	            "description": "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
		//	            "type": "boolean"
		//	          },
		//	          "StreamSelection": {
		//	            "additionalProperties": false,
		//	            "description": "A StreamSelection configuration.",
		//	            "properties": {
		//	              "MaxVideoBitsPerSecond": {
		//	                "description": "The maximum video bitrate (bps) to include in output.",
		//	                "type": "integer"
		//	              },
		//	              "MinVideoBitsPerSecond": {
		//	                "description": "The minimum video bitrate (bps) to include in output.",
		//	                "type": "integer"
		//	              },
		//	              "StreamOrder": {
		//	                "description": "A directive that determines the order of streams in the output.",
		//	                "enum": [
		//	                  "ORIGINAL",
		//	                  "VIDEO_BITRATE_ASCENDING",
		//	                  "VIDEO_BITRATE_DESCENDING"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "IncludeDvbSubtitles": {
		//	      "description": "When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.",
		//	      "type": "boolean"
		//	    },
		//	    "SegmentDurationSeconds": {
		//	      "description": "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
		//	      "type": "integer"
		//	    },
		//	    "UseAudioRenditionGroup": {
		//	      "description": "When enabled, audio streams will be placed in rendition groups in the output.",
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "required": [
		//	    "HlsManifests"
		//	  ],
		//	  "type": "object"
		//	}
		"hls_package": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Encryption
				"encryption": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ConstantInitializationVector
						"constant_initialization_vector": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "An HTTP Live Streaming (HLS) encryption configuration.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionMethod
						"encryption_method": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The encryption method to use.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SpekeKeyProvider
						"speke_key_provider": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EncryptionContractConfiguration
								"encryption_contract_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: PresetSpeke20Audio
										"preset_speke_20_audio": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of audio encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: PresetSpeke20Video
										"preset_speke_20_video": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of video encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SystemIds
								"system_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The system IDs to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Url
								"url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The URL of the external key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "An HTTP Live Streaming (HLS) encryption configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: HlsManifests
				"hls_manifests": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AdMarkers
							"ad_markers": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: IncludeIframeOnlyStream
							"include_iframe_only_stream": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "When enabled, an I-Frame only stream will be included in the output.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ManifestName
							"manifest_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "An optional string to include in the name of the manifest.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ProgramDateTimeIntervalSeconds
							"program_date_time_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: RepeatExtXKey
							"repeat_ext_x_key": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: StreamSelection
							"stream_selection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MaxVideoBitsPerSecond
									"max_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The maximum video bitrate (bps) to include in output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: MinVideoBitsPerSecond
									"min_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The minimum video bitrate (bps) to include in output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: StreamOrder
									"stream_order": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "A directive that determines the order of streams in the output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "A StreamSelection configuration.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A list of HLS manifest configurations.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IncludeDvbSubtitles
				"include_dvb_subtitles": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentDurationSeconds
				"segment_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UseAudioRenditionGroup
				"use_audio_rendition_group": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "When enabled, audio streams will be placed in rendition groups in the output.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "An HTTP Live Streaming (HLS) packaging configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the PackagingConfiguration.",
		//	  "type": "string"
		//	}
		"packaging_configuration_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the PackagingConfiguration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MssPackage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A Microsoft Smooth Streaming (MSS) PackagingConfiguration.",
		//	  "properties": {
		//	    "Encryption": {
		//	      "additionalProperties": false,
		//	      "description": "A CMAF encryption configuration.",
		//	      "properties": {
		//	        "SpekeKeyProvider": {
		//	          "additionalProperties": false,
		//	          "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
		//	          "properties": {
		//	            "EncryptionContractConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
		//	              "properties": {
		//	                "PresetSpeke20Audio": {
		//	                  "description": "A collection of audio encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-AUDIO-1",
		//	                    "PRESET-AUDIO-2",
		//	                    "PRESET-AUDIO-3",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "PresetSpeke20Video": {
		//	                  "description": "A collection of video encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-VIDEO-1",
		//	                    "PRESET-VIDEO-2",
		//	                    "PRESET-VIDEO-3",
		//	                    "PRESET-VIDEO-4",
		//	                    "PRESET-VIDEO-5",
		//	                    "PRESET-VIDEO-6",
		//	                    "PRESET-VIDEO-7",
		//	                    "PRESET-VIDEO-8",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "PresetSpeke20Audio",
		//	                "PresetSpeke20Video"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "RoleArn": {
		//	              "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "SystemIds": {
		//	              "description": "The system IDs to include in key requests.",
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Url": {
		//	              "description": "The URL of the external key provider service.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "RoleArn",
		//	            "SystemIds",
		//	            "Url"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "SpekeKeyProvider"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "MssManifests": {
		//	      "description": "A list of MSS manifest configurations.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "A Microsoft Smooth Streaming (MSS) manifest configuration.",
		//	        "properties": {
		//	          "ManifestName": {
		//	            "description": "An optional string to include in the name of the manifest.",
		//	            "type": "string"
		//	          },
		//	          "StreamSelection": {
		//	            "additionalProperties": false,
		//	            "description": "A StreamSelection configuration.",
		//	            "properties": {
		//	              "MaxVideoBitsPerSecond": {
		//	                "description": "The maximum video bitrate (bps) to include in output.",
		//	                "type": "integer"
		//	              },
		//	              "MinVideoBitsPerSecond": {
		//	                "description": "The minimum video bitrate (bps) to include in output.",
		//	                "type": "integer"
		//	              },
		//	              "StreamOrder": {
		//	                "description": "A directive that determines the order of streams in the output.",
		//	                "enum": [
		//	                  "ORIGINAL",
		//	                  "VIDEO_BITRATE_ASCENDING",
		//	                  "VIDEO_BITRATE_DESCENDING"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "SegmentDurationSeconds": {
		//	      "description": "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "MssManifests"
		//	  ],
		//	  "type": "object"
		//	}
		"mss_package": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Encryption
				"encryption": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: SpekeKeyProvider
						"speke_key_provider": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EncryptionContractConfiguration
								"encryption_contract_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: PresetSpeke20Audio
										"preset_speke_20_audio": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of audio encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: PresetSpeke20Video
										"preset_speke_20_video": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of video encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SystemIds
								"system_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The system IDs to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Url
								"url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The URL of the external key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A CMAF encryption configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MssManifests
				"mss_manifests": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ManifestName
							"manifest_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "An optional string to include in the name of the manifest.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: StreamSelection
							"stream_selection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MaxVideoBitsPerSecond
									"max_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The maximum video bitrate (bps) to include in output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: MinVideoBitsPerSecond
									"min_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The minimum video bitrate (bps) to include in output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: StreamOrder
									"stream_order": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "A directive that determines the order of streams in the output.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "A StreamSelection configuration.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A list of MSS manifest configurations.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentDurationSeconds
				"segment_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A Microsoft Smooth Streaming (MSS) PackagingConfiguration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PackagingGroupId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of a PackagingGroup.",
		//	  "type": "string"
		//	}
		"packaging_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of a PackagingGroup.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A collection of tags associated with a resource",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A collection of tags associated with a resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::MediaPackage::PackagingConfiguration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::MediaPackage::PackagingConfiguration").WithTerraformTypeName("awscc_mediapackage_packaging_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"ad_markers":                        "AdMarkers",
		"arn":                               "Arn",
		"cmaf_package":                      "CmafPackage",
		"constant_initialization_vector":    "ConstantInitializationVector",
		"dash_manifests":                    "DashManifests",
		"dash_package":                      "DashPackage",
		"encryption":                        "Encryption",
		"encryption_contract_configuration": "EncryptionContractConfiguration",
		"encryption_method":                 "EncryptionMethod",
		"hls_manifests":                     "HlsManifests",
		"hls_package":                       "HlsPackage",
		"include_dvb_subtitles":             "IncludeDvbSubtitles",
		"include_encoder_configuration_in_segments": "IncludeEncoderConfigurationInSegments",
		"include_iframe_only_stream":                "IncludeIframeOnlyStream",
		"key":                                       "Key",
		"manifest_layout":                           "ManifestLayout",
		"manifest_name":                             "ManifestName",
		"max_video_bits_per_second":                 "MaxVideoBitsPerSecond",
		"min_buffer_time_seconds":                   "MinBufferTimeSeconds",
		"min_video_bits_per_second":                 "MinVideoBitsPerSecond",
		"mss_manifests":                             "MssManifests",
		"mss_package":                               "MssPackage",
		"packaging_configuration_id":                "Id",
		"packaging_group_id":                        "PackagingGroupId",
		"period_triggers":                           "PeriodTriggers",
		"preset_speke_20_audio":                     "PresetSpeke20Audio",
		"preset_speke_20_video":                     "PresetSpeke20Video",
		"profile":                                   "Profile",
		"program_date_time_interval_seconds":        "ProgramDateTimeIntervalSeconds",
		"repeat_ext_x_key":                          "RepeatExtXKey",
		"role_arn":                                  "RoleArn",
		"scte_markers_source":                       "ScteMarkersSource",
		"segment_duration_seconds":                  "SegmentDurationSeconds",
		"segment_template_format":                   "SegmentTemplateFormat",
		"speke_key_provider":                        "SpekeKeyProvider",
		"stream_order":                              "StreamOrder",
		"stream_selection":                          "StreamSelection",
		"system_ids":                                "SystemIds",
		"tags":                                      "Tags",
		"url":                                       "Url",
		"use_audio_rendition_group":                 "UseAudioRenditionGroup",
		"value":                                     "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
