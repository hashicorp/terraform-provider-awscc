// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package mediapackage

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_mediapackage_origin_endpoint", originEndpointDataSource)
}

// originEndpointDataSource returns the Terraform awscc_mediapackage_origin_endpoint data source.
// This Terraform data source corresponds to the CloudFormation AWS::MediaPackage::OriginEndpoint resource.
func originEndpointDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) assigned to the OriginEndpoint.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) assigned to the OriginEndpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Authorization
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "CDN Authorization credentials",
		//	  "properties": {
		//	    "CdnIdentifierSecret": {
		//	      "description": "The Amazon Resource Name (ARN) for the secret in Secrets Manager that your Content Distribution Network (CDN) uses for authorization to access your endpoint.",
		//	      "type": "string"
		//	    },
		//	    "SecretsRoleArn": {
		//	      "description": "The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "SecretsRoleArn",
		//	    "CdnIdentifierSecret"
		//	  ],
		//	  "type": "object"
		//	}
		"authorization": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CdnIdentifierSecret
				"cdn_identifier_secret": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Amazon Resource Name (ARN) for the secret in Secrets Manager that your Content Distribution Network (CDN) uses for authorization to access your endpoint.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SecretsRoleArn
				"secrets_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "CDN Authorization credentials",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ChannelId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Channel the OriginEndpoint is associated with.",
		//	  "type": "string"
		//	}
		"channel_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Channel the OriginEndpoint is associated with.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CmafPackage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A Common Media Application Format (CMAF) packaging configuration.",
		//	  "properties": {
		//	    "Encryption": {
		//	      "additionalProperties": false,
		//	      "description": "A Common Media Application Format (CMAF) encryption configuration.",
		//	      "properties": {
		//	        "ConstantInitializationVector": {
		//	          "description": "An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).",
		//	          "maxLength": 32,
		//	          "minLength": 32,
		//	          "pattern": "",
		//	          "type": "string"
		//	        },
		//	        "EncryptionMethod": {
		//	          "description": "The encryption method used",
		//	          "enum": [
		//	            "SAMPLE_AES",
		//	            "AES_CTR"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "KeyRotationIntervalSeconds": {
		//	          "description": "Time (in seconds) between each encryption key rotation.",
		//	          "type": "integer"
		//	        },
		//	        "SpekeKeyProvider": {
		//	          "additionalProperties": false,
		//	          "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
		//	          "properties": {
		//	            "CertificateArn": {
		//	              "description": "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "EncryptionContractConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
		//	              "properties": {
		//	                "PresetSpeke20Audio": {
		//	                  "description": "A collection of audio encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-AUDIO-1",
		//	                    "PRESET-AUDIO-2",
		//	                    "PRESET-AUDIO-3",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "PresetSpeke20Video": {
		//	                  "description": "A collection of video encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-VIDEO-1",
		//	                    "PRESET-VIDEO-2",
		//	                    "PRESET-VIDEO-3",
		//	                    "PRESET-VIDEO-4",
		//	                    "PRESET-VIDEO-5",
		//	                    "PRESET-VIDEO-6",
		//	                    "PRESET-VIDEO-7",
		//	                    "PRESET-VIDEO-8",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "PresetSpeke20Audio",
		//	                "PresetSpeke20Video"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ResourceId": {
		//	              "description": "The resource ID to include in key requests.",
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "SystemIds": {
		//	              "description": "The system IDs to include in key requests.",
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Url": {
		//	              "description": "The URL of the external key provider service.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "ResourceId",
		//	            "SystemIds",
		//	            "Url",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "SpekeKeyProvider"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "HlsManifests": {
		//	      "description": "A list of HLS manifest configurations",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "A HTTP Live Streaming (HLS) manifest configuration.",
		//	        "properties": {
		//	          "AdMarkers": {
		//	            "description": "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source. \"DATERANGE\" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.",
		//	            "enum": [
		//	              "NONE",
		//	              "SCTE35_ENHANCED",
		//	              "PASSTHROUGH",
		//	              "DATERANGE"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "AdTriggers": {
		//	            "description": "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
		//	            "items": {
		//	              "enum": [
		//	                "SPLICE_INSERT",
		//	                "BREAK",
		//	                "PROVIDER_ADVERTISEMENT",
		//	                "DISTRIBUTOR_ADVERTISEMENT",
		//	                "PROVIDER_PLACEMENT_OPPORTUNITY",
		//	                "DISTRIBUTOR_PLACEMENT_OPPORTUNITY",
		//	                "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY",
		//	                "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "AdsOnDeliveryRestrictions": {
		//	            "description": "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
		//	            "enum": [
		//	              "NONE",
		//	              "RESTRICTED",
		//	              "UNRESTRICTED",
		//	              "BOTH"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "description": "The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.",
		//	            "type": "string"
		//	          },
		//	          "IncludeIframeOnlyStream": {
		//	            "description": "When enabled, an I-Frame only stream will be included in the output.",
		//	            "type": "boolean"
		//	          },
		//	          "ManifestName": {
		//	            "description": "An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.",
		//	            "type": "string"
		//	          },
		//	          "PlaylistType": {
		//	            "description": "The HTTP Live Streaming (HLS) playlist type. When either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.",
		//	            "enum": [
		//	              "NONE",
		//	              "EVENT",
		//	              "VOD"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "PlaylistWindowSeconds": {
		//	            "description": "Time window (in seconds) contained in each parent manifest.",
		//	            "type": "integer"
		//	          },
		//	          "ProgramDateTimeIntervalSeconds": {
		//	            "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
		//	            "type": "integer"
		//	          },
		//	          "Url": {
		//	            "description": "The URL of the packaged OriginEndpoint for consumption.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Id"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "SegmentDurationSeconds": {
		//	      "description": "Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.",
		//	      "type": "integer"
		//	    },
		//	    "SegmentPrefix": {
		//	      "description": "An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.",
		//	      "type": "string"
		//	    },
		//	    "StreamSelection": {
		//	      "additionalProperties": false,
		//	      "description": "A StreamSelection configuration.",
		//	      "properties": {
		//	        "MaxVideoBitsPerSecond": {
		//	          "description": "The maximum video bitrate (bps) to include in output.",
		//	          "type": "integer"
		//	        },
		//	        "MinVideoBitsPerSecond": {
		//	          "description": "The minimum video bitrate (bps) to include in output.",
		//	          "type": "integer"
		//	        },
		//	        "StreamOrder": {
		//	          "description": "A directive that determines the order of streams in the output.",
		//	          "enum": [
		//	            "ORIGINAL",
		//	            "VIDEO_BITRATE_ASCENDING",
		//	            "VIDEO_BITRATE_DESCENDING"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"cmaf_package": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Encryption
				"encryption": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ConstantInitializationVector
						"constant_initialization_vector": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionMethod
						"encryption_method": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The encryption method used",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: KeyRotationIntervalSeconds
						"key_rotation_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "Time (in seconds) between each encryption key rotation.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SpekeKeyProvider
						"speke_key_provider": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CertificateArn
								"certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: EncryptionContractConfiguration
								"encryption_contract_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: PresetSpeke20Audio
										"preset_speke_20_audio": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of audio encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: PresetSpeke20Video
										"preset_speke_20_video": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of video encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ResourceId
								"resource_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The resource ID to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SystemIds
								"system_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The system IDs to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Url
								"url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The URL of the external key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A Common Media Application Format (CMAF) encryption configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: HlsManifests
				"hls_manifests": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AdMarkers
							"ad_markers": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source. \"DATERANGE\" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: AdTriggers
							"ad_triggers": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: AdsOnDeliveryRestrictions
							"ads_on_delivery_restrictions": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: IncludeIframeOnlyStream
							"include_iframe_only_stream": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "When enabled, an I-Frame only stream will be included in the output.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ManifestName
							"manifest_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: PlaylistType
							"playlist_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The HTTP Live Streaming (HLS) playlist type. When either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: PlaylistWindowSeconds
							"playlist_window_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "Time window (in seconds) contained in each parent manifest.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ProgramDateTimeIntervalSeconds
							"program_date_time_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Url
							"url": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The URL of the packaged OriginEndpoint for consumption.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A list of HLS manifest configurations",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentDurationSeconds
				"segment_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentPrefix
				"segment_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: StreamSelection
				"stream_selection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MaxVideoBitsPerSecond
						"max_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The maximum video bitrate (bps) to include in output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: MinVideoBitsPerSecond
						"min_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The minimum video bitrate (bps) to include in output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: StreamOrder
						"stream_order": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A directive that determines the order of streams in the output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A StreamSelection configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A Common Media Application Format (CMAF) packaging configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DashPackage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
		//	  "properties": {
		//	    "AdTriggers": {
		//	      "description": "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
		//	      "items": {
		//	        "enum": [
		//	          "SPLICE_INSERT",
		//	          "BREAK",
		//	          "PROVIDER_ADVERTISEMENT",
		//	          "DISTRIBUTOR_ADVERTISEMENT",
		//	          "PROVIDER_PLACEMENT_OPPORTUNITY",
		//	          "DISTRIBUTOR_PLACEMENT_OPPORTUNITY",
		//	          "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY",
		//	          "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "AdsOnDeliveryRestrictions": {
		//	      "description": "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
		//	      "enum": [
		//	        "NONE",
		//	        "RESTRICTED",
		//	        "UNRESTRICTED",
		//	        "BOTH"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Encryption": {
		//	      "additionalProperties": false,
		//	      "description": "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.",
		//	      "properties": {
		//	        "KeyRotationIntervalSeconds": {
		//	          "description": "Time (in seconds) between each encryption key rotation.",
		//	          "type": "integer"
		//	        },
		//	        "SpekeKeyProvider": {
		//	          "additionalProperties": false,
		//	          "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
		//	          "properties": {
		//	            "CertificateArn": {
		//	              "description": "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "EncryptionContractConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
		//	              "properties": {
		//	                "PresetSpeke20Audio": {
		//	                  "description": "A collection of audio encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-AUDIO-1",
		//	                    "PRESET-AUDIO-2",
		//	                    "PRESET-AUDIO-3",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "PresetSpeke20Video": {
		//	                  "description": "A collection of video encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-VIDEO-1",
		//	                    "PRESET-VIDEO-2",
		//	                    "PRESET-VIDEO-3",
		//	                    "PRESET-VIDEO-4",
		//	                    "PRESET-VIDEO-5",
		//	                    "PRESET-VIDEO-6",
		//	                    "PRESET-VIDEO-7",
		//	                    "PRESET-VIDEO-8",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "PresetSpeke20Audio",
		//	                "PresetSpeke20Video"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ResourceId": {
		//	              "description": "The resource ID to include in key requests.",
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "SystemIds": {
		//	              "description": "The system IDs to include in key requests.",
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Url": {
		//	              "description": "The URL of the external key provider service.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "ResourceId",
		//	            "SystemIds",
		//	            "Url",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "SpekeKeyProvider"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "IncludeIframeOnlyStream": {
		//	      "description": "When enabled, an I-Frame only stream will be included in the output.",
		//	      "type": "boolean"
		//	    },
		//	    "ManifestLayout": {
		//	      "description": "Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.",
		//	      "enum": [
		//	        "FULL",
		//	        "COMPACT",
		//	        "DRM_TOP_LEVEL_COMPACT"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "ManifestWindowSeconds": {
		//	      "description": "Time window (in seconds) contained in each manifest.",
		//	      "type": "integer"
		//	    },
		//	    "MinBufferTimeSeconds": {
		//	      "description": "Minimum duration (in seconds) that a player will buffer media before starting the presentation.",
		//	      "type": "integer"
		//	    },
		//	    "MinUpdatePeriodSeconds": {
		//	      "description": "Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).",
		//	      "type": "integer"
		//	    },
		//	    "PeriodTriggers": {
		//	      "description": "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains \"ADS\", new periods will be created where the Channel source contains SCTE-35 ad markers.",
		//	      "items": {
		//	        "enum": [
		//	          "ADS"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "Profile": {
		//	      "description": "The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled.",
		//	      "enum": [
		//	        "NONE",
		//	        "HBBTV_1_5",
		//	        "HYBRIDCAST",
		//	        "DVB_DASH_2014"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "SegmentDurationSeconds": {
		//	      "description": "Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.",
		//	      "type": "integer"
		//	    },
		//	    "SegmentTemplateFormat": {
		//	      "description": "Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.",
		//	      "enum": [
		//	        "NUMBER_WITH_TIMELINE",
		//	        "TIME_WITH_TIMELINE",
		//	        "NUMBER_WITH_DURATION"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "StreamSelection": {
		//	      "additionalProperties": false,
		//	      "description": "A StreamSelection configuration.",
		//	      "properties": {
		//	        "MaxVideoBitsPerSecond": {
		//	          "description": "The maximum video bitrate (bps) to include in output.",
		//	          "type": "integer"
		//	        },
		//	        "MinVideoBitsPerSecond": {
		//	          "description": "The minimum video bitrate (bps) to include in output.",
		//	          "type": "integer"
		//	        },
		//	        "StreamOrder": {
		//	          "description": "A directive that determines the order of streams in the output.",
		//	          "enum": [
		//	            "ORIGINAL",
		//	            "VIDEO_BITRATE_ASCENDING",
		//	            "VIDEO_BITRATE_DESCENDING"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "SuggestedPresentationDelaySeconds": {
		//	      "description": "Duration (in seconds) to delay live content before presentation.",
		//	      "type": "integer"
		//	    },
		//	    "UtcTiming": {
		//	      "description": "Determines the type of UTCTiming included in the Media Presentation Description (MPD)",
		//	      "enum": [
		//	        "HTTP-XSDATE",
		//	        "HTTP-ISO",
		//	        "HTTP-HEAD",
		//	        "NONE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "UtcTimingUri": {
		//	      "description": "Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"dash_package": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AdTriggers
				"ad_triggers": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AdsOnDeliveryRestrictions
				"ads_on_delivery_restrictions": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Encryption
				"encryption": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: KeyRotationIntervalSeconds
						"key_rotation_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "Time (in seconds) between each encryption key rotation.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SpekeKeyProvider
						"speke_key_provider": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CertificateArn
								"certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: EncryptionContractConfiguration
								"encryption_contract_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: PresetSpeke20Audio
										"preset_speke_20_audio": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of audio encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: PresetSpeke20Video
										"preset_speke_20_video": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of video encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ResourceId
								"resource_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The resource ID to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SystemIds
								"system_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The system IDs to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Url
								"url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The URL of the external key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IncludeIframeOnlyStream
				"include_iframe_only_stream": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "When enabled, an I-Frame only stream will be included in the output.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ManifestLayout
				"manifest_layout": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ManifestWindowSeconds
				"manifest_window_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Time window (in seconds) contained in each manifest.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MinBufferTimeSeconds
				"min_buffer_time_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Minimum duration (in seconds) that a player will buffer media before starting the presentation.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MinUpdatePeriodSeconds
				"min_update_period_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PeriodTriggers
				"period_triggers": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains \"ADS\", new periods will be created where the Channel source contains SCTE-35 ad markers.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Profile
				"profile": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentDurationSeconds
				"segment_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentTemplateFormat
				"segment_template_format": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: StreamSelection
				"stream_selection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MaxVideoBitsPerSecond
						"max_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The maximum video bitrate (bps) to include in output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: MinVideoBitsPerSecond
						"min_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The minimum video bitrate (bps) to include in output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: StreamOrder
						"stream_order": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A directive that determines the order of streams in the output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A StreamSelection configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SuggestedPresentationDelaySeconds
				"suggested_presentation_delay_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Duration (in seconds) to delay live content before presentation.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UtcTiming
				"utc_timing": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Determines the type of UTCTiming included in the Media Presentation Description (MPD)",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UtcTimingUri
				"utc_timing_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A short text description of the OriginEndpoint.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A short text description of the OriginEndpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HlsPackage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "An HTTP Live Streaming (HLS) packaging configuration.",
		//	  "properties": {
		//	    "AdMarkers": {
		//	      "description": "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source. \"DATERANGE\" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.",
		//	      "enum": [
		//	        "NONE",
		//	        "SCTE35_ENHANCED",
		//	        "PASSTHROUGH",
		//	        "DATERANGE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "AdTriggers": {
		//	      "description": "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
		//	      "items": {
		//	        "enum": [
		//	          "SPLICE_INSERT",
		//	          "BREAK",
		//	          "PROVIDER_ADVERTISEMENT",
		//	          "DISTRIBUTOR_ADVERTISEMENT",
		//	          "PROVIDER_PLACEMENT_OPPORTUNITY",
		//	          "DISTRIBUTOR_PLACEMENT_OPPORTUNITY",
		//	          "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY",
		//	          "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "AdsOnDeliveryRestrictions": {
		//	      "description": "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
		//	      "enum": [
		//	        "NONE",
		//	        "RESTRICTED",
		//	        "UNRESTRICTED",
		//	        "BOTH"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Encryption": {
		//	      "additionalProperties": false,
		//	      "description": "An HTTP Live Streaming (HLS) encryption configuration.",
		//	      "properties": {
		//	        "ConstantInitializationVector": {
		//	          "description": "A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.",
		//	          "type": "string"
		//	        },
		//	        "EncryptionMethod": {
		//	          "description": "The encryption method to use.",
		//	          "enum": [
		//	            "AES_128",
		//	            "SAMPLE_AES"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "KeyRotationIntervalSeconds": {
		//	          "description": "Interval (in seconds) between each encryption key rotation.",
		//	          "type": "integer"
		//	        },
		//	        "RepeatExtXKey": {
		//	          "description": "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
		//	          "type": "boolean"
		//	        },
		//	        "SpekeKeyProvider": {
		//	          "additionalProperties": false,
		//	          "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
		//	          "properties": {
		//	            "CertificateArn": {
		//	              "description": "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "EncryptionContractConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
		//	              "properties": {
		//	                "PresetSpeke20Audio": {
		//	                  "description": "A collection of audio encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-AUDIO-1",
		//	                    "PRESET-AUDIO-2",
		//	                    "PRESET-AUDIO-3",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "PresetSpeke20Video": {
		//	                  "description": "A collection of video encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-VIDEO-1",
		//	                    "PRESET-VIDEO-2",
		//	                    "PRESET-VIDEO-3",
		//	                    "PRESET-VIDEO-4",
		//	                    "PRESET-VIDEO-5",
		//	                    "PRESET-VIDEO-6",
		//	                    "PRESET-VIDEO-7",
		//	                    "PRESET-VIDEO-8",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "PresetSpeke20Audio",
		//	                "PresetSpeke20Video"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ResourceId": {
		//	              "description": "The resource ID to include in key requests.",
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "SystemIds": {
		//	              "description": "The system IDs to include in key requests.",
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Url": {
		//	              "description": "The URL of the external key provider service.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "ResourceId",
		//	            "SystemIds",
		//	            "Url",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "SpekeKeyProvider"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "IncludeDvbSubtitles": {
		//	      "description": "When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.",
		//	      "type": "boolean"
		//	    },
		//	    "IncludeIframeOnlyStream": {
		//	      "description": "When enabled, an I-Frame only stream will be included in the output.",
		//	      "type": "boolean"
		//	    },
		//	    "PlaylistType": {
		//	      "description": "The HTTP Live Streaming (HLS) playlist type. When either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.",
		//	      "enum": [
		//	        "NONE",
		//	        "EVENT",
		//	        "VOD"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "PlaylistWindowSeconds": {
		//	      "description": "Time window (in seconds) contained in each parent manifest.",
		//	      "type": "integer"
		//	    },
		//	    "ProgramDateTimeIntervalSeconds": {
		//	      "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
		//	      "type": "integer"
		//	    },
		//	    "SegmentDurationSeconds": {
		//	      "description": "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
		//	      "type": "integer"
		//	    },
		//	    "StreamSelection": {
		//	      "additionalProperties": false,
		//	      "description": "A StreamSelection configuration.",
		//	      "properties": {
		//	        "MaxVideoBitsPerSecond": {
		//	          "description": "The maximum video bitrate (bps) to include in output.",
		//	          "type": "integer"
		//	        },
		//	        "MinVideoBitsPerSecond": {
		//	          "description": "The minimum video bitrate (bps) to include in output.",
		//	          "type": "integer"
		//	        },
		//	        "StreamOrder": {
		//	          "description": "A directive that determines the order of streams in the output.",
		//	          "enum": [
		//	            "ORIGINAL",
		//	            "VIDEO_BITRATE_ASCENDING",
		//	            "VIDEO_BITRATE_DESCENDING"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "UseAudioRenditionGroup": {
		//	      "description": "When enabled, audio streams will be placed in rendition groups in the output.",
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"hls_package": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AdMarkers
				"ad_markers": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source. \"DATERANGE\" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AdTriggers
				"ad_triggers": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AdsOnDeliveryRestrictions
				"ads_on_delivery_restrictions": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Encryption
				"encryption": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ConstantInitializationVector
						"constant_initialization_vector": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionMethod
						"encryption_method": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The encryption method to use.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: KeyRotationIntervalSeconds
						"key_rotation_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "Interval (in seconds) between each encryption key rotation.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RepeatExtXKey
						"repeat_ext_x_key": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Description: "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SpekeKeyProvider
						"speke_key_provider": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CertificateArn
								"certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: EncryptionContractConfiguration
								"encryption_contract_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: PresetSpeke20Audio
										"preset_speke_20_audio": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of audio encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: PresetSpeke20Video
										"preset_speke_20_video": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of video encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ResourceId
								"resource_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The resource ID to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SystemIds
								"system_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The system IDs to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Url
								"url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The URL of the external key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "An HTTP Live Streaming (HLS) encryption configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IncludeDvbSubtitles
				"include_dvb_subtitles": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IncludeIframeOnlyStream
				"include_iframe_only_stream": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "When enabled, an I-Frame only stream will be included in the output.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PlaylistType
				"playlist_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The HTTP Live Streaming (HLS) playlist type. When either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PlaylistWindowSeconds
				"playlist_window_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Time window (in seconds) contained in each parent manifest.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ProgramDateTimeIntervalSeconds
				"program_date_time_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentDurationSeconds
				"segment_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: StreamSelection
				"stream_selection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MaxVideoBitsPerSecond
						"max_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The maximum video bitrate (bps) to include in output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: MinVideoBitsPerSecond
						"min_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The minimum video bitrate (bps) to include in output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: StreamOrder
						"stream_order": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A directive that determines the order of streams in the output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A StreamSelection configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UseAudioRenditionGroup
				"use_audio_rendition_group": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "When enabled, audio streams will be placed in rendition groups in the output.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "An HTTP Live Streaming (HLS) packaging configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the OriginEndpoint.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"origin_endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the OriginEndpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ManifestName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A short string appended to the end of the OriginEndpoint URL.",
		//	  "type": "string"
		//	}
		"manifest_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A short string appended to the end of the OriginEndpoint URL.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MssPackage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A Microsoft Smooth Streaming (MSS) packaging configuration.",
		//	  "properties": {
		//	    "Encryption": {
		//	      "additionalProperties": false,
		//	      "description": "A Microsoft Smooth Streaming (MSS) encryption configuration.",
		//	      "properties": {
		//	        "SpekeKeyProvider": {
		//	          "additionalProperties": false,
		//	          "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
		//	          "properties": {
		//	            "CertificateArn": {
		//	              "description": "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "EncryptionContractConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
		//	              "properties": {
		//	                "PresetSpeke20Audio": {
		//	                  "description": "A collection of audio encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-AUDIO-1",
		//	                    "PRESET-AUDIO-2",
		//	                    "PRESET-AUDIO-3",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "PresetSpeke20Video": {
		//	                  "description": "A collection of video encryption presets.",
		//	                  "enum": [
		//	                    "PRESET-VIDEO-1",
		//	                    "PRESET-VIDEO-2",
		//	                    "PRESET-VIDEO-3",
		//	                    "PRESET-VIDEO-4",
		//	                    "PRESET-VIDEO-5",
		//	                    "PRESET-VIDEO-6",
		//	                    "PRESET-VIDEO-7",
		//	                    "PRESET-VIDEO-8",
		//	                    "SHARED",
		//	                    "UNENCRYPTED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "PresetSpeke20Audio",
		//	                "PresetSpeke20Video"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ResourceId": {
		//	              "description": "The resource ID to include in key requests.",
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
		//	              "type": "string"
		//	            },
		//	            "SystemIds": {
		//	              "description": "The system IDs to include in key requests.",
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Url": {
		//	              "description": "The URL of the external key provider service.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "ResourceId",
		//	            "SystemIds",
		//	            "Url",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "SpekeKeyProvider"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "ManifestWindowSeconds": {
		//	      "description": "The time window (in seconds) contained in each manifest.",
		//	      "type": "integer"
		//	    },
		//	    "SegmentDurationSeconds": {
		//	      "description": "The duration (in seconds) of each segment.",
		//	      "type": "integer"
		//	    },
		//	    "StreamSelection": {
		//	      "additionalProperties": false,
		//	      "description": "A StreamSelection configuration.",
		//	      "properties": {
		//	        "MaxVideoBitsPerSecond": {
		//	          "description": "The maximum video bitrate (bps) to include in output.",
		//	          "type": "integer"
		//	        },
		//	        "MinVideoBitsPerSecond": {
		//	          "description": "The minimum video bitrate (bps) to include in output.",
		//	          "type": "integer"
		//	        },
		//	        "StreamOrder": {
		//	          "description": "A directive that determines the order of streams in the output.",
		//	          "enum": [
		//	            "ORIGINAL",
		//	            "VIDEO_BITRATE_ASCENDING",
		//	            "VIDEO_BITRATE_DESCENDING"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"mss_package": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Encryption
				"encryption": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: SpekeKeyProvider
						"speke_key_provider": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CertificateArn
								"certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: EncryptionContractConfiguration
								"encryption_contract_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: PresetSpeke20Audio
										"preset_speke_20_audio": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of audio encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: PresetSpeke20Video
										"preset_speke_20_video": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A collection of video encryption presets.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The configuration to use for encrypting one or more content tracks separately for endpoints that use SPEKE 2.0.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ResourceId
								"resource_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The resource ID to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SystemIds
								"system_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The system IDs to include in key requests.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Url
								"url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The URL of the external key provider service.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A Microsoft Smooth Streaming (MSS) encryption configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ManifestWindowSeconds
				"manifest_window_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The time window (in seconds) contained in each manifest.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SegmentDurationSeconds
				"segment_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The duration (in seconds) of each segment.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: StreamSelection
				"stream_selection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MaxVideoBitsPerSecond
						"max_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The maximum video bitrate (bps) to include in output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: MinVideoBitsPerSecond
						"min_video_bits_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The minimum video bitrate (bps) to include in output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: StreamOrder
						"stream_order": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A directive that determines the order of streams in the output.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A StreamSelection configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A Microsoft Smooth Streaming (MSS) packaging configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Origination
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination",
		//	  "enum": [
		//	    "ALLOW",
		//	    "DENY"
		//	  ],
		//	  "type": "string"
		//	}
		"origination": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StartoverWindowSeconds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.",
		//	  "type": "integer"
		//	}
		"startover_window_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A collection of tags associated with a resource",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A collection of tags associated with a resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TimeDelaySeconds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.",
		//	  "type": "integer"
		//	}
		"time_delay_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Url
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The URL of the packaged OriginEndpoint for consumption.",
		//	  "type": "string"
		//	}
		"url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The URL of the packaged OriginEndpoint for consumption.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Whitelist
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"whitelist": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::MediaPackage::OriginEndpoint",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::MediaPackage::OriginEndpoint").WithTerraformTypeName("awscc_mediapackage_origin_endpoint")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"ad_markers":                           "AdMarkers",
		"ad_triggers":                          "AdTriggers",
		"ads_on_delivery_restrictions":         "AdsOnDeliveryRestrictions",
		"arn":                                  "Arn",
		"authorization":                        "Authorization",
		"cdn_identifier_secret":                "CdnIdentifierSecret",
		"certificate_arn":                      "CertificateArn",
		"channel_id":                           "ChannelId",
		"cmaf_package":                         "CmafPackage",
		"constant_initialization_vector":       "ConstantInitializationVector",
		"dash_package":                         "DashPackage",
		"description":                          "Description",
		"encryption":                           "Encryption",
		"encryption_contract_configuration":    "EncryptionContractConfiguration",
		"encryption_method":                    "EncryptionMethod",
		"hls_manifests":                        "HlsManifests",
		"hls_package":                          "HlsPackage",
		"id":                                   "Id",
		"include_dvb_subtitles":                "IncludeDvbSubtitles",
		"include_iframe_only_stream":           "IncludeIframeOnlyStream",
		"key":                                  "Key",
		"key_rotation_interval_seconds":        "KeyRotationIntervalSeconds",
		"manifest_layout":                      "ManifestLayout",
		"manifest_name":                        "ManifestName",
		"manifest_window_seconds":              "ManifestWindowSeconds",
		"max_video_bits_per_second":            "MaxVideoBitsPerSecond",
		"min_buffer_time_seconds":              "MinBufferTimeSeconds",
		"min_update_period_seconds":            "MinUpdatePeriodSeconds",
		"min_video_bits_per_second":            "MinVideoBitsPerSecond",
		"mss_package":                          "MssPackage",
		"origin_endpoint_id":                   "Id",
		"origination":                          "Origination",
		"period_triggers":                      "PeriodTriggers",
		"playlist_type":                        "PlaylistType",
		"playlist_window_seconds":              "PlaylistWindowSeconds",
		"preset_speke_20_audio":                "PresetSpeke20Audio",
		"preset_speke_20_video":                "PresetSpeke20Video",
		"profile":                              "Profile",
		"program_date_time_interval_seconds":   "ProgramDateTimeIntervalSeconds",
		"repeat_ext_x_key":                     "RepeatExtXKey",
		"resource_id":                          "ResourceId",
		"role_arn":                             "RoleArn",
		"secrets_role_arn":                     "SecretsRoleArn",
		"segment_duration_seconds":             "SegmentDurationSeconds",
		"segment_prefix":                       "SegmentPrefix",
		"segment_template_format":              "SegmentTemplateFormat",
		"speke_key_provider":                   "SpekeKeyProvider",
		"startover_window_seconds":             "StartoverWindowSeconds",
		"stream_order":                         "StreamOrder",
		"stream_selection":                     "StreamSelection",
		"suggested_presentation_delay_seconds": "SuggestedPresentationDelaySeconds",
		"system_ids":                           "SystemIds",
		"tags":                                 "Tags",
		"time_delay_seconds":                   "TimeDelaySeconds",
		"url":                                  "Url",
		"use_audio_rendition_group":            "UseAudioRenditionGroup",
		"utc_timing":                           "UtcTiming",
		"utc_timing_uri":                       "UtcTimingUri",
		"value":                                "Value",
		"whitelist":                            "Whitelist",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
