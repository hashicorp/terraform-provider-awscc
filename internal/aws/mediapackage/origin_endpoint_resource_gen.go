// Code generated by generators/resource/main.go; DO NOT EDIT.

package mediapackage

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"

	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_mediapackage_origin_endpoint", originEndpointResourceType)
}

// originEndpointResourceType returns the Terraform awscc_mediapackage_origin_endpoint resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::MediaPackage::OriginEndpoint resource type.
func originEndpointResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon Resource Name (ARN) assigned to the OriginEndpoint.",
			//   "type": "string"
			// }
			Description: "The Amazon Resource Name (ARN) assigned to the OriginEndpoint.",
			Type:        types.StringType,
			Computed:    true,
		},
		"authorization": {
			// Property: Authorization
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "CDN Authorization credentials",
			//   "properties": {
			//     "CdnIdentifierSecret": {
			//       "description": "The Amazon Resource Name (ARN) for the secret in Secrets Manager that your Content Distribution Network (CDN) uses for authorization to access your endpoint.",
			//       "type": "string"
			//     },
			//     "SecretsRoleArn": {
			//       "description": "The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.",
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "SecretsRoleArn",
			//     "CdnIdentifierSecret"
			//   ],
			//   "type": "object"
			// }
			Description: "CDN Authorization credentials",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"cdn_identifier_secret": {
						// Property: CdnIdentifierSecret
						Description: "The Amazon Resource Name (ARN) for the secret in Secrets Manager that your Content Distribution Network (CDN) uses for authorization to access your endpoint.",
						Type:        types.StringType,
						Required:    true,
					},
					"secrets_role_arn": {
						// Property: SecretsRoleArn
						Description: "The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.",
						Type:        types.StringType,
						Required:    true,
					},
				},
			),
			Optional: true,
		},
		"channel_id": {
			// Property: ChannelId
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of the Channel the OriginEndpoint is associated with.",
			//   "type": "string"
			// }
			Description: "The ID of the Channel the OriginEndpoint is associated with.",
			Type:        types.StringType,
			Required:    true,
		},
		"cmaf_package": {
			// Property: CmafPackage
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "A Common Media Application Format (CMAF) packaging configuration.",
			//   "properties": {
			//     "Encryption": {
			//       "additionalProperties": false,
			//       "description": "A Common Media Application Format (CMAF) encryption configuration.",
			//       "properties": {
			//         "ConstantInitializationVector": {
			//           "description": "An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).",
			//           "maxLength": 32,
			//           "minLength": 32,
			//           "pattern": "",
			//           "type": "string"
			//         },
			//         "KeyRotationIntervalSeconds": {
			//           "description": "Time (in seconds) between each encryption key rotation.",
			//           "type": "integer"
			//         },
			//         "SpekeKeyProvider": {
			//           "additionalProperties": false,
			//           "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
			//           "properties": {
			//             "CertificateArn": {
			//               "description": "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
			//               "type": "string"
			//             },
			//             "ResourceId": {
			//               "description": "The resource ID to include in key requests.",
			//               "type": "string"
			//             },
			//             "RoleArn": {
			//               "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
			//               "type": "string"
			//             },
			//             "SystemIds": {
			//               "description": "The system IDs to include in key requests.",
			//               "items": {
			//                 "type": "string"
			//               },
			//               "type": "array"
			//             },
			//             "Url": {
			//               "description": "The URL of the external key provider service.",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "ResourceId",
			//             "SystemIds",
			//             "Url",
			//             "RoleArn"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "required": [
			//         "SpekeKeyProvider"
			//       ],
			//       "type": "object"
			//     },
			//     "HlsManifests": {
			//       "description": "A list of HLS manifest configurations",
			//       "items": {
			//         "additionalProperties": false,
			//         "description": "A HTTP Live Streaming (HLS) manifest configuration.",
			//         "properties": {
			//           "AdMarkers": {
			//             "description": "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source. \"DATERANGE\" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.",
			//             "enum": [
			//               "NONE",
			//               "SCTE35_ENHANCED",
			//               "PASSTHROUGH",
			//               "DATERANGE"
			//             ],
			//             "type": "string"
			//           },
			//           "AdTriggers": {
			//             "description": "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
			//             "items": {
			//               "enum": [
			//                 "SPLICE_INSERT",
			//                 "BREAK",
			//                 "PROVIDER_ADVERTISEMENT",
			//                 "DISTRIBUTOR_ADVERTISEMENT",
			//                 "PROVIDER_PLACEMENT_OPPORTUNITY",
			//                 "DISTRIBUTOR_PLACEMENT_OPPORTUNITY",
			//                 "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY",
			//                 "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY"
			//               ],
			//               "type": "string"
			//             },
			//             "type": "array"
			//           },
			//           "AdsOnDeliveryRestrictions": {
			//             "description": "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
			//             "enum": [
			//               "NONE",
			//               "RESTRICTED",
			//               "UNRESTRICTED",
			//               "BOTH"
			//             ],
			//             "type": "string"
			//           },
			//           "Id": {
			//             "description": "The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.",
			//             "type": "string"
			//           },
			//           "IncludeIframeOnlyStream": {
			//             "description": "When enabled, an I-Frame only stream will be included in the output.",
			//             "type": "boolean"
			//           },
			//           "ManifestName": {
			//             "description": "An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.",
			//             "type": "string"
			//           },
			//           "PlaylistType": {
			//             "description": "The HTTP Live Streaming (HLS) playlist type. When either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.",
			//             "enum": [
			//               "NONE",
			//               "EVENT",
			//               "VOD"
			//             ],
			//             "type": "string"
			//           },
			//           "PlaylistWindowSeconds": {
			//             "description": "Time window (in seconds) contained in each parent manifest.",
			//             "type": "integer"
			//           },
			//           "ProgramDateTimeIntervalSeconds": {
			//             "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
			//             "type": "integer"
			//           },
			//           "Url": {
			//             "description": "The URL of the packaged OriginEndpoint for consumption.",
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "Id"
			//         ],
			//         "type": "object"
			//       },
			//       "type": "array"
			//     },
			//     "SegmentDurationSeconds": {
			//       "description": "Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.",
			//       "type": "integer"
			//     },
			//     "SegmentPrefix": {
			//       "description": "An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.",
			//       "type": "string"
			//     },
			//     "StreamSelection": {
			//       "additionalProperties": false,
			//       "description": "A StreamSelection configuration.",
			//       "properties": {
			//         "MaxVideoBitsPerSecond": {
			//           "description": "The maximum video bitrate (bps) to include in output.",
			//           "type": "integer"
			//         },
			//         "MinVideoBitsPerSecond": {
			//           "description": "The minimum video bitrate (bps) to include in output.",
			//           "type": "integer"
			//         },
			//         "StreamOrder": {
			//           "description": "A directive that determines the order of streams in the output.",
			//           "enum": [
			//             "ORIGINAL",
			//             "VIDEO_BITRATE_ASCENDING",
			//             "VIDEO_BITRATE_DESCENDING"
			//           ],
			//           "type": "string"
			//         }
			//       },
			//       "type": "object"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "A Common Media Application Format (CMAF) packaging configuration.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"encryption": {
						// Property: Encryption
						Description: "A Common Media Application Format (CMAF) encryption configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"constant_initialization_vector": {
									// Property: ConstantInitializationVector
									Description: "An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(32, 32),
									},
								},
								"key_rotation_interval_seconds": {
									// Property: KeyRotationIntervalSeconds
									Description: "Time (in seconds) between each encryption key rotation.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"speke_key_provider": {
									// Property: SpekeKeyProvider
									Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"certificate_arn": {
												// Property: CertificateArn
												Description: "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
												Type:        types.StringType,
												Optional:    true,
											},
											"resource_id": {
												// Property: ResourceId
												Description: "The resource ID to include in key requests.",
												Type:        types.StringType,
												Required:    true,
											},
											"role_arn": {
												// Property: RoleArn
												Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
											"system_ids": {
												// Property: SystemIds
												Description: "The system IDs to include in key requests.",
												Type:        types.ListType{ElemType: types.StringType},
												Required:    true,
											},
											"url": {
												// Property: Url
												Description: "The URL of the external key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
										},
									),
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"hls_manifests": {
						// Property: HlsManifests
						Description: "A list of HLS manifest configurations",
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"ad_markers": {
									// Property: AdMarkers
									Description: "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source. \"DATERANGE\" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"NONE",
											"SCTE35_ENHANCED",
											"PASSTHROUGH",
											"DATERANGE",
										}),
									},
								},
								"ad_triggers": {
									// Property: AdTriggers
									Description: "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
									Type:        types.ListType{ElemType: types.StringType},
									Optional:    true,
								},
								"ads_on_delivery_restrictions": {
									// Property: AdsOnDeliveryRestrictions
									Description: "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"NONE",
											"RESTRICTED",
											"UNRESTRICTED",
											"BOTH",
										}),
									},
								},
								"id": {
									// Property: Id
									Description: "The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created.",
									Type:        types.StringType,
									Required:    true,
								},
								"include_iframe_only_stream": {
									// Property: IncludeIframeOnlyStream
									Description: "When enabled, an I-Frame only stream will be included in the output.",
									Type:        types.BoolType,
									Optional:    true,
								},
								"manifest_name": {
									// Property: ManifestName
									Description: "An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint.",
									Type:        types.StringType,
									Optional:    true,
								},
								"playlist_type": {
									// Property: PlaylistType
									Description: "The HTTP Live Streaming (HLS) playlist type. When either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"NONE",
											"EVENT",
											"VOD",
										}),
									},
								},
								"playlist_window_seconds": {
									// Property: PlaylistWindowSeconds
									Description: "Time window (in seconds) contained in each parent manifest.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"program_date_time_interval_seconds": {
									// Property: ProgramDateTimeIntervalSeconds
									Description: "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"url": {
									// Property: Url
									Description: "The URL of the packaged OriginEndpoint for consumption.",
									Type:        types.StringType,
									Optional:    true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"segment_duration_seconds": {
						// Property: SegmentDurationSeconds
						Description: "Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"segment_prefix": {
						// Property: SegmentPrefix
						Description: "An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId.",
						Type:        types.StringType,
						Optional:    true,
					},
					"stream_selection": {
						// Property: StreamSelection
						Description: "A StreamSelection configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"max_video_bits_per_second": {
									// Property: MaxVideoBitsPerSecond
									Description: "The maximum video bitrate (bps) to include in output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"min_video_bits_per_second": {
									// Property: MinVideoBitsPerSecond
									Description: "The minimum video bitrate (bps) to include in output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"stream_order": {
									// Property: StreamOrder
									Description: "A directive that determines the order of streams in the output.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"ORIGINAL",
											"VIDEO_BITRATE_ASCENDING",
											"VIDEO_BITRATE_DESCENDING",
										}),
									},
								},
							},
						),
						Optional: true,
					},
				},
			),
			Optional: true,
		},
		"dash_package": {
			// Property: DashPackage
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
			//   "properties": {
			//     "AdTriggers": {
			//       "description": "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
			//       "items": {
			//         "enum": [
			//           "SPLICE_INSERT",
			//           "BREAK",
			//           "PROVIDER_ADVERTISEMENT",
			//           "DISTRIBUTOR_ADVERTISEMENT",
			//           "PROVIDER_PLACEMENT_OPPORTUNITY",
			//           "DISTRIBUTOR_PLACEMENT_OPPORTUNITY",
			//           "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY",
			//           "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY"
			//         ],
			//         "type": "string"
			//       },
			//       "type": "array"
			//     },
			//     "AdsOnDeliveryRestrictions": {
			//       "description": "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
			//       "enum": [
			//         "NONE",
			//         "RESTRICTED",
			//         "UNRESTRICTED",
			//         "BOTH"
			//       ],
			//       "type": "string"
			//     },
			//     "Encryption": {
			//       "additionalProperties": false,
			//       "description": "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.",
			//       "properties": {
			//         "KeyRotationIntervalSeconds": {
			//           "description": "Time (in seconds) between each encryption key rotation.",
			//           "type": "integer"
			//         },
			//         "SpekeKeyProvider": {
			//           "additionalProperties": false,
			//           "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
			//           "properties": {
			//             "CertificateArn": {
			//               "description": "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
			//               "type": "string"
			//             },
			//             "ResourceId": {
			//               "description": "The resource ID to include in key requests.",
			//               "type": "string"
			//             },
			//             "RoleArn": {
			//               "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
			//               "type": "string"
			//             },
			//             "SystemIds": {
			//               "description": "The system IDs to include in key requests.",
			//               "items": {
			//                 "type": "string"
			//               },
			//               "type": "array"
			//             },
			//             "Url": {
			//               "description": "The URL of the external key provider service.",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "ResourceId",
			//             "SystemIds",
			//             "Url",
			//             "RoleArn"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "required": [
			//         "SpekeKeyProvider"
			//       ],
			//       "type": "object"
			//     },
			//     "ManifestLayout": {
			//       "description": "Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.",
			//       "enum": [
			//         "FULL",
			//         "COMPACT"
			//       ],
			//       "type": "string"
			//     },
			//     "ManifestWindowSeconds": {
			//       "description": "Time window (in seconds) contained in each manifest.",
			//       "type": "integer"
			//     },
			//     "MinBufferTimeSeconds": {
			//       "description": "Minimum duration (in seconds) that a player will buffer media before starting the presentation.",
			//       "type": "integer"
			//     },
			//     "MinUpdatePeriodSeconds": {
			//       "description": "Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).",
			//       "type": "integer"
			//     },
			//     "PeriodTriggers": {
			//       "description": "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains \"ADS\", new periods will be created where the Channel source contains SCTE-35 ad markers.",
			//       "items": {
			//         "enum": [
			//           "ADS"
			//         ],
			//         "type": "string"
			//       },
			//       "type": "array"
			//     },
			//     "Profile": {
			//       "description": "The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled.",
			//       "enum": [
			//         "NONE",
			//         "HBBTV_1_5"
			//       ],
			//       "type": "string"
			//     },
			//     "SegmentDurationSeconds": {
			//       "description": "Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.",
			//       "type": "integer"
			//     },
			//     "SegmentTemplateFormat": {
			//       "description": "Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.",
			//       "enum": [
			//         "NUMBER_WITH_TIMELINE",
			//         "TIME_WITH_TIMELINE",
			//         "NUMBER_WITH_DURATION"
			//       ],
			//       "type": "string"
			//     },
			//     "StreamSelection": {
			//       "additionalProperties": false,
			//       "description": "A StreamSelection configuration.",
			//       "properties": {
			//         "MaxVideoBitsPerSecond": {
			//           "description": "The maximum video bitrate (bps) to include in output.",
			//           "type": "integer"
			//         },
			//         "MinVideoBitsPerSecond": {
			//           "description": "The minimum video bitrate (bps) to include in output.",
			//           "type": "integer"
			//         },
			//         "StreamOrder": {
			//           "description": "A directive that determines the order of streams in the output.",
			//           "enum": [
			//             "ORIGINAL",
			//             "VIDEO_BITRATE_ASCENDING",
			//             "VIDEO_BITRATE_DESCENDING"
			//           ],
			//           "type": "string"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "SuggestedPresentationDelaySeconds": {
			//       "description": "Duration (in seconds) to delay live content before presentation.",
			//       "type": "integer"
			//     },
			//     "UtcTiming": {
			//       "description": "Determines the type of UTCTiming included in the Media Presentation Description (MPD)",
			//       "enum": [
			//         "HTTP-ISO",
			//         "HTTP-HEAD",
			//         "NONE"
			//       ],
			//       "type": "string"
			//     },
			//     "UtcTimingUri": {
			//       "description": "Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO or HTTP-HEAD",
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"ad_triggers": {
						// Property: AdTriggers
						Description: "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
						Type:        types.ListType{ElemType: types.StringType},
						Optional:    true,
					},
					"ads_on_delivery_restrictions": {
						// Property: AdsOnDeliveryRestrictions
						Description: "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"NONE",
								"RESTRICTED",
								"UNRESTRICTED",
								"BOTH",
							}),
						},
					},
					"encryption": {
						// Property: Encryption
						Description: "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"key_rotation_interval_seconds": {
									// Property: KeyRotationIntervalSeconds
									Description: "Time (in seconds) between each encryption key rotation.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"speke_key_provider": {
									// Property: SpekeKeyProvider
									Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"certificate_arn": {
												// Property: CertificateArn
												Description: "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
												Type:        types.StringType,
												Optional:    true,
											},
											"resource_id": {
												// Property: ResourceId
												Description: "The resource ID to include in key requests.",
												Type:        types.StringType,
												Required:    true,
											},
											"role_arn": {
												// Property: RoleArn
												Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
											"system_ids": {
												// Property: SystemIds
												Description: "The system IDs to include in key requests.",
												Type:        types.ListType{ElemType: types.StringType},
												Required:    true,
											},
											"url": {
												// Property: Url
												Description: "The URL of the external key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
										},
									),
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"manifest_layout": {
						// Property: ManifestLayout
						Description: "Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"FULL",
								"COMPACT",
							}),
						},
					},
					"manifest_window_seconds": {
						// Property: ManifestWindowSeconds
						Description: "Time window (in seconds) contained in each manifest.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"min_buffer_time_seconds": {
						// Property: MinBufferTimeSeconds
						Description: "Minimum duration (in seconds) that a player will buffer media before starting the presentation.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"min_update_period_seconds": {
						// Property: MinUpdatePeriodSeconds
						Description: "Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD).",
						Type:        types.NumberType,
						Optional:    true,
					},
					"period_triggers": {
						// Property: PeriodTriggers
						Description: "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains \"ADS\", new periods will be created where the Channel source contains SCTE-35 ad markers.",
						Type:        types.ListType{ElemType: types.StringType},
						Optional:    true,
					},
					"profile": {
						// Property: Profile
						Description: "The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled.",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"NONE",
								"HBBTV_1_5",
							}),
						},
					},
					"segment_duration_seconds": {
						// Property: SegmentDurationSeconds
						Description: "Duration (in seconds) of each segment. Actual segments will be rounded to the nearest multiple of the source segment duration.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"segment_template_format": {
						// Property: SegmentTemplateFormat
						Description: "Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"NUMBER_WITH_TIMELINE",
								"TIME_WITH_TIMELINE",
								"NUMBER_WITH_DURATION",
							}),
						},
					},
					"stream_selection": {
						// Property: StreamSelection
						Description: "A StreamSelection configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"max_video_bits_per_second": {
									// Property: MaxVideoBitsPerSecond
									Description: "The maximum video bitrate (bps) to include in output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"min_video_bits_per_second": {
									// Property: MinVideoBitsPerSecond
									Description: "The minimum video bitrate (bps) to include in output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"stream_order": {
									// Property: StreamOrder
									Description: "A directive that determines the order of streams in the output.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"ORIGINAL",
											"VIDEO_BITRATE_ASCENDING",
											"VIDEO_BITRATE_DESCENDING",
										}),
									},
								},
							},
						),
						Optional: true,
					},
					"suggested_presentation_delay_seconds": {
						// Property: SuggestedPresentationDelaySeconds
						Description: "Duration (in seconds) to delay live content before presentation.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"utc_timing": {
						// Property: UtcTiming
						Description: "Determines the type of UTCTiming included in the Media Presentation Description (MPD)",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"HTTP-ISO",
								"HTTP-HEAD",
								"NONE",
							}),
						},
					},
					"utc_timing_uri": {
						// Property: UtcTimingUri
						Description: "Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO or HTTP-HEAD",
						Type:        types.StringType,
						Optional:    true,
					},
				},
			),
			Optional: true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "description": "A short text description of the OriginEndpoint.",
			//   "type": "string"
			// }
			Description: "A short text description of the OriginEndpoint.",
			Type:        types.StringType,
			Optional:    true,
		},
		"hls_package": {
			// Property: HlsPackage
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "An HTTP Live Streaming (HLS) packaging configuration.",
			//   "properties": {
			//     "AdMarkers": {
			//       "description": "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source. \"DATERANGE\" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.",
			//       "enum": [
			//         "NONE",
			//         "SCTE35_ENHANCED",
			//         "PASSTHROUGH",
			//         "DATERANGE"
			//       ],
			//       "type": "string"
			//     },
			//     "AdTriggers": {
			//       "description": "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
			//       "items": {
			//         "enum": [
			//           "SPLICE_INSERT",
			//           "BREAK",
			//           "PROVIDER_ADVERTISEMENT",
			//           "DISTRIBUTOR_ADVERTISEMENT",
			//           "PROVIDER_PLACEMENT_OPPORTUNITY",
			//           "DISTRIBUTOR_PLACEMENT_OPPORTUNITY",
			//           "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY",
			//           "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY"
			//         ],
			//         "type": "string"
			//       },
			//       "type": "array"
			//     },
			//     "AdsOnDeliveryRestrictions": {
			//       "description": "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
			//       "enum": [
			//         "NONE",
			//         "RESTRICTED",
			//         "UNRESTRICTED",
			//         "BOTH"
			//       ],
			//       "type": "string"
			//     },
			//     "Encryption": {
			//       "additionalProperties": false,
			//       "description": "An HTTP Live Streaming (HLS) encryption configuration.",
			//       "properties": {
			//         "ConstantInitializationVector": {
			//           "description": "A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.",
			//           "type": "string"
			//         },
			//         "EncryptionMethod": {
			//           "description": "The encryption method to use.",
			//           "enum": [
			//             "AES_128",
			//             "SAMPLE_AES"
			//           ],
			//           "type": "string"
			//         },
			//         "KeyRotationIntervalSeconds": {
			//           "description": "Interval (in seconds) between each encryption key rotation.",
			//           "type": "integer"
			//         },
			//         "RepeatExtXKey": {
			//           "description": "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
			//           "type": "boolean"
			//         },
			//         "SpekeKeyProvider": {
			//           "additionalProperties": false,
			//           "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
			//           "properties": {
			//             "CertificateArn": {
			//               "description": "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
			//               "type": "string"
			//             },
			//             "ResourceId": {
			//               "description": "The resource ID to include in key requests.",
			//               "type": "string"
			//             },
			//             "RoleArn": {
			//               "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
			//               "type": "string"
			//             },
			//             "SystemIds": {
			//               "description": "The system IDs to include in key requests.",
			//               "items": {
			//                 "type": "string"
			//               },
			//               "type": "array"
			//             },
			//             "Url": {
			//               "description": "The URL of the external key provider service.",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "ResourceId",
			//             "SystemIds",
			//             "Url",
			//             "RoleArn"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "required": [
			//         "SpekeKeyProvider"
			//       ],
			//       "type": "object"
			//     },
			//     "IncludeIframeOnlyStream": {
			//       "description": "When enabled, an I-Frame only stream will be included in the output.",
			//       "type": "boolean"
			//     },
			//     "PlaylistType": {
			//       "description": "The HTTP Live Streaming (HLS) playlist type. When either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.",
			//       "enum": [
			//         "NONE",
			//         "EVENT",
			//         "VOD"
			//       ],
			//       "type": "string"
			//     },
			//     "PlaylistWindowSeconds": {
			//       "description": "Time window (in seconds) contained in each parent manifest.",
			//       "type": "integer"
			//     },
			//     "ProgramDateTimeIntervalSeconds": {
			//       "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
			//       "type": "integer"
			//     },
			//     "SegmentDurationSeconds": {
			//       "description": "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
			//       "type": "integer"
			//     },
			//     "StreamSelection": {
			//       "additionalProperties": false,
			//       "description": "A StreamSelection configuration.",
			//       "properties": {
			//         "MaxVideoBitsPerSecond": {
			//           "description": "The maximum video bitrate (bps) to include in output.",
			//           "type": "integer"
			//         },
			//         "MinVideoBitsPerSecond": {
			//           "description": "The minimum video bitrate (bps) to include in output.",
			//           "type": "integer"
			//         },
			//         "StreamOrder": {
			//           "description": "A directive that determines the order of streams in the output.",
			//           "enum": [
			//             "ORIGINAL",
			//             "VIDEO_BITRATE_ASCENDING",
			//             "VIDEO_BITRATE_DESCENDING"
			//           ],
			//           "type": "string"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "UseAudioRenditionGroup": {
			//       "description": "When enabled, audio streams will be placed in rendition groups in the output.",
			//       "type": "boolean"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "An HTTP Live Streaming (HLS) packaging configuration.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"ad_markers": {
						// Property: AdMarkers
						Description: "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source. \"DATERANGE\" inserts EXT-X-DATERANGE tags to signal ad and program transition events in HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value that is greater than 0.",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"NONE",
								"SCTE35_ENHANCED",
								"PASSTHROUGH",
								"DATERANGE",
							}),
						},
					},
					"ad_triggers": {
						// Property: AdTriggers
						Description: "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no ad markers are output.  Specify multiple items to create ad markers for all of the included message types.",
						Type:        types.ListType{ElemType: types.StringType},
						Optional:    true,
					},
					"ads_on_delivery_restrictions": {
						// Property: AdsOnDeliveryRestrictions
						Description: "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to determine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become ads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that contain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that do not contain delivery restrictions will be treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags and are always treated as ads if specified in AdTriggers.",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"NONE",
								"RESTRICTED",
								"UNRESTRICTED",
								"BOTH",
							}),
						},
					},
					"encryption": {
						// Property: Encryption
						Description: "An HTTP Live Streaming (HLS) encryption configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"constant_initialization_vector": {
									// Property: ConstantInitializationVector
									Description: "A constant initialization vector for encryption (optional). When not specified the initialization vector will be periodically rotated.",
									Type:        types.StringType,
									Optional:    true,
								},
								"encryption_method": {
									// Property: EncryptionMethod
									Description: "The encryption method to use.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"AES_128",
											"SAMPLE_AES",
										}),
									},
								},
								"key_rotation_interval_seconds": {
									// Property: KeyRotationIntervalSeconds
									Description: "Interval (in seconds) between each encryption key rotation.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"repeat_ext_x_key": {
									// Property: RepeatExtXKey
									Description: "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
									Type:        types.BoolType,
									Optional:    true,
								},
								"speke_key_provider": {
									// Property: SpekeKeyProvider
									Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"certificate_arn": {
												// Property: CertificateArn
												Description: "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
												Type:        types.StringType,
												Optional:    true,
											},
											"resource_id": {
												// Property: ResourceId
												Description: "The resource ID to include in key requests.",
												Type:        types.StringType,
												Required:    true,
											},
											"role_arn": {
												// Property: RoleArn
												Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
											"system_ids": {
												// Property: SystemIds
												Description: "The system IDs to include in key requests.",
												Type:        types.ListType{ElemType: types.StringType},
												Required:    true,
											},
											"url": {
												// Property: Url
												Description: "The URL of the external key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
										},
									),
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"include_iframe_only_stream": {
						// Property: IncludeIframeOnlyStream
						Description: "When enabled, an I-Frame only stream will be included in the output.",
						Type:        types.BoolType,
						Optional:    true,
					},
					"playlist_type": {
						// Property: PlaylistType
						Description: "The HTTP Live Streaming (HLS) playlist type. When either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE entry will be included in the media playlist.",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"NONE",
								"EVENT",
								"VOD",
							}),
						},
					},
					"playlist_window_seconds": {
						// Property: PlaylistWindowSeconds
						Description: "Time window (in seconds) contained in each parent manifest.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"program_date_time_interval_seconds": {
						// Property: ProgramDateTimeIntervalSeconds
						Description: "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"segment_duration_seconds": {
						// Property: SegmentDurationSeconds
						Description: "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"stream_selection": {
						// Property: StreamSelection
						Description: "A StreamSelection configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"max_video_bits_per_second": {
									// Property: MaxVideoBitsPerSecond
									Description: "The maximum video bitrate (bps) to include in output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"min_video_bits_per_second": {
									// Property: MinVideoBitsPerSecond
									Description: "The minimum video bitrate (bps) to include in output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"stream_order": {
									// Property: StreamOrder
									Description: "A directive that determines the order of streams in the output.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"ORIGINAL",
											"VIDEO_BITRATE_ASCENDING",
											"VIDEO_BITRATE_DESCENDING",
										}),
									},
								},
							},
						),
						Optional: true,
					},
					"use_audio_rendition_group": {
						// Property: UseAudioRenditionGroup
						Description: "When enabled, audio streams will be placed in rendition groups in the output.",
						Type:        types.BoolType,
						Optional:    true,
					},
				},
			),
			Optional: true,
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of the OriginEndpoint.",
			//   "maxLength": 256,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The ID of the OriginEndpoint.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 256),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(), // Id is a force-new property.
			},
		},
		"manifest_name": {
			// Property: ManifestName
			// CloudFormation resource type schema:
			// {
			//   "description": "A short string appended to the end of the OriginEndpoint URL.",
			//   "type": "string"
			// }
			Description: "A short string appended to the end of the OriginEndpoint URL.",
			Type:        types.StringType,
			Optional:    true,
		},
		"mss_package": {
			// Property: MssPackage
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "A Microsoft Smooth Streaming (MSS) packaging configuration.",
			//   "properties": {
			//     "Encryption": {
			//       "additionalProperties": false,
			//       "description": "A Microsoft Smooth Streaming (MSS) encryption configuration.",
			//       "properties": {
			//         "SpekeKeyProvider": {
			//           "additionalProperties": false,
			//           "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
			//           "properties": {
			//             "CertificateArn": {
			//               "description": "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
			//               "type": "string"
			//             },
			//             "ResourceId": {
			//               "description": "The resource ID to include in key requests.",
			//               "type": "string"
			//             },
			//             "RoleArn": {
			//               "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
			//               "type": "string"
			//             },
			//             "SystemIds": {
			//               "description": "The system IDs to include in key requests.",
			//               "items": {
			//                 "type": "string"
			//               },
			//               "type": "array"
			//             },
			//             "Url": {
			//               "description": "The URL of the external key provider service.",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "ResourceId",
			//             "SystemIds",
			//             "Url",
			//             "RoleArn"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "required": [
			//         "SpekeKeyProvider"
			//       ],
			//       "type": "object"
			//     },
			//     "ManifestWindowSeconds": {
			//       "description": "The time window (in seconds) contained in each manifest.",
			//       "type": "integer"
			//     },
			//     "SegmentDurationSeconds": {
			//       "description": "The duration (in seconds) of each segment.",
			//       "type": "integer"
			//     },
			//     "StreamSelection": {
			//       "additionalProperties": false,
			//       "description": "A StreamSelection configuration.",
			//       "properties": {
			//         "MaxVideoBitsPerSecond": {
			//           "description": "The maximum video bitrate (bps) to include in output.",
			//           "type": "integer"
			//         },
			//         "MinVideoBitsPerSecond": {
			//           "description": "The minimum video bitrate (bps) to include in output.",
			//           "type": "integer"
			//         },
			//         "StreamOrder": {
			//           "description": "A directive that determines the order of streams in the output.",
			//           "enum": [
			//             "ORIGINAL",
			//             "VIDEO_BITRATE_ASCENDING",
			//             "VIDEO_BITRATE_DESCENDING"
			//           ],
			//           "type": "string"
			//         }
			//       },
			//       "type": "object"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "A Microsoft Smooth Streaming (MSS) packaging configuration.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"encryption": {
						// Property: Encryption
						Description: "A Microsoft Smooth Streaming (MSS) encryption configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"speke_key_provider": {
									// Property: SpekeKeyProvider
									Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"certificate_arn": {
												// Property: CertificateArn
												Description: "An Amazon Resource Name (ARN) of a Certificate Manager certificate that MediaPackage will use for enforcing secure end-to-end data transfer with the key provider service.",
												Type:        types.StringType,
												Optional:    true,
											},
											"resource_id": {
												// Property: ResourceId
												Description: "The resource ID to include in key requests.",
												Type:        types.StringType,
												Required:    true,
											},
											"role_arn": {
												// Property: RoleArn
												Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
											"system_ids": {
												// Property: SystemIds
												Description: "The system IDs to include in key requests.",
												Type:        types.ListType{ElemType: types.StringType},
												Required:    true,
											},
											"url": {
												// Property: Url
												Description: "The URL of the external key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
										},
									),
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"manifest_window_seconds": {
						// Property: ManifestWindowSeconds
						Description: "The time window (in seconds) contained in each manifest.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"segment_duration_seconds": {
						// Property: SegmentDurationSeconds
						Description: "The duration (in seconds) of each segment.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"stream_selection": {
						// Property: StreamSelection
						Description: "A StreamSelection configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"max_video_bits_per_second": {
									// Property: MaxVideoBitsPerSecond
									Description: "The maximum video bitrate (bps) to include in output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"min_video_bits_per_second": {
									// Property: MinVideoBitsPerSecond
									Description: "The minimum video bitrate (bps) to include in output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"stream_order": {
									// Property: StreamOrder
									Description: "A directive that determines the order of streams in the output.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"ORIGINAL",
											"VIDEO_BITRATE_ASCENDING",
											"VIDEO_BITRATE_DESCENDING",
										}),
									},
								},
							},
						),
						Optional: true,
					},
				},
			),
			Optional: true,
		},
		"origination": {
			// Property: Origination
			// CloudFormation resource type schema:
			// {
			//   "description": "Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination",
			//   "enum": [
			//     "ALLOW",
			//     "DENY"
			//   ],
			//   "type": "string"
			// }
			Description: "Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination",
			Type:        types.StringType,
			Optional:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringInSlice([]string{
					"ALLOW",
					"DENY",
				}),
			},
		},
		"startover_window_seconds": {
			// Property: StartoverWindowSeconds
			// CloudFormation resource type schema:
			// {
			//   "description": "Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.",
			//   "type": "integer"
			// }
			Description: "Maximum duration (seconds) of content to retain for startover playback. If not specified, startover playback will be disabled for the OriginEndpoint.",
			Type:        types.NumberType,
			Optional:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "A collection of tags associated with a resource",
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "type": "string"
			//       },
			//       "Value": {
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Value",
			//       "Key"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "A collection of tags associated with a resource",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Optional: true,
			Validators: []tfsdk.AttributeValidator{
				validate.UniqueItems(),
			},
		},
		"time_delay_seconds": {
			// Property: TimeDelaySeconds
			// CloudFormation resource type schema:
			// {
			//   "description": "Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.",
			//   "type": "integer"
			// }
			Description: "Amount of delay (seconds) to enforce on the playback of live content. If not specified, there will be no time delay in effect for the OriginEndpoint.",
			Type:        types.NumberType,
			Optional:    true,
		},
		"url": {
			// Property: Url
			// CloudFormation resource type schema:
			// {
			//   "description": "The URL of the packaged OriginEndpoint for consumption.",
			//   "type": "string"
			// }
			Description: "The URL of the packaged OriginEndpoint for consumption.",
			Type:        types.StringType,
			Computed:    true,
		},
		"whitelist": {
			// Property: Whitelist
			// CloudFormation resource type schema:
			// {
			//   "description": "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.",
			//   "items": {
			//     "type": "string"
			//   },
			//   "type": "array"
			// }
			Description: "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.",
			Type:        types.ListType{ElemType: types.StringType},
			Optional:    true,
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource schema for AWS::MediaPackage::OriginEndpoint",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::MediaPackage::OriginEndpoint").WithTerraformTypeName("awscc_mediapackage_origin_endpoint")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(false)
	opts = opts.WithAttributeNameMap(map[string]string{
		"ad_markers":                           "AdMarkers",
		"ad_triggers":                          "AdTriggers",
		"ads_on_delivery_restrictions":         "AdsOnDeliveryRestrictions",
		"arn":                                  "Arn",
		"authorization":                        "Authorization",
		"cdn_identifier_secret":                "CdnIdentifierSecret",
		"certificate_arn":                      "CertificateArn",
		"channel_id":                           "ChannelId",
		"cmaf_package":                         "CmafPackage",
		"constant_initialization_vector":       "ConstantInitializationVector",
		"dash_package":                         "DashPackage",
		"description":                          "Description",
		"encryption":                           "Encryption",
		"encryption_method":                    "EncryptionMethod",
		"hls_manifests":                        "HlsManifests",
		"hls_package":                          "HlsPackage",
		"id":                                   "Id",
		"include_iframe_only_stream":           "IncludeIframeOnlyStream",
		"key":                                  "Key",
		"key_rotation_interval_seconds":        "KeyRotationIntervalSeconds",
		"manifest_layout":                      "ManifestLayout",
		"manifest_name":                        "ManifestName",
		"manifest_window_seconds":              "ManifestWindowSeconds",
		"max_video_bits_per_second":            "MaxVideoBitsPerSecond",
		"min_buffer_time_seconds":              "MinBufferTimeSeconds",
		"min_update_period_seconds":            "MinUpdatePeriodSeconds",
		"min_video_bits_per_second":            "MinVideoBitsPerSecond",
		"mss_package":                          "MssPackage",
		"origination":                          "Origination",
		"period_triggers":                      "PeriodTriggers",
		"playlist_type":                        "PlaylistType",
		"playlist_window_seconds":              "PlaylistWindowSeconds",
		"profile":                              "Profile",
		"program_date_time_interval_seconds":   "ProgramDateTimeIntervalSeconds",
		"repeat_ext_x_key":                     "RepeatExtXKey",
		"resource_id":                          "ResourceId",
		"role_arn":                             "RoleArn",
		"secrets_role_arn":                     "SecretsRoleArn",
		"segment_duration_seconds":             "SegmentDurationSeconds",
		"segment_prefix":                       "SegmentPrefix",
		"segment_template_format":              "SegmentTemplateFormat",
		"speke_key_provider":                   "SpekeKeyProvider",
		"startover_window_seconds":             "StartoverWindowSeconds",
		"stream_order":                         "StreamOrder",
		"stream_selection":                     "StreamSelection",
		"suggested_presentation_delay_seconds": "SuggestedPresentationDelaySeconds",
		"system_ids":                           "SystemIds",
		"tags":                                 "Tags",
		"time_delay_seconds":                   "TimeDelaySeconds",
		"url":                                  "Url",
		"use_audio_rendition_group":            "UseAudioRenditionGroup",
		"utc_timing":                           "UtcTiming",
		"utc_timing_uri":                       "UtcTimingUri",
		"value":                                "Value",
		"whitelist":                            "Whitelist",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_mediapackage_origin_endpoint", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
