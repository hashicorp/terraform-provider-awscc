// Code generated by generators/resource/main.go; DO NOT EDIT.

package mediapackage

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"

	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_mediapackage_packaging_configuration", packagingConfigurationResourceType)
}

// packagingConfigurationResourceType returns the Terraform awscc_mediapackage_packaging_configuration resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::MediaPackage::PackagingConfiguration resource type.
func packagingConfigurationResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "The ARN of the PackagingConfiguration.",
			//   "type": "string"
			// }
			Description: "The ARN of the PackagingConfiguration.",
			Type:        types.StringType,
			Computed:    true,
		},
		"cmaf_package": {
			// Property: CmafPackage
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "A CMAF packaging configuration.",
			//   "properties": {
			//     "Encryption": {
			//       "additionalProperties": false,
			//       "description": "A CMAF encryption configuration.",
			//       "properties": {
			//         "SpekeKeyProvider": {
			//           "additionalProperties": false,
			//           "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
			//           "properties": {
			//             "RoleArn": {
			//               "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
			//               "type": "string"
			//             },
			//             "SystemIds": {
			//               "description": "The system IDs to include in key requests.",
			//               "items": {
			//                 "type": "string"
			//               },
			//               "type": "array"
			//             },
			//             "Url": {
			//               "description": "The URL of the external key provider service.",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "RoleArn",
			//             "SystemIds",
			//             "Url"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "required": [
			//         "SpekeKeyProvider"
			//       ],
			//       "type": "object"
			//     },
			//     "HlsManifests": {
			//       "description": "A list of HLS manifest configurations.",
			//       "items": {
			//         "additionalProperties": false,
			//         "description": "An HTTP Live Streaming (HLS) manifest configuration.",
			//         "properties": {
			//           "AdMarkers": {
			//             "description": "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source.",
			//             "enum": [
			//               "NONE",
			//               "SCTE35_ENHANCED",
			//               "PASSTHROUGH"
			//             ],
			//             "type": "string"
			//           },
			//           "IncludeIframeOnlyStream": {
			//             "description": "When enabled, an I-Frame only stream will be included in the output.",
			//             "type": "boolean"
			//           },
			//           "ManifestName": {
			//             "description": "An optional string to include in the name of the manifest.",
			//             "type": "string"
			//           },
			//           "ProgramDateTimeIntervalSeconds": {
			//             "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
			//             "type": "integer"
			//           },
			//           "RepeatExtXKey": {
			//             "description": "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
			//             "type": "boolean"
			//           },
			//           "StreamSelection": {
			//             "additionalProperties": false,
			//             "description": "A StreamSelection configuration.",
			//             "properties": {
			//               "MaxVideoBitsPerSecond": {
			//                 "description": "The maximum video bitrate (bps) to include in output.",
			//                 "type": "integer"
			//               },
			//               "MinVideoBitsPerSecond": {
			//                 "description": "The minimum video bitrate (bps) to include in output.",
			//                 "type": "integer"
			//               },
			//               "StreamOrder": {
			//                 "description": "A directive that determines the order of streams in the output.",
			//                 "enum": [
			//                   "ORIGINAL",
			//                   "VIDEO_BITRATE_ASCENDING",
			//                   "VIDEO_BITRATE_DESCENDING"
			//                 ],
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "type": "array"
			//     },
			//     "IncludeEncoderConfigurationInSegments": {
			//       "description": "When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.",
			//       "type": "boolean"
			//     },
			//     "SegmentDurationSeconds": {
			//       "description": "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
			//       "type": "integer"
			//     }
			//   },
			//   "required": [
			//     "HlsManifests"
			//   ],
			//   "type": "object"
			// }
			Description: "A CMAF packaging configuration.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"encryption": {
						// Property: Encryption
						Description: "A CMAF encryption configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"speke_key_provider": {
									// Property: SpekeKeyProvider
									Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"role_arn": {
												// Property: RoleArn
												Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
											"system_ids": {
												// Property: SystemIds
												Description: "The system IDs to include in key requests.",
												Type:        types.ListType{ElemType: types.StringType},
												Required:    true,
											},
											"url": {
												// Property: Url
												Description: "The URL of the external key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
										},
									),
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"hls_manifests": {
						// Property: HlsManifests
						Description: "A list of HLS manifest configurations.",
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"ad_markers": {
									// Property: AdMarkers
									Description: "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"NONE",
											"SCTE35_ENHANCED",
											"PASSTHROUGH",
										}),
									},
								},
								"include_iframe_only_stream": {
									// Property: IncludeIframeOnlyStream
									Description: "When enabled, an I-Frame only stream will be included in the output.",
									Type:        types.BoolType,
									Optional:    true,
								},
								"manifest_name": {
									// Property: ManifestName
									Description: "An optional string to include in the name of the manifest.",
									Type:        types.StringType,
									Optional:    true,
								},
								"program_date_time_interval_seconds": {
									// Property: ProgramDateTimeIntervalSeconds
									Description: "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"repeat_ext_x_key": {
									// Property: RepeatExtXKey
									Description: "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
									Type:        types.BoolType,
									Optional:    true,
								},
								"stream_selection": {
									// Property: StreamSelection
									Description: "A StreamSelection configuration.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"max_video_bits_per_second": {
												// Property: MaxVideoBitsPerSecond
												Description: "The maximum video bitrate (bps) to include in output.",
												Type:        types.NumberType,
												Optional:    true,
											},
											"min_video_bits_per_second": {
												// Property: MinVideoBitsPerSecond
												Description: "The minimum video bitrate (bps) to include in output.",
												Type:        types.NumberType,
												Optional:    true,
											},
											"stream_order": {
												// Property: StreamOrder
												Description: "A directive that determines the order of streams in the output.",
												Type:        types.StringType,
												Optional:    true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"ORIGINAL",
														"VIDEO_BITRATE_ASCENDING",
														"VIDEO_BITRATE_DESCENDING",
													}),
												},
											},
										},
									),
									Optional: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Required: true,
					},
					"include_encoder_configuration_in_segments": {
						// Property: IncludeEncoderConfigurationInSegments
						Description: "When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.",
						Type:        types.BoolType,
						Optional:    true,
					},
					"segment_duration_seconds": {
						// Property: SegmentDurationSeconds
						Description: "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
						Type:        types.NumberType,
						Optional:    true,
					},
				},
			),
			Optional: true,
		},
		"dash_package": {
			// Property: DashPackage
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
			//   "properties": {
			//     "DashManifests": {
			//       "description": "A list of DASH manifest configurations.",
			//       "items": {
			//         "additionalProperties": false,
			//         "description": "A DASH manifest configuration.",
			//         "properties": {
			//           "ManifestLayout": {
			//             "description": "Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.",
			//             "enum": [
			//               "FULL",
			//               "COMPACT"
			//             ],
			//             "type": "string"
			//           },
			//           "ManifestName": {
			//             "description": "An optional string to include in the name of the manifest.",
			//             "type": "string"
			//           },
			//           "MinBufferTimeSeconds": {
			//             "description": "Minimum duration (in seconds) that a player will buffer media before starting the presentation.",
			//             "type": "integer"
			//           },
			//           "Profile": {
			//             "description": "The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled.",
			//             "enum": [
			//               "NONE",
			//               "HBBTV_1_5"
			//             ],
			//             "type": "string"
			//           },
			//           "StreamSelection": {
			//             "additionalProperties": false,
			//             "description": "A StreamSelection configuration.",
			//             "properties": {
			//               "MaxVideoBitsPerSecond": {
			//                 "description": "The maximum video bitrate (bps) to include in output.",
			//                 "type": "integer"
			//               },
			//               "MinVideoBitsPerSecond": {
			//                 "description": "The minimum video bitrate (bps) to include in output.",
			//                 "type": "integer"
			//               },
			//               "StreamOrder": {
			//                 "description": "A directive that determines the order of streams in the output.",
			//                 "enum": [
			//                   "ORIGINAL",
			//                   "VIDEO_BITRATE_ASCENDING",
			//                   "VIDEO_BITRATE_DESCENDING"
			//                 ],
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "type": "array"
			//     },
			//     "Encryption": {
			//       "additionalProperties": false,
			//       "description": "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.",
			//       "properties": {
			//         "SpekeKeyProvider": {
			//           "additionalProperties": false,
			//           "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
			//           "properties": {
			//             "RoleArn": {
			//               "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
			//               "type": "string"
			//             },
			//             "SystemIds": {
			//               "description": "The system IDs to include in key requests.",
			//               "items": {
			//                 "type": "string"
			//               },
			//               "type": "array"
			//             },
			//             "Url": {
			//               "description": "The URL of the external key provider service.",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "RoleArn",
			//             "SystemIds",
			//             "Url"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "required": [
			//         "SpekeKeyProvider"
			//       ],
			//       "type": "object"
			//     },
			//     "IncludeEncoderConfigurationInSegments": {
			//       "description": "When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.",
			//       "type": "boolean"
			//     },
			//     "PeriodTriggers": {
			//       "description": "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains \"ADS\", new periods will be created where the Asset contains SCTE-35 ad markers.",
			//       "enum": [
			//         "ADS"
			//       ],
			//       "items": {
			//         "type": "string"
			//       },
			//       "type": "array"
			//     },
			//     "SegmentDurationSeconds": {
			//       "description": "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
			//       "type": "integer"
			//     },
			//     "SegmentTemplateFormat": {
			//       "description": "Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.",
			//       "enum": [
			//         "NUMBER_WITH_TIMELINE",
			//         "TIME_WITH_TIMELINE",
			//         "NUMBER_WITH_DURATION"
			//       ],
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "DashManifests"
			//   ],
			//   "type": "object"
			// }
			Description: "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"dash_manifests": {
						// Property: DashManifests
						Description: "A list of DASH manifest configurations.",
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"manifest_layout": {
									// Property: ManifestLayout
									Description: "Determines the position of some tags in the Media Presentation Description (MPD). When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation. When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"FULL",
											"COMPACT",
										}),
									},
								},
								"manifest_name": {
									// Property: ManifestName
									Description: "An optional string to include in the name of the manifest.",
									Type:        types.StringType,
									Optional:    true,
								},
								"min_buffer_time_seconds": {
									// Property: MinBufferTimeSeconds
									Description: "Minimum duration (in seconds) that a player will buffer media before starting the presentation.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"profile": {
									// Property: Profile
									Description: "The Dynamic Adaptive Streaming over HTTP (DASH) profile type. When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"NONE",
											"HBBTV_1_5",
										}),
									},
								},
								"stream_selection": {
									// Property: StreamSelection
									Description: "A StreamSelection configuration.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"max_video_bits_per_second": {
												// Property: MaxVideoBitsPerSecond
												Description: "The maximum video bitrate (bps) to include in output.",
												Type:        types.NumberType,
												Optional:    true,
											},
											"min_video_bits_per_second": {
												// Property: MinVideoBitsPerSecond
												Description: "The minimum video bitrate (bps) to include in output.",
												Type:        types.NumberType,
												Optional:    true,
											},
											"stream_order": {
												// Property: StreamOrder
												Description: "A directive that determines the order of streams in the output.",
												Type:        types.StringType,
												Optional:    true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"ORIGINAL",
														"VIDEO_BITRATE_ASCENDING",
														"VIDEO_BITRATE_DESCENDING",
													}),
												},
											},
										},
									),
									Optional: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Required: true,
					},
					"encryption": {
						// Property: Encryption
						Description: "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"speke_key_provider": {
									// Property: SpekeKeyProvider
									Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"role_arn": {
												// Property: RoleArn
												Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
											"system_ids": {
												// Property: SystemIds
												Description: "The system IDs to include in key requests.",
												Type:        types.ListType{ElemType: types.StringType},
												Required:    true,
											},
											"url": {
												// Property: Url
												Description: "The URL of the external key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
										},
									),
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"include_encoder_configuration_in_segments": {
						// Property: IncludeEncoderConfigurationInSegments
						Description: "When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.",
						Type:        types.BoolType,
						Optional:    true,
					},
					"period_triggers": {
						// Property: PeriodTriggers
						Description: "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not be partitioned into more than one period. If the list contains \"ADS\", new periods will be created where the Asset contains SCTE-35 ad markers.",
						Type:        types.ListType{ElemType: types.StringType},
						Optional:    true,
					},
					"segment_duration_seconds": {
						// Property: SegmentDurationSeconds
						Description: "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"segment_template_format": {
						// Property: SegmentTemplateFormat
						Description: "Determines the type of SegmentTemplate included in the Media Presentation Description (MPD). When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs. When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"NUMBER_WITH_TIMELINE",
								"TIME_WITH_TIMELINE",
								"NUMBER_WITH_DURATION",
							}),
						},
					},
				},
			),
			Optional: true,
		},
		"hls_package": {
			// Property: HlsPackage
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "An HTTP Live Streaming (HLS) packaging configuration.",
			//   "properties": {
			//     "Encryption": {
			//       "additionalProperties": false,
			//       "description": "An HTTP Live Streaming (HLS) encryption configuration.",
			//       "properties": {
			//         "ConstantInitializationVector": {
			//           "description": "An HTTP Live Streaming (HLS) encryption configuration.",
			//           "type": "string"
			//         },
			//         "EncryptionMethod": {
			//           "description": "The encryption method to use.",
			//           "enum": [
			//             "AES_128",
			//             "SAMPLE_AES"
			//           ],
			//           "type": "string"
			//         },
			//         "SpekeKeyProvider": {
			//           "additionalProperties": false,
			//           "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
			//           "properties": {
			//             "RoleArn": {
			//               "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
			//               "type": "string"
			//             },
			//             "SystemIds": {
			//               "description": "The system IDs to include in key requests.",
			//               "items": {
			//                 "type": "string"
			//               },
			//               "type": "array"
			//             },
			//             "Url": {
			//               "description": "The URL of the external key provider service.",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "RoleArn",
			//             "SystemIds",
			//             "Url"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "required": [
			//         "SpekeKeyProvider"
			//       ],
			//       "type": "object"
			//     },
			//     "HlsManifests": {
			//       "description": "A list of HLS manifest configurations.",
			//       "items": {
			//         "additionalProperties": false,
			//         "description": "An HTTP Live Streaming (HLS) manifest configuration.",
			//         "properties": {
			//           "AdMarkers": {
			//             "description": "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source.",
			//             "enum": [
			//               "NONE",
			//               "SCTE35_ENHANCED",
			//               "PASSTHROUGH"
			//             ],
			//             "type": "string"
			//           },
			//           "IncludeIframeOnlyStream": {
			//             "description": "When enabled, an I-Frame only stream will be included in the output.",
			//             "type": "boolean"
			//           },
			//           "ManifestName": {
			//             "description": "An optional string to include in the name of the manifest.",
			//             "type": "string"
			//           },
			//           "ProgramDateTimeIntervalSeconds": {
			//             "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
			//             "type": "integer"
			//           },
			//           "RepeatExtXKey": {
			//             "description": "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
			//             "type": "boolean"
			//           },
			//           "StreamSelection": {
			//             "additionalProperties": false,
			//             "description": "A StreamSelection configuration.",
			//             "properties": {
			//               "MaxVideoBitsPerSecond": {
			//                 "description": "The maximum video bitrate (bps) to include in output.",
			//                 "type": "integer"
			//               },
			//               "MinVideoBitsPerSecond": {
			//                 "description": "The minimum video bitrate (bps) to include in output.",
			//                 "type": "integer"
			//               },
			//               "StreamOrder": {
			//                 "description": "A directive that determines the order of streams in the output.",
			//                 "enum": [
			//                   "ORIGINAL",
			//                   "VIDEO_BITRATE_ASCENDING",
			//                   "VIDEO_BITRATE_DESCENDING"
			//                 ],
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "type": "array"
			//     },
			//     "SegmentDurationSeconds": {
			//       "description": "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
			//       "type": "integer"
			//     },
			//     "UseAudioRenditionGroup": {
			//       "description": "When enabled, audio streams will be placed in rendition groups in the output.",
			//       "type": "boolean"
			//     }
			//   },
			//   "required": [
			//     "HlsManifests"
			//   ],
			//   "type": "object"
			// }
			Description: "An HTTP Live Streaming (HLS) packaging configuration.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"encryption": {
						// Property: Encryption
						Description: "An HTTP Live Streaming (HLS) encryption configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"constant_initialization_vector": {
									// Property: ConstantInitializationVector
									Description: "An HTTP Live Streaming (HLS) encryption configuration.",
									Type:        types.StringType,
									Optional:    true,
								},
								"encryption_method": {
									// Property: EncryptionMethod
									Description: "The encryption method to use.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"AES_128",
											"SAMPLE_AES",
										}),
									},
								},
								"speke_key_provider": {
									// Property: SpekeKeyProvider
									Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"role_arn": {
												// Property: RoleArn
												Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
											"system_ids": {
												// Property: SystemIds
												Description: "The system IDs to include in key requests.",
												Type:        types.ListType{ElemType: types.StringType},
												Required:    true,
											},
											"url": {
												// Property: Url
												Description: "The URL of the external key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
										},
									),
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"hls_manifests": {
						// Property: HlsManifests
						Description: "A list of HLS manifest configurations.",
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"ad_markers": {
									// Property: AdMarkers
									Description: "This setting controls how ad markers are included in the packaged OriginEndpoint. \"NONE\" will omit all SCTE-35 ad markers from the output. \"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest. \"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35 messages in the input source.",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"NONE",
											"SCTE35_ENHANCED",
											"PASSTHROUGH",
										}),
									},
								},
								"include_iframe_only_stream": {
									// Property: IncludeIframeOnlyStream
									Description: "When enabled, an I-Frame only stream will be included in the output.",
									Type:        types.BoolType,
									Optional:    true,
								},
								"manifest_name": {
									// Property: ManifestName
									Description: "An optional string to include in the name of the manifest.",
									Type:        types.StringType,
									Optional:    true,
								},
								"program_date_time_interval_seconds": {
									// Property: ProgramDateTimeIntervalSeconds
									Description: "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag inserted into manifests. Additionally, when an interval is specified ID3Timed Metadata messages will be generated every 5 seconds using the ingest time of the content. If the interval is not specified, or set to 0, then no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no ID3Timed Metadata messages will be generated. Note that irrespective of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input, it will be passed through to HLS output.",
									Type:        types.NumberType,
									Optional:    true,
								},
								"repeat_ext_x_key": {
									// Property: RepeatExtXKey
									Description: "When enabled, the EXT-X-KEY tag will be repeated in output manifests.",
									Type:        types.BoolType,
									Optional:    true,
								},
								"stream_selection": {
									// Property: StreamSelection
									Description: "A StreamSelection configuration.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"max_video_bits_per_second": {
												// Property: MaxVideoBitsPerSecond
												Description: "The maximum video bitrate (bps) to include in output.",
												Type:        types.NumberType,
												Optional:    true,
											},
											"min_video_bits_per_second": {
												// Property: MinVideoBitsPerSecond
												Description: "The minimum video bitrate (bps) to include in output.",
												Type:        types.NumberType,
												Optional:    true,
											},
											"stream_order": {
												// Property: StreamOrder
												Description: "A directive that determines the order of streams in the output.",
												Type:        types.StringType,
												Optional:    true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"ORIGINAL",
														"VIDEO_BITRATE_ASCENDING",
														"VIDEO_BITRATE_DESCENDING",
													}),
												},
											},
										},
									),
									Optional: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Required: true,
					},
					"segment_duration_seconds": {
						// Property: SegmentDurationSeconds
						Description: "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
						Type:        types.NumberType,
						Optional:    true,
					},
					"use_audio_rendition_group": {
						// Property: UseAudioRenditionGroup
						Description: "When enabled, audio streams will be placed in rendition groups in the output.",
						Type:        types.BoolType,
						Optional:    true,
					},
				},
			),
			Optional: true,
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of the PackagingConfiguration.",
			//   "type": "string"
			// }
			Description: "The ID of the PackagingConfiguration.",
			Type:        types.StringType,
			Required:    true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(), // Id is a force-new property.
			},
		},
		"mss_package": {
			// Property: MssPackage
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "A Microsoft Smooth Streaming (MSS) PackagingConfiguration.",
			//   "properties": {
			//     "Encryption": {
			//       "additionalProperties": false,
			//       "description": "A CMAF encryption configuration.",
			//       "properties": {
			//         "SpekeKeyProvider": {
			//           "additionalProperties": false,
			//           "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
			//           "properties": {
			//             "RoleArn": {
			//               "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
			//               "type": "string"
			//             },
			//             "SystemIds": {
			//               "description": "The system IDs to include in key requests.",
			//               "items": {
			//                 "type": "string"
			//               },
			//               "type": "array"
			//             },
			//             "Url": {
			//               "description": "The URL of the external key provider service.",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "RoleArn",
			//             "SystemIds",
			//             "Url"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "required": [
			//         "SpekeKeyProvider"
			//       ],
			//       "type": "object"
			//     },
			//     "MssManifests": {
			//       "description": "A list of MSS manifest configurations.",
			//       "items": {
			//         "additionalProperties": false,
			//         "description": "A Microsoft Smooth Streaming (MSS) manifest configuration.",
			//         "properties": {
			//           "ManifestName": {
			//             "description": "An optional string to include in the name of the manifest.",
			//             "type": "string"
			//           },
			//           "StreamSelection": {
			//             "additionalProperties": false,
			//             "description": "A StreamSelection configuration.",
			//             "properties": {
			//               "MaxVideoBitsPerSecond": {
			//                 "description": "The maximum video bitrate (bps) to include in output.",
			//                 "type": "integer"
			//               },
			//               "MinVideoBitsPerSecond": {
			//                 "description": "The minimum video bitrate (bps) to include in output.",
			//                 "type": "integer"
			//               },
			//               "StreamOrder": {
			//                 "description": "A directive that determines the order of streams in the output.",
			//                 "enum": [
			//                   "ORIGINAL",
			//                   "VIDEO_BITRATE_ASCENDING",
			//                   "VIDEO_BITRATE_DESCENDING"
			//                 ],
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "type": "array"
			//     },
			//     "SegmentDurationSeconds": {
			//       "description": "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
			//       "type": "integer"
			//     }
			//   },
			//   "required": [
			//     "MssManifests"
			//   ],
			//   "type": "object"
			// }
			Description: "A Microsoft Smooth Streaming (MSS) PackagingConfiguration.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"encryption": {
						// Property: Encryption
						Description: "A CMAF encryption configuration.",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"speke_key_provider": {
									// Property: SpekeKeyProvider
									Description: "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"role_arn": {
												// Property: RoleArn
												Description: "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental MediaPackage will assume when accessing the key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
											"system_ids": {
												// Property: SystemIds
												Description: "The system IDs to include in key requests.",
												Type:        types.ListType{ElemType: types.StringType},
												Required:    true,
											},
											"url": {
												// Property: Url
												Description: "The URL of the external key provider service.",
												Type:        types.StringType,
												Required:    true,
											},
										},
									),
									Required: true,
								},
							},
						),
						Optional: true,
					},
					"mss_manifests": {
						// Property: MssManifests
						Description: "A list of MSS manifest configurations.",
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"manifest_name": {
									// Property: ManifestName
									Description: "An optional string to include in the name of the manifest.",
									Type:        types.StringType,
									Optional:    true,
								},
								"stream_selection": {
									// Property: StreamSelection
									Description: "A StreamSelection configuration.",
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"max_video_bits_per_second": {
												// Property: MaxVideoBitsPerSecond
												Description: "The maximum video bitrate (bps) to include in output.",
												Type:        types.NumberType,
												Optional:    true,
											},
											"min_video_bits_per_second": {
												// Property: MinVideoBitsPerSecond
												Description: "The minimum video bitrate (bps) to include in output.",
												Type:        types.NumberType,
												Optional:    true,
											},
											"stream_order": {
												// Property: StreamOrder
												Description: "A directive that determines the order of streams in the output.",
												Type:        types.StringType,
												Optional:    true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"ORIGINAL",
														"VIDEO_BITRATE_ASCENDING",
														"VIDEO_BITRATE_DESCENDING",
													}),
												},
											},
										},
									),
									Optional: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Required: true,
					},
					"segment_duration_seconds": {
						// Property: SegmentDurationSeconds
						Description: "Duration (in seconds) of each fragment. Actual fragments will be rounded to the nearest multiple of the source fragment duration.",
						Type:        types.NumberType,
						Optional:    true,
					},
				},
			),
			Optional: true,
		},
		"packaging_group_id": {
			// Property: PackagingGroupId
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of a PackagingGroup.",
			//   "type": "string"
			// }
			Description: "The ID of a PackagingGroup.",
			Type:        types.StringType,
			Required:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "A collection of tags associated with a resource",
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "type": "string"
			//       },
			//       "Value": {
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Value",
			//       "Key"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "A collection of tags associated with a resource",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Required: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Required: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Optional: true,
			Validators: []tfsdk.AttributeValidator{
				validate.UniqueItems(),
			},
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource schema for AWS::MediaPackage::PackagingConfiguration",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::MediaPackage::PackagingConfiguration").WithTerraformTypeName("awscc_mediapackage_packaging_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(false)
	opts = opts.WithAttributeNameMap(map[string]string{
		"ad_markers":                     "AdMarkers",
		"arn":                            "Arn",
		"cmaf_package":                   "CmafPackage",
		"constant_initialization_vector": "ConstantInitializationVector",
		"dash_manifests":                 "DashManifests",
		"dash_package":                   "DashPackage",
		"encryption":                     "Encryption",
		"encryption_method":              "EncryptionMethod",
		"hls_manifests":                  "HlsManifests",
		"hls_package":                    "HlsPackage",
		"id":                             "Id",
		"include_encoder_configuration_in_segments": "IncludeEncoderConfigurationInSegments",
		"include_iframe_only_stream":                "IncludeIframeOnlyStream",
		"key":                                       "Key",
		"manifest_layout":                           "ManifestLayout",
		"manifest_name":                             "ManifestName",
		"max_video_bits_per_second":                 "MaxVideoBitsPerSecond",
		"min_buffer_time_seconds":                   "MinBufferTimeSeconds",
		"min_video_bits_per_second":                 "MinVideoBitsPerSecond",
		"mss_manifests":                             "MssManifests",
		"mss_package":                               "MssPackage",
		"packaging_group_id":                        "PackagingGroupId",
		"period_triggers":                           "PeriodTriggers",
		"profile":                                   "Profile",
		"program_date_time_interval_seconds":        "ProgramDateTimeIntervalSeconds",
		"repeat_ext_x_key":                          "RepeatExtXKey",
		"role_arn":                                  "RoleArn",
		"segment_duration_seconds":                  "SegmentDurationSeconds",
		"segment_template_format":                   "SegmentTemplateFormat",
		"speke_key_provider":                        "SpekeKeyProvider",
		"stream_order":                              "StreamOrder",
		"stream_selection":                          "StreamSelection",
		"system_ids":                                "SystemIds",
		"tags":                                      "Tags",
		"url":                                       "Url",
		"use_audio_rendition_group":                 "UseAudioRenditionGroup",
		"value":                                     "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_mediapackage_packaging_configuration", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
