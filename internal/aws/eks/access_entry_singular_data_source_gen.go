// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package eks

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_eks_access_entry", accessEntryDataSource)
}

// accessEntryDataSource returns the Terraform awscc_eks_access_entry data source.
// This Terraform data source corresponds to the CloudFormation AWS::EKS::AccessEntry resource.
func accessEntryDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccessEntryArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the access entry.",
		//	  "type": "string"
		//	}
		"access_entry_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the access entry.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AccessPolicies
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of access policies that are associated with the access entry.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An access policy to associate with the current access entry.",
		//	    "properties": {
		//	      "AccessScope": {
		//	        "additionalProperties": false,
		//	        "description": "The access scope of the access policy.",
		//	        "properties": {
		//	          "Namespaces": {
		//	            "description": "The namespaces to associate with the access scope. Only specify if Type is set to 'namespace'.",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "Type": {
		//	            "description": "The type of the access scope.",
		//	            "enum": [
		//	              "namespace",
		//	              "cluster"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Type"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "PolicyArn": {
		//	        "description": "The ARN of the access policy to add to the access entry.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "PolicyArn",
		//	      "AccessScope"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 20,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"access_policies": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AccessScope
					"access_scope": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Namespaces
							"namespaces": schema.SetAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "The namespaces to associate with the access scope. Only specify if Type is set to 'namespace'.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The type of the access scope.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "The access scope of the access policy.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: PolicyArn
					"policy_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ARN of the access policy to add to the access entry.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of access policies that are associated with the access entry.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ClusterName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The cluster that the access entry is created for.",
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"cluster_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The cluster that the access entry is created for.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KubernetesGroups
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Kubernetes groups that the access entry is associated with.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"kubernetes_groups": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The Kubernetes groups that the access entry is associated with.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PrincipalArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The principal ARN that the access entry is created for.",
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"principal_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The principal ARN that the access entry is created for.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The node type to associate with the access entry.",
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The node type to associate with the access entry.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Username
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Kubernetes user that the access entry is associated with.",
		//	  "type": "string"
		//	}
		"username": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Kubernetes user that the access entry is associated with.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EKS::AccessEntry",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EKS::AccessEntry").WithTerraformTypeName("awscc_eks_access_entry")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_entry_arn":  "AccessEntryArn",
		"access_policies":   "AccessPolicies",
		"access_scope":      "AccessScope",
		"cluster_name":      "ClusterName",
		"key":               "Key",
		"kubernetes_groups": "KubernetesGroups",
		"namespaces":        "Namespaces",
		"policy_arn":        "PolicyArn",
		"principal_arn":     "PrincipalArn",
		"tags":              "Tags",
		"type":              "Type",
		"username":          "Username",
		"value":             "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
