// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package eks

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	providertypes "github.com/hashicorp/terraform-provider-awscc/internal/types"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_eks_addon", addonDataSourceType)
}

// addonDataSourceType returns the Terraform awscc_eks_addon data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::EKS::Addon resource type.
func addonDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"addon_name": {
			// Property: AddonName
			// CloudFormation resource type schema:
			// {
			//   "description": "Name of Addon",
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Name of Addon",
			Type:        types.StringType,
			Computed:    true,
		},
		"addon_version": {
			// Property: AddonVersion
			// CloudFormation resource type schema:
			// {
			//   "description": "Version of Addon",
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Version of Addon",
			Type:        types.StringType,
			Computed:    true,
		},
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "Amazon Resource Name (ARN) of the add-on",
			//   "type": "string"
			// }
			Description: "Amazon Resource Name (ARN) of the add-on",
			Type:        types.StringType,
			Computed:    true,
		},
		"cluster_name": {
			// Property: ClusterName
			// CloudFormation resource type schema:
			// {
			//   "description": "Name of Cluster",
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Name of Cluster",
			Type:        types.StringType,
			Computed:    true,
		},
		"resolve_conflicts": {
			// Property: ResolveConflicts
			// CloudFormation resource type schema:
			// {
			//   "description": "Resolve parameter value conflicts",
			//   "enum": [
			//     "NONE",
			//     "OVERWRITE"
			//   ],
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Resolve parameter value conflicts",
			Type:        types.StringType,
			Computed:    true,
		},
		"service_account_role_arn": {
			// Property: ServiceAccountRoleArn
			// CloudFormation resource type schema:
			// {
			//   "description": "IAM role to bind to the add-on's service account",
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "IAM role to bind to the add-on's service account",
			Type:        types.StringType,
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "An array of key-value pairs to apply to this resource.",
			//   "insertionOrder": false,
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "A key-value pair to associate with a resource.",
			//     "properties": {
			//       "Key": {
			//         "description": "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
			//         "maxLength": 127,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "description": "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
			//         "maxLength": 255,
			//         "minLength": 1,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array",
			//   "uniqueItems": true
			// }
			Description: "An array of key-value pairs to apply to this resource.",
			Attributes: providertypes.SetNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Type:        types.StringType,
						Computed:    true,
					},
					"value": {
						// Property: Value
						Description: "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Type:        types.StringType,
						Computed:    true,
					},
				},
				providertypes.SetNestedAttributesOptions{},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::EKS::Addon",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::EKS::Addon").WithTerraformTypeName("awscc_eks_addon")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"addon_name":               "AddonName",
		"addon_version":            "AddonVersion",
		"arn":                      "Arn",
		"cluster_name":             "ClusterName",
		"key":                      "Key",
		"resolve_conflicts":        "ResolveConflicts",
		"service_account_role_arn": "ServiceAccountRoleArn",
		"tags":                     "Tags",
		"value":                    "Value",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_eks_addon", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
