// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package eks

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_eks_identity_provider_config", identityProviderConfigDataSource)
}

// identityProviderConfigDataSource returns the Terraform awscc_eks_identity_provider_config data source.
// This Terraform data source corresponds to the CloudFormation AWS::EKS::IdentityProviderConfig resource.
func identityProviderConfigDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ClusterName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the identity provider configuration.",
		//	  "type": "string"
		//	}
		"cluster_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the identity provider configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IdentityProviderConfigArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the configuration.",
		//	  "type": "string"
		//	}
		"identity_provider_config_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IdentityProviderConfigName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the OIDC provider configuration.",
		//	  "type": "string"
		//	}
		"identity_provider_config_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the OIDC provider configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Oidc
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "An object representing an OpenID Connect (OIDC) configuration.",
		//	  "properties": {
		//	    "ClientId": {
		//	      "description": "This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.",
		//	      "type": "string"
		//	    },
		//	    "GroupsClaim": {
		//	      "description": "The JWT claim that the provider uses to return your groups.",
		//	      "type": "string"
		//	    },
		//	    "GroupsPrefix": {
		//	      "description": "The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).",
		//	      "type": "string"
		//	    },
		//	    "IssuerUrl": {
		//	      "description": "The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.",
		//	      "type": "string"
		//	    },
		//	    "RequiredClaims": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "The key value pairs that describe required claims in the identity token. If set, each claim is verified to be present in the token with a matching value.",
		//	        "properties": {
		//	          "Key": {
		//	            "description": "The key of the requiredClaims.",
		//	            "maxLength": 63,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "description": "The value for the requiredClaims.",
		//	            "maxLength": 253,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Key",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "UsernameClaim": {
		//	      "description": "The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.",
		//	      "type": "string"
		//	    },
		//	    "UsernamePrefix": {
		//	      "description": "The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "ClientId",
		//	    "IssuerUrl"
		//	  ],
		//	  "type": "object"
		//	}
		"oidc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ClientId
				"client_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "This is also known as audience. The ID for the client application that makes authentication requests to the OpenID identity provider.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: GroupsClaim
				"groups_claim": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The JWT claim that the provider uses to return your groups.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: GroupsPrefix
				"groups_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The prefix that is prepended to group claims to prevent clashes with existing names (such as system: groups).",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IssuerUrl
				"issuer_url": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The URL of the OpenID identity provider that allows the API server to discover public signing keys for verifying tokens.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RequiredClaims
				"required_claims": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Key
							"key": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The key of the requiredClaims.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The value for the requiredClaims.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: UsernameClaim
				"username_claim": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The JSON Web Token (JWT) claim to use as the username. The default is sub, which is expected to be a unique identifier of the end user. You can choose other claims, such as email or name, depending on the OpenID identity provider. Claims other than email are prefixed with the issuer URL to prevent naming clashes with other plug-ins.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UsernamePrefix
				"username_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The prefix that is prepended to username claims to prevent clashes with existing names. If you do not provide this field, and username is a value other than email, the prefix defaults to issuerurl#. You can use the value - to disable all prefixing.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "An object representing an OpenID Connect (OIDC) configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the identity provider configuration.",
		//	  "enum": [
		//	    "oidc"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the identity provider configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EKS::IdentityProviderConfig",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EKS::IdentityProviderConfig").WithTerraformTypeName("awscc_eks_identity_provider_config")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"client_id":                     "ClientId",
		"cluster_name":                  "ClusterName",
		"groups_claim":                  "GroupsClaim",
		"groups_prefix":                 "GroupsPrefix",
		"identity_provider_config_arn":  "IdentityProviderConfigArn",
		"identity_provider_config_name": "IdentityProviderConfigName",
		"issuer_url":                    "IssuerUrl",
		"key":                           "Key",
		"oidc":                          "Oidc",
		"required_claims":               "RequiredClaims",
		"tags":                          "Tags",
		"type":                          "Type",
		"username_claim":                "UsernameClaim",
		"username_prefix":               "UsernamePrefix",
		"value":                         "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
