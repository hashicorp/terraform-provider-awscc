// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ssmcontacts

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ssmcontacts_rotation", rotationDataSource)
}

// rotationDataSource returns the Terraform awscc_ssmcontacts_rotation data source.
// This Terraform data source corresponds to the CloudFormation AWS::SSMContacts::Rotation resource.
func rotationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the rotation.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the rotation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ContactIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Members of the rotation",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"contact_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "Members of the rotation",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of the Rotation",
		//	  "pattern": "^[a-zA-Z0-9_]*$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of the Rotation",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Recurrence
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Information about when an on-call rotation is in effect and how long the rotation period lasts.",
		//	  "oneOf": [
		//	    {
		//	      "required": [
		//	        "NumberOfOnCalls",
		//	        "RecurrenceMultiplier",
		//	        "WeeklySettings"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "NumberOfOnCalls",
		//	        "RecurrenceMultiplier",
		//	        "MonthlySettings"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "NumberOfOnCalls",
		//	        "RecurrenceMultiplier",
		//	        "DailySettings"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "DailySettings": {
		//	      "description": "Information about on-call rotations that recur daily.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "Details about when an on-call rotation shift begins or ends. Time of the day in format HH:MM",
		//	        "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "MonthlySettings": {
		//	      "description": "Information about on-call rotations that recur monthly.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "DayOfWeek for Month and HandOff Time for Monthly Recurring Rotation.",
		//	        "properties": {
		//	          "DayOfMonth": {
		//	            "description": "The day of the month when monthly recurring on-call rotations begin.",
		//	            "maximum": 31,
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          },
		//	          "HandOffTime": {
		//	            "description": "Details about when an on-call rotation shift begins or ends. Time of the day in format HH:MM",
		//	            "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "DayOfMonth",
		//	          "HandOffTime"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "NumberOfOnCalls": {
		//	      "description": "Number of Oncalls per shift.",
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "RecurrenceMultiplier": {
		//	      "description": "The number of days, weeks, or months a single rotation lasts.",
		//	      "maximum": 100,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "ShiftCoverages": {
		//	      "description": "Information about the days of the week included in on-call rotation coverage.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Information about the days of the week included in on-call rotation coverage.",
		//	        "properties": {
		//	          "CoverageTimes": {
		//	            "description": "Information about when an on-call shift begins and ends.",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "StartTime and EndTime for the Shift",
		//	              "properties": {
		//	                "EndTime": {
		//	                  "description": "Details about when an on-call rotation shift begins or ends. Time of the day in format HH:MM",
		//	                  "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
		//	                  "type": "string"
		//	                },
		//	                "StartTime": {
		//	                  "description": "Details about when an on-call rotation shift begins or ends. Time of the day in format HH:MM",
		//	                  "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "StartTime",
		//	                "EndTime"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "DayOfWeek": {
		//	            "description": "The day of the week when weekly recurring on-call shift rotations begin. ",
		//	            "enum": [
		//	              "MON",
		//	              "TUE",
		//	              "WED",
		//	              "THU",
		//	              "FRI",
		//	              "SAT",
		//	              "SUN"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "DayOfWeek",
		//	          "CoverageTimes"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "WeeklySettings": {
		//	      "description": "Information about on-call rotations that recur weekly.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "DayOfWeek for Rotation and HandOff Time for Weekly Recurring Rotation.",
		//	        "properties": {
		//	          "DayOfWeek": {
		//	            "description": "The day of the week when weekly recurring on-call shift rotations begin. ",
		//	            "enum": [
		//	              "MON",
		//	              "TUE",
		//	              "WED",
		//	              "THU",
		//	              "FRI",
		//	              "SAT",
		//	              "SUN"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "HandOffTime": {
		//	            "description": "Details about when an on-call rotation shift begins or ends. Time of the day in format HH:MM",
		//	            "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "DayOfWeek",
		//	          "HandOffTime"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"recurrence": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DailySettings
				"daily_settings": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "Information about on-call rotations that recur daily.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MonthlySettings
				"monthly_settings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DayOfMonth
							"day_of_month": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The day of the month when monthly recurring on-call rotations begin.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: HandOffTime
							"hand_off_time": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Details about when an on-call rotation shift begins or ends. Time of the day in format HH:MM",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Information about on-call rotations that recur monthly.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: NumberOfOnCalls
				"number_of_on_calls": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Number of Oncalls per shift.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RecurrenceMultiplier
				"recurrence_multiplier": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The number of days, weeks, or months a single rotation lasts.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ShiftCoverages
				"shift_coverages": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CoverageTimes
							"coverage_times": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: EndTime
										"end_time": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Details about when an on-call rotation shift begins or ends. Time of the day in format HH:MM",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: StartTime
										"start_time": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Details about when an on-call rotation shift begins or ends. Time of the day in format HH:MM",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "Information about when an on-call shift begins and ends.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: DayOfWeek
							"day_of_week": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The day of the week when weekly recurring on-call shift rotations begin. ",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Information about the days of the week included in on-call rotation coverage.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: WeeklySettings
				"weekly_settings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DayOfWeek
							"day_of_week": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The day of the week when weekly recurring on-call shift rotations begin. ",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: HandOffTime
							"hand_off_time": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Details about when an on-call rotation shift begins or ends. Time of the day in format HH:MM",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Information about on-call rotations that recur weekly.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Information about when an on-call rotation is in effect and how long the rotation period lasts.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StartTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Start time of the first shift of Oncall Schedule",
		//	  "pattern": "^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})$",
		//	  "type": "string"
		//	}
		"start_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Start time of the first shift of Oncall Schedule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TimeZoneId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "TimeZone Identifier for the Oncall Schedule",
		//	  "type": "string"
		//	}
		"time_zone_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "TimeZone Identifier for the Oncall Schedule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SSMContacts::Rotation",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SSMContacts::Rotation").WithTerraformTypeName("awscc_ssmcontacts_rotation")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                   "Arn",
		"contact_ids":           "ContactIds",
		"coverage_times":        "CoverageTimes",
		"daily_settings":        "DailySettings",
		"day_of_month":          "DayOfMonth",
		"day_of_week":           "DayOfWeek",
		"end_time":              "EndTime",
		"hand_off_time":         "HandOffTime",
		"key":                   "Key",
		"monthly_settings":      "MonthlySettings",
		"name":                  "Name",
		"number_of_on_calls":    "NumberOfOnCalls",
		"recurrence":            "Recurrence",
		"recurrence_multiplier": "RecurrenceMultiplier",
		"shift_coverages":       "ShiftCoverages",
		"start_time":            "StartTime",
		"tags":                  "Tags",
		"time_zone_id":          "TimeZoneId",
		"value":                 "Value",
		"weekly_settings":       "WeeklySettings",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
