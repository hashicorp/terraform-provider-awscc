// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package gamelift

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"regexp"
)

func init() {
	registry.AddResourceFactory("awscc_gamelift_game_session_queue", gameSessionQueueResource)
}

// gameSessionQueueResource returns the Terraform awscc_gamelift_game_session_queue resource.
// This Terraform resource corresponds to the CloudFormation AWS::GameLift::GameSessionQueue resource.
func gameSessionQueueResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^arn:.*:gamesessionqueue\\/[a-zA-Z0-9-]+",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift game session queue resource and uniquely identifies it.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CustomEventData
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Information that is added to all events that are related to this game session queue.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "[\\s\\S]*",
		//	  "type": "string"
		//	}
		"custom_event_data": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Information that is added to all events that are related to this game session queue.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 256),
				stringvalidator.RegexMatches(regexp.MustCompile("[\\s\\S]*"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Destinations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A fleet or alias designated in a game session queue.",
		//	    "properties": {
		//	      "DestinationArn": {
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "pattern": "[a-zA-Z0-9:/-]+",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"destinations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DestinationArn
					"destination_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 256),
							stringvalidator.RegexMatches(regexp.MustCompile("[a-zA-Z0-9:/-]+"), ""),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of fleets and/or fleet aliases that can be used to fulfill game session placement requests in the queue.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: FilterConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A list of locations where a queue is allowed to place new game sessions.",
		//	  "properties": {
		//	    "AllowedLocations": {
		//	      "description": "A list of locations to allow game session placement in, in the form of AWS Region codes such as us-west-2.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "maxLength": 64,
		//	        "minLength": 1,
		//	        "pattern": "^[a-z]+(-([a-z]+|\\d))*",
		//	        "type": "string"
		//	      },
		//	      "maxItems": 100,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"filter_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AllowedLocations
				"allowed_locations": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "A list of locations to allow game session placement in, in the form of AWS Region codes such as us-west-2.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.SizeBetween(1, 100),
						listvalidator.ValueStringsAre(
							stringvalidator.LengthBetween(1, 64),
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-z]+(-([a-z]+|\\d))*"), ""),
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						generic.Multiset(),
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A list of locations where a queue is allowed to place new game sessions.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A descriptive label that is associated with game session queue. Queue names must be unique within each Region.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "[a-zA-Z0-9-]+",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A descriptive label that is associated with game session queue. Queue names must be unique within each Region.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 128),
				stringvalidator.RegexMatches(regexp.MustCompile("[a-zA-Z0-9-]+"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NotificationTarget
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An SNS topic ARN that is set up to receive game session placement notifications.",
		//	  "maxLength": 300,
		//	  "minLength": 1,
		//	  "pattern": "[a-zA-Z0-9:_-]*(\\.fifo)?",
		//	  "type": "string"
		//	}
		"notification_target": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An SNS topic ARN that is set up to receive game session placement notifications.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 300),
				stringvalidator.RegexMatches(regexp.MustCompile("[a-zA-Z0-9:_-]*(\\.fifo)?"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PlayerLatencyPolicies
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A set of policies that act as a sliding cap on player latency.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Sets a latency cap for individual players when placing a game session.",
		//	    "properties": {
		//	      "MaximumIndividualPlayerLatencyMilliseconds": {
		//	        "description": "The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.",
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      },
		//	      "PolicyDurationSeconds": {
		//	        "description": "The length of time, in seconds, that the policy is enforced while placing a new game session.",
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"player_latency_policies": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: MaximumIndividualPlayerLatencyMilliseconds
					"maximum_individual_player_latency_milliseconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.Int64{ /*START VALIDATORS*/
							int64validator.AtLeast(0),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: PolicyDurationSeconds
					"policy_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The length of time, in seconds, that the policy is enforced while placing a new game session.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.Int64{ /*START VALIDATORS*/
							int64validator.AtLeast(0),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A set of policies that act as a sliding cap on player latency.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PriorityConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Custom settings to use when prioritizing destinations and locations for game session placements.",
		//	  "properties": {
		//	    "LocationOrder": {
		//	      "description": "The prioritization order to use for fleet locations, when the PriorityOrder property includes LOCATION.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "maxLength": 64,
		//	        "minLength": 1,
		//	        "pattern": "^[A-Za-z0-9\\-]+",
		//	        "type": "string"
		//	      },
		//	      "maxItems": 100,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "PriorityOrder": {
		//	      "description": "The recommended sequence to use when prioritizing where to place new game sessions.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "enum": [
		//	          "LATENCY",
		//	          "COST",
		//	          "DESTINATION",
		//	          "LOCATION"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "maxItems": 4,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"priority_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: LocationOrder
				"location_order": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The prioritization order to use for fleet locations, when the PriorityOrder property includes LOCATION.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.SizeBetween(1, 100),
						listvalidator.ValueStringsAre(
							stringvalidator.LengthBetween(1, 64),
							stringvalidator.RegexMatches(regexp.MustCompile("^[A-Za-z0-9\\-]+"), ""),
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: PriorityOrder
				"priority_order": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The recommended sequence to use when prioritizing where to place new game sessions.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.SizeBetween(1, 4),
						listvalidator.ValueStringsAre(
							stringvalidator.OneOf(
								"LATENCY",
								"COST",
								"DESTINATION",
								"LOCATION",
							),
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Custom settings to use when prioritizing destinations and locations for game session placements.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 256),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(200),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TimeoutInSeconds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum time, in seconds, that a new game session placement request remains in the queue.",
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"timeout_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum time, in seconds, that a new game session placement request remains in the queue.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.AtLeast(0),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "The AWS::GameLift::GameSessionQueue resource creates an Amazon GameLift (GameLift) game session queue.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::GameLift::GameSessionQueue").WithTerraformTypeName("awscc_gamelift_game_session_queue")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allowed_locations":    "AllowedLocations",
		"arn":                  "Arn",
		"custom_event_data":    "CustomEventData",
		"destination_arn":      "DestinationArn",
		"destinations":         "Destinations",
		"filter_configuration": "FilterConfiguration",
		"key":                  "Key",
		"location_order":       "LocationOrder",
		"maximum_individual_player_latency_milliseconds": "MaximumIndividualPlayerLatencyMilliseconds",
		"name":                    "Name",
		"notification_target":     "NotificationTarget",
		"player_latency_policies": "PlayerLatencyPolicies",
		"policy_duration_seconds": "PolicyDurationSeconds",
		"priority_configuration":  "PriorityConfiguration",
		"priority_order":          "PriorityOrder",
		"tags":                    "Tags",
		"timeout_in_seconds":      "TimeoutInSeconds",
		"value":                   "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
