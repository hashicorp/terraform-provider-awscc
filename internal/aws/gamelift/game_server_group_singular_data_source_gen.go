// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package gamelift

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_gamelift_game_server_group", gameServerGroupDataSource)
}

// gameServerGroupDataSource returns the Terraform awscc_gamelift_game_server_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::GameLift::GameServerGroup resource.
func gameServerGroupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AutoScalingGroupArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.",
		//	  "maxLength": 256,
		//	  "minLength": 0,
		//	  "pattern": "[ -ÌüøÓÄÄ-ÔøΩêÄÄ-Ùèøø\r\n\t]*",
		//	  "type": "string"
		//	}
		"auto_scaling_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A generated unique ID for the EC2 Auto Scaling group that is associated with this game server group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AutoScalingPolicy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.",
		//	  "properties": {
		//	    "EstimatedInstanceWarmup": {
		//	      "description": "Length of time, in seconds, it takes for a new instance to start new game server processes and register with GameLift FleetIQ.",
		//	      "type": "number"
		//	    },
		//	    "TargetTrackingConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Settings for a target-based scaling policy applied to Auto Scaling group.",
		//	      "properties": {
		//	        "TargetValue": {
		//	          "description": "Desired value to use with a game server group target-based scaling policy.",
		//	          "type": "number"
		//	        }
		//	      },
		//	      "required": [
		//	        "TargetValue"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "TargetTrackingConfiguration"
		//	  ],
		//	  "type": "object"
		//	}
		"auto_scaling_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EstimatedInstanceWarmup
				"estimated_instance_warmup": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "Length of time, in seconds, it takes for a new instance to start new game server processes and register with GameLift FleetIQ.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TargetTrackingConfiguration
				"target_tracking_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: TargetValue
						"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "Desired value to use with a game server group target-based scaling policy.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Settings for a target-based scaling policy applied to Auto Scaling group.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration settings to define a scaling policy for the Auto Scaling group that is optimized for game hosting. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: BalancingStrategy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.",
		//	  "enum": [
		//	    "SPOT_ONLY",
		//	    "SPOT_PREFERRED",
		//	    "ON_DEMAND_ONLY"
		//	  ],
		//	  "type": "string"
		//	}
		"balancing_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The fallback balancing method to use for the game server group when Spot Instances in a Region become unavailable or are not viable for game hosting.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DeleteOption
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of delete to perform.",
		//	  "enum": [
		//	    "SAFE_DELETE",
		//	    "FORCE_DELETE",
		//	    "RETAIN"
		//	  ],
		//	  "type": "string"
		//	}
		"delete_option": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of delete to perform.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GameServerGroupArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A generated unique ID for the game server group.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^arn:.*:gameservergroup\\/[a-zA-Z0-9-\\.]*",
		//	  "type": "string"
		//	}
		"game_server_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A generated unique ID for the game server group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GameServerGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An identifier for the new game server group.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "[a-zA-Z0-9-\\.]+",
		//	  "type": "string"
		//	}
		"game_server_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An identifier for the new game server group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GameServerProtectionPolicy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A flag that indicates whether instances in the game server group are protected from early termination.",
		//	  "enum": [
		//	    "NO_PROTECTION",
		//	    "FULL_PROTECTION"
		//	  ],
		//	  "type": "string"
		//	}
		"game_server_protection_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A flag that indicates whether instances in the game server group are protected from early termination.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceDefinitions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A set of EC2 instance types to use when creating instances in the group.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An allowed instance type for your game server group.",
		//	    "properties": {
		//	      "InstanceType": {
		//	        "description": "An EC2 instance type designation.",
		//	        "type": "string"
		//	      },
		//	      "WeightedCapacity": {
		//	        "description": "Instance weighting that indicates how much this instance type contributes to the total capacity of a game server group.",
		//	        "pattern": "",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "InstanceType"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 20,
		//	  "minItems": 2,
		//	  "type": "array"
		//	}
		"instance_definitions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: InstanceType
					"instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "An EC2 instance type designation.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: WeightedCapacity
					"weighted_capacity": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Instance weighting that indicates how much this instance type contributes to the total capacity of a game server group.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A set of EC2 instance types to use when creating instances in the group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LaunchTemplate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.",
		//	  "properties": {
		//	    "LaunchTemplateId": {
		//	      "description": "A unique identifier for an existing EC2 launch template.",
		//	      "type": "string"
		//	    },
		//	    "LaunchTemplateName": {
		//	      "description": "A readable identifier for an existing EC2 launch template.",
		//	      "type": "string"
		//	    },
		//	    "Version": {
		//	      "description": "The version of the EC2 launch template to use.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"launch_template": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: LaunchTemplateId
				"launch_template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A unique identifier for an existing EC2 launch template.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: LaunchTemplateName
				"launch_template_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A readable identifier for an existing EC2 launch template.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Version
				"version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The version of the EC2 launch template to use.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The EC2 launch template that contains configuration settings and game server code to be deployed to all instances in the game server group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaxSize
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum number of instances allowed in the EC2 Auto Scaling group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.",
		//	  "minimum": 1,
		//	  "type": "number"
		//	}
		"max_size": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum number of instances allowed in the EC2 Auto Scaling group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MinSize
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The minimum number of instances allowed in the EC2 Auto Scaling group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.",
		//	  "minimum": 0,
		//	  "type": "number"
		//	}
		"min_size": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "The minimum number of instances allowed in the EC2 Auto Scaling group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^arn:.*:role\\/[\\w+=,.@-]+",
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) for an IAM role that allows Amazon GameLift to access your EC2 Auto Scaling groups.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of labels to assign to the new game server group resource. Updating game server group tags with CloudFormation will not take effect. Please update this property using AWS GameLift APIs instead.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key for a developer-defined key:value pair for tagging an AWS resource.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for a developer-defined key:value pair for tagging an AWS resource.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key for a developer-defined key:value pair for tagging an AWS resource.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for a developer-defined key:value pair for tagging an AWS resource.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of labels to assign to the new game server group resource. Updating game server group tags with CloudFormation will not take effect. Please update this property using AWS GameLift APIs instead.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcSubnets
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of virtual private cloud (VPC) subnets to use with instances in the game server group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "maxLength": 24,
		//	    "minLength": 15,
		//	    "pattern": "^subnet-[0-9a-z]+$",
		//	    "type": "string"
		//	  },
		//	  "maxItems": 20,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"vpc_subnets": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of virtual private cloud (VPC) subnets to use with instances in the game server group. Updating this game server group property will not take effect for the created EC2 Auto Scaling group, please update the EC2 Auto Scaling group directly after creating the resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::GameLift::GameServerGroup",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::GameLift::GameServerGroup").WithTerraformTypeName("awscc_gamelift_game_server_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"auto_scaling_group_arn":        "AutoScalingGroupArn",
		"auto_scaling_policy":           "AutoScalingPolicy",
		"balancing_strategy":            "BalancingStrategy",
		"delete_option":                 "DeleteOption",
		"estimated_instance_warmup":     "EstimatedInstanceWarmup",
		"game_server_group_arn":         "GameServerGroupArn",
		"game_server_group_name":        "GameServerGroupName",
		"game_server_protection_policy": "GameServerProtectionPolicy",
		"instance_definitions":          "InstanceDefinitions",
		"instance_type":                 "InstanceType",
		"key":                           "Key",
		"launch_template":               "LaunchTemplate",
		"launch_template_id":            "LaunchTemplateId",
		"launch_template_name":          "LaunchTemplateName",
		"max_size":                      "MaxSize",
		"min_size":                      "MinSize",
		"role_arn":                      "RoleArn",
		"tags":                          "Tags",
		"target_tracking_configuration": "TargetTrackingConfiguration",
		"target_value":                  "TargetValue",
		"value":                         "Value",
		"version":                       "Version",
		"vpc_subnets":                   "VpcSubnets",
		"weighted_capacity":             "WeightedCapacity",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
