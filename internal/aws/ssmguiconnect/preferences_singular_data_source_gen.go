// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ssmguiconnect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ssmguiconnect_preferences", preferencesDataSource)
}

// preferencesDataSource returns the Terraform awscc_ssmguiconnect_preferences data source.
// This Terraform data source corresponds to the CloudFormation AWS::SSMGuiConnect::Preferences resource.
func preferencesDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccountId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS Account Id that the preference is associated with, used as the unique identifier for this resource.",
		//	  "pattern": "\\d{12}",
		//	  "type": "string"
		//	}
		"account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS Account Id that the preference is associated with, used as the unique identifier for this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectionRecordingPreferences
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The set of preferences used for recording RDP connections in the requesting AWS account and AWS Region. This includes details such as which S3 bucket recordings are stored in.",
		//	  "properties": {
		//	    "KMSKeyArn": {
		//	      "description": "The ARN of a AWS KMS key that is used to encrypt data while it is being processed by the service. This key must exist in the same AWS Region as the node you start an RDP connection to.",
		//	      "maxLength": 2048,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "RecordingDestinations": {
		//	      "additionalProperties": false,
		//	      "description": "Determines where recordings of RDP connections are stored.",
		//	      "properties": {
		//	        "S3Buckets": {
		//	          "description": "The S3 bucket where RDP connection recordings are stored.",
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "The S3 bucket where RDP connection recordings are stored.",
		//	            "properties": {
		//	              "BucketName": {
		//	                "description": "The name of the S3 bucket where RDP connection recordings are stored.",
		//	                "pattern": "",
		//	                "type": "string"
		//	              },
		//	              "BucketOwner": {
		//	                "description": "The AWS account number that owns the S3 bucket.",
		//	                "pattern": "^[0-9]{12}$",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "BucketOwner",
		//	              "BucketName"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "maxItems": 1,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "required": [
		//	        "S3Buckets"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "RecordingDestinations",
		//	    "KMSKeyArn"
		//	  ],
		//	  "type": "object"
		//	}
		"connection_recording_preferences": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: KMSKeyArn
				"kms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of a AWS KMS key that is used to encrypt data while it is being processed by the service. This key must exist in the same AWS Region as the node you start an RDP connection to.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RecordingDestinations
				"recording_destinations": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: S3Buckets
						"s3_buckets": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BucketName
									"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The name of the S3 bucket where RDP connection recordings are stored.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: BucketOwner
									"bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The AWS account number that owns the S3 bucket.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Description: "The S3 bucket where RDP connection recordings are stored.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Determines where recordings of RDP connections are stored.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The set of preferences used for recording RDP connections in the requesting AWS account and AWS Region. This includes details such as which S3 bucket recordings are stored in.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SSMGuiConnect::Preferences",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SSMGuiConnect::Preferences").WithTerraformTypeName("awscc_ssmguiconnect_preferences")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_id":                       "AccountId",
		"bucket_name":                      "BucketName",
		"bucket_owner":                     "BucketOwner",
		"connection_recording_preferences": "ConnectionRecordingPreferences",
		"kms_key_arn":                      "KMSKeyArn",
		"recording_destinations":           "RecordingDestinations",
		"s3_buckets":                       "S3Buckets",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
