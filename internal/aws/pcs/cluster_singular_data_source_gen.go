// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package pcs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_pcs_cluster", clusterDataSource)
}

// clusterDataSource returns the Terraform awscc_pcs_cluster data source.
// This Terraform data source corresponds to the CloudFormation AWS::PCS::Cluster resource.
func clusterDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique Amazon Resource Name (ARN) of the cluster.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique Amazon Resource Name (ARN) of the cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Endpoints
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The list of endpoints available for interaction with the scheduler.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An endpoint available for interaction with the scheduler.",
		//	    "properties": {
		//	      "Ipv6Address": {
		//	        "description": "The endpoint's IPv6 address.",
		//	        "type": "string"
		//	      },
		//	      "Port": {
		//	        "description": "The endpoint's connection port number.",
		//	        "type": "string"
		//	      },
		//	      "PrivateIpAddress": {
		//	        "description": "The endpoint's private IP address.",
		//	        "type": "string"
		//	      },
		//	      "PublicIpAddress": {
		//	        "description": "The endpoint's public IP address.",
		//	        "type": "string"
		//	      },
		//	      "Type": {
		//	        "description": "Indicates the type of endpoint running at the specific IP address.",
		//	        "enum": [
		//	          "SLURMCTLD",
		//	          "SLURMDBD"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Port",
		//	      "PrivateIpAddress",
		//	      "Type"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"endpoints": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Ipv6Address
					"ipv_6_address": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The endpoint's IPv6 address.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Port
					"port": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The endpoint's connection port number.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: PrivateIpAddress
					"private_ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The endpoint's private IP address.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: PublicIpAddress
					"public_ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The endpoint's public IP address.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Indicates the type of endpoint running at the specific IP address.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The list of endpoints available for interaction with the scheduler.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ErrorInfo
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The list of errors that occurred during cluster provisioning.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An error that occurred during resource provisioning.",
		//	    "properties": {
		//	      "Code": {
		//	        "description": "The short-form error code.",
		//	        "type": "string"
		//	      },
		//	      "Message": {
		//	        "description": "The detailed error information.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"error_info": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Code
					"code": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The short-form error code.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Message
					"message": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The detailed error information.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The list of errors that occurred during cluster provisioning.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The generated unique ID of the cluster.",
		//	  "pattern": "^(pcs_[a-zA-Z0-9]+|[A-Za-z][A-Za-z0-9-]{1,40})$",
		//	  "type": "string"
		//	}
		"cluster_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The generated unique ID of the cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name that identifies the cluster.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name that identifies the cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Networking
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The networking configuration for the cluster's control plane.",
		//	  "properties": {
		//	    "NetworkType": {
		//	      "description": "The IP of the cluster (IPV4 or IPV6)",
		//	      "enum": [
		//	        "IPV4",
		//	        "IPV6"
		//	      ],
		//	      "insertionOrder": false,
		//	      "type": "string"
		//	    },
		//	    "SecurityGroupIds": {
		//	      "description": "The list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "A VPC security group ID.",
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "SubnetIds": {
		//	      "description": "The list of subnet IDs where AWS PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and AWS PCS resources. The subnet must have an available IP address, cannot reside in AWS Outposts, AWS Wavelength, or an AWS Local Zone. AWS PCS currently supports only 1 subnet in this list.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "A VPC subnet ID.",
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"networking": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: NetworkType
				"network_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The IP of the cluster (IPV4 or IPV6)",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SecurityGroupIds
				"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The list of security group IDs associated with the Elastic Network Interface (ENI) created in subnets.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SubnetIds
				"subnet_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The list of subnet IDs where AWS PCS creates an Elastic Network Interface (ENI) to enable communication between managed controllers and AWS PCS resources. The subnet must have an available IP address, cannot reside in AWS Outposts, AWS Wavelength, or an AWS Local Zone. AWS PCS currently supports only 1 subnet in this list.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The networking configuration for the cluster's control plane.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Scheduler
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The cluster management and job scheduling software associated with the cluster.",
		//	  "properties": {
		//	    "Type": {
		//	      "description": "The software AWS PCS uses to manage cluster scaling and job scheduling.",
		//	      "enum": [
		//	        "SLURM"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Version": {
		//	      "description": "The version of the specified scheduling software that AWS PCS uses to manage cluster scaling and job scheduling.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Type",
		//	    "Version"
		//	  ],
		//	  "type": "object"
		//	}
		"scheduler": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The software AWS PCS uses to manage cluster scaling and job scheduling.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Version
				"version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The version of the specified scheduling software that AWS PCS uses to manage cluster scaling and job scheduling.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The cluster management and job scheduling software associated with the cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Size
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The size of the cluster.",
		//	  "enum": [
		//	    "SMALL",
		//	    "MEDIUM",
		//	    "LARGE"
		//	  ],
		//	  "type": "string"
		//	}
		"size": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The size of the cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SlurmConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Additional options related to the Slurm scheduler.",
		//	  "properties": {
		//	    "Accounting": {
		//	      "description": "The accounting configuration includes configurable settings for Slurm accounting.",
		//	      "properties": {
		//	        "DefaultPurgeTimeInDays": {
		//	          "default": -1,
		//	          "description": "The default value for all purge settings for `slurmdbd.conf`. For more information, see the [slurmdbd.conf documentation at SchedMD](https://slurm.schedmd.com/slurmdbd.conf.html). The default value is `-1`. A value of `-1` means there is no purge time and records persist as long as the cluster exists.",
		//	          "maximum": 10000,
		//	          "minimum": -1,
		//	          "type": "integer"
		//	        },
		//	        "Mode": {
		//	          "default": "NONE",
		//	          "description": "The default value is `STANDARD`. A value of `STANDARD` means that Slurm accounting is enabled.",
		//	          "enum": [
		//	            "STANDARD",
		//	            "NONE"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Mode"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "AuthKey": {
		//	      "additionalProperties": false,
		//	      "description": "The shared Slurm key for authentication, also known as the cluster secret.",
		//	      "properties": {
		//	        "SecretArn": {
		//	          "description": "The Amazon Resource Name (ARN) of the the shared Slurm key.",
		//	          "type": "string"
		//	        },
		//	        "SecretVersion": {
		//	          "description": "The version of the shared Slurm key.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "SecretArn",
		//	        "SecretVersion"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "ScaleDownIdleTimeInSeconds": {
		//	      "description": "The time before an idle node is scaled down.",
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "SlurmCustomSettings": {
		//	      "description": "Additional Slurm-specific configuration that directly maps to Slurm settings.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Additional settings that directly map to Slurm settings.",
		//	        "properties": {
		//	          "ParameterName": {
		//	            "description": "AWS PCS supports configuration of the following Slurm parameters for clusters: Prolog, Epilog, and SelectTypeParameters.",
		//	            "type": "string"
		//	          },
		//	          "ParameterValue": {
		//	            "description": "The value for the configured Slurm setting.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "ParameterName",
		//	          "ParameterValue"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"slurm_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Accounting
				"accounting": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DefaultPurgeTimeInDays
						"default_purge_time_in_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The default value for all purge settings for `slurmdbd.conf`. For more information, see the [slurmdbd.conf documentation at SchedMD](https://slurm.schedmd.com/slurmdbd.conf.html). The default value is `-1`. A value of `-1` means there is no purge time and records persist as long as the cluster exists.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Mode
						"mode": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The default value is `STANDARD`. A value of `STANDARD` means that Slurm accounting is enabled.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The accounting configuration includes configurable settings for Slurm accounting.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AuthKey
				"auth_key": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: SecretArn
						"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) of the the shared Slurm key.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SecretVersion
						"secret_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The version of the shared Slurm key.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The shared Slurm key for authentication, also known as the cluster secret.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ScaleDownIdleTimeInSeconds
				"scale_down_idle_time_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The time before an idle node is scaled down.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SlurmCustomSettings
				"slurm_custom_settings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ParameterName
							"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "AWS PCS supports configuration of the following Slurm parameters for clusters: Prolog, Epilog, and SelectTypeParameters.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ParameterValue
							"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The value for the configured Slurm setting.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Additional Slurm-specific configuration that directly maps to Slurm settings.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Additional options related to the Slurm scheduler.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.",
		//	  "enum": [
		//	    "CREATING",
		//	    "ACTIVE",
		//	    "UPDATING",
		//	    "DELETING",
		//	    "CREATE_FAILED",
		//	    "DELETE_FAILED",
		//	    "UPDATE_FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The provisioning status of the cluster. The provisioning status doesn't indicate the overall health of the cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  }
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "1 or more tags added to the resource. Each tag consists of a tag key and tag value. The tag value is optional and can be an empty string.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::PCS::Cluster",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::PCS::Cluster").WithTerraformTypeName("awscc_pcs_cluster")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"accounting":                      "Accounting",
		"arn":                             "Arn",
		"auth_key":                        "AuthKey",
		"cluster_id":                      "Id",
		"code":                            "Code",
		"default_purge_time_in_days":      "DefaultPurgeTimeInDays",
		"endpoints":                       "Endpoints",
		"error_info":                      "ErrorInfo",
		"ipv_6_address":                   "Ipv6Address",
		"message":                         "Message",
		"mode":                            "Mode",
		"name":                            "Name",
		"network_type":                    "NetworkType",
		"networking":                      "Networking",
		"parameter_name":                  "ParameterName",
		"parameter_value":                 "ParameterValue",
		"port":                            "Port",
		"private_ip_address":              "PrivateIpAddress",
		"public_ip_address":               "PublicIpAddress",
		"scale_down_idle_time_in_seconds": "ScaleDownIdleTimeInSeconds",
		"scheduler":                       "Scheduler",
		"secret_arn":                      "SecretArn",
		"secret_version":                  "SecretVersion",
		"security_group_ids":              "SecurityGroupIds",
		"size":                            "Size",
		"slurm_configuration":             "SlurmConfiguration",
		"slurm_custom_settings":           "SlurmCustomSettings",
		"status":                          "Status",
		"subnet_ids":                      "SubnetIds",
		"tags":                            "Tags",
		"type":                            "Type",
		"version":                         "Version",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
