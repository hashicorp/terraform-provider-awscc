// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package nimblestudio

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_nimblestudio_launch_profile", launchProfileDataSourceType)
}

// launchProfileDataSourceType returns the Terraform awscc_nimblestudio_launch_profile data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::NimbleStudio::LaunchProfile resource type.
func launchProfileDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"ec_2_subnet_ids": {
			// Property: Ec2SubnetIds
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "type": "string"
			//   },
			//   "type": "array"
			// }
			Type:     types.ListType{ElemType: types.StringType},
			Computed: true,
		},
		"launch_profile_id": {
			// Property: LaunchProfileId
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"launch_profile_protocol_versions": {
			// Property: LaunchProfileProtocolVersions
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "type": "string"
			//   },
			//   "type": "array"
			// }
			Type:     types.ListType{ElemType: types.StringType},
			Computed: true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"stream_configuration": {
			// Property: StreamConfiguration
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "ClipboardMode": {
			//       "type": "string"
			//     },
			//     "Ec2InstanceTypes": {
			//       "items": {
			//         "type": "string"
			//       },
			//       "type": "array"
			//     },
			//     "MaxSessionLengthInMinutes": {
			//       "type": "number"
			//     },
			//     "StreamingImageIds": {
			//       "items": {
			//         "type": "string"
			//       },
			//       "type": "array"
			//     }
			//   },
			//   "required": [
			//     "Ec2InstanceTypes",
			//     "StreamingImageIds",
			//     "ClipboardMode"
			//   ],
			//   "type": "object"
			// }
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"clipboard_mode": {
						// Property: ClipboardMode
						Type:     types.StringType,
						Computed: true,
					},
					"ec_2_instance_types": {
						// Property: Ec2InstanceTypes
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
					"max_session_length_in_minutes": {
						// Property: MaxSessionLengthInMinutes
						Type:     types.NumberType,
						Computed: true,
					},
					"streaming_image_ids": {
						// Property: StreamingImageIds
						Type:     types.ListType{ElemType: types.StringType},
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"studio_component_ids": {
			// Property: StudioComponentIds
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "type": "string"
			//   },
			//   "type": "array"
			// }
			Type:     types.ListType{ElemType: types.StringType},
			Computed: true,
		},
		"studio_id": {
			// Property: StudioId
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "patternProperties": {
			//     "": {
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			// Pattern: ""
			Type:     types.MapType{ElemType: types.StringType},
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::NimbleStudio::LaunchProfile",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::NimbleStudio::LaunchProfile").WithTerraformTypeName("awscc_nimblestudio_launch_profile")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"clipboard_mode":                   "ClipboardMode",
		"description":                      "Description",
		"ec_2_instance_types":              "Ec2InstanceTypes",
		"ec_2_subnet_ids":                  "Ec2SubnetIds",
		"launch_profile_id":                "LaunchProfileId",
		"launch_profile_protocol_versions": "LaunchProfileProtocolVersions",
		"max_session_length_in_minutes":    "MaxSessionLengthInMinutes",
		"name":                             "Name",
		"stream_configuration":             "StreamConfiguration",
		"streaming_image_ids":              "StreamingImageIds",
		"studio_component_ids":             "StudioComponentIds",
		"studio_id":                        "StudioId",
		"tags":                             "Tags",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_nimblestudio_launch_profile", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
