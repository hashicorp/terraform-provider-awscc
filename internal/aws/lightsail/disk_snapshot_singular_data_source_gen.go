// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package lightsail

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_lightsail_disk_snapshot", diskSnapshotDataSource)
}

// diskSnapshotDataSource returns the Terraform awscc_lightsail_disk_snapshot data source.
// This Terraform data source corresponds to the CloudFormation AWS::Lightsail::DiskSnapshot resource.
func diskSnapshotDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The timestamp when the disk snapshot was created.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "The timestamp when the disk snapshot was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DiskName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the source disk from which the snapshot was created.",
		//	  "maxLength": 255,
		//	  "minLength": 2,
		//	  "pattern": "^\\w[\\w\\-]*\\w$",
		//	  "type": "string"
		//	}
		"disk_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the source disk from which the snapshot was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DiskSnapshotArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the disk snapshot.",
		//	  "pattern": ".*\\S.*",
		//	  "type": "string"
		//	}
		"disk_snapshot_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the disk snapshot.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DiskSnapshotName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the disk snapshot (e.g., my-disk-snapshot).",
		//	  "maxLength": 255,
		//	  "minLength": 2,
		//	  "pattern": "^\\w[\\w\\-]*\\w$",
		//	  "type": "string"
		//	}
		"disk_snapshot_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the disk snapshot (e.g., my-disk-snapshot).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FromDiskName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the source disk from which the disk snapshot was created.",
		//	  "pattern": "^\\w[\\w\\-]*\\w$",
		//	  "type": "string"
		//	}
		"from_disk_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the source disk from which the disk snapshot was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IsFromAutoSnapshot
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A Boolean value indicating whether the snapshot was created from an automatic snapshot.",
		//	  "type": "boolean"
		//	}
		"is_from_auto_snapshot": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "A Boolean value indicating whether the snapshot was created from an automatic snapshot.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Location
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The AWS Region and Availability Zone where the disk snapshot was created.",
		//	  "properties": {
		//	    "AvailabilityZone": {
		//	      "description": "The Availability Zone where the disk snapshot was created.",
		//	      "type": "string"
		//	    },
		//	    "RegionName": {
		//	      "description": "The AWS Region where the disk snapshot was created.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AvailabilityZone
				"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Availability Zone where the disk snapshot was created.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RegionName
				"region_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The AWS Region where the disk snapshot was created.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The AWS Region and Availability Zone where the disk snapshot was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Progress
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The progress of the disk snapshot creation operation.",
		//	  "type": "string"
		//	}
		"progress": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The progress of the disk snapshot creation operation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Lightsail resource type (DiskSnapshot).",
		//	  "enum": [
		//	    "DiskSnapshot"
		//	  ],
		//	  "type": "string"
		//	}
		"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Lightsail resource type (DiskSnapshot).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SizeInGb
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The size of the disk snapshot in GB.",
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"size_in_gb": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The size of the disk snapshot in GB.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: State
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the disk snapshot operation.",
		//	  "enum": [
		//	    "pending",
		//	    "completed",
		//	    "error",
		//	    "unknown"
		//	  ],
		//	  "type": "string"
		//	}
		"state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the disk snapshot operation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SupportCode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail.",
		//	  "type": "string"
		//	}
		"support_code": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Lightsail::DiskSnapshot",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Lightsail::DiskSnapshot").WithTerraformTypeName("awscc_lightsail_disk_snapshot")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"availability_zone":     "AvailabilityZone",
		"created_at":            "CreatedAt",
		"disk_name":             "DiskName",
		"disk_snapshot_arn":     "DiskSnapshotArn",
		"disk_snapshot_name":    "DiskSnapshotName",
		"from_disk_name":        "FromDiskName",
		"is_from_auto_snapshot": "IsFromAutoSnapshot",
		"key":                   "Key",
		"location":              "Location",
		"progress":              "Progress",
		"region_name":           "RegionName",
		"resource_type":         "ResourceType",
		"size_in_gb":            "SizeInGb",
		"state":                 "State",
		"support_code":          "SupportCode",
		"tags":                  "Tags",
		"value":                 "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
