// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package lightsail

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_lightsail_static_ip", staticIpDataSource)
}

// staticIpDataSource returns the Terraform awscc_lightsail_static_ip data source.
// This Terraform data source corresponds to the CloudFormation AWS::Lightsail::StaticIp resource.
func staticIpDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AttachedTo
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The instance where the static IP is attached.",
		//	  "type": "string"
		//	}
		"attached_to": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The instance where the static IP is attached.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IpAddress
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The static IP address.",
		//	  "type": "string"
		//	}
		"ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The static IP address.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IsAttached
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A Boolean value indicating whether the static IP is attached.",
		//	  "type": "boolean"
		//	}
		"is_attached": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "A Boolean value indicating whether the static IP is attached.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StaticIpArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"static_ip_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: StaticIpName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the static IP address.",
		//	  "type": "string"
		//	}
		"static_ip_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the static IP address.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Lightsail::StaticIp",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Lightsail::StaticIp").WithTerraformTypeName("awscc_lightsail_static_ip")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"attached_to":    "AttachedTo",
		"ip_address":     "IpAddress",
		"is_attached":    "IsAttached",
		"static_ip_arn":  "StaticIpArn",
		"static_ip_name": "StaticIpName",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
