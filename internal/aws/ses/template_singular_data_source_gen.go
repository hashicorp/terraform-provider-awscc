// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ses

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ses_template", templateDataSource)
}

// templateDataSource returns the Terraform awscc_ses_template data source.
// This Terraform data source corresponds to the CloudFormation AWS::SES::Template resource.
func templateDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Template
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The content of the email, composed of a subject line, an HTML part, and a text-only part",
		//	  "properties": {
		//	    "HtmlPart": {
		//	      "description": "The HTML body of the email.",
		//	      "type": "string"
		//	    },
		//	    "SubjectPart": {
		//	      "description": "The subject line of the email.",
		//	      "type": "string"
		//	    },
		//	    "TemplateName": {
		//	      "description": "The name of the template.",
		//	      "maxLength": 64,
		//	      "minLength": 1,
		//	      "pattern": "^[a-zA-Z0-9_-]{1,64}$",
		//	      "type": "string"
		//	    },
		//	    "TextPart": {
		//	      "description": "The email body that is visible to recipients whose email clients do not display HTML content.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "SubjectPart"
		//	  ],
		//	  "type": "object"
		//	}
		"template": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: HtmlPart
				"html_part": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The HTML body of the email.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SubjectPart
				"subject_part": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The subject line of the email.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TemplateName
				"template_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The name of the template.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TextPart
				"text_part": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The email body that is visible to recipients whose email clients do not display HTML content.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The content of the email, composed of a subject line, an HTML part, and a text-only part",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SES::Template",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SES::Template").WithTerraformTypeName("awscc_ses_template")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"html_part":     "HtmlPart",
		"subject_part":  "SubjectPart",
		"template":      "Template",
		"template_id":   "Id",
		"template_name": "TemplateName",
		"text_part":     "TextPart",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
