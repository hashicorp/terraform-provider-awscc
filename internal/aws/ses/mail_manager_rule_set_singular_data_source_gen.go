// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ses

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ses_mail_manager_rule_set", mailManagerRuleSetDataSource)
}

// mailManagerRuleSetDataSource returns the Terraform awscc_ses_mail_manager_rule_set data source.
// This Terraform data source corresponds to the CloudFormation AWS::SES::MailManagerRuleSet resource.
func mailManagerRuleSetDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: RuleSetArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"rule_set_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RuleSetId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"rule_set_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RuleSetName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9_.-]+$",
		//	  "type": "string"
		//	}
		"rule_set_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Rules
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Actions": {
		//	        "items": {
		//	          "properties": {
		//	            "AddHeader": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "HeaderName": {
		//	                  "maxLength": 64,
		//	                  "minLength": 1,
		//	                  "pattern": "^[xX]\\-[a-zA-Z0-9\\-]+$",
		//	                  "type": "string"
		//	                },
		//	                "HeaderValue": {
		//	                  "maxLength": 128,
		//	                  "minLength": 1,
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "HeaderName",
		//	                "HeaderValue"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "Archive": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ActionFailurePolicy": {
		//	                  "enum": [
		//	                    "CONTINUE",
		//	                    "DROP"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "TargetArchive": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 1,
		//	                  "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "TargetArchive"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "DeliverToMailbox": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ActionFailurePolicy": {
		//	                  "enum": [
		//	                    "CONTINUE",
		//	                    "DROP"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "MailboxArn": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 1,
		//	                  "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                  "type": "string"
		//	                },
		//	                "RoleArn": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 20,
		//	                  "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "MailboxArn",
		//	                "RoleArn"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "DeliverToQBusiness": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ActionFailurePolicy": {
		//	                  "enum": [
		//	                    "CONTINUE",
		//	                    "DROP"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "ApplicationId": {
		//	                  "maxLength": 36,
		//	                  "minLength": 36,
		//	                  "pattern": "^[a-z0-9-]+$",
		//	                  "type": "string"
		//	                },
		//	                "IndexId": {
		//	                  "maxLength": 36,
		//	                  "minLength": 36,
		//	                  "pattern": "^[a-z0-9-]+$",
		//	                  "type": "string"
		//	                },
		//	                "RoleArn": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 20,
		//	                  "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "ApplicationId",
		//	                "IndexId",
		//	                "RoleArn"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "Drop": {
		//	              "additionalProperties": false,
		//	              "type": "object"
		//	            },
		//	            "PublishToSns": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ActionFailurePolicy": {
		//	                  "enum": [
		//	                    "CONTINUE",
		//	                    "DROP"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Encoding": {
		//	                  "enum": [
		//	                    "UTF-8",
		//	                    "BASE64"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "PayloadType": {
		//	                  "enum": [
		//	                    "CONTENT",
		//	                    "HEADERS"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "RoleArn": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 20,
		//	                  "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                  "type": "string"
		//	                },
		//	                "TopicArn": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 20,
		//	                  "pattern": "^arn:(aws|aws-cn|aws-us-gov):sns:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:[\\w\\-]{1,256}$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "TopicArn",
		//	                "RoleArn"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "Relay": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ActionFailurePolicy": {
		//	                  "enum": [
		//	                    "CONTINUE",
		//	                    "DROP"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "MailFrom": {
		//	                  "enum": [
		//	                    "REPLACE",
		//	                    "PRESERVE"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Relay": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 1,
		//	                  "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Relay"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ReplaceRecipient": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ReplaceWith": {
		//	                  "items": {
		//	                    "maxLength": 254,
		//	                    "minLength": 0,
		//	                    "pattern": "^[0-9A-Za-z@+.-]+$",
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 100,
		//	                  "minItems": 1,
		//	                  "type": "array",
		//	                  "uniqueItems": true
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "Send": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ActionFailurePolicy": {
		//	                  "enum": [
		//	                    "CONTINUE",
		//	                    "DROP"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "RoleArn": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 20,
		//	                  "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "RoleArn"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "WriteToS3": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ActionFailurePolicy": {
		//	                  "enum": [
		//	                    "CONTINUE",
		//	                    "DROP"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "RoleArn": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 20,
		//	                  "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                  "type": "string"
		//	                },
		//	                "S3Bucket": {
		//	                  "maxLength": 62,
		//	                  "minLength": 1,
		//	                  "pattern": "^[a-zA-Z0-9.-]+$",
		//	                  "type": "string"
		//	                },
		//	                "S3Prefix": {
		//	                  "maxLength": 62,
		//	                  "minLength": 1,
		//	                  "pattern": "^[a-zA-Z0-9!_.*'()/-]+$",
		//	                  "type": "string"
		//	                },
		//	                "S3SseKmsKeyId": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 20,
		//	                  "pattern": "^[a-zA-Z0-9-:/]+$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "RoleArn",
		//	                "S3Bucket"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "maxItems": 10,
		//	        "minItems": 1,
		//	        "type": "array"
		//	      },
		//	      "Conditions": {
		//	        "items": {
		//	          "properties": {
		//	            "BooleanExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Evaluate": {
		//	                  "properties": {
		//	                    "Analysis": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Analyzer": {
		//	                          "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                          "type": "string"
		//	                        },
		//	                        "ResultField": {
		//	                          "maxLength": 256,
		//	                          "minLength": 1,
		//	                          "pattern": "^(addon\\.)?[\\sa-zA-Z0-9_]+$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Analyzer",
		//	                        "ResultField"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "Attribute": {
		//	                      "enum": [
		//	                        "READ_RECEIPT_REQUESTED",
		//	                        "TLS",
		//	                        "TLS_WRAPPED"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "IsInAddressList": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "AddressLists": {
		//	                          "items": {
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 1,
		//	                          "minItems": 1,
		//	                          "type": "array",
		//	                          "uniqueItems": true
		//	                        },
		//	                        "Attribute": {
		//	                          "enum": [
		//	                            "RECIPIENT",
		//	                            "MAIL_FROM",
		//	                            "SENDER",
		//	                            "FROM",
		//	                            "TO",
		//	                            "CC"
		//	                          ],
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Attribute",
		//	                        "AddressLists"
		//	                      ],
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Operator": {
		//	                  "enum": [
		//	                    "IS_TRUE",
		//	                    "IS_FALSE"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Evaluate",
		//	                "Operator"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "DmarcExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Operator": {
		//	                  "enum": [
		//	                    "EQUALS",
		//	                    "NOT_EQUALS"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Values": {
		//	                  "items": {
		//	                    "enum": [
		//	                      "NONE",
		//	                      "QUARANTINE",
		//	                      "REJECT"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 10,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "required": [
		//	                "Operator",
		//	                "Values"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "IpExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Evaluate": {
		//	                  "properties": {
		//	                    "Attribute": {
		//	                      "enum": [
		//	                        "SOURCE_IP"
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Operator": {
		//	                  "enum": [
		//	                    "CIDR_MATCHES",
		//	                    "NOT_CIDR_MATCHES"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Values": {
		//	                  "items": {
		//	                    "maxLength": 43,
		//	                    "minLength": 1,
		//	                    "pattern": "^(([0-9]|.|:|/)*)$",
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 10,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "required": [
		//	                "Evaluate",
		//	                "Operator",
		//	                "Values"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NumberExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Evaluate": {
		//	                  "properties": {
		//	                    "Attribute": {
		//	                      "enum": [
		//	                        "MESSAGE_SIZE"
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Operator": {
		//	                  "enum": [
		//	                    "EQUALS",
		//	                    "NOT_EQUALS",
		//	                    "LESS_THAN",
		//	                    "GREATER_THAN",
		//	                    "LESS_THAN_OR_EQUAL",
		//	                    "GREATER_THAN_OR_EQUAL"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "type": "number"
		//	                }
		//	              },
		//	              "required": [
		//	                "Evaluate",
		//	                "Operator",
		//	                "Value"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "StringExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Evaluate": {
		//	                  "properties": {
		//	                    "Analysis": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Analyzer": {
		//	                          "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                          "type": "string"
		//	                        },
		//	                        "ResultField": {
		//	                          "maxLength": 256,
		//	                          "minLength": 1,
		//	                          "pattern": "^(addon\\.)?[\\sa-zA-Z0-9_]+$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Analyzer",
		//	                        "ResultField"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "Attribute": {
		//	                      "enum": [
		//	                        "MAIL_FROM",
		//	                        "HELO",
		//	                        "RECIPIENT",
		//	                        "SENDER",
		//	                        "FROM",
		//	                        "SUBJECT",
		//	                        "TO",
		//	                        "CC"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "MimeHeaderAttribute": {
		//	                      "pattern": "^X-[a-zA-Z0-9-]{1,256}$",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Operator": {
		//	                  "enum": [
		//	                    "EQUALS",
		//	                    "NOT_EQUALS",
		//	                    "STARTS_WITH",
		//	                    "ENDS_WITH",
		//	                    "CONTAINS"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Values": {
		//	                  "items": {
		//	                    "maxLength": 4096,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 10,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "required": [
		//	                "Evaluate",
		//	                "Operator",
		//	                "Values"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "VerdictExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Evaluate": {
		//	                  "properties": {
		//	                    "Analysis": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Analyzer": {
		//	                          "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                          "type": "string"
		//	                        },
		//	                        "ResultField": {
		//	                          "maxLength": 256,
		//	                          "minLength": 1,
		//	                          "pattern": "^(addon\\.)?[\\sa-zA-Z0-9_]+$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Analyzer",
		//	                        "ResultField"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "Attribute": {
		//	                      "enum": [
		//	                        "SPF",
		//	                        "DKIM"
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Operator": {
		//	                  "enum": [
		//	                    "EQUALS",
		//	                    "NOT_EQUALS"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Values": {
		//	                  "items": {
		//	                    "enum": [
		//	                      "PASS",
		//	                      "FAIL",
		//	                      "GRAY",
		//	                      "PROCESSING_FAILED"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 10,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "required": [
		//	                "Evaluate",
		//	                "Operator",
		//	                "Values"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "maxItems": 10,
		//	        "minItems": 0,
		//	        "type": "array"
		//	      },
		//	      "Name": {
		//	        "maxLength": 32,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9_.-]+$",
		//	        "type": "string"
		//	      },
		//	      "Unless": {
		//	        "items": {
		//	          "properties": {
		//	            "BooleanExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Evaluate": {
		//	                  "properties": {
		//	                    "Analysis": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Analyzer": {
		//	                          "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                          "type": "string"
		//	                        },
		//	                        "ResultField": {
		//	                          "maxLength": 256,
		//	                          "minLength": 1,
		//	                          "pattern": "^(addon\\.)?[\\sa-zA-Z0-9_]+$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Analyzer",
		//	                        "ResultField"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "Attribute": {
		//	                      "enum": [
		//	                        "READ_RECEIPT_REQUESTED",
		//	                        "TLS",
		//	                        "TLS_WRAPPED"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "IsInAddressList": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "AddressLists": {
		//	                          "items": {
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 1,
		//	                          "minItems": 1,
		//	                          "type": "array",
		//	                          "uniqueItems": true
		//	                        },
		//	                        "Attribute": {
		//	                          "enum": [
		//	                            "RECIPIENT",
		//	                            "MAIL_FROM",
		//	                            "SENDER",
		//	                            "FROM",
		//	                            "TO",
		//	                            "CC"
		//	                          ],
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Attribute",
		//	                        "AddressLists"
		//	                      ],
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Operator": {
		//	                  "enum": [
		//	                    "IS_TRUE",
		//	                    "IS_FALSE"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Evaluate",
		//	                "Operator"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "DmarcExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Operator": {
		//	                  "enum": [
		//	                    "EQUALS",
		//	                    "NOT_EQUALS"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Values": {
		//	                  "items": {
		//	                    "enum": [
		//	                      "NONE",
		//	                      "QUARANTINE",
		//	                      "REJECT"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 10,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "required": [
		//	                "Operator",
		//	                "Values"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "IpExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Evaluate": {
		//	                  "properties": {
		//	                    "Attribute": {
		//	                      "enum": [
		//	                        "SOURCE_IP"
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Operator": {
		//	                  "enum": [
		//	                    "CIDR_MATCHES",
		//	                    "NOT_CIDR_MATCHES"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Values": {
		//	                  "items": {
		//	                    "maxLength": 43,
		//	                    "minLength": 1,
		//	                    "pattern": "^(([0-9]|.|:|/)*)$",
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 10,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "required": [
		//	                "Evaluate",
		//	                "Operator",
		//	                "Values"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NumberExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Evaluate": {
		//	                  "properties": {
		//	                    "Attribute": {
		//	                      "enum": [
		//	                        "MESSAGE_SIZE"
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Operator": {
		//	                  "enum": [
		//	                    "EQUALS",
		//	                    "NOT_EQUALS",
		//	                    "LESS_THAN",
		//	                    "GREATER_THAN",
		//	                    "LESS_THAN_OR_EQUAL",
		//	                    "GREATER_THAN_OR_EQUAL"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "type": "number"
		//	                }
		//	              },
		//	              "required": [
		//	                "Evaluate",
		//	                "Operator",
		//	                "Value"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "StringExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Evaluate": {
		//	                  "properties": {
		//	                    "Analysis": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Analyzer": {
		//	                          "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                          "type": "string"
		//	                        },
		//	                        "ResultField": {
		//	                          "maxLength": 256,
		//	                          "minLength": 1,
		//	                          "pattern": "^(addon\\.)?[\\sa-zA-Z0-9_]+$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Analyzer",
		//	                        "ResultField"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "Attribute": {
		//	                      "enum": [
		//	                        "MAIL_FROM",
		//	                        "HELO",
		//	                        "RECIPIENT",
		//	                        "SENDER",
		//	                        "FROM",
		//	                        "SUBJECT",
		//	                        "TO",
		//	                        "CC"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "MimeHeaderAttribute": {
		//	                      "pattern": "^X-[a-zA-Z0-9-]{1,256}$",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Operator": {
		//	                  "enum": [
		//	                    "EQUALS",
		//	                    "NOT_EQUALS",
		//	                    "STARTS_WITH",
		//	                    "ENDS_WITH",
		//	                    "CONTAINS"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Values": {
		//	                  "items": {
		//	                    "maxLength": 4096,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 10,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "required": [
		//	                "Evaluate",
		//	                "Operator",
		//	                "Values"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "VerdictExpression": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Evaluate": {
		//	                  "properties": {
		//	                    "Analysis": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Analyzer": {
		//	                          "pattern": "^[a-zA-Z0-9:_/+=,@.#-]+$",
		//	                          "type": "string"
		//	                        },
		//	                        "ResultField": {
		//	                          "maxLength": 256,
		//	                          "minLength": 1,
		//	                          "pattern": "^(addon\\.)?[\\sa-zA-Z0-9_]+$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Analyzer",
		//	                        "ResultField"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "Attribute": {
		//	                      "enum": [
		//	                        "SPF",
		//	                        "DKIM"
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Operator": {
		//	                  "enum": [
		//	                    "EQUALS",
		//	                    "NOT_EQUALS"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Values": {
		//	                  "items": {
		//	                    "enum": [
		//	                      "PASS",
		//	                      "FAIL",
		//	                      "GRAY",
		//	                      "PROCESSING_FAILED"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 10,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "required": [
		//	                "Evaluate",
		//	                "Operator",
		//	                "Values"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "maxItems": 10,
		//	        "minItems": 0,
		//	        "type": "array"
		//	      }
		//	    },
		//	    "required": [
		//	      "Actions"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 40,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Actions
					"actions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AddHeader
								"add_header": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: HeaderName
										"header_name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: HeaderValue
										"header_value": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Archive
								"archive": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ActionFailurePolicy
										"action_failure_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: TargetArchive
										"target_archive": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: DeliverToMailbox
								"deliver_to_mailbox": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ActionFailurePolicy
										"action_failure_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: MailboxArn
										"mailbox_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: RoleArn
										"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: DeliverToQBusiness
								"deliver_to_q_business": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ActionFailurePolicy
										"action_failure_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: ApplicationId
										"application_id": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: IndexId
										"index_id": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: RoleArn
										"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Drop
								"drop": schema.StringAttribute{ /*START ATTRIBUTE*/
									CustomType: jsontypes.NormalizedType{},
									Computed:   true,
								}, /*END ATTRIBUTE*/
								// Property: PublishToSns
								"publish_to_sns": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ActionFailurePolicy
										"action_failure_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Encoding
										"encoding": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: PayloadType
										"payload_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: RoleArn
										"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: TopicArn
										"topic_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Relay
								"relay": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ActionFailurePolicy
										"action_failure_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: MailFrom
										"mail_from": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Relay
										"relay": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ReplaceRecipient
								"replace_recipient": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ReplaceWith
										"replace_with": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Send
								"send": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ActionFailurePolicy
										"action_failure_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: RoleArn
										"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: WriteToS3
								"write_to_s3": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ActionFailurePolicy
										"action_failure_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: RoleArn
										"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: S3Bucket
										"s3_bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: S3Prefix
										"s3_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: S3SseKmsKeyId
										"s3_sse_kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Conditions
					"conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BooleanExpression
								"boolean_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Evaluate
										"evaluate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Analysis
												"analysis": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Analyzer
														"analyzer": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: ResultField
														"result_field": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Attribute
												"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: IsInAddressList
												"is_in_address_list": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: AddressLists
														"address_lists": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Attribute
														"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: DmarcExpression
								"dmarc_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Values
										"values": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IpExpression
								"ip_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Evaluate
										"evaluate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Attribute
												"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Values
										"values": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NumberExpression
								"number_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Evaluate
										"evaluate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Attribute
												"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.Float64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: StringExpression
								"string_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Evaluate
										"evaluate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Analysis
												"analysis": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Analyzer
														"analyzer": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: ResultField
														"result_field": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Attribute
												"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: MimeHeaderAttribute
												"mime_header_attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Values
										"values": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: VerdictExpression
								"verdict_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Evaluate
										"evaluate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Analysis
												"analysis": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Analyzer
														"analyzer": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: ResultField
														"result_field": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Attribute
												"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Values
										"values": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Unless
					"unless": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BooleanExpression
								"boolean_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Evaluate
										"evaluate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Analysis
												"analysis": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Analyzer
														"analyzer": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: ResultField
														"result_field": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Attribute
												"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: IsInAddressList
												"is_in_address_list": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: AddressLists
														"address_lists": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Attribute
														"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: DmarcExpression
								"dmarc_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Values
										"values": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IpExpression
								"ip_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Evaluate
										"evaluate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Attribute
												"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Values
										"values": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NumberExpression
								"number_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Evaluate
										"evaluate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Attribute
												"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.Float64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: StringExpression
								"string_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Evaluate
										"evaluate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Analysis
												"analysis": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Analyzer
														"analyzer": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: ResultField
														"result_field": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Attribute
												"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: MimeHeaderAttribute
												"mime_header_attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Values
										"values": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: VerdictExpression
								"verdict_expression": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Evaluate
										"evaluate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Analysis
												"analysis": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Analyzer
														"analyzer": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: ResultField
														"result_field": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Attribute
												"attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Operator
										"operator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Values
										"values": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9/_\\+=\\.:@\\-]+$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "pattern": "^[a-zA-Z0-9/_\\+=\\.:@\\-]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SES::MailManagerRuleSet",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SES::MailManagerRuleSet").WithTerraformTypeName("awscc_ses_mail_manager_rule_set")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"action_failure_policy": "ActionFailurePolicy",
		"actions":               "Actions",
		"add_header":            "AddHeader",
		"address_lists":         "AddressLists",
		"analysis":              "Analysis",
		"analyzer":              "Analyzer",
		"application_id":        "ApplicationId",
		"archive":               "Archive",
		"attribute":             "Attribute",
		"boolean_expression":    "BooleanExpression",
		"conditions":            "Conditions",
		"deliver_to_mailbox":    "DeliverToMailbox",
		"deliver_to_q_business": "DeliverToQBusiness",
		"dmarc_expression":      "DmarcExpression",
		"drop":                  "Drop",
		"encoding":              "Encoding",
		"evaluate":              "Evaluate",
		"header_name":           "HeaderName",
		"header_value":          "HeaderValue",
		"index_id":              "IndexId",
		"ip_expression":         "IpExpression",
		"is_in_address_list":    "IsInAddressList",
		"key":                   "Key",
		"mail_from":             "MailFrom",
		"mailbox_arn":           "MailboxArn",
		"mime_header_attribute": "MimeHeaderAttribute",
		"name":                  "Name",
		"number_expression":     "NumberExpression",
		"operator":              "Operator",
		"payload_type":          "PayloadType",
		"publish_to_sns":        "PublishToSns",
		"relay":                 "Relay",
		"replace_recipient":     "ReplaceRecipient",
		"replace_with":          "ReplaceWith",
		"result_field":          "ResultField",
		"role_arn":              "RoleArn",
		"rule_set_arn":          "RuleSetArn",
		"rule_set_id":           "RuleSetId",
		"rule_set_name":         "RuleSetName",
		"rules":                 "Rules",
		"s3_bucket":             "S3Bucket",
		"s3_prefix":             "S3Prefix",
		"s3_sse_kms_key_id":     "S3SseKmsKeyId",
		"send":                  "Send",
		"string_expression":     "StringExpression",
		"tags":                  "Tags",
		"target_archive":        "TargetArchive",
		"topic_arn":             "TopicArn",
		"unless":                "Unless",
		"value":                 "Value",
		"values":                "Values",
		"verdict_expression":    "VerdictExpression",
		"write_to_s3":           "WriteToS3",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
