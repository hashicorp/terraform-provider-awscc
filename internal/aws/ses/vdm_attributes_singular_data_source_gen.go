// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ses

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ses_vdm_attributes", vdmAttributesDataSource)
}

// vdmAttributesDataSource returns the Terraform awscc_ses_vdm_attributes data source.
// This Terraform data source corresponds to the CloudFormation AWS::SES::VdmAttributes resource.
func vdmAttributesDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DashboardAttributes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Preferences regarding the Dashboard feature.",
		//	  "properties": {
		//	    "EngagementMetrics": {
		//	      "description": "Whether emails sent from this account have engagement tracking enabled.",
		//	      "pattern": "ENABLED|DISABLED",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"dashboard_attributes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EngagementMetrics
				"engagement_metrics": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Whether emails sent from this account have engagement tracking enabled.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Preferences regarding the Dashboard feature.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GuardianAttributes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Preferences regarding the Guardian feature.",
		//	  "properties": {
		//	    "OptimizedSharedDelivery": {
		//	      "description": "Whether emails sent from this account have optimized delivery algorithm enabled.",
		//	      "pattern": "ENABLED|DISABLED",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"guardian_attributes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: OptimizedSharedDelivery
				"optimized_shared_delivery": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Whether emails sent from this account have optimized delivery algorithm enabled.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Preferences regarding the Guardian feature.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VdmAttributesResourceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Unique identifier for this resource",
		//	  "type": "string"
		//	}
		"vdm_attributes_resource_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Unique identifier for this resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SES::VdmAttributes",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SES::VdmAttributes").WithTerraformTypeName("awscc_ses_vdm_attributes")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"dashboard_attributes":       "DashboardAttributes",
		"engagement_metrics":         "EngagementMetrics",
		"guardian_attributes":        "GuardianAttributes",
		"optimized_shared_delivery":  "OptimizedSharedDelivery",
		"vdm_attributes_resource_id": "VdmAttributesResourceId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
