// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package workspaces

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_workspaces_workspaces_pool", workspacesPoolDataSource)
}

// workspacesPoolDataSource returns the Terraform awscc_workspaces_workspaces_pool data source.
// This Terraform data source corresponds to the CloudFormation AWS::WorkSpaces::WorkspacesPool resource.
func workspacesPoolDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApplicationSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "SettingsGroup": {
		//	      "maxLength": 100,
		//	      "pattern": "^[A-Za-z0-9_./()!*'-]+$",
		//	      "type": "string"
		//	    },
		//	    "Status": {
		//	      "enum": [
		//	        "DISABLED",
		//	        "ENABLED"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Status"
		//	  ],
		//	  "type": "object"
		//	}
		"application_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: SettingsGroup
				"settings_group": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Status
				"status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: BundleId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^wsb-[0-9a-z]{8,63}$",
		//	  "type": "string"
		//	}
		"bundle_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Capacity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "DesiredUserSessions": {
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "DesiredUserSessions"
		//	  ],
		//	  "type": "object"
		//	}
		"capacity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DesiredUserSessions
				"desired_user_sessions": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9_./() -]+$",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DirectoryId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 65,
		//	  "minLength": 10,
		//	  "pattern": "^wsd-[0-9a-z]{8,63}$",
		//	  "type": "string"
		//	}
		"directory_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: PoolArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^arn:aws[a-z-]{0,7}:[A-Za-z0-9][A-za-z0-9_/.-]{0,62}:[A-za-z0-9_/.-]{0,63}:[A-za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-za-z0-9_/.-]{0,127}$",
		//	  "type": "string"
		//	}
		"pool_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: PoolId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^wspool-[0-9a-z]{9}$",
		//	  "type": "string"
		//	}
		"pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: PoolName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^[A-Za-z0-9][A-Za-z0-9_.-]{0,63}$",
		//	  "type": "string"
		//	}
		"pool_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RunningMode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "ALWAYS_ON",
		//	    "AUTO_STOP"
		//	  ],
		//	  "type": "string"
		//	}
		"running_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TimeoutSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "DisconnectTimeoutInSeconds": {
		//	      "maximum": 36000,
		//	      "minimum": 60,
		//	      "type": "integer"
		//	    },
		//	    "IdleDisconnectTimeoutInSeconds": {
		//	      "maximum": 36000,
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    },
		//	    "MaxUserDurationInSeconds": {
		//	      "maximum": 432000,
		//	      "minimum": 600,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"timeout_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DisconnectTimeoutInSeconds
				"disconnect_timeout_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IdleDisconnectTimeoutInSeconds
				"idle_disconnect_timeout_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: MaxUserDurationInSeconds
				"max_user_duration_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::WorkSpaces::WorkspacesPool",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::WorkSpaces::WorkspacesPool").WithTerraformTypeName("awscc_workspaces_workspaces_pool")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"application_settings":               "ApplicationSettings",
		"bundle_id":                          "BundleId",
		"capacity":                           "Capacity",
		"created_at":                         "CreatedAt",
		"description":                        "Description",
		"desired_user_sessions":              "DesiredUserSessions",
		"directory_id":                       "DirectoryId",
		"disconnect_timeout_in_seconds":      "DisconnectTimeoutInSeconds",
		"idle_disconnect_timeout_in_seconds": "IdleDisconnectTimeoutInSeconds",
		"key":                                "Key",
		"max_user_duration_in_seconds":       "MaxUserDurationInSeconds",
		"pool_arn":                           "PoolArn",
		"pool_id":                            "PoolId",
		"pool_name":                          "PoolName",
		"running_mode":                       "RunningMode",
		"settings_group":                     "SettingsGroup",
		"status":                             "Status",
		"tags":                               "Tags",
		"timeout_settings":                   "TimeoutSettings",
		"value":                              "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
