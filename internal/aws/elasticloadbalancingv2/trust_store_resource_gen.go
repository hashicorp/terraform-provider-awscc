// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package elasticloadbalancingv2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_elasticloadbalancingv2_trust_store", trustStoreResource)
}

// trustStoreResource returns the Terraform awscc_elasticloadbalancingv2_trust_store resource.
// This Terraform resource corresponds to the CloudFormation AWS::ElasticLoadBalancingV2::TrustStore resource.
func trustStoreResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CaCertificatesBundleS3Bucket
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the S3 bucket to fetch the CA certificate bundle from.",
		//	  "type": "string"
		//	}
		"ca_certificates_bundle_s3_bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the S3 bucket to fetch the CA certificate bundle from.",
			Optional:    true,
			// CaCertificatesBundleS3Bucket is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: CaCertificatesBundleS3Key
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the S3 object to fetch the CA certificate bundle from.",
		//	  "type": "string"
		//	}
		"ca_certificates_bundle_s3_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the S3 object to fetch the CA certificate bundle from.",
			Optional:    true,
			// CaCertificatesBundleS3Key is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: CaCertificatesBundleS3ObjectVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The version of the S3 bucket that contains the CA certificate bundle.",
		//	  "type": "string"
		//	}
		"ca_certificates_bundle_s3_object_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The version of the S3 bucket that contains the CA certificate bundle.",
			Optional:    true,
			// CaCertificatesBundleS3ObjectVersion is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the trust store.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the trust store.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NumberOfCaCertificates
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of certificates associated with the trust store.",
		//	  "type": "integer"
		//	}
		"number_of_ca_certificates": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of certificates associated with the trust store.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the trust store, could be either of ACTIVE or CREATING.",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the trust store, could be either of ACTIVE or CREATING.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags to assign to the trust store.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags to assign to the trust store.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TrustStoreArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the trust store.",
		//	  "type": "string"
		//	}
		"trust_store_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the trust store.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::ElasticLoadBalancingV2::TrustStore",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ElasticLoadBalancingV2::TrustStore").WithTerraformTypeName("awscc_elasticloadbalancingv2_trust_store")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"ca_certificates_bundle_s3_bucket":         "CaCertificatesBundleS3Bucket",
		"ca_certificates_bundle_s3_key":            "CaCertificatesBundleS3Key",
		"ca_certificates_bundle_s3_object_version": "CaCertificatesBundleS3ObjectVersion",
		"key":                       "Key",
		"name":                      "Name",
		"number_of_ca_certificates": "NumberOfCaCertificates",
		"status":                    "Status",
		"tags":                      "Tags",
		"trust_store_arn":           "TrustStoreArn",
		"value":                     "Value",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/CaCertificatesBundleS3Bucket",
		"/properties/CaCertificatesBundleS3Key",
		"/properties/CaCertificatesBundleS3ObjectVersion",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
