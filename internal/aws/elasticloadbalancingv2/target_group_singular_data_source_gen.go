// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package elasticloadbalancingv2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_elasticloadbalancingv2_target_group", targetGroupDataSource)
}

// targetGroupDataSource returns the Terraform awscc_elasticloadbalancingv2_target_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::ElasticLoadBalancingV2::TargetGroup resource.
func targetGroupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: HealthCheckEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.",
		//	  "type": "boolean"
		//	}
		"health_check_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckIntervalSeconds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The approximate amount of time, in seconds, between health checks of an individual target.",
		//	  "type": "integer"
		//	}
		"health_check_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The approximate amount of time, in seconds, between health checks of an individual target.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckPath
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "[HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.",
		//	  "type": "string"
		//	}
		"health_check_path": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "[HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckPort
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The port the load balancer uses when performing health checks on targets. ",
		//	  "type": "string"
		//	}
		"health_check_port": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The port the load balancer uses when performing health checks on targets. ",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckProtocol
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The protocol the load balancer uses when performing health checks on targets. ",
		//	  "type": "string"
		//	}
		"health_check_protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The protocol the load balancer uses when performing health checks on targets. ",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckTimeoutSeconds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The amount of time, in seconds, during which no response from a target means a failed health check.",
		//	  "type": "integer"
		//	}
		"health_check_timeout_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The amount of time, in seconds, during which no response from a target means a failed health check.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthyThresholdCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of consecutive health checks successes required before considering an unhealthy target healthy. ",
		//	  "type": "integer"
		//	}
		"healthy_threshold_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of consecutive health checks successes required before considering an unhealthy target healthy. ",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IpAddressType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of IP address used for this target group. The possible values are ipv4 and ipv6. ",
		//	  "type": "string"
		//	}
		"ip_address_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of IP address used for this target group. The possible values are ipv4 and ipv6. ",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LoadBalancerArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"load_balancer_arns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Matcher
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.",
		//	  "properties": {
		//	    "GrpcCode": {
		//	      "description": "You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.",
		//	      "type": "string"
		//	    },
		//	    "HttpCode": {
		//	      "description": "For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values or a range of values. ",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"matcher": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: GrpcCode
				"grpc_code": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: HttpCode
				"http_code": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values or a range of values. ",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the target group.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the target group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Port
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.",
		//	  "type": "integer"
		//	}
		"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Protocol
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The protocol to use for routing traffic to the targets.",
		//	  "type": "string"
		//	}
		"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The protocol to use for routing traffic to the targets.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProtocolVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "[HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.",
		//	  "type": "string"
		//	}
		"protocol_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "[HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The value for the tag. ",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The key name of the tag. ",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TargetGroupArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the Target Group",
		//	  "type": "string"
		//	}
		"target_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the Target Group",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TargetGroupAttributes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "arrayType": "AttributeList",
		//	  "description": "The attributes.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The value of the attribute.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The name of the attribute.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"target_group_attributes": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value of the attribute.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name of the attribute.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The attributes.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TargetGroupFullName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The full name of the target group.",
		//	  "type": "string"
		//	}
		"target_group_full_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The full name of the target group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TargetGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the target group.",
		//	  "type": "string"
		//	}
		"target_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the target group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TargetType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.",
		//	  "type": "string"
		//	}
		"target_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Targets
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The targets.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "AvailabilityZone": {
		//	        "description": "An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.",
		//	        "type": "string"
		//	      },
		//	      "Id": {
		//	        "description": "The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target. ",
		//	        "type": "string"
		//	      },
		//	      "Port": {
		//	        "description": "The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. Not used if the target is a Lambda function.",
		//	        "type": "integer"
		//	      }
		//	    },
		//	    "required": [
		//	      "Id"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"targets": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AvailabilityZone
					"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Id
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Port
					"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. Not used if the target is a Lambda function.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The targets.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UnhealthyThresholdCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of consecutive health check failures required before considering a target unhealthy.",
		//	  "type": "integer"
		//	}
		"unhealthy_threshold_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of consecutive health check failures required before considering a target unhealthy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ElasticLoadBalancingV2::TargetGroup",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ElasticLoadBalancingV2::TargetGroup").WithTerraformTypeName("awscc_elasticloadbalancingv2_target_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"availability_zone":             "AvailabilityZone",
		"grpc_code":                     "GrpcCode",
		"health_check_enabled":          "HealthCheckEnabled",
		"health_check_interval_seconds": "HealthCheckIntervalSeconds",
		"health_check_path":             "HealthCheckPath",
		"health_check_port":             "HealthCheckPort",
		"health_check_protocol":         "HealthCheckProtocol",
		"health_check_timeout_seconds":  "HealthCheckTimeoutSeconds",
		"healthy_threshold_count":       "HealthyThresholdCount",
		"http_code":                     "HttpCode",
		"id":                            "Id",
		"ip_address_type":               "IpAddressType",
		"key":                           "Key",
		"load_balancer_arns":            "LoadBalancerArns",
		"matcher":                       "Matcher",
		"name":                          "Name",
		"port":                          "Port",
		"protocol":                      "Protocol",
		"protocol_version":              "ProtocolVersion",
		"tags":                          "Tags",
		"target_group_arn":              "TargetGroupArn",
		"target_group_attributes":       "TargetGroupAttributes",
		"target_group_full_name":        "TargetGroupFullName",
		"target_group_name":             "TargetGroupName",
		"target_type":                   "TargetType",
		"targets":                       "Targets",
		"unhealthy_threshold_count":     "UnhealthyThresholdCount",
		"value":                         "Value",
		"vpc_id":                        "VpcId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
