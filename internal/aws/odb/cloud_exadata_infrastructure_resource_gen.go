// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package odb

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_odb_cloud_exadata_infrastructure", cloudExadataInfrastructureResource)
}

// cloudExadataInfrastructureResource returns the Terraform awscc_odb_cloud_exadata_infrastructure resource.
// This Terraform resource corresponds to the CloudFormation AWS::ODB::CloudExadataInfrastructure resource.
func cloudExadataInfrastructureResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ActivatedStorageCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of storage servers requested for the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"activated_storage_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of storage servers requested for the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AdditionalStorageCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of storage servers requested for the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"additional_storage_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of storage servers requested for the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the Availability Zone (AZ) where the Exadata infrastructure is located.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the Availability Zone (AZ) where the Exadata infrastructure is located.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZoneId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AZ ID of the AZ where the Exadata infrastructure is located.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"availability_zone_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AZ ID of the AZ where the Exadata infrastructure is located.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AvailableStorageSizeInGBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The amount of available storage, in gigabytes (GB), for the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"available_storage_size_in_g_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The amount of available storage, in gigabytes (GB), for the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CloudExadataInfrastructureArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) for the Exadata infrastructure.",
		//	  "type": "string"
		//	}
		"cloud_exadata_infrastructure_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) for the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CloudExadataInfrastructureId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier for the Exadata infrastructure.",
		//	  "type": "string"
		//	}
		"cloud_exadata_infrastructure_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier for the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ComputeCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of database servers for the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"compute_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of database servers for the Exadata infrastructure.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
				int64planmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ComputeModel
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.",
		//	  "type": "string"
		//	}
		"compute_model": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CpuCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The total number of CPU cores that are allocated to the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"cpu_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The total number of CPU cores that are allocated to the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CustomerContactsToSendToOCI
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A contact to receive notification from Oracle about maintenance updates for a specific Exadata infrastructure.",
		//	    "properties": {
		//	      "Email": {
		//	        "description": "The email address of the contact.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"customer_contacts_to_send_to_oci": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Email
					"email": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The email address of the contact.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
				listplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DataStorageSizeInTBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The size of the Exadata infrastructure's data disk group, in terabytes (TB).",
		//	  "type": "number"
		//	}
		"data_storage_size_in_t_bs": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "The size of the Exadata infrastructure's data disk group, in terabytes (TB).",
			Computed:    true,
			PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
				float64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DatabaseServerType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9_\\/.=-]+$",
		//	  "type": "string"
		//	}
		"database_server_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The database server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\/.=-]+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DbNodeStorageSizeInGBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The size of the Exadata infrastructure's local node storage, in gigabytes (GB).",
		//	  "type": "integer"
		//	}
		"db_node_storage_size_in_g_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The size of the Exadata infrastructure's local node storage, in gigabytes (GB).",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DbServerIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The list of database server identifiers for the Exadata infrastructure.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"db_server_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The list of database server identifiers for the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DbServerVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The software version of the database servers (dom0) in the Exadata infrastructure.",
		//	  "type": "string"
		//	}
		"db_server_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The software version of the database servers (dom0) in the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DisplayName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The user-friendly name for the Exadata infrastructure.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The user-friendly name for the Exadata infrastructure.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaxCpuCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The total number of CPU cores available on the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"max_cpu_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The total number of CPU cores available on the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaxDataStorageInTBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The total amount of data disk group storage, in terabytes (TB), that's available on the Exadata infrastructure.",
		//	  "type": "number"
		//	}
		"max_data_storage_in_t_bs": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "The total amount of data disk group storage, in terabytes (TB), that's available on the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
				float64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaxDbNodeStorageSizeInGBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The total amount of local node storage, in gigabytes (GB), that's available on the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"max_db_node_storage_size_in_g_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The total amount of local node storage, in gigabytes (GB), that's available on the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaxMemoryInGBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The total amount of memory, in gigabytes (GB), that's available on the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"max_memory_in_g_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The total amount of memory, in gigabytes (GB), that's available on the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MemorySizeInGBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The amount of memory, in gigabytes (GB), that's allocated on the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"memory_size_in_g_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The amount of memory, in gigabytes (GB), that's allocated on the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OciResourceAnchorName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the OCI resource anchor for the Exadata infrastructure.",
		//	  "type": "string"
		//	}
		"oci_resource_anchor_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the OCI resource anchor for the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OciUrl
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The HTTPS link to the Exadata infrastructure in OCI.",
		//	  "type": "string"
		//	}
		"oci_url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The HTTPS link to the Exadata infrastructure in OCI.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Ocid
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The OCID of the Exadata infrastructure.",
		//	  "type": "string"
		//	}
		"ocid": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The OCID of the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Shape
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The model name of the Exadata infrastructure.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9_\\/.=-]+$",
		//	  "type": "string"
		//	}
		"shape": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The model name of the Exadata infrastructure.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\/.=-]+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StorageCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of storage servers that are activated for the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"storage_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of storage servers that are activated for the Exadata infrastructure.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
				int64planmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StorageServerType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9_\\/.=-]+$",
		//	  "type": "string"
		//	}
		"storage_server_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The storage server model type of the Exadata infrastructure. For the list of valid model names, use the ListDbSystemShapes operation.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\/.=-]+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StorageServerVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The software version of the storage servers on the Exadata infrastructure.",
		//	  "type": "string"
		//	}
		"storage_server_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The software version of the storage servers on the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Tags to assign to the Exadata Infrastructure.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and \".",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and \".",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 256),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Tags to assign to the Exadata Infrastructure.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TotalStorageSizeInGBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The total amount of storage, in gigabytes (GB), on the the Exadata infrastructure.",
		//	  "type": "integer"
		//	}
		"total_storage_size_in_g_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The total amount of storage, in gigabytes (GB), on the the Exadata infrastructure.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "The AWS::ODB::CloudExadataInfrastructure resource creates an Exadata Infrastructure",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ODB::CloudExadataInfrastructure").WithTerraformTypeName("awscc_odb_cloud_exadata_infrastructure")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"activated_storage_count":          "ActivatedStorageCount",
		"additional_storage_count":         "AdditionalStorageCount",
		"availability_zone":                "AvailabilityZone",
		"availability_zone_id":             "AvailabilityZoneId",
		"available_storage_size_in_g_bs":   "AvailableStorageSizeInGBs",
		"cloud_exadata_infrastructure_arn": "CloudExadataInfrastructureArn",
		"cloud_exadata_infrastructure_id":  "CloudExadataInfrastructureId",
		"compute_count":                    "ComputeCount",
		"compute_model":                    "ComputeModel",
		"cpu_count":                        "CpuCount",
		"customer_contacts_to_send_to_oci": "CustomerContactsToSendToOCI",
		"data_storage_size_in_t_bs":        "DataStorageSizeInTBs",
		"database_server_type":             "DatabaseServerType",
		"db_node_storage_size_in_g_bs":     "DbNodeStorageSizeInGBs",
		"db_server_ids":                    "DbServerIds",
		"db_server_version":                "DbServerVersion",
		"display_name":                     "DisplayName",
		"email":                            "Email",
		"key":                              "Key",
		"max_cpu_count":                    "MaxCpuCount",
		"max_data_storage_in_t_bs":         "MaxDataStorageInTBs",
		"max_db_node_storage_size_in_g_bs": "MaxDbNodeStorageSizeInGBs",
		"max_memory_in_g_bs":               "MaxMemoryInGBs",
		"memory_size_in_g_bs":              "MemorySizeInGBs",
		"oci_resource_anchor_name":         "OciResourceAnchorName",
		"oci_url":                          "OciUrl",
		"ocid":                             "Ocid",
		"shape":                            "Shape",
		"storage_count":                    "StorageCount",
		"storage_server_type":              "StorageServerType",
		"storage_server_version":           "StorageServerVersion",
		"tags":                             "Tags",
		"total_storage_size_in_g_bs":       "TotalStorageSizeInGBs",
		"value":                            "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(2160).WithDeleteTimeoutInMinutes(2160)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
