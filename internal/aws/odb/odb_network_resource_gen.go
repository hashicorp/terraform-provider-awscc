// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package odb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_odb_odb_network", odbNetworkResource)
	registry.AddListResourceFactory("awscc_odb_odb_network", generic.NewListResource(odbNetworkResource))
}

// odbNetworkResource returns the Terraform awscc_odb_odb_network resource.
// This Terraform resource corresponds to the CloudFormation AWS::ODB::OdbNetwork resource.
func odbNetworkResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AvailabilityZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS Availability Zone (AZ) where the ODB network is located.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS Availability Zone (AZ) where the ODB network is located.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZoneId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AZ ID of the AZ where the ODB network is located.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"availability_zone_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AZ ID of the AZ where the ODB network is located.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: BackupSubnetCidr
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The CIDR range of the backup subnet in the ODB network.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"backup_subnet_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The CIDR range of the backup subnet in the ODB network.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ClientSubnetCidr
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The CIDR range of the client subnet in the ODB network.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"client_subnet_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The CIDR range of the client subnet in the ODB network.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CustomDomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The domain name to use for the resources in the ODB network.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"custom_domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The domain name to use for the resources in the ODB network.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DefaultDnsPrefix
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"default_dns_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// DefaultDnsPrefix is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: DeleteAssociatedResources
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies whether to delete associated OCI networking resources along with the ODB network.",
		//	  "type": "boolean"
		//	}
		"delete_associated_resources": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies whether to delete associated OCI networking resources along with the ODB network.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// DeleteAssociatedResources is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: DisplayName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The user-friendly name of the ODB network.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The user-friendly name of the ODB network.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ManagedServices
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The managed services configuration for the ODB network.",
		//	  "properties": {
		//	    "ManagedS3BackupAccess": {
		//	      "additionalProperties": false,
		//	      "description": "The managed Amazon S3 backup access configuration.",
		//	      "properties": {
		//	        "Ipv4Addresses": {
		//	          "description": "The IPv4 addresses for the managed Amazon S3 backup access.",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "Status": {
		//	          "description": "The status of the managed Amazon S3 backup access.",
		//	          "enum": [
		//	            "ENABLED",
		//	            "ENABLING",
		//	            "DISABLED",
		//	            "DISABLING"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ManagedServicesIpv4Cidrs": {
		//	      "description": "The IPv4 CIDR blocks for the managed services.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "ResourceGatewayArn": {
		//	      "description": "The Amazon Resource Name (ARN) of the resource gateway.",
		//	      "type": "string"
		//	    },
		//	    "S3Access": {
		//	      "additionalProperties": false,
		//	      "description": "The Amazon S3 access configuration.",
		//	      "properties": {
		//	        "DomainName": {
		//	          "description": "The domain name for the Amazon S3 access.",
		//	          "type": "string"
		//	        },
		//	        "Ipv4Addresses": {
		//	          "description": "The IPv4 addresses for the Amazon S3 access.",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "S3PolicyDocument": {
		//	          "description": "The endpoint policy for the Amazon S3 access.",
		//	          "type": "string"
		//	        },
		//	        "Status": {
		//	          "description": "The status of the Amazon S3 access.",
		//	          "enum": [
		//	            "ENABLED",
		//	            "ENABLING",
		//	            "DISABLED",
		//	            "DISABLING"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ServiceNetworkArn": {
		//	      "description": "The Amazon Resource Name (ARN) of the service network.",
		//	      "type": "string"
		//	    },
		//	    "ServiceNetworkEndpoint": {
		//	      "additionalProperties": false,
		//	      "description": "The service network endpoint configuration.",
		//	      "properties": {
		//	        "VpcEndpointId": {
		//	          "description": "The identifier of the VPC endpoint.",
		//	          "type": "string"
		//	        },
		//	        "VpcEndpointType": {
		//	          "description": "The type of the VPC endpoint.",
		//	          "enum": [
		//	            "SERVICENETWORK"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ZeroEtlAccess": {
		//	      "additionalProperties": false,
		//	      "description": "The Zero-ETL access configuration.",
		//	      "properties": {
		//	        "Cidr": {
		//	          "description": "The CIDR block for the Zero-ETL access.",
		//	          "type": "string"
		//	        },
		//	        "Status": {
		//	          "description": "The status of the Zero-ETL access.",
		//	          "enum": [
		//	            "ENABLED",
		//	            "ENABLING",
		//	            "DISABLED",
		//	            "DISABLING"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"managed_services": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ManagedS3BackupAccess
				"managed_s3_backup_access": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Ipv4Addresses
						"ipv_4_addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "The IPv4 addresses for the managed Amazon S3 backup access.",
							Computed:    true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								generic.Multiset(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Status
						"status": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The status of the managed Amazon S3 backup access.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The managed Amazon S3 backup access configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ManagedServicesIpv4Cidrs
				"managed_services_ipv_4_cidrs": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The IPv4 CIDR blocks for the managed services.",
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						generic.Multiset(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ResourceGatewayArn
				"resource_gateway_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Amazon Resource Name (ARN) of the resource gateway.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: S3Access
				"s3_access": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DomainName
						"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The domain name for the Amazon S3 access.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Ipv4Addresses
						"ipv_4_addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "The IPv4 addresses for the Amazon S3 access.",
							Computed:    true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								generic.Multiset(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: S3PolicyDocument
						"s3_policy_document": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The endpoint policy for the Amazon S3 access.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Status
						"status": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The status of the Amazon S3 access.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The Amazon S3 access configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ServiceNetworkArn
				"service_network_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Amazon Resource Name (ARN) of the service network.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ServiceNetworkEndpoint
				"service_network_endpoint": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: VpcEndpointId
						"vpc_endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The identifier of the VPC endpoint.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: VpcEndpointType
						"vpc_endpoint_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The type of the VPC endpoint.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The service network endpoint configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ZeroEtlAccess
				"zero_etl_access": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Cidr
						"cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The CIDR block for the Zero-ETL access.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Status
						"status": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The status of the Zero-ETL access.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The Zero-ETL access configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The managed services configuration for the ODB network.",
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OciNetworkAnchorId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier of the OCI network anchor for the ODB network.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"oci_network_anchor_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier of the OCI network anchor for the ODB network.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OciResourceAnchorName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the OCI resource anchor that's associated with the ODB network.",
		//	  "type": "string"
		//	}
		"oci_resource_anchor_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the OCI resource anchor that's associated with the ODB network.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OciVcnUrl
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The URL for the VCN that's associated with the ODB network.",
		//	  "type": "string"
		//	}
		"oci_vcn_url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The URL for the VCN that's associated with the ODB network.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OdbNetworkArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the ODB network.",
		//	  "type": "string"
		//	}
		"odb_network_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the ODB network.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OdbNetworkId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier of the ODB network.",
		//	  "type": "string"
		//	}
		"odb_network_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier of the ODB network.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: S3Access
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the configuration for Amazon S3 access from the ODB network.",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"s3_access": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the configuration for Amazon S3 access from the ODB network.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"ENABLED",
					"DISABLED",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// S3Access is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: S3PolicyDocument
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the endpoint policy for Amazon S3 access from the ODB network.",
		//	  "type": "string"
		//	}
		"s3_policy_document": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the endpoint policy for Amazon S3 access from the ODB network.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// S3PolicyDocument is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Tags to assign to the Odb Network.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and \".",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and \".",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 256),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Tags to assign to the Odb Network.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ZeroEtlAccess
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the configuration for Zero-ETL access from the ODB network.",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"zero_etl_access": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the configuration for Zero-ETL access from the ODB network.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"ENABLED",
					"DISABLED",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// ZeroEtlAccess is a write-only property.
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "The AWS::ODB::OdbNetwork resource creates an ODB Network",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ODB::OdbNetwork").WithTerraformTypeName("awscc_odb_odb_network")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "odb_network_arn",
			Description:       "The Amazon Resource Name (ARN) of the ODB network",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"availability_zone":            "AvailabilityZone",
		"availability_zone_id":         "AvailabilityZoneId",
		"backup_subnet_cidr":           "BackupSubnetCidr",
		"cidr":                         "Cidr",
		"client_subnet_cidr":           "ClientSubnetCidr",
		"custom_domain_name":           "CustomDomainName",
		"default_dns_prefix":           "DefaultDnsPrefix",
		"delete_associated_resources":  "DeleteAssociatedResources",
		"display_name":                 "DisplayName",
		"domain_name":                  "DomainName",
		"ipv_4_addresses":              "Ipv4Addresses",
		"key":                          "Key",
		"managed_s3_backup_access":     "ManagedS3BackupAccess",
		"managed_services":             "ManagedServices",
		"managed_services_ipv_4_cidrs": "ManagedServicesIpv4Cidrs",
		"oci_network_anchor_id":        "OciNetworkAnchorId",
		"oci_resource_anchor_name":     "OciResourceAnchorName",
		"oci_vcn_url":                  "OciVcnUrl",
		"odb_network_arn":              "OdbNetworkArn",
		"odb_network_id":               "OdbNetworkId",
		"resource_gateway_arn":         "ResourceGatewayArn",
		"s3_access":                    "S3Access",
		"s3_policy_document":           "S3PolicyDocument",
		"service_network_arn":          "ServiceNetworkArn",
		"service_network_endpoint":     "ServiceNetworkEndpoint",
		"status":                       "Status",
		"tags":                         "Tags",
		"value":                        "Value",
		"vpc_endpoint_id":              "VpcEndpointId",
		"vpc_endpoint_type":            "VpcEndpointType",
		"zero_etl_access":              "ZeroEtlAccess",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/DeleteAssociatedResources",
		"/properties/DefaultDnsPrefix",
		"/properties/S3Access",
		"/properties/S3PolicyDocument",
		"/properties/ZeroEtlAccess",
	})
	opts = opts.WithCreateTimeoutInMinutes(2160).WithDeleteTimeoutInMinutes(2160)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
