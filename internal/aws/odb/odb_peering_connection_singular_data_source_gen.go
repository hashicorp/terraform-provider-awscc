// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package odb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_odb_odb_peering_connection", odbPeeringConnectionDataSource)
}

// odbPeeringConnectionDataSource returns the Terraform awscc_odb_odb_peering_connection data source.
// This Terraform data source corresponds to the CloudFormation AWS::ODB::OdbPeeringConnection resource.
func odbPeeringConnectionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DisplayName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the ODB peering connection.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the ODB peering connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OdbNetworkArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the ODB network.",
		//	  "type": "string"
		//	}
		"odb_network_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the ODB network.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OdbNetworkId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier of the ODB network.",
		//	  "maxLength": 2048,
		//	  "minLength": 6,
		//	  "pattern": "^(arn:(?:aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):[a-z0-9-]+:[a-z0-9-]*:[0-9]+:[a-z0-9-]+/[a-zA-Z0-9_~.-]{6,64}|[a-zA-Z0-9_~.-]{6,64})$",
		//	  "type": "string"
		//	}
		"odb_network_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier of the ODB network.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OdbPeeringConnectionArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the ODB peering connection.",
		//	  "type": "string"
		//	}
		"odb_peering_connection_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the ODB peering connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OdbPeeringConnectionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier of the ODB peering connection.",
		//	  "type": "string"
		//	}
		"odb_peering_connection_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier of the ODB peering connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PeerNetworkArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the peer network.",
		//	  "type": "string"
		//	}
		"peer_network_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the peer network.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PeerNetworkId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier of the peer network.",
		//	  "maxLength": 2048,
		//	  "minLength": 6,
		//	  "pattern": "^(arn:(?:aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):[a-z0-9-]+:[a-z0-9-]*:[0-9]+:[a-z0-9-]+/[a-zA-Z0-9_~.-]{6,64}|[a-zA-Z0-9_~.-]{6,64})$",
		//	  "type": "string"
		//	}
		"peer_network_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier of the peer network.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Tags to assign to the Odb peering connection.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and \".",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and \".",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Tags to assign to the Odb peering connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ODB::OdbPeeringConnection",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ODB::OdbPeeringConnection").WithTerraformTypeName("awscc_odb_odb_peering_connection")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"display_name":               "DisplayName",
		"key":                        "Key",
		"odb_network_arn":            "OdbNetworkArn",
		"odb_network_id":             "OdbNetworkId",
		"odb_peering_connection_arn": "OdbPeeringConnectionArn",
		"odb_peering_connection_id":  "OdbPeeringConnectionId",
		"peer_network_arn":           "PeerNetworkArn",
		"peer_network_id":            "PeerNetworkId",
		"tags":                       "Tags",
		"value":                      "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
