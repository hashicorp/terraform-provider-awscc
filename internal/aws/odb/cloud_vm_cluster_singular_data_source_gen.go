// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package odb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_odb_cloud_vm_cluster", cloudVmClusterDataSource)
}

// cloudVmClusterDataSource returns the Terraform awscc_odb_cloud_vm_cluster data source.
// This Terraform data source corresponds to the CloudFormation AWS::ODB::CloudVmCluster resource.
func cloudVmClusterDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CloudExadataInfrastructureId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier of the Exadata infrastructure that this VM cluster belongs to.",
		//	  "type": "string"
		//	}
		"cloud_exadata_infrastructure_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier of the Exadata infrastructure that this VM cluster belongs to.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CloudVmClusterArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the VM cluster.",
		//	  "type": "string"
		//	}
		"cloud_vm_cluster_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CloudVmClusterId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier of the VM cluster.",
		//	  "type": "string"
		//	}
		"cloud_vm_cluster_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier of the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ClusterName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the Grid Infrastructure (GI) cluster.",
		//	  "maxLength": 11,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z][a-zA-Z0-9-]*$",
		//	  "type": "string"
		//	}
		"cluster_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the Grid Infrastructure (GI) cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ComputeModel
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.",
		//	  "type": "string"
		//	}
		"compute_model": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The OCI model compute model used when you create or clone an instance: ECPU or OCPU. An ECPU is an abstracted measure of compute resources. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers. An OCPU is a legacy physical measure of compute resources. OCPUs are based on the physical core of a processor with hyper-threading enabled.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CpuCoreCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of CPU cores enabled on the VM cluster.",
		//	  "maximum": 368,
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"cpu_core_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of CPU cores enabled on the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DataCollectionOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The set of diagnostic collection options enabled for the VM cluster.",
		//	  "properties": {
		//	    "IsDiagnosticsEventsEnabled": {
		//	      "description": "Indicates whether diagnostic collection is enabled for the VM cluster.",
		//	      "type": "boolean"
		//	    },
		//	    "IsHealthMonitoringEnabled": {
		//	      "description": "Indicates whether health monitoring is enabled for the VM cluster.",
		//	      "type": "boolean"
		//	    },
		//	    "IsIncidentLogsEnabled": {
		//	      "description": "Indicates whether incident logs are enabled for the cloud VM cluster.",
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"data_collection_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: IsDiagnosticsEventsEnabled
				"is_diagnostics_events_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether diagnostic collection is enabled for the VM cluster.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IsHealthMonitoringEnabled
				"is_health_monitoring_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether health monitoring is enabled for the VM cluster.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IsIncidentLogsEnabled
				"is_incident_logs_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether incident logs are enabled for the cloud VM cluster.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The set of diagnostic collection options enabled for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DataStorageSizeInTBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.",
		//	  "type": "number"
		//	}
		"data_storage_size_in_t_bs": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "The size of the data disk group, in terabytes (TB), that's allocated for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DbNodeStorageSizeInGBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.",
		//	  "type": "integer"
		//	}
		"db_node_storage_size_in_g_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The amount of local node storage, in gigabytes (GB), that's allocated for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DbServers
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The list of database servers for the VM cluster.",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"db_servers": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The list of database servers for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DiskRedundancy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.",
		//	  "type": "string"
		//	}
		"disk_redundancy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of redundancy configured for the VM cluster. NORMAL is 2-way redundancy. HIGH is 3-way redundancy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DisplayName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The user-friendly name for the VM cluster.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The user-friendly name for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Domain
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The domain of the VM cluster.",
		//	  "type": "string"
		//	}
		"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The domain of the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GiVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"gi_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The software version of the Oracle Grid Infrastructure (GI) for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Hostname
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The host name for the VM cluster.",
		//	  "maxLength": 12,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]$",
		//	  "type": "string"
		//	}
		"hostname": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The host name for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IsLocalBackupEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether database backups to local Exadata storage is enabled for the VM cluster.",
		//	  "type": "boolean"
		//	}
		"is_local_backup_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether database backups to local Exadata storage is enabled for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IsSparseDiskgroupEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether the VM cluster is configured with a sparse disk group.",
		//	  "type": "boolean"
		//	}
		"is_sparse_diskgroup_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether the VM cluster is configured with a sparse disk group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LicenseModel
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Oracle license model applied to the VM cluster.",
		//	  "enum": [
		//	    "BRING_YOUR_OWN_LICENSE",
		//	    "LICENSE_INCLUDED"
		//	  ],
		//	  "type": "string"
		//	}
		"license_model": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Oracle license model applied to the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ListenerPort
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The port number configured for the listener on the VM cluster.",
		//	  "type": "integer"
		//	}
		"listener_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The port number configured for the listener on the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MemorySizeInGBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.",
		//	  "type": "integer"
		//	}
		"memory_size_in_g_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The amount of memory, in gigabytes (GB), that's allocated for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NodeCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of nodes in the VM cluster.",
		//	  "type": "integer"
		//	}
		"node_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of nodes in the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OciResourceAnchorName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the OCI resource anchor for the VM cluster.",
		//	  "type": "string"
		//	}
		"oci_resource_anchor_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the OCI resource anchor for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OciUrl
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The HTTPS link to the VM cluster in OCI.",
		//	  "type": "string"
		//	}
		"oci_url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The HTTPS link to the VM cluster in OCI.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ocid
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The OCID of the VM cluster.",
		//	  "type": "string"
		//	}
		"ocid": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The OCID of the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OdbNetworkId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier of the ODB network for the VM cluster.",
		//	  "type": "string"
		//	}
		"odb_network_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier of the ODB network for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ScanDnsName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.",
		//	  "type": "string"
		//	}
		"scan_dns_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The FQDN of the DNS record for the Single Client Access Name (SCAN) IP addresses that are associated with the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ScanIpIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The OCID of the SCAN IP addresses that are associated with the VM cluster.",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"scan_ip_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The OCID of the SCAN IP addresses that are associated with the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ScanListenerPortTcp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Property description not available.",
		//	  "maximum": 8999,
		//	  "minimum": 1024,
		//	  "type": "integer"
		//	}
		"scan_listener_port_tcp": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Property description not available.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Shape
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The hardware model name of the Exadata infrastructure that's running the VM cluster.",
		//	  "type": "string"
		//	}
		"shape": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The hardware model name of the Exadata infrastructure that's running the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SshPublicKeys
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The public key portion of one or more key pairs used for SSH access to the VM cluster.",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"ssh_public_keys": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The public key portion of one or more key pairs used for SSH access to the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StorageSizeInGBs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The amount of local node storage, in gigabytes (GB), that's allocated to the VM cluster.",
		//	  "type": "integer"
		//	}
		"storage_size_in_g_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The amount of local node storage, in gigabytes (GB), that's allocated to the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SystemVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The operating system version of the image chosen for the VM cluster.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"system_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The operating system version of the image chosen for the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Tags to assign to the Vm Cluster.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and \".",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that's 1 to 128 Unicode characters in length and can't be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, @, -, and \".",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that's 1 to 256 characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Tags to assign to the Vm Cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TimeZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The time zone of the VM cluster.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"time_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The time zone of the VM cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VipIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle's Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"vip_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The virtual IP (VIP) addresses that are associated with the VM cluster. Oracle's Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the VM cluster to enable failover. If one node fails, the VIP is reassigned to another active node in the cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ODB::CloudVmCluster",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ODB::CloudVmCluster").WithTerraformTypeName("awscc_odb_cloud_vm_cluster")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"cloud_exadata_infrastructure_id": "CloudExadataInfrastructureId",
		"cloud_vm_cluster_arn":            "CloudVmClusterArn",
		"cloud_vm_cluster_id":             "CloudVmClusterId",
		"cluster_name":                    "ClusterName",
		"compute_model":                   "ComputeModel",
		"cpu_core_count":                  "CpuCoreCount",
		"data_collection_options":         "DataCollectionOptions",
		"data_storage_size_in_t_bs":       "DataStorageSizeInTBs",
		"db_node_storage_size_in_g_bs":    "DbNodeStorageSizeInGBs",
		"db_servers":                      "DbServers",
		"disk_redundancy":                 "DiskRedundancy",
		"display_name":                    "DisplayName",
		"domain":                          "Domain",
		"gi_version":                      "GiVersion",
		"hostname":                        "Hostname",
		"is_diagnostics_events_enabled":   "IsDiagnosticsEventsEnabled",
		"is_health_monitoring_enabled":    "IsHealthMonitoringEnabled",
		"is_incident_logs_enabled":        "IsIncidentLogsEnabled",
		"is_local_backup_enabled":         "IsLocalBackupEnabled",
		"is_sparse_diskgroup_enabled":     "IsSparseDiskgroupEnabled",
		"key":                             "Key",
		"license_model":                   "LicenseModel",
		"listener_port":                   "ListenerPort",
		"memory_size_in_g_bs":             "MemorySizeInGBs",
		"node_count":                      "NodeCount",
		"oci_resource_anchor_name":        "OciResourceAnchorName",
		"oci_url":                         "OciUrl",
		"ocid":                            "Ocid",
		"odb_network_id":                  "OdbNetworkId",
		"scan_dns_name":                   "ScanDnsName",
		"scan_ip_ids":                     "ScanIpIds",
		"scan_listener_port_tcp":          "ScanListenerPortTcp",
		"shape":                           "Shape",
		"ssh_public_keys":                 "SshPublicKeys",
		"storage_size_in_g_bs":            "StorageSizeInGBs",
		"system_version":                  "SystemVersion",
		"tags":                            "Tags",
		"time_zone":                       "TimeZone",
		"value":                           "Value",
		"vip_ids":                         "VipIds",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
