// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package notificationscontacts

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_notificationscontacts_email_contact", emailContactDataSource)
}

// emailContactDataSource returns the Terraform awscc_notificationscontacts_email_contact data source.
// This Terraform data source corresponds to the CloudFormation AWS::NotificationsContacts::EmailContact resource.
func emailContactDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^arn:aws:notifications-contacts::[0-9]{12}:emailcontact/[a-z0-9]{27}$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: EmailAddress
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 254,
		//	  "minLength": 6,
		//	  "pattern": "^(.+)@(.+)$",
		//	  "type": "string"
		//	}
		"email_address": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: EmailContact
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Address": {
		//	      "maxLength": 254,
		//	      "minLength": 6,
		//	      "pattern": "^(.+)@(.+)$",
		//	      "type": "string"
		//	    },
		//	    "Arn": {
		//	      "pattern": "^arn:aws:notifications-contacts::[0-9]{12}:emailcontact/[a-z0-9]{27}$",
		//	      "type": "string"
		//	    },
		//	    "CreationTime": {
		//	      "format": "date-time",
		//	      "type": "string"
		//	    },
		//	    "Name": {
		//	      "maxLength": 64,
		//	      "minLength": 1,
		//	      "pattern": "[\\w-.~]+",
		//	      "type": "string"
		//	    },
		//	    "Status": {
		//	      "enum": [
		//	        "inactive",
		//	        "active"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "UpdateTime": {
		//	      "format": "date-time",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Address",
		//	    "Arn",
		//	    "CreationTime",
		//	    "Name",
		//	    "Status",
		//	    "UpdateTime"
		//	  ],
		//	  "type": "object"
		//	}
		"email_contact": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Address
				"address": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Arn
				"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CreationTime
				"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
					CustomType: timetypes.RFC3339Type{},
					Computed:   true,
				}, /*END ATTRIBUTE*/
				// Property: Name
				"name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Status
				"status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: UpdateTime
				"update_time": schema.StringAttribute{ /*START ATTRIBUTE*/
					CustomType: timetypes.RFC3339Type{},
					Computed:   true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "[\\w-.~]+",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of tags that are attached to the role.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of tags that are attached to the role.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::NotificationsContacts::EmailContact",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::NotificationsContacts::EmailContact").WithTerraformTypeName("awscc_notificationscontacts_email_contact")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"address":       "Address",
		"arn":           "Arn",
		"creation_time": "CreationTime",
		"email_address": "EmailAddress",
		"email_contact": "EmailContact",
		"key":           "Key",
		"name":          "Name",
		"status":        "Status",
		"tags":          "Tags",
		"update_time":   "UpdateTime",
		"value":         "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
