// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package route53resolver

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_route53resolver_resolver_query_logging_config_association", resolverQueryLoggingConfigAssociationDataSourceType)
}

// resolverQueryLoggingConfigAssociationDataSourceType returns the Terraform awscc_route53resolver_resolver_query_logging_config_association data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation resource type.
func resolverQueryLoggingConfigAssociationDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"creation_time": {
			// Property: CreationTime
			// CloudFormation resource type schema:
			// {
			//   "description": "Rfc3339TimeString",
			//   "maxLength": 40,
			//   "minLength": 20,
			//   "type": "string"
			// }
			Description: "Rfc3339TimeString",
			Type:        types.StringType,
			Computed:    true,
		},
		"error": {
			// Property: Error
			// CloudFormation resource type schema:
			// {
			//   "description": "ResolverQueryLogConfigAssociationError",
			//   "enum": [
			//     "NONE",
			//     "DESTINATION_NOT_FOUND",
			//     "ACCESS_DENIED"
			//   ],
			//   "type": "string"
			// }
			Description: "ResolverQueryLogConfigAssociationError",
			Type:        types.StringType,
			Computed:    true,
		},
		"error_message": {
			// Property: ErrorMessage
			// CloudFormation resource type schema:
			// {
			//   "description": "ResolverQueryLogConfigAssociationErrorMessage",
			//   "type": "string"
			// }
			Description: "ResolverQueryLogConfigAssociationErrorMessage",
			Type:        types.StringType,
			Computed:    true,
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			// {
			//   "description": "Id",
			//   "maxLength": 64,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Id",
			Type:        types.StringType,
			Computed:    true,
		},
		"resolver_query_log_config_id": {
			// Property: ResolverQueryLogConfigId
			// CloudFormation resource type schema:
			// {
			//   "description": "ResolverQueryLogConfigId",
			//   "maxLength": 64,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "ResolverQueryLogConfigId",
			Type:        types.StringType,
			Computed:    true,
		},
		"resource_id": {
			// Property: ResourceId
			// CloudFormation resource type schema:
			// {
			//   "description": "ResourceId",
			//   "maxLength": 64,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "ResourceId",
			Type:        types.StringType,
			Computed:    true,
		},
		"status": {
			// Property: Status
			// CloudFormation resource type schema:
			// {
			//   "description": "ResolverQueryLogConfigAssociationStatus",
			//   "enum": [
			//     "CREATING",
			//     "ACTIVE",
			//     "ACTION_NEEDED",
			//     "DELETING",
			//     "FAILED",
			//     "OVERRIDDEN"
			//   ],
			//   "type": "string"
			// }
			Description: "ResolverQueryLogConfigAssociationStatus",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation").WithTerraformTypeName("awscc_route53resolver_resolver_query_logging_config_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"creation_time":                "CreationTime",
		"error":                        "Error",
		"error_message":                "ErrorMessage",
		"id":                           "Id",
		"resolver_query_log_config_id": "ResolverQueryLogConfigId",
		"resource_id":                  "ResourceId",
		"status":                       "Status",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_route53resolver_resolver_query_logging_config_association", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
