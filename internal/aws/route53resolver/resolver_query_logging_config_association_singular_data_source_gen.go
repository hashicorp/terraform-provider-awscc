// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package route53resolver

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_route53resolver_resolver_query_logging_config_association", resolverQueryLoggingConfigAssociationDataSource)
}

// resolverQueryLoggingConfigAssociationDataSource returns the Terraform awscc_route53resolver_resolver_query_logging_config_association data source.
// This Terraform data source corresponds to the CloudFormation AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation resource.
func resolverQueryLoggingConfigAssociationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Rfc3339TimeString",
		//	  "maxLength": 40,
		//	  "minLength": 20,
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Rfc3339TimeString",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Error
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ResolverQueryLogConfigAssociationError",
		//	  "enum": [
		//	    "NONE",
		//	    "DESTINATION_NOT_FOUND",
		//	    "ACCESS_DENIED"
		//	  ],
		//	  "type": "string"
		//	}
		"error": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ResolverQueryLogConfigAssociationError",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ErrorMessage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ResolverQueryLogConfigAssociationErrorMessage",
		//	  "type": "string"
		//	}
		"error_message": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ResolverQueryLogConfigAssociationErrorMessage",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Id",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"resolver_query_logging_config_association_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Id",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResolverQueryLogConfigId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ResolverQueryLogConfigId",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"resolver_query_log_config_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ResolverQueryLogConfigId",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ResourceId",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"resource_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ResourceId",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ResolverQueryLogConfigAssociationStatus",
		//	  "enum": [
		//	    "CREATING",
		//	    "ACTIVE",
		//	    "ACTION_NEEDED",
		//	    "DELETING",
		//	    "FAILED",
		//	    "OVERRIDDEN"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ResolverQueryLogConfigAssociationStatus",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation").WithTerraformTypeName("awscc_route53resolver_resolver_query_logging_config_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"creation_time":                "CreationTime",
		"error":                        "Error",
		"error_message":                "ErrorMessage",
		"resolver_query_log_config_id": "ResolverQueryLogConfigId",
		"resolver_query_logging_config_association_id": "Id",
		"resource_id": "ResourceId",
		"status":      "Status",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
