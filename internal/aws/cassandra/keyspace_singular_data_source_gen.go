// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cassandra

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_cassandra_keyspace", keyspaceDataSource)
}

// keyspaceDataSource returns the Terraform awscc_cassandra_keyspace data source.
// This Terraform data source corresponds to the CloudFormation AWS::Cassandra::Keyspace resource.
func keyspaceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ClientSideTimestampsEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether client-side timestamps are enabled (true) or disabled (false) for all tables in the keyspace. To add a Region to a single-Region keyspace with at least one table, the value must be set to true. After you enabled client-side timestamps for a table, you can?t disable it again.",
		//	  "type": "boolean"
		//	}
		"client_side_timestamps_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether client-side timestamps are enabled (true) or disabled (false) for all tables in the keyspace. To add a Region to a single-Region keyspace with at least one table, the value must be set to true. After you enabled client-side timestamps for a table, you can?t disable it again.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KeyspaceName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name for Cassandra keyspace",
		//	  "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_]{1,47}$",
		//	  "type": "string"
		//	}
		"keyspace_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name for Cassandra keyspace",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ReplicationSpecification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "default": {
		//	    "properties": {
		//	      "ReplicationStrategy": {
		//	        "const": "SINGLE_REGION",
		//	        "type": "string"
		//	      }
		//	    }
		//	  },
		//	  "properties": {
		//	    "RegionList": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "enum": [
		//	          "ap-northeast-1",
		//	          "ap-northeast-2",
		//	          "ap-south-1",
		//	          "ap-southeast-1",
		//	          "ap-southeast-2",
		//	          "ca-central-1",
		//	          "eu-central-1",
		//	          "eu-north-1",
		//	          "eu-west-1",
		//	          "eu-west-2",
		//	          "eu-west-3",
		//	          "sa-east-1",
		//	          "us-east-1",
		//	          "us-east-2",
		//	          "us-west-1",
		//	          "us-west-2"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "maxItems": 6,
		//	      "minItems": 2,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "ReplicationStrategy": {
		//	      "enum": [
		//	        "SINGLE_REGION",
		//	        "MULTI_REGION"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"replication_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: RegionList
				"region_list": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ReplicationStrategy
				"replication_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Cassandra::Keyspace",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Cassandra::Keyspace").WithTerraformTypeName("awscc_cassandra_keyspace")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"client_side_timestamps_enabled": "ClientSideTimestampsEnabled",
		"key":                            "Key",
		"keyspace_name":                  "KeyspaceName",
		"region_list":                    "RegionList",
		"replication_specification":      "ReplicationSpecification",
		"replication_strategy":           "ReplicationStrategy",
		"tags":                           "Tags",
		"value":                          "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
