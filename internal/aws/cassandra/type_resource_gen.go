// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package cassandra

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_cassandra_type", typeResource)
}

// typeResource returns the Terraform awscc_cassandra_type resource.
// This Terraform resource corresponds to the CloudFormation AWS::Cassandra::Type resource.
func typeResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DirectParentTypes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of parent User-Defined Types that directly reference the User-Defined Type in their fields.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"direct_parent_types": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "List of parent User-Defined Types that directly reference the User-Defined Type in their fields.",
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DirectReferringTables
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of Tables that directly reference the User-Defined Type in their columns.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"direct_referring_tables": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "List of Tables that directly reference the User-Defined Type in their columns.",
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Fields
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Field definitions of the User-Defined Type",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "FieldName": {
		//	        "type": "string"
		//	      },
		//	      "FieldType": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "FieldName",
		//	      "FieldType"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"fields": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: FieldName
					"field_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
					// Property: FieldType
					"field_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Field definitions of the User-Defined Type",
			Required:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: KeyspaceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN of the Keyspace which contains the User-Defined Type.",
		//	  "type": "string"
		//	}
		"keyspace_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN of the Keyspace which contains the User-Defined Type.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: KeyspaceName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of the Keyspace which contains the User-Defined Type.",
		//	  "type": "string"
		//	}
		"keyspace_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of the Keyspace which contains the User-Defined Type.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LastModifiedTimestamp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Timestamp of the last time the User-Defined Type's meta data was modified.",
		//	  "type": "number"
		//	}
		"last_modified_timestamp": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "Timestamp of the last time the User-Defined Type's meta data was modified.",
			Computed:    true,
			PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
				float64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaxNestingDepth
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Maximum nesting depth of the User-Defined Type across the field types.",
		//	  "type": "integer"
		//	}
		"max_nesting_depth": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Maximum nesting depth of the User-Defined Type across the field types.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TypeName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of the User-Defined Type.",
		//	  "type": "string"
		//	}
		"type_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of the User-Defined Type.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource schema for AWS::Cassandra::Type",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Cassandra::Type").WithTerraformTypeName("awscc_cassandra_type")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"direct_parent_types":     "DirectParentTypes",
		"direct_referring_tables": "DirectReferringTables",
		"field_name":              "FieldName",
		"field_type":              "FieldType",
		"fields":                  "Fields",
		"keyspace_arn":            "KeyspaceArn",
		"keyspace_name":           "KeyspaceName",
		"last_modified_timestamp": "LastModifiedTimestamp",
		"max_nesting_depth":       "MaxNestingDepth",
		"type_name":               "TypeName",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
