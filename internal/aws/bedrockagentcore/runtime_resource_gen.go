// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package bedrockagentcore

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_bedrockagentcore_runtime", runtimeResource)
	registry.AddListResourceFactory("awscc_bedrockagentcore_runtime", generic.NewListResource(runtimeResource))
}

// runtimeResource returns the Terraform awscc_bedrockagentcore_runtime resource.
// This Terraform resource corresponds to the CloudFormation AWS::BedrockAgentCore::Runtime resource.
func runtimeResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AgentRuntimeArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name(ARN) that uniquely identifies the Agent",
		//	  "maxLength": 2048,
		//	  "pattern": "arn:(-[^:]+)?:bedrock-agentcore:[a-z0-9-]+:[0-9]{12}:agent/[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}:([0-9]{0,4}[1-9][0-9]{0,4})",
		//	  "type": "string"
		//	}
		"agent_runtime_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name(ARN) that uniquely identifies the Agent",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AgentRuntimeArtifact
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The artifact of the agent",
		//	  "properties": {
		//	    "ContainerConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "ContainerUri": {
		//	          "description": "The ECR URI of the container",
		//	          "maxLength": 1024,
		//	          "minLength": 1,
		//	          "pattern": "^\\d{12}\\.dkr\\.ecr\\.([a-z0-9-]+)\\.amazonaws\\.com/((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)([:@]\\S+)$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "ContainerUri"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"agent_runtime_artifact": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ContainerConfiguration
				"container_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ContainerUri
						"container_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ECR URI of the container",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(1, 1024),
								stringvalidator.RegexMatches(regexp.MustCompile("^\\d{12}\\.dkr\\.ecr\\.([a-z0-9-]+)\\.amazonaws\\.com/((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)([:@]\\S+)$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The artifact of the agent",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: AgentRuntimeId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Identifier for a resource",
		//	  "pattern": "[a-zA-Z][a-zA-Z0-9_]{0,99}-[a-zA-Z0-9]{10}",
		//	  "type": "string"
		//	}
		"agent_runtime_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Identifier for a resource",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AgentRuntimeName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name for a resource",
		//	  "pattern": "[a-zA-Z][a-zA-Z0-9_]{0,47}",
		//	  "type": "string"
		//	}
		"agent_runtime_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name for a resource",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("[a-zA-Z][a-zA-Z0-9_]{0,47}"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AgentRuntimeVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Version of the Agent",
		//	  "maxLength": 5,
		//	  "minLength": 1,
		//	  "pattern": "([1-9][0-9]{0,4})",
		//	  "type": "string"
		//	}
		"agent_runtime_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Version of the Agent",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AuthorizerConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Authorizer configuration for the agent runtime",
		//	  "properties": {
		//	    "CustomJWTAuthorizer": {
		//	      "additionalProperties": false,
		//	      "description": "Configuration for custom JWT authorizer",
		//	      "properties": {
		//	        "AllowedAudience": {
		//	          "description": "List of allowed audiences",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "description": "Allowed audience value",
		//	            "type": "string"
		//	          },
		//	          "minItems": 1,
		//	          "type": "array"
		//	        },
		//	        "AllowedClients": {
		//	          "description": "List of allowed clients",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "description": "Allowed client value",
		//	            "type": "string"
		//	          },
		//	          "minItems": 1,
		//	          "type": "array"
		//	        },
		//	        "DiscoveryUrl": {
		//	          "description": "OpenID Connect discovery URL",
		//	          "pattern": "^.+/\\.well-known/openid-configuration$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "DiscoveryUrl"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"authorizer_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CustomJWTAuthorizer
				"custom_jwt_authorizer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AllowedAudience
						"allowed_audience": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "List of allowed audiences",
							Optional:    true,
							Computed:    true,
							Validators: []validator.List{ /*START VALIDATORS*/
								listvalidator.SizeAtLeast(1),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								generic.Multiset(),
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AllowedClients
						"allowed_clients": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "List of allowed clients",
							Optional:    true,
							Computed:    true,
							Validators: []validator.List{ /*START VALIDATORS*/
								listvalidator.SizeAtLeast(1),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								generic.Multiset(),
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DiscoveryUrl
						"discovery_url": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "OpenID Connect discovery URL",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^.+/\\.well-known/openid-configuration$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Configuration for custom JWT authorizer",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Authorizer configuration for the agent runtime",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Timestamp when the Agent was created",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Timestamp when the Agent was created",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of the resource",
		//	  "maxLength": 1200,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of the resource",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 1200),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EnvironmentVariables
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Environment variables for the agent runtime",
		//	  "patternProperties": {
		//	    "": {
		//	      "description": "Environment variable value",
		//	      "maxLength": 2048,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"environment_variables": // Pattern: ""
		schema.MapAttribute{     /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "Environment variables for the agent runtime",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Map{ /*START PLAN MODIFIERS*/
				mapplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LastUpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "When resource was last updated",
		//	  "type": "string"
		//	}
		"last_updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "When resource was last updated",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NetworkConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Network access configuration for the Agent",
		//	  "properties": {
		//	    "NetworkMode": {
		//	      "description": "Network mode configuration type",
		//	      "enum": [
		//	        "PUBLIC"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "NetworkMode"
		//	  ],
		//	  "type": "object"
		//	}
		"network_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: NetworkMode
				"network_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Network mode configuration type",
					Required:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"PUBLIC",
						),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Network access configuration for the Agent",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProtocolConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Protocol configuration for the agent runtime",
		//	  "enum": [
		//	    "MCP",
		//	    "HTTP"
		//	  ],
		//	  "type": "string"
		//	}
		"protocol_configuration": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Protocol configuration for the agent runtime",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"MCP",
					"HTTP",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Amazon Resource Name (ARN) of an IAM role",
		//	  "pattern": "arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+",
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Amazon Resource Name (ARN) of an IAM role",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Current status of the agent",
		//	  "enum": [
		//	    "CREATING",
		//	    "CREATE_FAILED",
		//	    "UPDATING",
		//	    "UPDATE_FAILED",
		//	    "READY",
		//	    "DELETING"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Current status of the agent",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A map of tag keys and values",
		//	  "patternProperties": {
		//	    "": {
		//	      "description": "Value of a tag",
		//	      "maxLength": 256,
		//	      "minLength": 0,
		//	      "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A map of tag keys and values",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Map{ /*START PLAN MODIFIERS*/
				mapplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: WorkloadIdentityDetails
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Workload identity details for the agent",
		//	  "properties": {
		//	    "WorkloadIdentityArn": {
		//	      "description": "ARN of the workload identity",
		//	      "maxLength": 1024,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "WorkloadIdentityArn"
		//	  ],
		//	  "type": "object"
		//	}
		"workload_identity_details": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: WorkloadIdentityArn
				"workload_identity_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "ARN of the workload identity",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Workload identity details for the agent",
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::BedrockAgentCore::Runtime",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::BedrockAgentCore::Runtime").WithTerraformTypeName("awscc_bedrockagentcore_runtime")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "agent_runtime_id",
			Description:       "Identifier for a resource",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"agent_runtime_arn":         "AgentRuntimeArn",
		"agent_runtime_artifact":    "AgentRuntimeArtifact",
		"agent_runtime_id":          "AgentRuntimeId",
		"agent_runtime_name":        "AgentRuntimeName",
		"agent_runtime_version":     "AgentRuntimeVersion",
		"allowed_audience":          "AllowedAudience",
		"allowed_clients":           "AllowedClients",
		"authorizer_configuration":  "AuthorizerConfiguration",
		"container_configuration":   "ContainerConfiguration",
		"container_uri":             "ContainerUri",
		"created_at":                "CreatedAt",
		"custom_jwt_authorizer":     "CustomJWTAuthorizer",
		"description":               "Description",
		"discovery_url":             "DiscoveryUrl",
		"environment_variables":     "EnvironmentVariables",
		"last_updated_at":           "LastUpdatedAt",
		"network_configuration":     "NetworkConfiguration",
		"network_mode":              "NetworkMode",
		"protocol_configuration":    "ProtocolConfiguration",
		"role_arn":                  "RoleArn",
		"status":                    "Status",
		"tags":                      "Tags",
		"workload_identity_arn":     "WorkloadIdentityArn",
		"workload_identity_details": "WorkloadIdentityDetails",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
