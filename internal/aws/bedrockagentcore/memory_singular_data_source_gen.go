// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package bedrockagentcore

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_bedrockagentcore_memory", memoryDataSource)
}

// memoryDataSource returns the Terraform awscc_bedrockagentcore_memory data source.
// This Terraform data source corresponds to the CloudFormation AWS::BedrockAgentCore::Memory resource.
func memoryDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType: timetypes.RFC3339Type{},
			Computed:   true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of the Memory resource",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of the Memory resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EncryptionKeyArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN format",
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"encryption_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN format",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EventExpiryDuration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Duration in days until memory events expire",
		//	  "maximum": 365,
		//	  "minimum": 7,
		//	  "type": "integer"
		//	}
		"event_expiry_duration": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Duration in days until memory events expire",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FailureReason
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"failure_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: MemoryArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN of the Memory resource",
		//	  "pattern": "^arn:aws:bedrock-agentcore:[a-z0-9-]+:[0-9]{12}:memory/[a-zA-Z][a-zA-Z0-9-_]{0,99}-[a-zA-Z0-9]{10}$",
		//	  "type": "string"
		//	}
		"memory_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN of the Memory resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MemoryExecutionRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN format",
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"memory_execution_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN format",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MemoryId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Unique identifier for the Memory resource",
		//	  "minLength": 12,
		//	  "pattern": "^[a-zA-Z][a-zA-Z0-9-_]{0,99}-[a-zA-Z0-9]{10}$",
		//	  "type": "string"
		//	}
		"memory_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Unique identifier for the Memory resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MemoryStrategies
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of memory strategies attached to this memory",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "CustomMemoryStrategy": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Configuration": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "SemanticOverride": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Consolidation": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "AppendToPrompt": {
		//	                        "description": "Text prompt for model instructions",
		//	                        "maxLength": 30000,
		//	                        "minLength": 1,
		//	                        "type": "string"
		//	                      },
		//	                      "ModelId": {
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "AppendToPrompt",
		//	                      "ModelId"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "Extraction": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "AppendToPrompt": {
		//	                        "description": "Text prompt for model instructions",
		//	                        "maxLength": 30000,
		//	                        "minLength": 1,
		//	                        "type": "string"
		//	                      },
		//	                      "ModelId": {
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "AppendToPrompt",
		//	                      "ModelId"
		//	                    ],
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "SummaryOverride": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Consolidation": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "AppendToPrompt": {
		//	                        "description": "Text prompt for model instructions",
		//	                        "maxLength": 30000,
		//	                        "minLength": 1,
		//	                        "type": "string"
		//	                      },
		//	                      "ModelId": {
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "AppendToPrompt",
		//	                      "ModelId"
		//	                    ],
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "UserPreferenceOverride": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Consolidation": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "AppendToPrompt": {
		//	                        "description": "Text prompt for model instructions",
		//	                        "maxLength": 30000,
		//	                        "minLength": 1,
		//	                        "type": "string"
		//	                      },
		//	                      "ModelId": {
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "AppendToPrompt",
		//	                      "ModelId"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "Extraction": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "AppendToPrompt": {
		//	                        "description": "Text prompt for model instructions",
		//	                        "maxLength": 30000,
		//	                        "minLength": 1,
		//	                        "type": "string"
		//	                      },
		//	                      "ModelId": {
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "AppendToPrompt",
		//	                      "ModelId"
		//	                    ],
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "CreatedAt": {
		//	            "description": "Creation timestamp of the memory strategy",
		//	            "format": "date-time",
		//	            "type": "string"
		//	          },
		//	          "Description": {
		//	            "description": "Description of the Memory resource",
		//	            "type": "string"
		//	          },
		//	          "Name": {
		//	            "description": "Name of the Memory resource",
		//	            "pattern": "^[a-zA-Z][a-zA-Z0-9_]{0,47}$",
		//	            "type": "string"
		//	          },
		//	          "Namespaces": {
		//	            "description": "List of namespaces for memory strategy",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "description": "Namespace for the memory strategy",
		//	              "pattern": "^[a-zA-Z0-9\\-_/]*(\\{(actorId|sessionId|memoryStrategyId)\\}[a-zA-Z0-9\\-_/]*)*$",
		//	              "type": "string"
		//	            },
		//	            "minItems": 1,
		//	            "type": "array"
		//	          },
		//	          "Status": {
		//	            "description": "Status of the memory strategy",
		//	            "enum": [
		//	              "CREATING",
		//	              "ACTIVE",
		//	              "DELETING",
		//	              "FAILED"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "StrategyId": {
		//	            "description": "Unique identifier for the memory strategy",
		//	            "minLength": 12,
		//	            "pattern": "^[a-zA-Z][a-zA-Z0-9-_]{0,99}-[a-zA-Z0-9]{10}$",
		//	            "type": "string"
		//	          },
		//	          "Type": {
		//	            "description": "Type of memory strategy",
		//	            "enum": [
		//	              "SEMANTIC",
		//	              "SUMMARIZATION",
		//	              "USER_PREFERENCE",
		//	              "CUSTOM"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "UpdatedAt": {
		//	            "description": "Last update timestamp of the memory strategy",
		//	            "format": "date-time",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "SemanticMemoryStrategy": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "CreatedAt": {
		//	            "description": "Creation timestamp of the memory strategy",
		//	            "format": "date-time",
		//	            "type": "string"
		//	          },
		//	          "Description": {
		//	            "description": "Description of the Memory resource",
		//	            "type": "string"
		//	          },
		//	          "Name": {
		//	            "description": "Name of the Memory resource",
		//	            "pattern": "^[a-zA-Z][a-zA-Z0-9_]{0,47}$",
		//	            "type": "string"
		//	          },
		//	          "Namespaces": {
		//	            "description": "List of namespaces for memory strategy",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "description": "Namespace for the memory strategy",
		//	              "pattern": "^[a-zA-Z0-9\\-_/]*(\\{(actorId|sessionId|memoryStrategyId)\\}[a-zA-Z0-9\\-_/]*)*$",
		//	              "type": "string"
		//	            },
		//	            "minItems": 1,
		//	            "type": "array"
		//	          },
		//	          "Status": {
		//	            "description": "Status of the memory strategy",
		//	            "enum": [
		//	              "CREATING",
		//	              "ACTIVE",
		//	              "DELETING",
		//	              "FAILED"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "StrategyId": {
		//	            "description": "Unique identifier for the memory strategy",
		//	            "minLength": 12,
		//	            "pattern": "^[a-zA-Z][a-zA-Z0-9-_]{0,99}-[a-zA-Z0-9]{10}$",
		//	            "type": "string"
		//	          },
		//	          "Type": {
		//	            "description": "Type of memory strategy",
		//	            "enum": [
		//	              "SEMANTIC",
		//	              "SUMMARIZATION",
		//	              "USER_PREFERENCE",
		//	              "CUSTOM"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "UpdatedAt": {
		//	            "description": "Last update timestamp of the memory strategy",
		//	            "format": "date-time",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "SummaryMemoryStrategy": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "CreatedAt": {
		//	            "description": "Creation timestamp of the memory strategy",
		//	            "format": "date-time",
		//	            "type": "string"
		//	          },
		//	          "Description": {
		//	            "description": "Description of the Memory resource",
		//	            "type": "string"
		//	          },
		//	          "Name": {
		//	            "description": "Name of the Memory resource",
		//	            "pattern": "^[a-zA-Z][a-zA-Z0-9_]{0,47}$",
		//	            "type": "string"
		//	          },
		//	          "Namespaces": {
		//	            "description": "List of namespaces for memory strategy",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "description": "Namespace for the memory strategy",
		//	              "pattern": "^[a-zA-Z0-9\\-_/]*(\\{(actorId|sessionId|memoryStrategyId)\\}[a-zA-Z0-9\\-_/]*)*$",
		//	              "type": "string"
		//	            },
		//	            "minItems": 1,
		//	            "type": "array"
		//	          },
		//	          "Status": {
		//	            "description": "Status of the memory strategy",
		//	            "enum": [
		//	              "CREATING",
		//	              "ACTIVE",
		//	              "DELETING",
		//	              "FAILED"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "StrategyId": {
		//	            "description": "Unique identifier for the memory strategy",
		//	            "minLength": 12,
		//	            "pattern": "^[a-zA-Z][a-zA-Z0-9-_]{0,99}-[a-zA-Z0-9]{10}$",
		//	            "type": "string"
		//	          },
		//	          "Type": {
		//	            "description": "Type of memory strategy",
		//	            "enum": [
		//	              "SEMANTIC",
		//	              "SUMMARIZATION",
		//	              "USER_PREFERENCE",
		//	              "CUSTOM"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "UpdatedAt": {
		//	            "description": "Last update timestamp of the memory strategy",
		//	            "format": "date-time",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "UserPreferenceMemoryStrategy": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "CreatedAt": {
		//	            "description": "Creation timestamp of the memory strategy",
		//	            "format": "date-time",
		//	            "type": "string"
		//	          },
		//	          "Description": {
		//	            "description": "Description of the Memory resource",
		//	            "type": "string"
		//	          },
		//	          "Name": {
		//	            "description": "Name of the Memory resource",
		//	            "pattern": "^[a-zA-Z][a-zA-Z0-9_]{0,47}$",
		//	            "type": "string"
		//	          },
		//	          "Namespaces": {
		//	            "description": "List of namespaces for memory strategy",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "description": "Namespace for the memory strategy",
		//	              "pattern": "^[a-zA-Z0-9\\-_/]*(\\{(actorId|sessionId|memoryStrategyId)\\}[a-zA-Z0-9\\-_/]*)*$",
		//	              "type": "string"
		//	            },
		//	            "minItems": 1,
		//	            "type": "array"
		//	          },
		//	          "Status": {
		//	            "description": "Status of the memory strategy",
		//	            "enum": [
		//	              "CREATING",
		//	              "ACTIVE",
		//	              "DELETING",
		//	              "FAILED"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "StrategyId": {
		//	            "description": "Unique identifier for the memory strategy",
		//	            "minLength": 12,
		//	            "pattern": "^[a-zA-Z][a-zA-Z0-9-_]{0,99}-[a-zA-Z0-9]{10}$",
		//	            "type": "string"
		//	          },
		//	          "Type": {
		//	            "description": "Type of memory strategy",
		//	            "enum": [
		//	              "SEMANTIC",
		//	              "SUMMARIZATION",
		//	              "USER_PREFERENCE",
		//	              "CUSTOM"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "UpdatedAt": {
		//	            "description": "Last update timestamp of the memory strategy",
		//	            "format": "date-time",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name"
		//	        ],
		//	        "type": "object"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"memory_strategies": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: CustomMemoryStrategy
					"custom_memory_strategy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Configuration
							"configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: SemanticOverride
									"semantic_override": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Consolidation
											"consolidation": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: AppendToPrompt
													"append_to_prompt": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "Text prompt for model instructions",
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: ModelId
													"model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Extraction
											"extraction": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: AppendToPrompt
													"append_to_prompt": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "Text prompt for model instructions",
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: ModelId
													"model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: SummaryOverride
									"summary_override": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Consolidation
											"consolidation": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: AppendToPrompt
													"append_to_prompt": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "Text prompt for model instructions",
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: ModelId
													"model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: UserPreferenceOverride
									"user_preference_override": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Consolidation
											"consolidation": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: AppendToPrompt
													"append_to_prompt": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "Text prompt for model instructions",
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: ModelId
													"model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Extraction
											"extraction": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: AppendToPrompt
													"append_to_prompt": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "Text prompt for model instructions",
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: ModelId
													"model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: CreatedAt
							"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
								CustomType:  timetypes.RFC3339Type{},
								Description: "Creation timestamp of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Description
							"description": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Description of the Memory resource",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Name of the Memory resource",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Namespaces
							"namespaces": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "List of namespaces for memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Status
							"status": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Status of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: StrategyId
							"strategy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Unique identifier for the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Type of memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: UpdatedAt
							"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
								CustomType:  timetypes.RFC3339Type{},
								Description: "Last update timestamp of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SemanticMemoryStrategy
					"semantic_memory_strategy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CreatedAt
							"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
								CustomType:  timetypes.RFC3339Type{},
								Description: "Creation timestamp of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Description
							"description": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Description of the Memory resource",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Name of the Memory resource",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Namespaces
							"namespaces": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "List of namespaces for memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Status
							"status": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Status of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: StrategyId
							"strategy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Unique identifier for the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Type of memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: UpdatedAt
							"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
								CustomType:  timetypes.RFC3339Type{},
								Description: "Last update timestamp of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SummaryMemoryStrategy
					"summary_memory_strategy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CreatedAt
							"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
								CustomType:  timetypes.RFC3339Type{},
								Description: "Creation timestamp of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Description
							"description": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Description of the Memory resource",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Name of the Memory resource",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Namespaces
							"namespaces": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "List of namespaces for memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Status
							"status": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Status of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: StrategyId
							"strategy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Unique identifier for the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Type of memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: UpdatedAt
							"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
								CustomType:  timetypes.RFC3339Type{},
								Description: "Last update timestamp of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: UserPreferenceMemoryStrategy
					"user_preference_memory_strategy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CreatedAt
							"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
								CustomType:  timetypes.RFC3339Type{},
								Description: "Creation timestamp of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Description
							"description": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Description of the Memory resource",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Name of the Memory resource",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Namespaces
							"namespaces": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "List of namespaces for memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Status
							"status": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Status of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: StrategyId
							"strategy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Unique identifier for the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Type of memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: UpdatedAt
							"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
								CustomType:  timetypes.RFC3339Type{},
								Description: "Last update timestamp of the memory strategy",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of memory strategies attached to this memory",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of the Memory resource",
		//	  "pattern": "^[a-zA-Z][a-zA-Z0-9_]{0,47}$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of the Memory resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Status of the Memory resource",
		//	  "enum": [
		//	    "CREATING",
		//	    "ACTIVE",
		//	    "FAILED",
		//	    "DELETING"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Status of the Memory resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A map of tag keys and values",
		//	  "patternProperties": {
		//	    "": {
		//	      "description": "Value of a tag",
		//	      "maxLength": 256,
		//	      "minLength": 0,
		//	      "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A map of tag keys and values",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType: timetypes.RFC3339Type{},
			Computed:   true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::BedrockAgentCore::Memory",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::BedrockAgentCore::Memory").WithTerraformTypeName("awscc_bedrockagentcore_memory")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"append_to_prompt":                "AppendToPrompt",
		"configuration":                   "Configuration",
		"consolidation":                   "Consolidation",
		"created_at":                      "CreatedAt",
		"custom_memory_strategy":          "CustomMemoryStrategy",
		"description":                     "Description",
		"encryption_key_arn":              "EncryptionKeyArn",
		"event_expiry_duration":           "EventExpiryDuration",
		"extraction":                      "Extraction",
		"failure_reason":                  "FailureReason",
		"memory_arn":                      "MemoryArn",
		"memory_execution_role_arn":       "MemoryExecutionRoleArn",
		"memory_id":                       "MemoryId",
		"memory_strategies":               "MemoryStrategies",
		"model_id":                        "ModelId",
		"name":                            "Name",
		"namespaces":                      "Namespaces",
		"semantic_memory_strategy":        "SemanticMemoryStrategy",
		"semantic_override":               "SemanticOverride",
		"status":                          "Status",
		"strategy_id":                     "StrategyId",
		"summary_memory_strategy":         "SummaryMemoryStrategy",
		"summary_override":                "SummaryOverride",
		"tags":                            "Tags",
		"type":                            "Type",
		"updated_at":                      "UpdatedAt",
		"user_preference_memory_strategy": "UserPreferenceMemoryStrategy",
		"user_preference_override":        "UserPreferenceOverride",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
