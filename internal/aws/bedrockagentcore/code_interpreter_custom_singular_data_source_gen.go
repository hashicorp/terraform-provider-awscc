// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package bedrockagentcore

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_bedrockagentcore_code_interpreter_custom", codeInterpreterCustomDataSource)
}

// codeInterpreterCustomDataSource returns the Terraform awscc_bedrockagentcore_code_interpreter_custom data source.
// This Terraform data source corresponds to the CloudFormation AWS::BedrockAgentCore::CodeInterpreterCustom resource.
func codeInterpreterCustomDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CodeInterpreterArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of a CodeInterpreter resource.",
		//	  "pattern": "^arn:(-[^:]+)?:bedrock-agentcore:[a-z0-9-]+:(aws|[0-9]{12}):code-interpreter(-custom)?/(aws\\.codeinterpreter\\.v1|[a-zA-Z][a-zA-Z0-9_]{0,47}-[a-zA-Z0-9]{10})$",
		//	  "type": "string"
		//	}
		"code_interpreter_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of a CodeInterpreter resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CodeInterpreterId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The id of the code interpreter.",
		//	  "pattern": "^(aws\\.codeinterpreter\\.v1|[a-zA-Z][a-zA-Z0-9_]{0,47}-[a-zA-Z0-9]{10})$",
		//	  "type": "string"
		//	}
		"code_interpreter_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The id of the code interpreter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Timestamp when the code interpreter was created.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Timestamp when the code interpreter was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the code interpreter.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the code interpreter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ExecutionRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the IAM role that the code interpreter uses to access resources.",
		//	  "pattern": "^arn:aws(-[a-z]+)*:iam::[0-9]{12}:role/.+$",
		//	  "type": "string"
		//	}
		"execution_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the IAM role that the code interpreter uses to access resources.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastUpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Timestamp when the code interpreter was last updated.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"last_updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Timestamp when the code interpreter was last updated.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the code interpreter.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the code interpreter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Network configuration for code interpreter.",
		//	  "properties": {
		//	    "NetworkMode": {
		//	      "default": "SANDBOX",
		//	      "description": "Network modes supported by code interpreter",
		//	      "enum": [
		//	        "PUBLIC",
		//	        "SANDBOX"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "NetworkMode"
		//	  ],
		//	  "type": "object"
		//	}
		"network_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: NetworkMode
				"network_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Network modes supported by code interpreter",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Network configuration for code interpreter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Status of code interpreter.",
		//	  "enum": [
		//	    "CREATING",
		//	    "CREATE_FAILED",
		//	    "READY",
		//	    "DELETING",
		//	    "DELETE_FAILED",
		//	    "DELETED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Status of code interpreter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A map of tag keys and values",
		//	  "patternProperties": {
		//	    "": {
		//	      "description": "Value of a tag",
		//	      "maxLength": 256,
		//	      "minLength": 0,
		//	      "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A map of tag keys and values",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::BedrockAgentCore::CodeInterpreterCustom",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::BedrockAgentCore::CodeInterpreterCustom").WithTerraformTypeName("awscc_bedrockagentcore_code_interpreter_custom")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"code_interpreter_arn":  "CodeInterpreterArn",
		"code_interpreter_id":   "CodeInterpreterId",
		"created_at":            "CreatedAt",
		"description":           "Description",
		"execution_role_arn":    "ExecutionRoleArn",
		"last_updated_at":       "LastUpdatedAt",
		"name":                  "Name",
		"network_configuration": "NetworkConfiguration",
		"network_mode":          "NetworkMode",
		"status":                "Status",
		"tags":                  "Tags",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
