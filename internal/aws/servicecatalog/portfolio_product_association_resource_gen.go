// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package servicecatalog

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_servicecatalog_portfolio_product_association", portfolioProductAssociationResource)
}

// portfolioProductAssociationResource returns the Terraform awscc_servicecatalog_portfolio_product_association resource.
// This Terraform resource corresponds to the CloudFormation AWS::ServiceCatalog::PortfolioProductAssociation resource.
func portfolioProductAssociationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AcceptLanguage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The language code.",
		//	  "type": "string"
		//	}
		"accept_language": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The language code.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// AcceptLanguage is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: PortfolioId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The portfolio identifier.",
		//	  "type": "string"
		//	}
		"portfolio_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The portfolio identifier.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProductId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The product identifier.",
		//	  "type": "string"
		//	}
		"product_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The product identifier.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SourcePortfolioId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the source portfolio. The source portfolio must be a portfolio imported from a different account than the one creating the association. This account must have previously shared this portfolio with the account creating the association.",
		//	  "type": "string"
		//	}
		"source_portfolio_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the source portfolio. The source portfolio must be a portfolio imported from a different account than the one creating the association. This account must have previously shared this portfolio with the account creating the association.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// SourcePortfolioId is a write-only property.
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::ServiceCatalog::PortfolioProductAssociation",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ServiceCatalog::PortfolioProductAssociation").WithTerraformTypeName("awscc_servicecatalog_portfolio_product_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "portfolio_id",
			Description:       "The portfolio identifier",
			RequiredForImport: true,
		},
		identity.Identifier{
			Name:              "product_id",
			Description:       "The product identifier",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"accept_language":     "AcceptLanguage",
		"portfolio_id":        "PortfolioId",
		"product_id":          "ProductId",
		"source_portfolio_id": "SourcePortfolioId",
	})

	opts = opts.IsImmutableType(true)

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/SourcePortfolioId",
		"/properties/AcceptLanguage",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
