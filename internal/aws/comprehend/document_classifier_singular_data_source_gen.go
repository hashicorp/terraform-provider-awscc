// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package comprehend

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_comprehend_document_classifier", documentClassifierDataSource)
}

// documentClassifierDataSource returns the Terraform awscc_comprehend_document_classifier data source.
// This Terraform data source corresponds to the CloudFormation AWS::Comprehend::DocumentClassifier resource.
func documentClassifierDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*)?",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DataAccessRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
		//	  "type": "string"
		//	}
		"data_access_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DocumentClassifierName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 63,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$",
		//	  "type": "string"
		//	}
		"document_classifier_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: InputDataConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AugmentedManifests": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AttributeNames": {
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*",
		//	              "type": "string"
		//	            },
		//	            "maxItems": 63,
		//	            "minItems": 1,
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "S3Uri": {
		//	            "maxLength": 1024,
		//	            "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
		//	            "type": "string"
		//	          },
		//	          "Split": {
		//	            "enum": [
		//	              "TRAIN",
		//	              "TEST"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "AttributeNames",
		//	          "S3Uri"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "DataFormat": {
		//	      "enum": [
		//	        "COMPREHEND_CSV",
		//	        "AUGMENTED_MANIFEST"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "DocumentReaderConfig": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DocumentReadAction": {
		//	          "enum": [
		//	            "TEXTRACT_DETECT_DOCUMENT_TEXT",
		//	            "TEXTRACT_ANALYZE_DOCUMENT"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "DocumentReadMode": {
		//	          "enum": [
		//	            "SERVICE_DEFAULT",
		//	            "FORCE_DOCUMENT_READ_ACTION"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "FeatureTypes": {
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "enum": [
		//	              "TABLES",
		//	              "FORMS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "maxItems": 2,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "required": [
		//	        "DocumentReadAction"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "DocumentType": {
		//	      "enum": [
		//	        "PLAIN_TEXT_DOCUMENT",
		//	        "SEMI_STRUCTURED_DOCUMENT"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Documents": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "S3Uri": {
		//	          "maxLength": 1024,
		//	          "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
		//	          "type": "string"
		//	        },
		//	        "TestS3Uri": {
		//	          "maxLength": 1024,
		//	          "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "S3Uri"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "LabelDelimiter": {
		//	      "maxLength": 1,
		//	      "minLength": 1,
		//	      "pattern": "^[ ~!@#$%^*\\-_+=|\\\\:;\\t\u003e?/]$",
		//	      "type": "string"
		//	    },
		//	    "S3Uri": {
		//	      "maxLength": 1024,
		//	      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
		//	      "type": "string"
		//	    },
		//	    "TestS3Uri": {
		//	      "maxLength": 1024,
		//	      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"input_data_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AugmentedManifests
				"augmented_manifests": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AttributeNames
							"attribute_names": schema.SetAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: S3Uri
							"s3_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Split
							"split": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DataFormat
				"data_format": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DocumentReaderConfig
				"document_reader_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DocumentReadAction
						"document_read_action": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DocumentReadMode
						"document_read_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: FeatureTypes
						"feature_types": schema.SetAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DocumentType
				"document_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Documents
				"documents": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: S3Uri
						"s3_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TestS3Uri
						"test_s3_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LabelDelimiter
				"label_delimiter": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Uri
				"s3_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TestS3Uri
				"test_s3_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LanguageCode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "en",
		//	    "es",
		//	    "fr",
		//	    "it",
		//	    "de",
		//	    "pt"
		//	  ],
		//	  "type": "string"
		//	}
		"language_code": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Mode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "MULTI_CLASS",
		//	    "MULTI_LABEL"
		//	  ],
		//	  "type": "string"
		//	}
		"mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ModelKmsKeyId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"model_kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ModelPolicy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 20000,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"model_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: OutputDataConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "KmsKeyId": {
		//	      "maxLength": 2048,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "S3Uri": {
		//	      "maxLength": 1024,
		//	      "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"output_data_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: KmsKeyId
				"kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Uri
				"s3_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: VersionName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 63,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$",
		//	  "type": "string"
		//	}
		"version_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: VolumeKmsKeyId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"volume_kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: VpcConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "SecurityGroupIds": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "maxLength": 32,
		//	        "minLength": 1,
		//	        "pattern": "[-0-9a-zA-Z]+",
		//	        "type": "string"
		//	      },
		//	      "maxItems": 5,
		//	      "minItems": 1,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "Subnets": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "maxLength": 32,
		//	        "minLength": 1,
		//	        "pattern": "[-0-9a-zA-Z]+",
		//	        "type": "string"
		//	      },
		//	      "maxItems": 16,
		//	      "minItems": 1,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "required": [
		//	    "SecurityGroupIds",
		//	    "Subnets"
		//	  ],
		//	  "type": "object"
		//	}
		"vpc_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: SecurityGroupIds
				"security_group_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Subnets
				"subnets": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Comprehend::DocumentClassifier",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Comprehend::DocumentClassifier").WithTerraformTypeName("awscc_comprehend_document_classifier")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                      "Arn",
		"attribute_names":          "AttributeNames",
		"augmented_manifests":      "AugmentedManifests",
		"data_access_role_arn":     "DataAccessRoleArn",
		"data_format":              "DataFormat",
		"document_classifier_name": "DocumentClassifierName",
		"document_read_action":     "DocumentReadAction",
		"document_read_mode":       "DocumentReadMode",
		"document_reader_config":   "DocumentReaderConfig",
		"document_type":            "DocumentType",
		"documents":                "Documents",
		"feature_types":            "FeatureTypes",
		"input_data_config":        "InputDataConfig",
		"key":                      "Key",
		"kms_key_id":               "KmsKeyId",
		"label_delimiter":          "LabelDelimiter",
		"language_code":            "LanguageCode",
		"mode":                     "Mode",
		"model_kms_key_id":         "ModelKmsKeyId",
		"model_policy":             "ModelPolicy",
		"output_data_config":       "OutputDataConfig",
		"s3_uri":                   "S3Uri",
		"security_group_ids":       "SecurityGroupIds",
		"split":                    "Split",
		"subnets":                  "Subnets",
		"tags":                     "Tags",
		"test_s3_uri":              "TestS3Uri",
		"value":                    "Value",
		"version_name":             "VersionName",
		"volume_kms_key_id":        "VolumeKmsKeyId",
		"vpc_config":               "VpcConfig",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
