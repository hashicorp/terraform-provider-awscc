// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package shield

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_shield_proactive_engagement", proactiveEngagementResource)
	registry.AddListResourceFactory("awscc_shield_proactive_engagement", generic.NewListResource(proactiveEngagementResource))
}

// proactiveEngagementResource returns the Terraform awscc_shield_proactive_engagement resource.
// This Terraform resource corresponds to the CloudFormation AWS::Shield::ProactiveEngagement resource.
func proactiveEngagementResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccountId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EmergencyContactList
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you for escalations to the SRT and to initiate proactive customer support.\nTo enable proactive engagement, the contact list must include at least one phone number.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An emergency contact is used by Shield Response Team (SRT) to contact you for escalations to the SRT and to initiate proactive customer support. An emergency contact requires an email address.",
		//	    "properties": {
		//	      "ContactNotes": {
		//	        "description": "Additional notes regarding the contact.",
		//	        "maxLength": 1024,
		//	        "minLength": 1,
		//	        "pattern": "^[\\w\\s\\.\\-,:/()+@]*$",
		//	        "type": "string"
		//	      },
		//	      "EmailAddress": {
		//	        "description": "The email address for the contact.",
		//	        "maxLength": 150,
		//	        "minLength": 1,
		//	        "pattern": "^\\S+@\\S+\\.\\S+$",
		//	        "type": "string"
		//	      },
		//	      "PhoneNumber": {
		//	        "description": "The phone number for the contact",
		//	        "maxLength": 16,
		//	        "minLength": 1,
		//	        "pattern": "^\\+[1-9]\\d{1,14}$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "EmailAddress"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 10,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"emergency_contact_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ContactNotes
					"contact_notes": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Additional notes regarding the contact.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 1024),
							stringvalidator.RegexMatches(regexp.MustCompile("^[\\w\\s\\.\\-,:/()+@]*$"), ""),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: EmailAddress
					"email_address": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The email address for the contact.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 150),
							stringvalidator.RegexMatches(regexp.MustCompile("^\\S+@\\S+\\.\\S+$"), ""),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
					// Property: PhoneNumber
					"phone_number": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The phone number for the contact",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 16),
							stringvalidator.RegexMatches(regexp.MustCompile("^\\+[1-9]\\d{1,14}$"), ""),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of email addresses and phone numbers that the Shield Response Team (SRT) can use to contact you for escalations to the SRT and to initiate proactive customer support.\nTo enable proactive engagement, the contact list must include at least one phone number.",
			Required:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(1, 10),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ProactiveEngagementStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "If `ENABLED`, the Shield Response Team (SRT) will use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.\nIf `DISABLED`, the SRT will not proactively notify contacts about escalations or to initiate proactive customer support.",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"proactive_engagement_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "If `ENABLED`, the Shield Response Team (SRT) will use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.\nIf `DISABLED`, the SRT will not proactively notify contacts about escalations or to initiate proactive customer support.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"ENABLED",
					"DISABLED",
				),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Authorizes the Shield Response Team (SRT) to use email and phone to notify contacts about escalations to the SRT and to initiate proactive customer support.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Shield::ProactiveEngagement").WithTerraformTypeName("awscc_shield_proactive_engagement")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "account_id",
			RequiredForImport: true,
		})

	opts = opts.IsGlobalResourceType(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_id":                  "AccountId",
		"contact_notes":               "ContactNotes",
		"email_address":               "EmailAddress",
		"emergency_contact_list":      "EmergencyContactList",
		"phone_number":                "PhoneNumber",
		"proactive_engagement_status": "ProactiveEngagementStatus",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
