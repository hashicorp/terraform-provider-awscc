// Code generated by generators/resource/main.go; DO NOT EDIT.

package appflow

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"

	"github.com/hashicorp/terraform-provider-awscc/internal/validate"
)

func init() {
	registry.AddResourceTypeFactory("awscc_appflow_flow", flowResourceType)
}

// flowResourceType returns the Terraform awscc_appflow_flow resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::AppFlow::Flow resource type.
func flowResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "description": "Description of the flow.",
			//   "maxLength": 2048,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "Description of the flow.",
			Type:        types.StringType,
			Optional:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(0, 2048),
			},
		},
		"destination_flow_config_list": {
			// Property: DestinationFlowConfigList
			// CloudFormation resource type schema:
			// {
			//   "description": "List of Destination connectors of the flow.",
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "Configurations of destination connector.",
			//     "properties": {
			//       "ConnectorProfileName": {
			//         "description": "Name of connector profile",
			//         "maxLength": 256,
			//         "pattern": "",
			//         "type": "string"
			//       },
			//       "ConnectorType": {
			//         "enum": [
			//           "Salesforce",
			//           "Singular",
			//           "Slack",
			//           "Redshift",
			//           "S3",
			//           "Marketo",
			//           "Googleanalytics",
			//           "Zendesk",
			//           "Servicenow",
			//           "Datadog",
			//           "Trendmicro",
			//           "Snowflake",
			//           "Dynatrace",
			//           "Infornexus",
			//           "Amplitude",
			//           "Veeva",
			//           "EventBridge",
			//           "Upsolver",
			//           "LookoutMetrics"
			//         ],
			//         "type": "string"
			//       },
			//       "DestinationConnectorProperties": {
			//         "description": "Destination connector details",
			//         "properties": {
			//           "EventBridge": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "ErrorHandlingConfig": {
			//                 "additionalProperties": false,
			//                 "properties": {
			//                   "BucketName": {
			//                     "maxLength": 63,
			//                     "minLength": 3,
			//                     "pattern": "",
			//                     "type": "string"
			//                   },
			//                   "BucketPrefix": {
			//                     "maxLength": 512,
			//                     "type": "string"
			//                   },
			//                   "FailOnFirstError": {
			//                     "type": "boolean"
			//                   }
			//                 },
			//                 "type": "object"
			//               },
			//               "Object": {
			//                 "maxLength": 512,
			//                 "pattern": "",
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Object"
			//             ],
			//             "type": "object"
			//           },
			//           "LookoutMetrics": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "Object": {
			//                 "maxLength": 512,
			//                 "pattern": "",
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "Redshift": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "BucketPrefix": {
			//                 "maxLength": 512,
			//                 "type": "string"
			//               },
			//               "ErrorHandlingConfig": {
			//                 "additionalProperties": false,
			//                 "properties": {
			//                   "BucketName": {
			//                     "maxLength": 63,
			//                     "minLength": 3,
			//                     "pattern": "",
			//                     "type": "string"
			//                   },
			//                   "BucketPrefix": {
			//                     "maxLength": 512,
			//                     "type": "string"
			//                   },
			//                   "FailOnFirstError": {
			//                     "type": "boolean"
			//                   }
			//                 },
			//                 "type": "object"
			//               },
			//               "IntermediateBucketName": {
			//                 "maxLength": 63,
			//                 "minLength": 3,
			//                 "pattern": "",
			//                 "type": "string"
			//               },
			//               "Object": {
			//                 "maxLength": 512,
			//                 "pattern": "",
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Object",
			//               "IntermediateBucketName"
			//             ],
			//             "type": "object"
			//           },
			//           "S3": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "BucketName": {
			//                 "maxLength": 63,
			//                 "minLength": 3,
			//                 "pattern": "",
			//                 "type": "string"
			//               },
			//               "BucketPrefix": {
			//                 "maxLength": 512,
			//                 "type": "string"
			//               },
			//               "S3OutputFormatConfig": {
			//                 "additionalProperties": false,
			//                 "properties": {
			//                   "AggregationConfig": {
			//                     "properties": {
			//                       "AggregationType": {
			//                         "enum": [
			//                           "None",
			//                           "SingleFile"
			//                         ],
			//                         "type": "string"
			//                       }
			//                     },
			//                     "type": "object"
			//                   },
			//                   "FileType": {
			//                     "enum": [
			//                       "CSV",
			//                       "JSON",
			//                       "PARQUET"
			//                     ],
			//                     "type": "string"
			//                   },
			//                   "PrefixConfig": {
			//                     "additionalProperties": false,
			//                     "properties": {
			//                       "PrefixFormat": {
			//                         "enum": [
			//                           "YEAR",
			//                           "MONTH",
			//                           "DAY",
			//                           "HOUR",
			//                           "MINUTE"
			//                         ],
			//                         "type": "string"
			//                       },
			//                       "PrefixType": {
			//                         "enum": [
			//                           "FILENAME",
			//                           "PATH",
			//                           "PATH_AND_FILENAME"
			//                         ],
			//                         "type": "string"
			//                       }
			//                     },
			//                     "type": "object"
			//                   }
			//                 },
			//                 "type": "object"
			//               }
			//             },
			//             "required": [
			//               "BucketName"
			//             ],
			//             "type": "object"
			//           },
			//           "Salesforce": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "ErrorHandlingConfig": {
			//                 "additionalProperties": false,
			//                 "properties": {
			//                   "BucketName": {
			//                     "maxLength": 63,
			//                     "minLength": 3,
			//                     "pattern": "",
			//                     "type": "string"
			//                   },
			//                   "BucketPrefix": {
			//                     "maxLength": 512,
			//                     "type": "string"
			//                   },
			//                   "FailOnFirstError": {
			//                     "type": "boolean"
			//                   }
			//                 },
			//                 "type": "object"
			//               },
			//               "IdFieldNames": {
			//                 "description": "List of fields used as ID when performing a write operation.",
			//                 "items": {
			//                   "type": "string"
			//                 },
			//                 "type": "array"
			//               },
			//               "Object": {
			//                 "maxLength": 512,
			//                 "pattern": "",
			//                 "type": "string"
			//               },
			//               "WriteOperationType": {
			//                 "enum": [
			//                   "INSERT",
			//                   "UPSERT",
			//                   "UPDATE"
			//                 ],
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Object"
			//             ],
			//             "type": "object"
			//           },
			//           "Snowflake": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "BucketPrefix": {
			//                 "maxLength": 512,
			//                 "type": "string"
			//               },
			//               "ErrorHandlingConfig": {
			//                 "additionalProperties": false,
			//                 "properties": {
			//                   "BucketName": {
			//                     "maxLength": 63,
			//                     "minLength": 3,
			//                     "pattern": "",
			//                     "type": "string"
			//                   },
			//                   "BucketPrefix": {
			//                     "maxLength": 512,
			//                     "type": "string"
			//                   },
			//                   "FailOnFirstError": {
			//                     "type": "boolean"
			//                   }
			//                 },
			//                 "type": "object"
			//               },
			//               "IntermediateBucketName": {
			//                 "maxLength": 63,
			//                 "minLength": 3,
			//                 "pattern": "",
			//                 "type": "string"
			//               },
			//               "Object": {
			//                 "maxLength": 512,
			//                 "pattern": "",
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Object",
			//               "IntermediateBucketName"
			//             ],
			//             "type": "object"
			//           },
			//           "Upsolver": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "BucketName": {
			//                 "maxLength": 63,
			//                 "minLength": 16,
			//                 "pattern": "",
			//                 "type": "string"
			//               },
			//               "BucketPrefix": {
			//                 "maxLength": 512,
			//                 "type": "string"
			//               },
			//               "S3OutputFormatConfig": {
			//                 "additionalProperties": false,
			//                 "properties": {
			//                   "AggregationConfig": {
			//                     "properties": {
			//                       "AggregationType": {
			//                         "enum": [
			//                           "None",
			//                           "SingleFile"
			//                         ],
			//                         "type": "string"
			//                       }
			//                     },
			//                     "type": "object"
			//                   },
			//                   "FileType": {
			//                     "enum": [
			//                       "CSV",
			//                       "JSON",
			//                       "PARQUET"
			//                     ],
			//                     "type": "string"
			//                   },
			//                   "PrefixConfig": {
			//                     "additionalProperties": false,
			//                     "properties": {
			//                       "PrefixFormat": {
			//                         "enum": [
			//                           "YEAR",
			//                           "MONTH",
			//                           "DAY",
			//                           "HOUR",
			//                           "MINUTE"
			//                         ],
			//                         "type": "string"
			//                       },
			//                       "PrefixType": {
			//                         "enum": [
			//                           "FILENAME",
			//                           "PATH",
			//                           "PATH_AND_FILENAME"
			//                         ],
			//                         "type": "string"
			//                       }
			//                     },
			//                     "type": "object"
			//                   }
			//                 },
			//                 "required": [
			//                   "PrefixConfig"
			//                 ],
			//                 "type": "object"
			//               }
			//             },
			//             "required": [
			//               "BucketName",
			//               "S3OutputFormatConfig"
			//             ],
			//             "type": "object"
			//           },
			//           "Zendesk": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "ErrorHandlingConfig": {
			//                 "additionalProperties": false,
			//                 "properties": {
			//                   "BucketName": {
			//                     "maxLength": 63,
			//                     "minLength": 3,
			//                     "pattern": "",
			//                     "type": "string"
			//                   },
			//                   "BucketPrefix": {
			//                     "maxLength": 512,
			//                     "type": "string"
			//                   },
			//                   "FailOnFirstError": {
			//                     "type": "boolean"
			//                   }
			//                 },
			//                 "type": "object"
			//               },
			//               "IdFieldNames": {
			//                 "description": "List of fields used as ID when performing a write operation.",
			//                 "items": {
			//                   "type": "string"
			//                 },
			//                 "type": "array"
			//               },
			//               "Object": {
			//                 "maxLength": 512,
			//                 "pattern": "",
			//                 "type": "string"
			//               },
			//               "WriteOperationType": {
			//                 "enum": [
			//                   "INSERT",
			//                   "UPSERT",
			//                   "UPDATE"
			//                 ],
			//                 "type": "string"
			//               }
			//             },
			//             "required": [
			//               "Object"
			//             ],
			//             "type": "object"
			//           }
			//         },
			//         "type": "object"
			//       }
			//     },
			//     "required": [
			//       "ConnectorType",
			//       "DestinationConnectorProperties"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Description: "List of Destination connectors of the flow.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"connector_profile_name": {
						// Property: ConnectorProfileName
						Description: "Name of connector profile",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(0, 256),
						},
					},
					"connector_type": {
						// Property: ConnectorType
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"Salesforce",
								"Singular",
								"Slack",
								"Redshift",
								"S3",
								"Marketo",
								"Googleanalytics",
								"Zendesk",
								"Servicenow",
								"Datadog",
								"Trendmicro",
								"Snowflake",
								"Dynatrace",
								"Infornexus",
								"Amplitude",
								"Veeva",
								"EventBridge",
								"Upsolver",
								"LookoutMetrics",
							}),
						},
					},
					"destination_connector_properties": {
						// Property: DestinationConnectorProperties
						Description: "Destination connector details",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"event_bridge": {
									// Property: EventBridge
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"error_handling_config": {
												// Property: ErrorHandlingConfig
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"bucket_name": {
															// Property: BucketName
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(3, 63),
															},
														},
														"bucket_prefix": {
															// Property: BucketPrefix
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(0, 512),
															},
														},
														"fail_on_first_error": {
															// Property: FailOnFirstError
															Type:     types.BoolType,
															Optional: true,
														},
													},
												),
												Optional: true,
											},
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"lookout_metrics": {
									// Property: LookoutMetrics
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Optional: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"redshift": {
									// Property: Redshift
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"bucket_prefix": {
												// Property: BucketPrefix
												Type:     types.StringType,
												Optional: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
											"error_handling_config": {
												// Property: ErrorHandlingConfig
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"bucket_name": {
															// Property: BucketName
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(3, 63),
															},
														},
														"bucket_prefix": {
															// Property: BucketPrefix
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(0, 512),
															},
														},
														"fail_on_first_error": {
															// Property: FailOnFirstError
															Type:     types.BoolType,
															Optional: true,
														},
													},
												),
												Optional: true,
											},
											"intermediate_bucket_name": {
												// Property: IntermediateBucketName
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(3, 63),
												},
											},
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"s3": {
									// Property: S3
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"bucket_name": {
												// Property: BucketName
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(3, 63),
												},
											},
											"bucket_prefix": {
												// Property: BucketPrefix
												Type:     types.StringType,
												Optional: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
											"s3_output_format_config": {
												// Property: S3OutputFormatConfig
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"aggregation_config": {
															// Property: AggregationConfig
															Attributes: tfsdk.SingleNestedAttributes(
																map[string]tfsdk.Attribute{
																	"aggregation_type": {
																		// Property: AggregationType
																		Type:     types.StringType,
																		Optional: true,
																		Validators: []tfsdk.AttributeValidator{
																			validate.StringInSlice([]string{
																				"None",
																				"SingleFile",
																			}),
																		},
																	},
																},
															),
															Optional: true,
														},
														"file_type": {
															// Property: FileType
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringInSlice([]string{
																	"CSV",
																	"JSON",
																	"PARQUET",
																}),
															},
														},
														"prefix_config": {
															// Property: PrefixConfig
															Attributes: tfsdk.SingleNestedAttributes(
																map[string]tfsdk.Attribute{
																	"prefix_format": {
																		// Property: PrefixFormat
																		Type:     types.StringType,
																		Optional: true,
																		Validators: []tfsdk.AttributeValidator{
																			validate.StringInSlice([]string{
																				"YEAR",
																				"MONTH",
																				"DAY",
																				"HOUR",
																				"MINUTE",
																			}),
																		},
																	},
																	"prefix_type": {
																		// Property: PrefixType
																		Type:     types.StringType,
																		Optional: true,
																		Validators: []tfsdk.AttributeValidator{
																			validate.StringInSlice([]string{
																				"FILENAME",
																				"PATH",
																				"PATH_AND_FILENAME",
																			}),
																		},
																	},
																},
															),
															Optional: true,
														},
													},
												),
												Optional: true,
											},
										},
									),
									Optional: true,
								},
								"salesforce": {
									// Property: Salesforce
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"error_handling_config": {
												// Property: ErrorHandlingConfig
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"bucket_name": {
															// Property: BucketName
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(3, 63),
															},
														},
														"bucket_prefix": {
															// Property: BucketPrefix
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(0, 512),
															},
														},
														"fail_on_first_error": {
															// Property: FailOnFirstError
															Type:     types.BoolType,
															Optional: true,
														},
													},
												),
												Optional: true,
											},
											"id_field_names": {
												// Property: IdFieldNames
												Description: "List of fields used as ID when performing a write operation.",
												Type:        types.ListType{ElemType: types.StringType},
												Optional:    true,
											},
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
											"write_operation_type": {
												// Property: WriteOperationType
												Type:     types.StringType,
												Optional: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"INSERT",
														"UPSERT",
														"UPDATE",
													}),
												},
											},
										},
									),
									Optional: true,
								},
								"snowflake": {
									// Property: Snowflake
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"bucket_prefix": {
												// Property: BucketPrefix
												Type:     types.StringType,
												Optional: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
											"error_handling_config": {
												// Property: ErrorHandlingConfig
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"bucket_name": {
															// Property: BucketName
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(3, 63),
															},
														},
														"bucket_prefix": {
															// Property: BucketPrefix
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(0, 512),
															},
														},
														"fail_on_first_error": {
															// Property: FailOnFirstError
															Type:     types.BoolType,
															Optional: true,
														},
													},
												),
												Optional: true,
											},
											"intermediate_bucket_name": {
												// Property: IntermediateBucketName
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(3, 63),
												},
											},
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"upsolver": {
									// Property: Upsolver
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"bucket_name": {
												// Property: BucketName
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(16, 63),
												},
											},
											"bucket_prefix": {
												// Property: BucketPrefix
												Type:     types.StringType,
												Optional: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
											"s3_output_format_config": {
												// Property: S3OutputFormatConfig
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"aggregation_config": {
															// Property: AggregationConfig
															Attributes: tfsdk.SingleNestedAttributes(
																map[string]tfsdk.Attribute{
																	"aggregation_type": {
																		// Property: AggregationType
																		Type:     types.StringType,
																		Optional: true,
																		Validators: []tfsdk.AttributeValidator{
																			validate.StringInSlice([]string{
																				"None",
																				"SingleFile",
																			}),
																		},
																	},
																},
															),
															Optional: true,
														},
														"file_type": {
															// Property: FileType
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringInSlice([]string{
																	"CSV",
																	"JSON",
																	"PARQUET",
																}),
															},
														},
														"prefix_config": {
															// Property: PrefixConfig
															Attributes: tfsdk.SingleNestedAttributes(
																map[string]tfsdk.Attribute{
																	"prefix_format": {
																		// Property: PrefixFormat
																		Type:     types.StringType,
																		Optional: true,
																		Validators: []tfsdk.AttributeValidator{
																			validate.StringInSlice([]string{
																				"YEAR",
																				"MONTH",
																				"DAY",
																				"HOUR",
																				"MINUTE",
																			}),
																		},
																	},
																	"prefix_type": {
																		// Property: PrefixType
																		Type:     types.StringType,
																		Optional: true,
																		Validators: []tfsdk.AttributeValidator{
																			validate.StringInSlice([]string{
																				"FILENAME",
																				"PATH",
																				"PATH_AND_FILENAME",
																			}),
																		},
																	},
																},
															),
															Required: true,
														},
													},
												),
												Required: true,
											},
										},
									),
									Optional: true,
								},
								"zendesk": {
									// Property: Zendesk
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"error_handling_config": {
												// Property: ErrorHandlingConfig
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"bucket_name": {
															// Property: BucketName
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(3, 63),
															},
														},
														"bucket_prefix": {
															// Property: BucketPrefix
															Type:     types.StringType,
															Optional: true,
															Validators: []tfsdk.AttributeValidator{
																validate.StringLenBetween(0, 512),
															},
														},
														"fail_on_first_error": {
															// Property: FailOnFirstError
															Type:     types.BoolType,
															Optional: true,
														},
													},
												),
												Optional: true,
											},
											"id_field_names": {
												// Property: IdFieldNames
												Description: "List of fields used as ID when performing a write operation.",
												Type:        types.ListType{ElemType: types.StringType},
												Optional:    true,
											},
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
											"write_operation_type": {
												// Property: WriteOperationType
												Type:     types.StringType,
												Optional: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringInSlice([]string{
														"INSERT",
														"UPSERT",
														"UPDATE",
													}),
												},
											},
										},
									),
									Optional: true,
								},
							},
						),
						Required: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Required: true,
		},
		"flow_arn": {
			// Property: FlowArn
			// CloudFormation resource type schema:
			// {
			//   "description": "ARN identifier of the flow.",
			//   "maxLength": 512,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "ARN identifier of the flow.",
			Type:        types.StringType,
			Computed:    true,
		},
		"flow_name": {
			// Property: FlowName
			// CloudFormation resource type schema:
			// {
			//   "description": "Name of the flow.",
			//   "maxLength": 256,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "Name of the flow.",
			Type:        types.StringType,
			Required:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(1, 256),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(), // FlowName is a force-new property.
			},
		},
		"kms_arn": {
			// Property: KMSArn
			// CloudFormation resource type schema:
			// {
			//   "description": "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.",
			//   "maxLength": 2048,
			//   "minLength": 20,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.",
			Type:        types.StringType,
			Optional:    true,
			Computed:    true,
			Validators: []tfsdk.AttributeValidator{
				validate.StringLenBetween(20, 2048),
			},
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(), // KMSArn is a force-new property.
			},
		},
		"source_flow_config": {
			// Property: SourceFlowConfig
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Configurations of Source connector of the flow.",
			//   "properties": {
			//     "ConnectorProfileName": {
			//       "description": "Name of connector profile",
			//       "maxLength": 256,
			//       "pattern": "",
			//       "type": "string"
			//     },
			//     "ConnectorType": {
			//       "enum": [
			//         "Salesforce",
			//         "Singular",
			//         "Slack",
			//         "Redshift",
			//         "S3",
			//         "Marketo",
			//         "Googleanalytics",
			//         "Zendesk",
			//         "Servicenow",
			//         "Datadog",
			//         "Trendmicro",
			//         "Snowflake",
			//         "Dynatrace",
			//         "Infornexus",
			//         "Amplitude",
			//         "Veeva",
			//         "EventBridge",
			//         "Upsolver",
			//         "LookoutMetrics"
			//       ],
			//       "type": "string"
			//     },
			//     "IncrementalPullConfig": {
			//       "description": "Configuration for scheduled incremental data pull",
			//       "properties": {
			//         "DatetimeTypeFieldName": {
			//           "description": "Name of the datetime/timestamp data type field to be used for importing incremental records from the source",
			//           "maxLength": 256,
			//           "type": "string"
			//         }
			//       },
			//       "type": "object"
			//     },
			//     "SourceConnectorProperties": {
			//       "description": "Source connector details required to query a connector",
			//       "properties": {
			//         "Amplitude": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "Datadog": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "Dynatrace": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "GoogleAnalytics": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "InforNexus": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "Marketo": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "S3": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "BucketName": {
			//               "maxLength": 63,
			//               "minLength": 3,
			//               "pattern": "",
			//               "type": "string"
			//             },
			//             "BucketPrefix": {
			//               "maxLength": 512,
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "BucketName",
			//             "BucketPrefix"
			//           ],
			//           "type": "object"
			//         },
			//         "Salesforce": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "EnableDynamicFieldUpdate": {
			//               "type": "boolean"
			//             },
			//             "IncludeDeletedRecords": {
			//               "type": "boolean"
			//             },
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "ServiceNow": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "Singular": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "Slack": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "Trendmicro": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "Veeva": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         },
			//         "Zendesk": {
			//           "additionalProperties": false,
			//           "properties": {
			//             "Object": {
			//               "maxLength": 512,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Object"
			//           ],
			//           "type": "object"
			//         }
			//       },
			//       "type": "object"
			//     }
			//   },
			//   "required": [
			//     "ConnectorType",
			//     "SourceConnectorProperties"
			//   ],
			//   "type": "object"
			// }
			Description: "Configurations of Source connector of the flow.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"connector_profile_name": {
						// Property: ConnectorProfileName
						Description: "Name of connector profile",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(0, 256),
						},
					},
					"connector_type": {
						// Property: ConnectorType
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"Salesforce",
								"Singular",
								"Slack",
								"Redshift",
								"S3",
								"Marketo",
								"Googleanalytics",
								"Zendesk",
								"Servicenow",
								"Datadog",
								"Trendmicro",
								"Snowflake",
								"Dynatrace",
								"Infornexus",
								"Amplitude",
								"Veeva",
								"EventBridge",
								"Upsolver",
								"LookoutMetrics",
							}),
						},
					},
					"incremental_pull_config": {
						// Property: IncrementalPullConfig
						Description: "Configuration for scheduled incremental data pull",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"datetime_type_field_name": {
									// Property: DatetimeTypeFieldName
									Description: "Name of the datetime/timestamp data type field to be used for importing incremental records from the source",
									Type:        types.StringType,
									Optional:    true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
									},
								},
							},
						),
						Optional: true,
					},
					"source_connector_properties": {
						// Property: SourceConnectorProperties
						Description: "Source connector details required to query a connector",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"amplitude": {
									// Property: Amplitude
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"datadog": {
									// Property: Datadog
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"dynatrace": {
									// Property: Dynatrace
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"google_analytics": {
									// Property: GoogleAnalytics
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"infor_nexus": {
									// Property: InforNexus
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"marketo": {
									// Property: Marketo
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"s3": {
									// Property: S3
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"bucket_name": {
												// Property: BucketName
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(3, 63),
												},
											},
											"bucket_prefix": {
												// Property: BucketPrefix
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"salesforce": {
									// Property: Salesforce
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"enable_dynamic_field_update": {
												// Property: EnableDynamicFieldUpdate
												Type:     types.BoolType,
												Optional: true,
											},
											"include_deleted_records": {
												// Property: IncludeDeletedRecords
												Type:     types.BoolType,
												Optional: true,
											},
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"service_now": {
									// Property: ServiceNow
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"singular": {
									// Property: Singular
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"slack": {
									// Property: Slack
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"trendmicro": {
									// Property: Trendmicro
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"veeva": {
									// Property: Veeva
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
								"zendesk": {
									// Property: Zendesk
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"object": {
												// Property: Object
												Type:     types.StringType,
												Required: true,
												Validators: []tfsdk.AttributeValidator{
													validate.StringLenBetween(0, 512),
												},
											},
										},
									),
									Optional: true,
								},
							},
						),
						Required: true,
					},
				},
			),
			Required: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "List of Tags.",
			//   "items": {
			//     "additionalProperties": false,
			//     "description": "A label for tagging AppFlow resources",
			//     "properties": {
			//       "Key": {
			//         "description": "A string used to identify this tag",
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "description": "A string containing the value for the tag",
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Description: "List of Tags.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "A string used to identify this tag",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(1, 128),
						},
					},
					"value": {
						// Property: Value
						Description: "A string containing the value for the tag",
						Type:        types.StringType,
						Required:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(0, 256),
						},
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Optional: true,
		},
		"tasks": {
			// Property: Tasks
			// CloudFormation resource type schema:
			// {
			//   "description": "List of tasks for the flow.",
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "ConnectorOperator": {
			//         "description": "Operation to be performed on provided source fields",
			//         "properties": {
			//           "Amplitude": {
			//             "enum": [
			//               "BETWEEN"
			//             ],
			//             "type": "string"
			//           },
			//           "Datadog": {
			//             "enum": [
			//               "PROJECTION",
			//               "BETWEEN",
			//               "EQUAL_TO",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "Dynatrace": {
			//             "enum": [
			//               "PROJECTION",
			//               "BETWEEN",
			//               "EQUAL_TO",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "GoogleAnalytics": {
			//             "enum": [
			//               "PROJECTION",
			//               "BETWEEN"
			//             ],
			//             "type": "string"
			//           },
			//           "InforNexus": {
			//             "enum": [
			//               "PROJECTION",
			//               "BETWEEN",
			//               "EQUAL_TO",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "Marketo": {
			//             "enum": [
			//               "PROJECTION",
			//               "LESS_THAN",
			//               "GREATER_THAN",
			//               "BETWEEN",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "S3": {
			//             "enum": [
			//               "PROJECTION",
			//               "LESS_THAN",
			//               "GREATER_THAN",
			//               "BETWEEN",
			//               "LESS_THAN_OR_EQUAL_TO",
			//               "GREATER_THAN_OR_EQUAL_TO",
			//               "EQUAL_TO",
			//               "NOT_EQUAL_TO",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "Salesforce": {
			//             "enum": [
			//               "PROJECTION",
			//               "LESS_THAN",
			//               "CONTAINS",
			//               "GREATER_THAN",
			//               "BETWEEN",
			//               "LESS_THAN_OR_EQUAL_TO",
			//               "GREATER_THAN_OR_EQUAL_TO",
			//               "EQUAL_TO",
			//               "NOT_EQUAL_TO",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "ServiceNow": {
			//             "enum": [
			//               "PROJECTION",
			//               "LESS_THAN",
			//               "CONTAINS",
			//               "GREATER_THAN",
			//               "BETWEEN",
			//               "LESS_THAN_OR_EQUAL_TO",
			//               "GREATER_THAN_OR_EQUAL_TO",
			//               "EQUAL_TO",
			//               "NOT_EQUAL_TO",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "Singular": {
			//             "enum": [
			//               "PROJECTION",
			//               "EQUAL_TO",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "Slack": {
			//             "enum": [
			//               "PROJECTION",
			//               "BETWEEN",
			//               "EQUAL_TO",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "Trendmicro": {
			//             "enum": [
			//               "PROJECTION",
			//               "EQUAL_TO",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "Veeva": {
			//             "enum": [
			//               "PROJECTION",
			//               "LESS_THAN",
			//               "GREATER_THAN",
			//               "BETWEEN",
			//               "LESS_THAN_OR_EQUAL_TO",
			//               "GREATER_THAN_OR_EQUAL_TO",
			//               "EQUAL_TO",
			//               "NOT_EQUAL_TO",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           },
			//           "Zendesk": {
			//             "enum": [
			//               "PROJECTION",
			//               "GREATER_THAN",
			//               "ADDITION",
			//               "MULTIPLICATION",
			//               "DIVISION",
			//               "SUBTRACTION",
			//               "MASK_ALL",
			//               "MASK_FIRST_N",
			//               "MASK_LAST_N",
			//               "VALIDATE_NON_NULL",
			//               "VALIDATE_NON_ZERO",
			//               "VALIDATE_NON_NEGATIVE",
			//               "VALIDATE_NUMERIC",
			//               "NO_OP"
			//             ],
			//             "type": "string"
			//           }
			//         },
			//         "type": "object"
			//       },
			//       "DestinationField": {
			//         "description": "A field value on which source field should be validated",
			//         "maxLength": 256,
			//         "type": "string"
			//       },
			//       "SourceFields": {
			//         "description": "Source fields on which particular task will be applied",
			//         "items": {
			//           "type": "string"
			//         },
			//         "type": "array"
			//       },
			//       "TaskProperties": {
			//         "additionalProperties": false,
			//         "description": "A Map used to store task related info",
			//         "items": {
			//           "additionalProperties": false,
			//           "description": "An object used to store task related info",
			//           "properties": {
			//             "Key": {
			//               "enum": [
			//                 "VALUE",
			//                 "VALUES",
			//                 "DATA_TYPE",
			//                 "UPPER_BOUND",
			//                 "LOWER_BOUND",
			//                 "SOURCE_DATA_TYPE",
			//                 "DESTINATION_DATA_TYPE",
			//                 "VALIDATION_ACTION",
			//                 "MASK_VALUE",
			//                 "MASK_LENGTH",
			//                 "TRUNCATE_LENGTH",
			//                 "MATH_OPERATION_FIELDS_ORDER",
			//                 "CONCAT_FORMAT",
			//                 "SUBFIELD_CATEGORY_MAP",
			//                 "EXCLUDE_SOURCE_FIELDS_LIST"
			//               ],
			//               "type": "string"
			//             },
			//             "Value": {
			//               "maxLength": 2048,
			//               "pattern": "",
			//               "type": "string"
			//             }
			//           },
			//           "required": [
			//             "Key",
			//             "Value"
			//           ],
			//           "type": "object"
			//         },
			//         "type": "array"
			//       },
			//       "TaskType": {
			//         "enum": [
			//           "Arithmetic",
			//           "Filter",
			//           "Map",
			//           "Map_all",
			//           "Mask",
			//           "Merge",
			//           "Truncate",
			//           "Validate"
			//         ],
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "SourceFields",
			//       "TaskType"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Description: "List of tasks for the flow.",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"connector_operator": {
						// Property: ConnectorOperator
						Description: "Operation to be performed on provided source fields",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"amplitude": {
									// Property: Amplitude
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"BETWEEN",
										}),
									},
								},
								"datadog": {
									// Property: Datadog
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"BETWEEN",
											"EQUAL_TO",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"dynatrace": {
									// Property: Dynatrace
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"BETWEEN",
											"EQUAL_TO",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"google_analytics": {
									// Property: GoogleAnalytics
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"BETWEEN",
										}),
									},
								},
								"infor_nexus": {
									// Property: InforNexus
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"BETWEEN",
											"EQUAL_TO",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"marketo": {
									// Property: Marketo
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"LESS_THAN",
											"GREATER_THAN",
											"BETWEEN",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"s3": {
									// Property: S3
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"LESS_THAN",
											"GREATER_THAN",
											"BETWEEN",
											"LESS_THAN_OR_EQUAL_TO",
											"GREATER_THAN_OR_EQUAL_TO",
											"EQUAL_TO",
											"NOT_EQUAL_TO",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"salesforce": {
									// Property: Salesforce
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"LESS_THAN",
											"CONTAINS",
											"GREATER_THAN",
											"BETWEEN",
											"LESS_THAN_OR_EQUAL_TO",
											"GREATER_THAN_OR_EQUAL_TO",
											"EQUAL_TO",
											"NOT_EQUAL_TO",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"service_now": {
									// Property: ServiceNow
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"LESS_THAN",
											"CONTAINS",
											"GREATER_THAN",
											"BETWEEN",
											"LESS_THAN_OR_EQUAL_TO",
											"GREATER_THAN_OR_EQUAL_TO",
											"EQUAL_TO",
											"NOT_EQUAL_TO",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"singular": {
									// Property: Singular
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"EQUAL_TO",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"slack": {
									// Property: Slack
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"BETWEEN",
											"EQUAL_TO",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"trendmicro": {
									// Property: Trendmicro
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"EQUAL_TO",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"veeva": {
									// Property: Veeva
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"LESS_THAN",
											"GREATER_THAN",
											"BETWEEN",
											"LESS_THAN_OR_EQUAL_TO",
											"GREATER_THAN_OR_EQUAL_TO",
											"EQUAL_TO",
											"NOT_EQUAL_TO",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
								"zendesk": {
									// Property: Zendesk
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"PROJECTION",
											"GREATER_THAN",
											"ADDITION",
											"MULTIPLICATION",
											"DIVISION",
											"SUBTRACTION",
											"MASK_ALL",
											"MASK_FIRST_N",
											"MASK_LAST_N",
											"VALIDATE_NON_NULL",
											"VALIDATE_NON_ZERO",
											"VALIDATE_NON_NEGATIVE",
											"VALIDATE_NUMERIC",
											"NO_OP",
										}),
									},
								},
							},
						),
						Optional: true,
					},
					"destination_field": {
						// Property: DestinationField
						Description: "A field value on which source field should be validated",
						Type:        types.StringType,
						Optional:    true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringLenBetween(0, 256),
						},
					},
					"source_fields": {
						// Property: SourceFields
						Description: "Source fields on which particular task will be applied",
						Type:        types.ListType{ElemType: types.StringType},
						Required:    true,
					},
					"task_properties": {
						// Property: TaskProperties
						Description: "A Map used to store task related info",
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"key": {
									// Property: Key
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"VALUE",
											"VALUES",
											"DATA_TYPE",
											"UPPER_BOUND",
											"LOWER_BOUND",
											"SOURCE_DATA_TYPE",
											"DESTINATION_DATA_TYPE",
											"VALIDATION_ACTION",
											"MASK_VALUE",
											"MASK_LENGTH",
											"TRUNCATE_LENGTH",
											"MATH_OPERATION_FIELDS_ORDER",
											"CONCAT_FORMAT",
											"SUBFIELD_CATEGORY_MAP",
											"EXCLUDE_SOURCE_FIELDS_LIST",
										}),
									},
								},
								"value": {
									// Property: Value
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 2048),
									},
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"task_type": {
						// Property: TaskType
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"Arithmetic",
								"Filter",
								"Map",
								"Map_all",
								"Mask",
								"Merge",
								"Truncate",
								"Validate",
							}),
						},
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Required: true,
		},
		"trigger_config": {
			// Property: TriggerConfig
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Trigger settings of the flow.",
			//   "properties": {
			//     "TriggerProperties": {
			//       "additionalProperties": false,
			//       "description": "Details required for scheduled trigger type",
			//       "properties": {
			//         "DataPullMode": {
			//           "enum": [
			//             "Incremental",
			//             "Complete"
			//           ],
			//           "type": "string"
			//         },
			//         "ScheduleEndTime": {
			//           "type": "number"
			//         },
			//         "ScheduleExpression": {
			//           "maxLength": 256,
			//           "minLength": 1,
			//           "type": "string"
			//         },
			//         "ScheduleStartTime": {
			//           "type": "number"
			//         },
			//         "TimeZone": {
			//           "maxLength": 256,
			//           "type": "string"
			//         }
			//       },
			//       "required": [
			//         "ScheduleExpression"
			//       ],
			//       "type": "object"
			//     },
			//     "TriggerType": {
			//       "enum": [
			//         "Scheduled",
			//         "Event",
			//         "OnDemand"
			//       ],
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "TriggerType"
			//   ],
			//   "type": "object"
			// }
			Description: "Trigger settings of the flow.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"trigger_properties": {
						// Property: TriggerProperties
						Description: "Details required for scheduled trigger type",
						Attributes: tfsdk.SingleNestedAttributes(
							map[string]tfsdk.Attribute{
								"data_pull_mode": {
									// Property: DataPullMode
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringInSlice([]string{
											"Incremental",
											"Complete",
										}),
									},
								},
								"schedule_end_time": {
									// Property: ScheduleEndTime
									Type:     types.NumberType,
									Optional: true,
								},
								"schedule_expression": {
									// Property: ScheduleExpression
									Type:     types.StringType,
									Required: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(1, 256),
									},
								},
								"schedule_start_time": {
									// Property: ScheduleStartTime
									Type:     types.NumberType,
									Optional: true,
								},
								"time_zone": {
									// Property: TimeZone
									Type:     types.StringType,
									Optional: true,
									Validators: []tfsdk.AttributeValidator{
										validate.StringLenBetween(0, 256),
									},
								},
							},
						),
						Optional: true,
					},
					"trigger_type": {
						// Property: TriggerType
						Type:     types.StringType,
						Required: true,
						Validators: []tfsdk.AttributeValidator{
							validate.StringInSlice([]string{
								"Scheduled",
								"Event",
								"OnDemand",
							}),
						},
					},
				},
			),
			Required: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Computed:    true,
	}

	schema := tfsdk.Schema{
		Description: "Resource schema for AWS::AppFlow::Flow.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppFlow::Flow").WithTerraformTypeName("awscc_appflow_flow")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"aggregation_config":               "AggregationConfig",
		"aggregation_type":                 "AggregationType",
		"amplitude":                        "Amplitude",
		"bucket_name":                      "BucketName",
		"bucket_prefix":                    "BucketPrefix",
		"connector_operator":               "ConnectorOperator",
		"connector_profile_name":           "ConnectorProfileName",
		"connector_type":                   "ConnectorType",
		"data_pull_mode":                   "DataPullMode",
		"datadog":                          "Datadog",
		"datetime_type_field_name":         "DatetimeTypeFieldName",
		"description":                      "Description",
		"destination_connector_properties": "DestinationConnectorProperties",
		"destination_field":                "DestinationField",
		"destination_flow_config_list":     "DestinationFlowConfigList",
		"dynatrace":                        "Dynatrace",
		"enable_dynamic_field_update":      "EnableDynamicFieldUpdate",
		"error_handling_config":            "ErrorHandlingConfig",
		"event_bridge":                     "EventBridge",
		"fail_on_first_error":              "FailOnFirstError",
		"file_type":                        "FileType",
		"flow_arn":                         "FlowArn",
		"flow_name":                        "FlowName",
		"google_analytics":                 "GoogleAnalytics",
		"id_field_names":                   "IdFieldNames",
		"include_deleted_records":          "IncludeDeletedRecords",
		"incremental_pull_config":          "IncrementalPullConfig",
		"infor_nexus":                      "InforNexus",
		"intermediate_bucket_name":         "IntermediateBucketName",
		"key":                              "Key",
		"kms_arn":                          "KMSArn",
		"lookout_metrics":                  "LookoutMetrics",
		"marketo":                          "Marketo",
		"object":                           "Object",
		"prefix_config":                    "PrefixConfig",
		"prefix_format":                    "PrefixFormat",
		"prefix_type":                      "PrefixType",
		"redshift":                         "Redshift",
		"s3":                               "S3",
		"s3_output_format_config":          "S3OutputFormatConfig",
		"salesforce":                       "Salesforce",
		"schedule_end_time":                "ScheduleEndTime",
		"schedule_expression":              "ScheduleExpression",
		"schedule_start_time":              "ScheduleStartTime",
		"service_now":                      "ServiceNow",
		"singular":                         "Singular",
		"slack":                            "Slack",
		"snowflake":                        "Snowflake",
		"source_connector_properties":      "SourceConnectorProperties",
		"source_fields":                    "SourceFields",
		"source_flow_config":               "SourceFlowConfig",
		"tags":                             "Tags",
		"task_properties":                  "TaskProperties",
		"task_type":                        "TaskType",
		"tasks":                            "Tasks",
		"time_zone":                        "TimeZone",
		"trendmicro":                       "Trendmicro",
		"trigger_config":                   "TriggerConfig",
		"trigger_properties":               "TriggerProperties",
		"trigger_type":                     "TriggerType",
		"upsolver":                         "Upsolver",
		"value":                            "Value",
		"veeva":                            "Veeva",
		"write_operation_type":             "WriteOperationType",
		"zendesk":                          "Zendesk",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_appflow_flow", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
