// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package appflow

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_appflow_flow", flowDataSource)
}

// flowDataSource returns the Terraform awscc_appflow_flow data source.
// This Terraform data source corresponds to the CloudFormation AWS::AppFlow::Flow resource.
func flowDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of the flow.",
		//	  "maxLength": 2048,
		//	  "pattern": "[\\w!@#\\-.?,\\s]*",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DestinationFlowConfigList
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of Destination connectors of the flow.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Configurations of destination connector.",
		//	    "properties": {
		//	      "ApiVersion": {
		//	        "description": "The API version that the destination connector uses.",
		//	        "maxLength": 256,
		//	        "pattern": "\\S+",
		//	        "type": "string"
		//	      },
		//	      "ConnectorProfileName": {
		//	        "description": "Name of destination connector profile",
		//	        "maxLength": 256,
		//	        "pattern": "[\\w/!@#+=.-]+",
		//	        "type": "string"
		//	      },
		//	      "ConnectorType": {
		//	        "description": "Destination connector type",
		//	        "enum": [
		//	          "SAPOData",
		//	          "Salesforce",
		//	          "Pardot",
		//	          "Singular",
		//	          "Slack",
		//	          "Redshift",
		//	          "S3",
		//	          "Marketo",
		//	          "Googleanalytics",
		//	          "Zendesk",
		//	          "Servicenow",
		//	          "Datadog",
		//	          "Trendmicro",
		//	          "Snowflake",
		//	          "Dynatrace",
		//	          "Infornexus",
		//	          "Amplitude",
		//	          "Veeva",
		//	          "CustomConnector",
		//	          "EventBridge",
		//	          "Upsolver",
		//	          "LookoutMetrics"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "DestinationConnectorProperties": {
		//	        "description": "Destination connector details",
		//	        "properties": {
		//	          "CustomConnector": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "CustomProperties": {
		//	                "additionalProperties": false,
		//	                "description": "A map for properties for custom connector.",
		//	                "patternProperties": {
		//	                  "": {
		//	                    "description": "A string containing the value for the property",
		//	                    "maxLength": 2048,
		//	                    "minLength": 1,
		//	                    "pattern": "\\S+",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "EntityName": {
		//	                "maxLength": 1024,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              },
		//	              "ErrorHandlingConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "BucketName": {
		//	                    "maxLength": 63,
		//	                    "minLength": 3,
		//	                    "pattern": "\\S+",
		//	                    "type": "string"
		//	                  },
		//	                  "BucketPrefix": {
		//	                    "maxLength": 512,
		//	                    "type": "string"
		//	                  },
		//	                  "FailOnFirstError": {
		//	                    "type": "boolean"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "IdFieldNames": {
		//	                "description": "List of fields used as ID when performing a write operation.",
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "WriteOperationType": {
		//	                "enum": [
		//	                  "INSERT",
		//	                  "UPSERT",
		//	                  "UPDATE",
		//	                  "DELETE"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "EntityName"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "EventBridge": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "ErrorHandlingConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "BucketName": {
		//	                    "maxLength": 63,
		//	                    "minLength": 3,
		//	                    "pattern": "\\S+",
		//	                    "type": "string"
		//	                  },
		//	                  "BucketPrefix": {
		//	                    "maxLength": 512,
		//	                    "type": "string"
		//	                  },
		//	                  "FailOnFirstError": {
		//	                    "type": "boolean"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Object": {
		//	                "maxLength": 512,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Object"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "LookoutMetrics": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Object": {
		//	                "maxLength": 512,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Marketo": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "ErrorHandlingConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "BucketName": {
		//	                    "maxLength": 63,
		//	                    "minLength": 3,
		//	                    "pattern": "\\S+",
		//	                    "type": "string"
		//	                  },
		//	                  "BucketPrefix": {
		//	                    "maxLength": 512,
		//	                    "type": "string"
		//	                  },
		//	                  "FailOnFirstError": {
		//	                    "type": "boolean"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Object": {
		//	                "maxLength": 512,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Object"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Redshift": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "BucketPrefix": {
		//	                "maxLength": 512,
		//	                "type": "string"
		//	              },
		//	              "ErrorHandlingConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "BucketName": {
		//	                    "maxLength": 63,
		//	                    "minLength": 3,
		//	                    "pattern": "\\S+",
		//	                    "type": "string"
		//	                  },
		//	                  "BucketPrefix": {
		//	                    "maxLength": 512,
		//	                    "type": "string"
		//	                  },
		//	                  "FailOnFirstError": {
		//	                    "type": "boolean"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "IntermediateBucketName": {
		//	                "maxLength": 63,
		//	                "minLength": 3,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              },
		//	              "Object": {
		//	                "maxLength": 512,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Object",
		//	              "IntermediateBucketName"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "S3": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "BucketName": {
		//	                "maxLength": 63,
		//	                "minLength": 3,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              },
		//	              "BucketPrefix": {
		//	                "maxLength": 512,
		//	                "type": "string"
		//	              },
		//	              "S3OutputFormatConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "AggregationConfig": {
		//	                    "properties": {
		//	                      "AggregationType": {
		//	                        "enum": [
		//	                          "None",
		//	                          "SingleFile"
		//	                        ],
		//	                        "type": "string"
		//	                      },
		//	                      "TargetFileSize": {
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "FileType": {
		//	                    "enum": [
		//	                      "CSV",
		//	                      "JSON",
		//	                      "PARQUET"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "PrefixConfig": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "PathPrefixHierarchy": {
		//	                        "items": {
		//	                          "enum": [
		//	                            "EXECUTION_ID",
		//	                            "SCHEMA_VERSION"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "type": "array"
		//	                      },
		//	                      "PrefixFormat": {
		//	                        "enum": [
		//	                          "YEAR",
		//	                          "MONTH",
		//	                          "DAY",
		//	                          "HOUR",
		//	                          "MINUTE"
		//	                        ],
		//	                        "type": "string"
		//	                      },
		//	                      "PrefixType": {
		//	                        "enum": [
		//	                          "FILENAME",
		//	                          "PATH",
		//	                          "PATH_AND_FILENAME"
		//	                        ],
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "PreserveSourceDataTyping": {
		//	                    "type": "boolean"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "BucketName"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "SAPOData": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "ErrorHandlingConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "BucketName": {
		//	                    "maxLength": 63,
		//	                    "minLength": 3,
		//	                    "pattern": "\\S+",
		//	                    "type": "string"
		//	                  },
		//	                  "BucketPrefix": {
		//	                    "maxLength": 512,
		//	                    "type": "string"
		//	                  },
		//	                  "FailOnFirstError": {
		//	                    "type": "boolean"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "IdFieldNames": {
		//	                "description": "List of fields used as ID when performing a write operation.",
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "ObjectPath": {
		//	                "maxLength": 512,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              },
		//	              "SuccessResponseHandlingConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "BucketName": {
		//	                    "maxLength": 63,
		//	                    "minLength": 3,
		//	                    "pattern": "\\S+",
		//	                    "type": "string"
		//	                  },
		//	                  "BucketPrefix": {
		//	                    "maxLength": 512,
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "WriteOperationType": {
		//	                "enum": [
		//	                  "INSERT",
		//	                  "UPSERT",
		//	                  "UPDATE",
		//	                  "DELETE"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "ObjectPath"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Salesforce": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "DataTransferApi": {
		//	                "enum": [
		//	                  "AUTOMATIC",
		//	                  "BULKV2",
		//	                  "REST_SYNC"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "ErrorHandlingConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "BucketName": {
		//	                    "maxLength": 63,
		//	                    "minLength": 3,
		//	                    "pattern": "\\S+",
		//	                    "type": "string"
		//	                  },
		//	                  "BucketPrefix": {
		//	                    "maxLength": 512,
		//	                    "type": "string"
		//	                  },
		//	                  "FailOnFirstError": {
		//	                    "type": "boolean"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "IdFieldNames": {
		//	                "description": "List of fields used as ID when performing a write operation.",
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "Object": {
		//	                "maxLength": 512,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              },
		//	              "WriteOperationType": {
		//	                "enum": [
		//	                  "INSERT",
		//	                  "UPSERT",
		//	                  "UPDATE",
		//	                  "DELETE"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Object"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Snowflake": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "BucketPrefix": {
		//	                "maxLength": 512,
		//	                "type": "string"
		//	              },
		//	              "ErrorHandlingConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "BucketName": {
		//	                    "maxLength": 63,
		//	                    "minLength": 3,
		//	                    "pattern": "\\S+",
		//	                    "type": "string"
		//	                  },
		//	                  "BucketPrefix": {
		//	                    "maxLength": 512,
		//	                    "type": "string"
		//	                  },
		//	                  "FailOnFirstError": {
		//	                    "type": "boolean"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "IntermediateBucketName": {
		//	                "maxLength": 63,
		//	                "minLength": 3,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              },
		//	              "Object": {
		//	                "maxLength": 512,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Object",
		//	              "IntermediateBucketName"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Upsolver": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "BucketName": {
		//	                "maxLength": 63,
		//	                "minLength": 16,
		//	                "pattern": "^(upsolver-appflow)\\S*",
		//	                "type": "string"
		//	              },
		//	              "BucketPrefix": {
		//	                "maxLength": 512,
		//	                "type": "string"
		//	              },
		//	              "S3OutputFormatConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "AggregationConfig": {
		//	                    "properties": {
		//	                      "AggregationType": {
		//	                        "enum": [
		//	                          "None",
		//	                          "SingleFile"
		//	                        ],
		//	                        "type": "string"
		//	                      },
		//	                      "TargetFileSize": {
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "FileType": {
		//	                    "enum": [
		//	                      "CSV",
		//	                      "JSON",
		//	                      "PARQUET"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "PrefixConfig": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "PathPrefixHierarchy": {
		//	                        "items": {
		//	                          "enum": [
		//	                            "EXECUTION_ID",
		//	                            "SCHEMA_VERSION"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "type": "array"
		//	                      },
		//	                      "PrefixFormat": {
		//	                        "enum": [
		//	                          "YEAR",
		//	                          "MONTH",
		//	                          "DAY",
		//	                          "HOUR",
		//	                          "MINUTE"
		//	                        ],
		//	                        "type": "string"
		//	                      },
		//	                      "PrefixType": {
		//	                        "enum": [
		//	                          "FILENAME",
		//	                          "PATH",
		//	                          "PATH_AND_FILENAME"
		//	                        ],
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "PrefixConfig"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "BucketName",
		//	              "S3OutputFormatConfig"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Zendesk": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "ErrorHandlingConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "BucketName": {
		//	                    "maxLength": 63,
		//	                    "minLength": 3,
		//	                    "pattern": "\\S+",
		//	                    "type": "string"
		//	                  },
		//	                  "BucketPrefix": {
		//	                    "maxLength": 512,
		//	                    "type": "string"
		//	                  },
		//	                  "FailOnFirstError": {
		//	                    "type": "boolean"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "IdFieldNames": {
		//	                "description": "List of fields used as ID when performing a write operation.",
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "Object": {
		//	                "maxLength": 512,
		//	                "pattern": "\\S+",
		//	                "type": "string"
		//	              },
		//	              "WriteOperationType": {
		//	                "enum": [
		//	                  "INSERT",
		//	                  "UPSERT",
		//	                  "UPDATE",
		//	                  "DELETE"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Object"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "ConnectorType",
		//	      "DestinationConnectorProperties"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"destination_flow_config_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ApiVersion
					"api_version": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The API version that the destination connector uses.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ConnectorProfileName
					"connector_profile_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Name of destination connector profile",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ConnectorType
					"connector_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Destination connector type",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: DestinationConnectorProperties
					"destination_connector_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CustomConnector
							"custom_connector": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: CustomProperties
									"custom_properties": // Pattern: ""
									schema.MapAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Description: "A map for properties for custom connector.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: EntityName
									"entity_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ErrorHandlingConfig
									"error_handling_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BucketName
											"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: BucketPrefix
											"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: FailOnFirstError
											"fail_on_first_error": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: IdFieldNames
									"id_field_names": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Description: "List of fields used as ID when performing a write operation.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: WriteOperationType
									"write_operation_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: EventBridge
							"event_bridge": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ErrorHandlingConfig
									"error_handling_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BucketName
											"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: BucketPrefix
											"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: FailOnFirstError
											"fail_on_first_error": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Object
									"object": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: LookoutMetrics
							"lookout_metrics": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Object
									"object": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Marketo
							"marketo": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ErrorHandlingConfig
									"error_handling_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BucketName
											"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: BucketPrefix
											"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: FailOnFirstError
											"fail_on_first_error": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Object
									"object": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Redshift
							"redshift": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BucketPrefix
									"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ErrorHandlingConfig
									"error_handling_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BucketName
											"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: BucketPrefix
											"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: FailOnFirstError
											"fail_on_first_error": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: IntermediateBucketName
									"intermediate_bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Object
									"object": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: S3
							"s3": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BucketName
									"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: BucketPrefix
									"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: S3OutputFormatConfig
									"s3_output_format_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AggregationConfig
											"aggregation_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: AggregationType
													"aggregation_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: TargetFileSize
													"target_file_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: FileType
											"file_type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: PrefixConfig
											"prefix_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: PathPrefixHierarchy
													"path_prefix_hierarchy": schema.ListAttribute{ /*START ATTRIBUTE*/
														ElementType: types.StringType,
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: PrefixFormat
													"prefix_format": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: PrefixType
													"prefix_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: PreserveSourceDataTyping
											"preserve_source_data_typing": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SAPOData
							"sapo_data": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ErrorHandlingConfig
									"error_handling_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BucketName
											"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: BucketPrefix
											"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: FailOnFirstError
											"fail_on_first_error": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: IdFieldNames
									"id_field_names": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Description: "List of fields used as ID when performing a write operation.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: ObjectPath
									"object_path": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: SuccessResponseHandlingConfig
									"success_response_handling_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BucketName
											"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: BucketPrefix
											"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: WriteOperationType
									"write_operation_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Salesforce
							"salesforce": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DataTransferApi
									"data_transfer_api": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ErrorHandlingConfig
									"error_handling_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BucketName
											"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: BucketPrefix
											"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: FailOnFirstError
											"fail_on_first_error": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: IdFieldNames
									"id_field_names": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Description: "List of fields used as ID when performing a write operation.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Object
									"object": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: WriteOperationType
									"write_operation_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Snowflake
							"snowflake": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BucketPrefix
									"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ErrorHandlingConfig
									"error_handling_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BucketName
											"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: BucketPrefix
											"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: FailOnFirstError
											"fail_on_first_error": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: IntermediateBucketName
									"intermediate_bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Object
									"object": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Upsolver
							"upsolver": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BucketName
									"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: BucketPrefix
									"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: S3OutputFormatConfig
									"s3_output_format_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AggregationConfig
											"aggregation_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: AggregationType
													"aggregation_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: TargetFileSize
													"target_file_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: FileType
											"file_type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: PrefixConfig
											"prefix_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: PathPrefixHierarchy
													"path_prefix_hierarchy": schema.ListAttribute{ /*START ATTRIBUTE*/
														ElementType: types.StringType,
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: PrefixFormat
													"prefix_format": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: PrefixType
													"prefix_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Zendesk
							"zendesk": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ErrorHandlingConfig
									"error_handling_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BucketName
											"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: BucketPrefix
											"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: FailOnFirstError
											"fail_on_first_error": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: IdFieldNames
									"id_field_names": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Description: "List of fields used as ID when performing a write operation.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Object
									"object": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: WriteOperationType
									"write_operation_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Destination connector details",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of Destination connectors of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FlowArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN identifier of the flow.",
		//	  "maxLength": 512,
		//	  "pattern": "arn:aws:appflow:.*:[0-9]+:.*",
		//	  "type": "string"
		//	}
		"flow_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN identifier of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FlowName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of the flow.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "[a-zA-Z0-9][\\w!@#.-]+",
		//	  "type": "string"
		//	}
		"flow_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FlowStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Flow activation status for Scheduled- and Event-triggered flows",
		//	  "enum": [
		//	    "Active",
		//	    "Suspended",
		//	    "Draft"
		//	  ],
		//	  "type": "string"
		//	}
		"flow_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Flow activation status for Scheduled- and Event-triggered flows",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KMSArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.",
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "pattern": "arn:aws:kms:.*:[0-9]+:.*",
		//	  "type": "string"
		//	}
		"kms_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MetadataCatalogConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configurations of metadata catalog of the flow.",
		//	  "properties": {
		//	    "GlueDataCatalog": {
		//	      "additionalProperties": false,
		//	      "description": "Configurations of glue data catalog of the flow.",
		//	      "properties": {
		//	        "DatabaseName": {
		//	          "description": "A string containing the value for the tag",
		//	          "maxLength": 255,
		//	          "minLength": 0,
		//	          "pattern": "",
		//	          "type": "string"
		//	        },
		//	        "RoleArn": {
		//	          "description": "A string containing the value for the tag",
		//	          "maxLength": 512,
		//	          "minLength": 0,
		//	          "pattern": "arn:aws:iam:.*:[0-9]+:.*",
		//	          "type": "string"
		//	        },
		//	        "TablePrefix": {
		//	          "description": "A string containing the value for the tag",
		//	          "maxLength": 128,
		//	          "minLength": 0,
		//	          "pattern": "",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "RoleArn",
		//	        "DatabaseName",
		//	        "TablePrefix"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"metadata_catalog_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: GlueDataCatalog
				"glue_data_catalog": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A string containing the value for the tag",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RoleArn
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A string containing the value for the tag",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TablePrefix
						"table_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A string containing the value for the tag",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Configurations of glue data catalog of the flow.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configurations of metadata catalog of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceFlowConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configurations of Source connector of the flow.",
		//	  "properties": {
		//	    "ApiVersion": {
		//	      "description": "The API version that the destination connector uses.",
		//	      "maxLength": 256,
		//	      "pattern": "\\S+",
		//	      "type": "string"
		//	    },
		//	    "ConnectorProfileName": {
		//	      "description": "Name of source connector profile",
		//	      "maxLength": 256,
		//	      "pattern": "[\\w/!@#+=.-]+",
		//	      "type": "string"
		//	    },
		//	    "ConnectorType": {
		//	      "description": "Type of source connector",
		//	      "enum": [
		//	        "SAPOData",
		//	        "Salesforce",
		//	        "Pardot",
		//	        "Singular",
		//	        "Slack",
		//	        "Redshift",
		//	        "S3",
		//	        "Marketo",
		//	        "Googleanalytics",
		//	        "Zendesk",
		//	        "Servicenow",
		//	        "Datadog",
		//	        "Trendmicro",
		//	        "Snowflake",
		//	        "Dynatrace",
		//	        "Infornexus",
		//	        "Amplitude",
		//	        "Veeva",
		//	        "CustomConnector",
		//	        "EventBridge",
		//	        "Upsolver",
		//	        "LookoutMetrics"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "IncrementalPullConfig": {
		//	      "description": "Configuration for scheduled incremental data pull",
		//	      "properties": {
		//	        "DatetimeTypeFieldName": {
		//	          "description": "Name of the datetime/timestamp data type field to be used for importing incremental records from the source",
		//	          "maxLength": 256,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "SourceConnectorProperties": {
		//	      "description": "Source connector details required to query a connector",
		//	      "properties": {
		//	        "Amplitude": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "CustomConnector": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "CustomProperties": {
		//	              "additionalProperties": false,
		//	              "description": "A map for properties for custom connector.",
		//	              "patternProperties": {
		//	                "": {
		//	                  "description": "A string containing the value for the property",
		//	                  "maxLength": 2048,
		//	                  "minLength": 1,
		//	                  "pattern": "\\S+",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "DataTransferApi": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Name": {
		//	                  "maxLength": 64,
		//	                  "pattern": "[\\w/-]+",
		//	                  "type": "string"
		//	                },
		//	                "Type": {
		//	                  "enum": [
		//	                    "SYNC",
		//	                    "ASYNC",
		//	                    "AUTOMATIC"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Name",
		//	                "Type"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "EntityName": {
		//	              "maxLength": 1024,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "EntityName"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Datadog": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Dynatrace": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "GoogleAnalytics": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "InforNexus": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Marketo": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Pardot": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "S3": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "BucketName": {
		//	              "maxLength": 63,
		//	              "minLength": 3,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            },
		//	            "BucketPrefix": {
		//	              "maxLength": 512,
		//	              "type": "string"
		//	            },
		//	            "S3InputFormatConfig": {
		//	              "properties": {
		//	                "S3InputFileType": {
		//	                  "enum": [
		//	                    "CSV",
		//	                    "JSON"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "BucketName",
		//	            "BucketPrefix"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "SAPOData": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ObjectPath": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            },
		//	            "paginationConfig": {
		//	              "additionalProperties": false,
		//	              "description": "SAP Source connector page size",
		//	              "properties": {
		//	                "maxPageSize": {
		//	                  "maximum": 10000,
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "maxPageSize"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "parallelismConfig": {
		//	              "additionalProperties": false,
		//	              "description": "SAP Source connector parallelism factor",
		//	              "properties": {
		//	                "maxParallelism": {
		//	                  "maximum": 10,
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "maxParallelism"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "ObjectPath"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Salesforce": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "DataTransferApi": {
		//	              "enum": [
		//	                "AUTOMATIC",
		//	                "BULKV2",
		//	                "REST_SYNC"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "EnableDynamicFieldUpdate": {
		//	              "type": "boolean"
		//	            },
		//	            "IncludeDeletedRecords": {
		//	              "type": "boolean"
		//	            },
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "ServiceNow": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Singular": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Slack": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Trendmicro": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Veeva": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "DocumentType": {
		//	              "maxLength": 512,
		//	              "pattern": "[\\s\\w_-]+",
		//	              "type": "string"
		//	            },
		//	            "IncludeAllVersions": {
		//	              "type": "boolean"
		//	            },
		//	            "IncludeRenditions": {
		//	              "type": "boolean"
		//	            },
		//	            "IncludeSourceFiles": {
		//	              "type": "boolean"
		//	            },
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Zendesk": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Object": {
		//	              "maxLength": 512,
		//	              "pattern": "\\S+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Object"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "ConnectorType",
		//	    "SourceConnectorProperties"
		//	  ],
		//	  "type": "object"
		//	}
		"source_flow_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ApiVersion
				"api_version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The API version that the destination connector uses.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ConnectorProfileName
				"connector_profile_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Name of source connector profile",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ConnectorType
				"connector_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Type of source connector",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IncrementalPullConfig
				"incremental_pull_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DatetimeTypeFieldName
						"datetime_type_field_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of the datetime/timestamp data type field to be used for importing incremental records from the source",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Configuration for scheduled incremental data pull",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SourceConnectorProperties
				"source_connector_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Amplitude
						"amplitude": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CustomConnector
						"custom_connector": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CustomProperties
								"custom_properties": // Pattern: ""
								schema.MapAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "A map for properties for custom connector.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: DataTransferApi
								"data_transfer_api": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Name
										"name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Type
										"type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EntityName
								"entity_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Datadog
						"datadog": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Dynatrace
						"dynatrace": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GoogleAnalytics
						"google_analytics": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: InforNexus
						"infor_nexus": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Marketo
						"marketo": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Pardot
						"pardot": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: S3
						"s3": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BucketName
								"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: BucketPrefix
								"bucket_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: S3InputFormatConfig
								"s3_input_format_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: S3InputFileType
										"s3_input_file_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SAPOData
						"sapo_data": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ObjectPath
								"object_path": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: paginationConfig
								"pagination_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: maxPageSize
										"max_page_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "SAP Source connector page size",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: parallelismConfig
								"parallelism_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: maxParallelism
										"max_parallelism": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "SAP Source connector parallelism factor",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Salesforce
						"salesforce": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DataTransferApi
								"data_transfer_api": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EnableDynamicFieldUpdate
								"enable_dynamic_field_update": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IncludeDeletedRecords
								"include_deleted_records": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ServiceNow
						"service_now": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Singular
						"singular": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Slack
						"slack": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Trendmicro
						"trendmicro": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Veeva
						"veeva": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DocumentType
								"document_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IncludeAllVersions
								"include_all_versions": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IncludeRenditions
								"include_renditions": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IncludeSourceFiles
								"include_source_files": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Zendesk
						"zendesk": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Object
								"object": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Source connector details required to query a connector",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configurations of Source connector of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of Tags.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A label for tagging AppFlow resources",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "A string used to identify this tag",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "A string containing the value for the tag",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A string used to identify this tag",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A string containing the value for the tag",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of Tags.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tasks
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of tasks for the flow.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "ConnectorOperator": {
		//	        "description": "Operation to be performed on provided source fields",
		//	        "properties": {
		//	          "Amplitude": {
		//	            "enum": [
		//	              "BETWEEN"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "CustomConnector": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "LESS_THAN",
		//	              "GREATER_THAN",
		//	              "CONTAINS",
		//	              "BETWEEN",
		//	              "LESS_THAN_OR_EQUAL_TO",
		//	              "GREATER_THAN_OR_EQUAL_TO",
		//	              "EQUAL_TO",
		//	              "NOT_EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Datadog": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "BETWEEN",
		//	              "EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Dynatrace": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "BETWEEN",
		//	              "EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "GoogleAnalytics": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "BETWEEN"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "InforNexus": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "BETWEEN",
		//	              "EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Marketo": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "LESS_THAN",
		//	              "GREATER_THAN",
		//	              "BETWEEN",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Pardot": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "EQUAL_TO",
		//	              "NO_OP",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "S3": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "LESS_THAN",
		//	              "GREATER_THAN",
		//	              "BETWEEN",
		//	              "LESS_THAN_OR_EQUAL_TO",
		//	              "GREATER_THAN_OR_EQUAL_TO",
		//	              "EQUAL_TO",
		//	              "NOT_EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "SAPOData": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "LESS_THAN",
		//	              "CONTAINS",
		//	              "GREATER_THAN",
		//	              "BETWEEN",
		//	              "LESS_THAN_OR_EQUAL_TO",
		//	              "GREATER_THAN_OR_EQUAL_TO",
		//	              "EQUAL_TO",
		//	              "NOT_EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Salesforce": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "LESS_THAN",
		//	              "CONTAINS",
		//	              "GREATER_THAN",
		//	              "BETWEEN",
		//	              "LESS_THAN_OR_EQUAL_TO",
		//	              "GREATER_THAN_OR_EQUAL_TO",
		//	              "EQUAL_TO",
		//	              "NOT_EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "ServiceNow": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "LESS_THAN",
		//	              "CONTAINS",
		//	              "GREATER_THAN",
		//	              "BETWEEN",
		//	              "LESS_THAN_OR_EQUAL_TO",
		//	              "GREATER_THAN_OR_EQUAL_TO",
		//	              "EQUAL_TO",
		//	              "NOT_EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Singular": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Slack": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "BETWEEN",
		//	              "EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Trendmicro": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Veeva": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "LESS_THAN",
		//	              "GREATER_THAN",
		//	              "BETWEEN",
		//	              "LESS_THAN_OR_EQUAL_TO",
		//	              "GREATER_THAN_OR_EQUAL_TO",
		//	              "EQUAL_TO",
		//	              "NOT_EQUAL_TO",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Zendesk": {
		//	            "enum": [
		//	              "PROJECTION",
		//	              "GREATER_THAN",
		//	              "ADDITION",
		//	              "MULTIPLICATION",
		//	              "DIVISION",
		//	              "SUBTRACTION",
		//	              "MASK_ALL",
		//	              "MASK_FIRST_N",
		//	              "MASK_LAST_N",
		//	              "VALIDATE_NON_NULL",
		//	              "VALIDATE_NON_ZERO",
		//	              "VALIDATE_NON_NEGATIVE",
		//	              "VALIDATE_NUMERIC",
		//	              "NO_OP"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "DestinationField": {
		//	        "description": "A field value on which source field should be validated",
		//	        "maxLength": 256,
		//	        "type": "string"
		//	      },
		//	      "SourceFields": {
		//	        "description": "Source fields on which particular task will be applied",
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "TaskProperties": {
		//	        "description": "A Map used to store task related info",
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "An object used to store task related info",
		//	          "properties": {
		//	            "Key": {
		//	              "enum": [
		//	                "VALUE",
		//	                "VALUES",
		//	                "DATA_TYPE",
		//	                "UPPER_BOUND",
		//	                "LOWER_BOUND",
		//	                "SOURCE_DATA_TYPE",
		//	                "DESTINATION_DATA_TYPE",
		//	                "VALIDATION_ACTION",
		//	                "MASK_VALUE",
		//	                "MASK_LENGTH",
		//	                "TRUNCATE_LENGTH",
		//	                "MATH_OPERATION_FIELDS_ORDER",
		//	                "CONCAT_FORMAT",
		//	                "SUBFIELD_CATEGORY_MAP",
		//	                "EXCLUDE_SOURCE_FIELDS_LIST",
		//	                "INCLUDE_NEW_FIELDS",
		//	                "ORDERED_PARTITION_KEYS_LIST"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "maxLength": 2048,
		//	              "pattern": ".+",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Key",
		//	            "Value"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "TaskType": {
		//	        "description": "Type of task",
		//	        "enum": [
		//	          "Arithmetic",
		//	          "Filter",
		//	          "Map",
		//	          "Map_all",
		//	          "Mask",
		//	          "Merge",
		//	          "Passthrough",
		//	          "Truncate",
		//	          "Validate",
		//	          "Partition"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "SourceFields",
		//	      "TaskType"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tasks": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ConnectorOperator
					"connector_operator": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Amplitude
							"amplitude": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: CustomConnector
							"custom_connector": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Datadog
							"datadog": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Dynatrace
							"dynatrace": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: GoogleAnalytics
							"google_analytics": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: InforNexus
							"infor_nexus": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Marketo
							"marketo": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Pardot
							"pardot": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: S3
							"s3": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SAPOData
							"sapo_data": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Salesforce
							"salesforce": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ServiceNow
							"service_now": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Singular
							"singular": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Slack
							"slack": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Trendmicro
							"trendmicro": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Veeva
							"veeva": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Zendesk
							"zendesk": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Operation to be performed on provided source fields",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: DestinationField
					"destination_field": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A field value on which source field should be validated",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: SourceFields
					"source_fields": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "Source fields on which particular task will be applied",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: TaskProperties
					"task_properties": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "A Map used to store task related info",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: TaskType
					"task_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Type of task",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of tasks for the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TriggerConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Trigger settings of the flow.",
		//	  "properties": {
		//	    "TriggerProperties": {
		//	      "additionalProperties": false,
		//	      "description": "Details required based on the type of trigger",
		//	      "properties": {
		//	        "DataPullMode": {
		//	          "enum": [
		//	            "Incremental",
		//	            "Complete"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "FirstExecutionFrom": {
		//	          "type": "number"
		//	        },
		//	        "FlowErrorDeactivationThreshold": {
		//	          "maximum": 100,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "ScheduleEndTime": {
		//	          "type": "number"
		//	        },
		//	        "ScheduleExpression": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "ScheduleOffset": {
		//	          "maximum": 36000,
		//	          "minimum": 0,
		//	          "type": "number"
		//	        },
		//	        "ScheduleStartTime": {
		//	          "type": "number"
		//	        },
		//	        "TimeZone": {
		//	          "maxLength": 256,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "ScheduleExpression"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "TriggerType": {
		//	      "description": "Trigger type of the flow",
		//	      "enum": [
		//	        "Scheduled",
		//	        "Event",
		//	        "OnDemand"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "TriggerType"
		//	  ],
		//	  "type": "object"
		//	}
		"trigger_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: TriggerProperties
				"trigger_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DataPullMode
						"data_pull_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: FirstExecutionFrom
						"first_execution_from": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: FlowErrorDeactivationThreshold
						"flow_error_deactivation_threshold": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ScheduleEndTime
						"schedule_end_time": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ScheduleExpression
						"schedule_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ScheduleOffset
						"schedule_offset": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ScheduleStartTime
						"schedule_start_time": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TimeZone
						"time_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Details required based on the type of trigger",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TriggerType
				"trigger_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Trigger type of the flow",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Trigger settings of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::AppFlow::Flow",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppFlow::Flow").WithTerraformTypeName("awscc_appflow_flow")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"aggregation_config":                "AggregationConfig",
		"aggregation_type":                  "AggregationType",
		"amplitude":                         "Amplitude",
		"api_version":                       "ApiVersion",
		"bucket_name":                       "BucketName",
		"bucket_prefix":                     "BucketPrefix",
		"connector_operator":                "ConnectorOperator",
		"connector_profile_name":            "ConnectorProfileName",
		"connector_type":                    "ConnectorType",
		"custom_connector":                  "CustomConnector",
		"custom_properties":                 "CustomProperties",
		"data_pull_mode":                    "DataPullMode",
		"data_transfer_api":                 "DataTransferApi",
		"database_name":                     "DatabaseName",
		"datadog":                           "Datadog",
		"datetime_type_field_name":          "DatetimeTypeFieldName",
		"description":                       "Description",
		"destination_connector_properties":  "DestinationConnectorProperties",
		"destination_field":                 "DestinationField",
		"destination_flow_config_list":      "DestinationFlowConfigList",
		"document_type":                     "DocumentType",
		"dynatrace":                         "Dynatrace",
		"enable_dynamic_field_update":       "EnableDynamicFieldUpdate",
		"entity_name":                       "EntityName",
		"error_handling_config":             "ErrorHandlingConfig",
		"event_bridge":                      "EventBridge",
		"fail_on_first_error":               "FailOnFirstError",
		"file_type":                         "FileType",
		"first_execution_from":              "FirstExecutionFrom",
		"flow_arn":                          "FlowArn",
		"flow_error_deactivation_threshold": "FlowErrorDeactivationThreshold",
		"flow_name":                         "FlowName",
		"flow_status":                       "FlowStatus",
		"glue_data_catalog":                 "GlueDataCatalog",
		"google_analytics":                  "GoogleAnalytics",
		"id_field_names":                    "IdFieldNames",
		"include_all_versions":              "IncludeAllVersions",
		"include_deleted_records":           "IncludeDeletedRecords",
		"include_renditions":                "IncludeRenditions",
		"include_source_files":              "IncludeSourceFiles",
		"incremental_pull_config":           "IncrementalPullConfig",
		"infor_nexus":                       "InforNexus",
		"intermediate_bucket_name":          "IntermediateBucketName",
		"key":                               "Key",
		"kms_arn":                           "KMSArn",
		"lookout_metrics":                   "LookoutMetrics",
		"marketo":                           "Marketo",
		"max_page_size":                     "maxPageSize",
		"max_parallelism":                   "maxParallelism",
		"metadata_catalog_config":           "MetadataCatalogConfig",
		"name":                              "Name",
		"object":                            "Object",
		"object_path":                       "ObjectPath",
		"pagination_config":                 "paginationConfig",
		"parallelism_config":                "parallelismConfig",
		"pardot":                            "Pardot",
		"path_prefix_hierarchy":             "PathPrefixHierarchy",
		"prefix_config":                     "PrefixConfig",
		"prefix_format":                     "PrefixFormat",
		"prefix_type":                       "PrefixType",
		"preserve_source_data_typing":       "PreserveSourceDataTyping",
		"redshift":                          "Redshift",
		"role_arn":                          "RoleArn",
		"s3":                                "S3",
		"s3_input_file_type":                "S3InputFileType",
		"s3_input_format_config":            "S3InputFormatConfig",
		"s3_output_format_config":           "S3OutputFormatConfig",
		"salesforce":                        "Salesforce",
		"sapo_data":                         "SAPOData",
		"schedule_end_time":                 "ScheduleEndTime",
		"schedule_expression":               "ScheduleExpression",
		"schedule_offset":                   "ScheduleOffset",
		"schedule_start_time":               "ScheduleStartTime",
		"service_now":                       "ServiceNow",
		"singular":                          "Singular",
		"slack":                             "Slack",
		"snowflake":                         "Snowflake",
		"source_connector_properties":       "SourceConnectorProperties",
		"source_fields":                     "SourceFields",
		"source_flow_config":                "SourceFlowConfig",
		"success_response_handling_config":  "SuccessResponseHandlingConfig",
		"table_prefix":                      "TablePrefix",
		"tags":                              "Tags",
		"target_file_size":                  "TargetFileSize",
		"task_properties":                   "TaskProperties",
		"task_type":                         "TaskType",
		"tasks":                             "Tasks",
		"time_zone":                         "TimeZone",
		"trendmicro":                        "Trendmicro",
		"trigger_config":                    "TriggerConfig",
		"trigger_properties":                "TriggerProperties",
		"trigger_type":                      "TriggerType",
		"type":                              "Type",
		"upsolver":                          "Upsolver",
		"value":                             "Value",
		"veeva":                             "Veeva",
		"write_operation_type":              "WriteOperationType",
		"zendesk":                           "Zendesk",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
