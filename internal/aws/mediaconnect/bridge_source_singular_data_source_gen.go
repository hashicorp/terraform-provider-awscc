// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package mediaconnect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_mediaconnect_bridge_source", bridgeSourceDataSource)
}

// bridgeSourceDataSource returns the Terraform awscc_mediaconnect_bridge_source data source.
// This Terraform data source corresponds to the CloudFormation AWS::MediaConnect::BridgeSource resource.
func bridgeSourceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: BridgeArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Number (ARN) of the bridge.",
		//	  "type": "string"
		//	}
		"bridge_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Number (ARN) of the bridge.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FlowSource
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.",
		//	  "properties": {
		//	    "FlowArn": {
		//	      "description": "The ARN of the cloud flow used as a source of this bridge.",
		//	      "type": "string"
		//	    },
		//	    "FlowVpcInterfaceAttachment": {
		//	      "additionalProperties": false,
		//	      "description": "The name of the VPC interface attachment to use for this source.",
		//	      "properties": {
		//	        "VpcInterfaceName": {
		//	          "description": "The name of the VPC interface to use for this resource.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "FlowArn"
		//	  ],
		//	  "type": "object"
		//	}
		"flow_source": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: FlowArn
				"flow_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the cloud flow used as a source of this bridge.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: FlowVpcInterfaceAttachment
				"flow_vpc_interface_attachment": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: VpcInterfaceName
						"vpc_interface_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the VPC interface to use for this resource.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The name of the VPC interface attachment to use for this source.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The source of the bridge. A flow source originates in MediaConnect as an existing cloud flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the source.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the source.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkSource
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The source of the bridge. A network source originates at your premises.",
		//	  "properties": {
		//	    "MulticastIp": {
		//	      "description": "The network source multicast IP.",
		//	      "type": "string"
		//	    },
		//	    "MulticastSourceSettings": {
		//	      "additionalProperties": false,
		//	      "description": "The settings related to the multicast source.",
		//	      "properties": {
		//	        "MulticastSourceIp": {
		//	          "description": "The IP address of the source for source-specific multicast (SSM).",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "NetworkName": {
		//	      "description": "The network source's gateway network name.",
		//	      "type": "string"
		//	    },
		//	    "Port": {
		//	      "description": "The network source port.",
		//	      "type": "integer"
		//	    },
		//	    "Protocol": {
		//	      "description": "The network source protocol.",
		//	      "enum": [
		//	        "rtp-fec",
		//	        "rtp",
		//	        "udp"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Protocol",
		//	    "MulticastIp",
		//	    "Port",
		//	    "NetworkName"
		//	  ],
		//	  "type": "object"
		//	}
		"network_source": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MulticastIp
				"multicast_ip": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The network source multicast IP.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MulticastSourceSettings
				"multicast_source_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MulticastSourceIp
						"multicast_source_ip": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The IP address of the source for source-specific multicast (SSM).",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The settings related to the multicast source.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: NetworkName
				"network_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The network source's gateway network name.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Port
				"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The network source port.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Protocol
				"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The network source protocol.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The source of the bridge. A network source originates at your premises.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::MediaConnect::BridgeSource",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::MediaConnect::BridgeSource").WithTerraformTypeName("awscc_mediaconnect_bridge_source")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"bridge_arn":                    "BridgeArn",
		"flow_arn":                      "FlowArn",
		"flow_source":                   "FlowSource",
		"flow_vpc_interface_attachment": "FlowVpcInterfaceAttachment",
		"multicast_ip":                  "MulticastIp",
		"multicast_source_ip":           "MulticastSourceIp",
		"multicast_source_settings":     "MulticastSourceSettings",
		"name":                          "Name",
		"network_name":                  "NetworkName",
		"network_source":                "NetworkSource",
		"port":                          "Port",
		"protocol":                      "Protocol",
		"vpc_interface_name":            "VpcInterfaceName",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
