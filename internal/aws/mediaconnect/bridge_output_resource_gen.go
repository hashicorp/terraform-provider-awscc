// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package mediaconnect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_mediaconnect_bridge_output", bridgeOutputResource)
}

// bridgeOutputResource returns the Terraform awscc_mediaconnect_bridge_output resource.
// This Terraform resource corresponds to the CloudFormation AWS::MediaConnect::BridgeOutput resource.
func bridgeOutputResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: BridgeArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Number (ARN) of the bridge.",
		//	  "type": "string"
		//	}
		"bridge_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Number (ARN) of the bridge.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The network output name.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The network output name.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NetworkOutput
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The output of the bridge.",
		//	  "properties": {
		//	    "IpAddress": {
		//	      "description": "The network output IP Address.",
		//	      "type": "string"
		//	    },
		//	    "NetworkName": {
		//	      "description": "The network output's gateway network name.",
		//	      "type": "string"
		//	    },
		//	    "Port": {
		//	      "description": "The network output port.",
		//	      "type": "integer"
		//	    },
		//	    "Protocol": {
		//	      "description": "The network output protocol.",
		//	      "enum": [
		//	        "rtp-fec",
		//	        "rtp",
		//	        "udp"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Ttl": {
		//	      "description": "The network output TTL.",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "Protocol",
		//	    "IpAddress",
		//	    "Port",
		//	    "NetworkName",
		//	    "Ttl"
		//	  ],
		//	  "type": "object"
		//	}
		"network_output": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: IpAddress
				"ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The network output IP Address.",
					Required:    true,
				}, /*END ATTRIBUTE*/
				// Property: NetworkName
				"network_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The network output's gateway network name.",
					Required:    true,
				}, /*END ATTRIBUTE*/
				// Property: Port
				"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The network output port.",
					Required:    true,
				}, /*END ATTRIBUTE*/
				// Property: Protocol
				"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The network output protocol.",
					Required:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"rtp-fec",
							"rtp",
							"udp",
						),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
				// Property: Ttl
				"ttl": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The network output TTL.",
					Required:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The output of the bridge.",
			Required:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource schema for AWS::MediaConnect::BridgeOutput",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::MediaConnect::BridgeOutput").WithTerraformTypeName("awscc_mediaconnect_bridge_output")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "bridge_arn",
			Description:       "The Amazon Resource Number (ARN) of the bridge",
			RequiredForImport: true,
		},
		identity.Identifier{
			Name:              "name",
			Description:       "The network output name",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"bridge_arn":     "BridgeArn",
		"ip_address":     "IpAddress",
		"name":           "Name",
		"network_name":   "NetworkName",
		"network_output": "NetworkOutput",
		"port":           "Port",
		"protocol":       "Protocol",
		"ttl":            "Ttl",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
