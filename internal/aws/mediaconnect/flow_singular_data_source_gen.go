// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package mediaconnect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_mediaconnect_flow", flowDataSource)
}

// flowDataSource returns the Terraform awscc_mediaconnect_flow data source.
// This Terraform data source corresponds to the CloudFormation AWS::MediaConnect::Flow resource.
func flowDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AvailabilityZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.",
		//	  "type": "string"
		//	}
		"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EgressIp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IP address from which video will be sent to output destinations.",
		//	  "type": "string"
		//	}
		"egress_ip": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IP address from which video will be sent to output destinations.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FlowArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.",
		//	  "type": "string"
		//	}
		"flow_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FlowAvailabilityZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.(ReadOnly)",
		//	  "type": "string"
		//	}
		"flow_availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.(ReadOnly)",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Maintenance
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The maintenance settings you want to use for the flow.",
		//	  "properties": {
		//	    "MaintenanceDay": {
		//	      "description": "A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.",
		//	      "enum": [
		//	        "Monday",
		//	        "Tuesday",
		//	        "Wednesday",
		//	        "Thursday",
		//	        "Friday",
		//	        "Saturday",
		//	        "Sunday"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "MaintenanceStartHour": {
		//	      "description": "UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "MaintenanceDay",
		//	    "MaintenanceStartHour"
		//	  ],
		//	  "type": "object"
		//	}
		"maintenance": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MaintenanceDay
				"maintenance_day": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A day of a week when the maintenance will happen. Use Monday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MaintenanceStartHour
				"maintenance_start_hour": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "UTC time when the maintenance will happen. Use 24-hour HH:MM format. Minutes must be 00. Example: 13:00. The default value is 02:00.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The maintenance settings you want to use for the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MediaStreams
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The media streams associated with the flow. You can associate any of these media streams with sources and outputs on the flow.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.",
		//	    "properties": {
		//	      "Attributes": {
		//	        "additionalProperties": false,
		//	        "description": "Attributes that are related to the media stream.",
		//	        "properties": {
		//	          "Fmtp": {
		//	            "additionalProperties": false,
		//	            "description": "A set of parameters that define the media stream.",
		//	            "properties": {
		//	              "ChannelOrder": {
		//	                "description": "The format of the audio channel.",
		//	                "type": "string"
		//	              },
		//	              "Colorimetry": {
		//	                "description": "The format used for the representation of color.",
		//	                "enum": [
		//	                  "BT601",
		//	                  "BT709",
		//	                  "BT2020",
		//	                  "BT2100",
		//	                  "ST2065-1",
		//	                  "ST2065-3",
		//	                  "XYZ"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "ExactFramerate": {
		//	                "description": "The frame rate for the video stream, in frames/second. For example: 60000/1001.",
		//	                "type": "string"
		//	              },
		//	              "Par": {
		//	                "description": "The pixel aspect ratio (PAR) of the video.",
		//	                "type": "string"
		//	              },
		//	              "Range": {
		//	                "description": "The encoding range of the video.",
		//	                "enum": [
		//	                  "NARROW",
		//	                  "FULL",
		//	                  "FULLPROTECT"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "ScanMode": {
		//	                "description": "The type of compression that was used to smooth the video's appearance.",
		//	                "enum": [
		//	                  "progressive",
		//	                  "interlace",
		//	                  "progressive-segmented-frame"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "Tcs": {
		//	                "description": "The transfer characteristic system (TCS) that is used in the video.",
		//	                "enum": [
		//	                  "SDR",
		//	                  "PQ",
		//	                  "HLG",
		//	                  "LINEAR",
		//	                  "BT2100LINPQ",
		//	                  "BT2100LINHLG",
		//	                  "ST2065-1",
		//	                  "ST428-1",
		//	                  "DENSITY"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Lang": {
		//	            "description": "The audio language, in a format that is recognized by the receiver.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "ClockRate": {
		//	        "description": "The sample rate for the stream. This value in measured in kHz.",
		//	        "type": "integer"
		//	      },
		//	      "Description": {
		//	        "description": "A description that can help you quickly identify what your media stream is used for.",
		//	        "type": "string"
		//	      },
		//	      "Fmt": {
		//	        "description": "The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.",
		//	        "type": "integer"
		//	      },
		//	      "MediaStreamId": {
		//	        "description": "A unique identifier for the media stream.",
		//	        "type": "integer"
		//	      },
		//	      "MediaStreamName": {
		//	        "description": "A name that helps you distinguish one media stream from another.",
		//	        "type": "string"
		//	      },
		//	      "MediaStreamType": {
		//	        "description": "The type of media stream.",
		//	        "enum": [
		//	          "video",
		//	          "audio",
		//	          "ancillary-data"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "VideoFormat": {
		//	        "description": "The resolution of the video.",
		//	        "enum": [
		//	          "2160p",
		//	          "1080p",
		//	          "1080i",
		//	          "720p",
		//	          "480p"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "MediaStreamId",
		//	      "MediaStreamType",
		//	      "MediaStreamName"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"media_streams": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Attributes
					"attributes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Fmtp
							"fmtp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ChannelOrder
									"channel_order": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The format of the audio channel.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Colorimetry
									"colorimetry": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The format used for the representation of color.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: ExactFramerate
									"exact_framerate": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The frame rate for the video stream, in frames/second. For example: 60000/1001.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Par
									"par": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The pixel aspect ratio (PAR) of the video.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Range
									"range": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The encoding range of the video.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: ScanMode
									"scan_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The type of compression that was used to smooth the video's appearance.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Tcs
									"tcs": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The transfer characteristic system (TCS) that is used in the video.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "A set of parameters that define the media stream.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Lang
							"lang": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The audio language, in a format that is recognized by the receiver.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Attributes that are related to the media stream.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ClockRate
					"clock_rate": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The sample rate for the stream. This value in measured in kHz.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Description
					"description": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A description that can help you quickly identify what your media stream is used for.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Fmt
					"fmt": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The format type number (sometimes referred to as RTP payload type) of the media stream. MediaConnect assigns this value to the media stream. For ST 2110 JPEG XS outputs, you need to provide this value to the receiver.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MediaStreamId
					"media_stream_id": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "A unique identifier for the media stream.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MediaStreamName
					"media_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A name that helps you distinguish one media stream from another.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MediaStreamType
					"media_stream_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The type of media stream.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: VideoFormat
					"video_format": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The resolution of the video.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The media streams associated with the flow. You can associate any of these media streams with sources and outputs on the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the flow.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Source
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The source of the flow.",
		//	  "properties": {
		//	    "Decryption": {
		//	      "additionalProperties": false,
		//	      "description": "The type of decryption that is used on the content ingested from this source.",
		//	      "properties": {
		//	        "Algorithm": {
		//	          "description": "The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).",
		//	          "enum": [
		//	            "aes128",
		//	            "aes192",
		//	            "aes256"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "ConstantInitializationVector": {
		//	          "description": "A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.",
		//	          "type": "string"
		//	        },
		//	        "DeviceId": {
		//	          "description": "The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
		//	          "type": "string"
		//	        },
		//	        "KeyType": {
		//	          "default": "static-key",
		//	          "description": "The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).",
		//	          "enum": [
		//	            "speke",
		//	            "static-key",
		//	            "srt-password"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "Region": {
		//	          "description": "The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
		//	          "type": "string"
		//	        },
		//	        "ResourceId": {
		//	          "description": "An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
		//	          "type": "string"
		//	        },
		//	        "RoleArn": {
		//	          "description": "The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).",
		//	          "type": "string"
		//	        },
		//	        "SecretArn": {
		//	          "description": " The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.",
		//	          "type": "string"
		//	        },
		//	        "Url": {
		//	          "description": "The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "RoleArn"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Description": {
		//	      "description": "A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.",
		//	      "type": "string"
		//	    },
		//	    "EntitlementArn": {
		//	      "description": "The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.",
		//	      "type": "string"
		//	    },
		//	    "GatewayBridgeSource": {
		//	      "additionalProperties": false,
		//	      "description": "The source configuration for cloud flows receiving a stream from a bridge.",
		//	      "properties": {
		//	        "BridgeArn": {
		//	          "description": "The ARN of the bridge feeding this flow.",
		//	          "type": "string"
		//	        },
		//	        "VpcInterfaceAttachment": {
		//	          "additionalProperties": false,
		//	          "description": "The name of the VPC interface attachment to use for this bridge source.",
		//	          "properties": {
		//	            "VpcInterfaceName": {
		//	              "description": "The name of the VPC interface to use for this resource.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "BridgeArn"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "IngestIp": {
		//	      "description": "The IP address that the flow will be listening on for incoming content.",
		//	      "type": "string"
		//	    },
		//	    "IngestPort": {
		//	      "description": "The port that the flow will be listening on for incoming content.",
		//	      "type": "integer"
		//	    },
		//	    "MaxBitrate": {
		//	      "description": "The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.",
		//	      "type": "integer"
		//	    },
		//	    "MaxLatency": {
		//	      "description": "The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.",
		//	      "type": "integer"
		//	    },
		//	    "MaxSyncBuffer": {
		//	      "description": "The size of the buffer (in milliseconds) to use to sync incoming source data.",
		//	      "type": "integer"
		//	    },
		//	    "MediaStreamSourceConfigurations": {
		//	      "description": "The media stream that is associated with the source, and the parameters for that association.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "The media stream that is associated with the source, and the parameters for that association.",
		//	        "properties": {
		//	          "EncodingName": {
		//	            "description": "The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.",
		//	            "enum": [
		//	              "jxsv",
		//	              "raw",
		//	              "smpte291",
		//	              "pcm"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "InputConfigurations": {
		//	            "description": "The media streams that you want to associate with the source.",
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "The transport parameters associated with an incoming media stream.",
		//	              "properties": {
		//	                "InputPort": {
		//	                  "description": "The port that the flow listens on for an incoming media stream.",
		//	                  "type": "integer"
		//	                },
		//	                "Interface": {
		//	                  "additionalProperties": false,
		//	                  "description": "The VPC interface where the media stream comes in from.",
		//	                  "properties": {
		//	                    "Name": {
		//	                      "description": "The name of the VPC interface that you want to use for the media stream associated with the output.",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Name"
		//	                  ],
		//	                  "type": "object"
		//	                }
		//	              },
		//	              "required": [
		//	                "InputPort",
		//	                "Interface"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "MediaStreamName": {
		//	            "description": "A name that helps you distinguish one media stream from another.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "EncodingName",
		//	          "MediaStreamName"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "MinLatency": {
		//	      "description": "The minimum latency in milliseconds.",
		//	      "type": "integer"
		//	    },
		//	    "Name": {
		//	      "description": "The name of the source.",
		//	      "type": "string"
		//	    },
		//	    "Protocol": {
		//	      "description": "The protocol that is used by the source.",
		//	      "enum": [
		//	        "zixi-push",
		//	        "rtp-fec",
		//	        "rtp",
		//	        "rist",
		//	        "fujitsu-qos",
		//	        "srt-listener",
		//	        "srt-caller",
		//	        "st2110-jpegxs",
		//	        "cdi"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "SenderControlPort": {
		//	      "description": "The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.",
		//	      "type": "integer"
		//	    },
		//	    "SenderIpAddress": {
		//	      "description": "The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.",
		//	      "type": "string"
		//	    },
		//	    "SourceArn": {
		//	      "description": "The ARN of the source.",
		//	      "type": "string"
		//	    },
		//	    "SourceIngestPort": {
		//	      "description": "The port that the flow will be listening on for incoming content.(ReadOnly)",
		//	      "type": "string"
		//	    },
		//	    "SourceListenerAddress": {
		//	      "description": "Source IP or domain name for SRT-caller protocol.",
		//	      "type": "string"
		//	    },
		//	    "SourceListenerPort": {
		//	      "description": "Source port for SRT-caller protocol.",
		//	      "type": "integer"
		//	    },
		//	    "StreamId": {
		//	      "description": "The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.",
		//	      "type": "string"
		//	    },
		//	    "VpcInterfaceName": {
		//	      "description": "The name of the VPC Interface this Source is configured with.",
		//	      "type": "string"
		//	    },
		//	    "WhitelistCidr": {
		//	      "description": "The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"source": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Decryption
				"decryption": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Algorithm
						"algorithm": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ConstantInitializationVector
						"constant_initialization_vector": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DeviceId
						"device_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: KeyType
						"key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Region
						"region": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ResourceId
						"resource_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RoleArn
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SecretArn
						"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: " The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Url
						"url": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The type of decryption that is used on the content ingested from this source.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Description
				"description": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: EntitlementArn
				"entitlement_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: GatewayBridgeSource
				"gateway_bridge_source": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BridgeArn
						"bridge_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN of the bridge feeding this flow.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: VpcInterfaceAttachment
						"vpc_interface_attachment": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: VpcInterfaceName
								"vpc_interface_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the VPC interface to use for this resource.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The name of the VPC interface attachment to use for this bridge source.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The source configuration for cloud flows receiving a stream from a bridge.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IngestIp
				"ingest_ip": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The IP address that the flow will be listening on for incoming content.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IngestPort
				"ingest_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The port that the flow will be listening on for incoming content.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MaxBitrate
				"max_bitrate": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MaxLatency
				"max_latency": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The maximum latency in milliseconds. This parameter applies only to RIST-based and Zixi-based streams.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MaxSyncBuffer
				"max_sync_buffer": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The size of the buffer (in milliseconds) to use to sync incoming source data.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MediaStreamSourceConfigurations
				"media_stream_source_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: EncodingName
							"encoding_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The format that was used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: InputConfigurations
							"input_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: InputPort
										"input_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Description: "The port that the flow listens on for an incoming media stream.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: Interface
										"interface": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Name
												"name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the VPC interface that you want to use for the media stream associated with the output.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Description: "The VPC interface where the media stream comes in from.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "The media streams that you want to associate with the source.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: MediaStreamName
							"media_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A name that helps you distinguish one media stream from another.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The media stream that is associated with the source, and the parameters for that association.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: MinLatency
				"min_latency": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The minimum latency in milliseconds.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Name
				"name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The name of the source.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Protocol
				"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The protocol that is used by the source.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SenderControlPort
				"sender_control_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The port that the flow uses to send outbound requests to initiate connection with the sender for fujitsu-qos protocol.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SenderIpAddress
				"sender_ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The IP address that the flow communicates with to initiate connection with the sender for fujitsu-qos protocol.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SourceArn
				"source_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the source.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SourceIngestPort
				"source_ingest_port": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The port that the flow will be listening on for incoming content.(ReadOnly)",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SourceListenerAddress
				"source_listener_address": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Source IP or domain name for SRT-caller protocol.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SourceListenerPort
				"source_listener_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Source port for SRT-caller protocol.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: StreamId
				"stream_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: VpcInterfaceName
				"vpc_interface_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The name of the VPC Interface this Source is configured with.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: WhitelistCidr
				"whitelist_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The source of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceFailoverConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The source failover config of the flow.",
		//	  "properties": {
		//	    "FailoverMode": {
		//	      "description": "The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.",
		//	      "enum": [
		//	        "MERGE",
		//	        "FAILOVER"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "RecoveryWindow": {
		//	      "description": "Search window time to look for dash-7 packets",
		//	      "type": "integer"
		//	    },
		//	    "SourcePriority": {
		//	      "additionalProperties": false,
		//	      "description": "The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.",
		//	      "properties": {
		//	        "PrimarySource": {
		//	          "description": "The name of the source you choose as the primary source for this flow.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "PrimarySource"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "State": {
		//	      "enum": [
		//	        "ENABLED",
		//	        "DISABLED"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"source_failover_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: FailoverMode
				"failover_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The type of failover you choose for this flow. MERGE combines the source streams into a single stream, allowing graceful recovery from any single-source loss. FAILOVER allows switching between different streams.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RecoveryWindow
				"recovery_window": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Search window time to look for dash-7 packets",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SourcePriority
				"source_priority": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: PrimarySource
						"primary_source": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the source you choose as the primary source for this flow.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The priority you want to assign to a source. You can have a primary stream and a backup stream or two equally prioritized streams.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: State
				"state": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The source failover config of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceMonitoringConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The source monitoring config of the flow.",
		//	  "properties": {
		//	    "AudioMonitoringSettings": {
		//	      "description": "Contains the settings for audio stream metrics monitoring.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies the configuration for audio stream metrics monitoring.",
		//	        "properties": {
		//	          "SilentAudio": {
		//	            "additionalProperties": false,
		//	            "description": "Configures settings for the SilentAudio metric.",
		//	            "properties": {
		//	              "State": {
		//	                "description": "Indicates whether the SilentAudio metric is enabled or disabled.",
		//	                "enum": [
		//	                  "ENABLED",
		//	                  "DISABLED"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "ThresholdSeconds": {
		//	                "description": "Specifies the number of consecutive seconds of silence that triggers an event or alert.",
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "ContentQualityAnalysisState": {
		//	      "description": "Indicates whether content quality analysis is enabled or disabled.",
		//	      "enum": [
		//	        "ENABLED",
		//	        "DISABLED"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "ThumbnailState": {
		//	      "description": "The state of thumbnail monitoring.",
		//	      "enum": [
		//	        "ENABLED",
		//	        "DISABLED"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "VideoMonitoringSettings": {
		//	      "description": "Contains the settings for video stream metrics monitoring.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies the configuration for video stream metrics monitoring.",
		//	        "properties": {
		//	          "BlackFrames": {
		//	            "additionalProperties": false,
		//	            "description": "Configures settings for the BlackFrames metric.",
		//	            "properties": {
		//	              "State": {
		//	                "description": "Indicates whether the BlackFrames metric is enabled or disabled.",
		//	                "enum": [
		//	                  "ENABLED",
		//	                  "DISABLED"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "ThresholdSeconds": {
		//	                "description": "Specifies the number of consecutive seconds of black frames that triggers an event or alert.",
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "FrozenFrames": {
		//	            "additionalProperties": false,
		//	            "description": "Configures settings for the FrozenFrames metric.",
		//	            "properties": {
		//	              "State": {
		//	                "description": "Indicates whether the FrozenFrames metric is enabled or disabled.",
		//	                "enum": [
		//	                  "ENABLED",
		//	                  "DISABLED"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "ThresholdSeconds": {
		//	                "description": "Specifies the number of consecutive seconds of a static image that triggers an event or alert.",
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"source_monitoring_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AudioMonitoringSettings
				"audio_monitoring_settings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: SilentAudio
							"silent_audio": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: State
									"state": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Indicates whether the SilentAudio metric is enabled or disabled.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: ThresholdSeconds
									"threshold_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Specifies the number of consecutive seconds of silence that triggers an event or alert.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Configures settings for the SilentAudio metric.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Contains the settings for audio stream metrics monitoring.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ContentQualityAnalysisState
				"content_quality_analysis_state": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether content quality analysis is enabled or disabled.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ThumbnailState
				"thumbnail_state": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The state of thumbnail monitoring.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: VideoMonitoringSettings
				"video_monitoring_settings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: BlackFrames
							"black_frames": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: State
									"state": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Indicates whether the BlackFrames metric is enabled or disabled.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: ThresholdSeconds
									"threshold_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Specifies the number of consecutive seconds of black frames that triggers an event or alert.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Configures settings for the BlackFrames metric.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: FrozenFrames
							"frozen_frames": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: State
									"state": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Indicates whether the FrozenFrames metric is enabled or disabled.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: ThresholdSeconds
									"threshold_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Specifies the number of consecutive seconds of a static image that triggers an event or alert.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Configures settings for the FrozenFrames metric.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Contains the settings for video stream metrics monitoring.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The source monitoring config of the flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcInterfaces
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The VPC interfaces that you added to this flow.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The details of a VPC interface.",
		//	    "properties": {
		//	      "Name": {
		//	        "description": "Immutable and has to be a unique against other VpcInterfaces in this Flow.",
		//	        "type": "string"
		//	      },
		//	      "NetworkInterfaceIds": {
		//	        "description": "IDs of the network interfaces created in customer's account by MediaConnect.",
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "NetworkInterfaceType": {
		//	        "description": "The type of network adapter that you want MediaConnect to use on this interface. If you don't set this value, it defaults to ENA.",
		//	        "enum": [
		//	          "ena",
		//	          "efa"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "RoleArn": {
		//	        "description": "Role Arn MediaConnect can assume to create ENIs in customer's account.",
		//	        "type": "string"
		//	      },
		//	      "SecurityGroupIds": {
		//	        "description": "Security Group IDs to be used on ENI.",
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "SubnetId": {
		//	        "description": "Subnet must be in the AZ of the Flow",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Name",
		//	      "RoleArn",
		//	      "SecurityGroupIds",
		//	      "SubnetId"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"vpc_interfaces": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Immutable and has to be a unique against other VpcInterfaces in this Flow.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: NetworkInterfaceIds
					"network_interface_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "IDs of the network interfaces created in customer's account by MediaConnect.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: NetworkInterfaceType
					"network_interface_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The type of network adapter that you want MediaConnect to use on this interface. If you don't set this value, it defaults to ENA.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: RoleArn
					"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Role Arn MediaConnect can assume to create ENIs in customer's account.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: SecurityGroupIds
					"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "Security Group IDs to be used on ENI.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: SubnetId
					"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Subnet must be in the AZ of the Flow",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The VPC interfaces that you added to this flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::MediaConnect::Flow",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::MediaConnect::Flow").WithTerraformTypeName("awscc_mediaconnect_flow")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"algorithm":                          "Algorithm",
		"attributes":                         "Attributes",
		"audio_monitoring_settings":          "AudioMonitoringSettings",
		"availability_zone":                  "AvailabilityZone",
		"black_frames":                       "BlackFrames",
		"bridge_arn":                         "BridgeArn",
		"channel_order":                      "ChannelOrder",
		"clock_rate":                         "ClockRate",
		"colorimetry":                        "Colorimetry",
		"constant_initialization_vector":     "ConstantInitializationVector",
		"content_quality_analysis_state":     "ContentQualityAnalysisState",
		"decryption":                         "Decryption",
		"description":                        "Description",
		"device_id":                          "DeviceId",
		"egress_ip":                          "EgressIp",
		"encoding_name":                      "EncodingName",
		"entitlement_arn":                    "EntitlementArn",
		"exact_framerate":                    "ExactFramerate",
		"failover_mode":                      "FailoverMode",
		"flow_arn":                           "FlowArn",
		"flow_availability_zone":             "FlowAvailabilityZone",
		"fmt":                                "Fmt",
		"fmtp":                               "Fmtp",
		"frozen_frames":                      "FrozenFrames",
		"gateway_bridge_source":              "GatewayBridgeSource",
		"ingest_ip":                          "IngestIp",
		"ingest_port":                        "IngestPort",
		"input_configurations":               "InputConfigurations",
		"input_port":                         "InputPort",
		"interface":                          "Interface",
		"key_type":                           "KeyType",
		"lang":                               "Lang",
		"maintenance":                        "Maintenance",
		"maintenance_day":                    "MaintenanceDay",
		"maintenance_start_hour":             "MaintenanceStartHour",
		"max_bitrate":                        "MaxBitrate",
		"max_latency":                        "MaxLatency",
		"max_sync_buffer":                    "MaxSyncBuffer",
		"media_stream_id":                    "MediaStreamId",
		"media_stream_name":                  "MediaStreamName",
		"media_stream_source_configurations": "MediaStreamSourceConfigurations",
		"media_stream_type":                  "MediaStreamType",
		"media_streams":                      "MediaStreams",
		"min_latency":                        "MinLatency",
		"name":                               "Name",
		"network_interface_ids":              "NetworkInterfaceIds",
		"network_interface_type":             "NetworkInterfaceType",
		"par":                                "Par",
		"primary_source":                     "PrimarySource",
		"protocol":                           "Protocol",
		"range":                              "Range",
		"recovery_window":                    "RecoveryWindow",
		"region":                             "Region",
		"resource_id":                        "ResourceId",
		"role_arn":                           "RoleArn",
		"scan_mode":                          "ScanMode",
		"secret_arn":                         "SecretArn",
		"security_group_ids":                 "SecurityGroupIds",
		"sender_control_port":                "SenderControlPort",
		"sender_ip_address":                  "SenderIpAddress",
		"silent_audio":                       "SilentAudio",
		"source":                             "Source",
		"source_arn":                         "SourceArn",
		"source_failover_config":             "SourceFailoverConfig",
		"source_ingest_port":                 "SourceIngestPort",
		"source_listener_address":            "SourceListenerAddress",
		"source_listener_port":               "SourceListenerPort",
		"source_monitoring_config":           "SourceMonitoringConfig",
		"source_priority":                    "SourcePriority",
		"state":                              "State",
		"stream_id":                          "StreamId",
		"subnet_id":                          "SubnetId",
		"tcs":                                "Tcs",
		"threshold_seconds":                  "ThresholdSeconds",
		"thumbnail_state":                    "ThumbnailState",
		"url":                                "Url",
		"video_format":                       "VideoFormat",
		"video_monitoring_settings":          "VideoMonitoringSettings",
		"vpc_interface_attachment":           "VpcInterfaceAttachment",
		"vpc_interface_name":                 "VpcInterfaceName",
		"vpc_interfaces":                     "VpcInterfaces",
		"whitelist_cidr":                     "WhitelistCidr",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
