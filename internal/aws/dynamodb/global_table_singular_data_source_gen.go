// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package dynamodb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_dynamodb_global_table", globalTableDataSource)
}

// globalTableDataSource returns the Terraform awscc_dynamodb_global_table data source.
// This Terraform data source corresponds to the CloudFormation AWS::DynamoDB::GlobalTable resource.
func globalTableDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: AttributeDefinitions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "AttributeName": {
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "AttributeType": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "AttributeName",
		//	      "AttributeType"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"attribute_definitions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AttributeName
					"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: AttributeType
					"attribute_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: BillingMode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"billing_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: GlobalSecondaryIndexes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "IndexName": {
		//	        "maxLength": 255,
		//	        "minLength": 3,
		//	        "type": "string"
		//	      },
		//	      "KeySchema": {
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AttributeName": {
		//	              "maxLength": 255,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            },
		//	            "KeyType": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "KeyType",
		//	            "AttributeName"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "maxItems": 2,
		//	        "minItems": 1,
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "Projection": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "NonKeyAttributes": {
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "maxItems": 20,
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "ProjectionType": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "WarmThroughput": {
		//	        "additionalProperties": false,
		//	        "anyOf": [
		//	          {
		//	            "required": [
		//	              "ReadUnitsPerSecond"
		//	            ]
		//	          },
		//	          {
		//	            "required": [
		//	              "WriteUnitsPerSecond"
		//	            ]
		//	          }
		//	        ],
		//	        "properties": {
		//	          "ReadUnitsPerSecond": {
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          },
		//	          "WriteUnitsPerSecond": {
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "WriteOnDemandThroughputSettings": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "MaxWriteRequestUnits": {
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "WriteProvisionedThroughputSettings": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "WriteCapacityAutoScalingSettings": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MaxCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "MinCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "SeedCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "TargetTrackingScalingPolicyConfiguration": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "DisableScaleIn": {
		//	                    "type": "boolean"
		//	                  },
		//	                  "ScaleInCooldown": {
		//	                    "minimum": 0,
		//	                    "type": "integer"
		//	                  },
		//	                  "ScaleOutCooldown": {
		//	                    "minimum": 0,
		//	                    "type": "integer"
		//	                  },
		//	                  "TargetValue": {
		//	                    "format": "double",
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "TargetValue"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "MinCapacity",
		//	              "MaxCapacity",
		//	              "TargetTrackingScalingPolicyConfiguration"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "IndexName",
		//	      "Projection",
		//	      "KeySchema"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"global_secondary_indexes": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: IndexName
					"index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: KeySchema
					"key_schema": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AttributeName
								"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: KeyType
								"key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Projection
					"projection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NonKeyAttributes
							"non_key_attributes": schema.SetAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ProjectionType
							"projection_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: WarmThroughput
					"warm_throughput": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ReadUnitsPerSecond
							"read_units_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: WriteUnitsPerSecond
							"write_units_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: WriteOnDemandThroughputSettings
					"write_on_demand_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: MaxWriteRequestUnits
							"max_write_request_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: WriteProvisionedThroughputSettings
					"write_provisioned_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: WriteCapacityAutoScalingSettings
							"write_capacity_auto_scaling_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MaxCapacity
									"max_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: MinCapacity
									"min_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: SeedCapacity
									"seed_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: TargetTrackingScalingPolicyConfiguration
									"target_tracking_scaling_policy_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: DisableScaleIn
											"disable_scale_in": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: ScaleInCooldown
											"scale_in_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: ScaleOutCooldown
											"scale_out_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: TargetValue
											"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: KeySchema
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "AttributeName": {
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "KeyType": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "KeyType",
		//	      "AttributeName"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 2,
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"key_schema": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AttributeName
					"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: KeyType
					"key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LocalSecondaryIndexes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "IndexName": {
		//	        "maxLength": 255,
		//	        "minLength": 3,
		//	        "type": "string"
		//	      },
		//	      "KeySchema": {
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AttributeName": {
		//	              "maxLength": 255,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            },
		//	            "KeyType": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "KeyType",
		//	            "AttributeName"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "maxItems": 2,
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "Projection": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "NonKeyAttributes": {
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "maxItems": 20,
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "ProjectionType": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "IndexName",
		//	      "Projection",
		//	      "KeySchema"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"local_secondary_indexes": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: IndexName
					"index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: KeySchema
					"key_schema": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AttributeName
								"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: KeyType
								"key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Projection
					"projection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NonKeyAttributes
							"non_key_attributes": schema.SetAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ProjectionType
							"projection_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Replicas
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "ContributorInsightsSpecification": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Enabled": {
		//	            "type": "boolean"
		//	          }
		//	        },
		//	        "required": [
		//	          "Enabled"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "DeletionProtectionEnabled": {
		//	        "type": "boolean"
		//	      },
		//	      "GlobalSecondaryIndexes": {
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ContributorInsightsSpecification": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Enabled": {
		//	                  "type": "boolean"
		//	                }
		//	              },
		//	              "required": [
		//	                "Enabled"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "IndexName": {
		//	              "maxLength": 255,
		//	              "minLength": 3,
		//	              "type": "string"
		//	            },
		//	            "ReadOnDemandThroughputSettings": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "MaxReadRequestUnits": {
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "ReadProvisionedThroughputSettings": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ReadCapacityAutoScalingSettings": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "MaxCapacity": {
		//	                      "minimum": 1,
		//	                      "type": "integer"
		//	                    },
		//	                    "MinCapacity": {
		//	                      "minimum": 1,
		//	                      "type": "integer"
		//	                    },
		//	                    "SeedCapacity": {
		//	                      "minimum": 1,
		//	                      "type": "integer"
		//	                    },
		//	                    "TargetTrackingScalingPolicyConfiguration": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "DisableScaleIn": {
		//	                          "type": "boolean"
		//	                        },
		//	                        "ScaleInCooldown": {
		//	                          "minimum": 0,
		//	                          "type": "integer"
		//	                        },
		//	                        "ScaleOutCooldown": {
		//	                          "minimum": 0,
		//	                          "type": "integer"
		//	                        },
		//	                        "TargetValue": {
		//	                          "format": "double",
		//	                          "type": "number"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "TargetValue"
		//	                      ],
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "MinCapacity",
		//	                    "MaxCapacity",
		//	                    "TargetTrackingScalingPolicyConfiguration"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "ReadCapacityUnits": {
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "IndexName"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "KinesisStreamSpecification": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ApproximateCreationDateTimePrecision": {
		//	            "enum": [
		//	              "MICROSECOND",
		//	              "MILLISECOND"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "StreamArn": {
		//	            "relationshipRef": {
		//	              "propertyPath": "/properties/Arn",
		//	              "typeName": "AWS::Kinesis::Stream"
		//	            },
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "StreamArn"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "PointInTimeRecoverySpecification": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "PointInTimeRecoveryEnabled": {
		//	            "type": "boolean"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "ReadOnDemandThroughputSettings": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "MaxReadRequestUnits": {
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "ReadProvisionedThroughputSettings": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ReadCapacityAutoScalingSettings": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MaxCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "MinCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "SeedCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "TargetTrackingScalingPolicyConfiguration": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "DisableScaleIn": {
		//	                    "type": "boolean"
		//	                  },
		//	                  "ScaleInCooldown": {
		//	                    "minimum": 0,
		//	                    "type": "integer"
		//	                  },
		//	                  "ScaleOutCooldown": {
		//	                    "minimum": 0,
		//	                    "type": "integer"
		//	                  },
		//	                  "TargetValue": {
		//	                    "format": "double",
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "TargetValue"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "MinCapacity",
		//	              "MaxCapacity",
		//	              "TargetTrackingScalingPolicyConfiguration"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "ReadCapacityUnits": {
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Region": {
		//	        "type": "string"
		//	      },
		//	      "ReplicaStreamSpecification": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ResourcePolicy": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "PolicyDocument": {
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "PolicyDocument"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "ResourcePolicy"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "ResourcePolicy": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "PolicyDocument": {
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "PolicyDocument"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "SSESpecification": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "KMSMasterKeyId": {
		//	            "anyOf": [
		//	              {},
		//	              {},
		//	              {}
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "KMSMasterKeyId"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "TableClass": {
		//	        "type": "string"
		//	      },
		//	      "Tags": {
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Key": {
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Value",
		//	            "Key"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      }
		//	    },
		//	    "required": [
		//	      "Region"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"replicas": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ContributorInsightsSpecification
					"contributor_insights_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Enabled
							"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: DeletionProtectionEnabled
					"deletion_protection_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: GlobalSecondaryIndexes
					"global_secondary_indexes": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ContributorInsightsSpecification
								"contributor_insights_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Enabled
										"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IndexName
								"index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ReadOnDemandThroughputSettings
								"read_on_demand_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: MaxReadRequestUnits
										"max_read_request_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ReadProvisionedThroughputSettings
								"read_provisioned_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ReadCapacityAutoScalingSettings
										"read_capacity_auto_scaling_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: MaxCapacity
												"max_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: MinCapacity
												"min_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: SeedCapacity
												"seed_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: TargetTrackingScalingPolicyConfiguration
												"target_tracking_scaling_policy_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DisableScaleIn
														"disable_scale_in": schema.BoolAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: ScaleInCooldown
														"scale_in_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: ScaleOutCooldown
														"scale_out_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: TargetValue
														"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: ReadCapacityUnits
										"read_capacity_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: KinesisStreamSpecification
					"kinesis_stream_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ApproximateCreationDateTimePrecision
							"approximate_creation_date_time_precision": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: StreamArn
							"stream_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: PointInTimeRecoverySpecification
					"point_in_time_recovery_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: PointInTimeRecoveryEnabled
							"point_in_time_recovery_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ReadOnDemandThroughputSettings
					"read_on_demand_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: MaxReadRequestUnits
							"max_read_request_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ReadProvisionedThroughputSettings
					"read_provisioned_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ReadCapacityAutoScalingSettings
							"read_capacity_auto_scaling_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MaxCapacity
									"max_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: MinCapacity
									"min_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: SeedCapacity
									"seed_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: TargetTrackingScalingPolicyConfiguration
									"target_tracking_scaling_policy_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: DisableScaleIn
											"disable_scale_in": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: ScaleInCooldown
											"scale_in_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: ScaleOutCooldown
											"scale_out_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: TargetValue
											"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ReadCapacityUnits
							"read_capacity_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Region
					"region": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ReplicaStreamSpecification
					"replica_stream_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ResourcePolicy
							"resource_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: PolicyDocument
									"policy_document": schema.StringAttribute{ /*START ATTRIBUTE*/
										CustomType: jsontypes.NormalizedType{},
										Computed:   true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ResourcePolicy
					"resource_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: PolicyDocument
							"policy_document": schema.StringAttribute{ /*START ATTRIBUTE*/
								CustomType: jsontypes.NormalizedType{},
								Computed:   true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SSESpecification
					"sse_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: KMSMasterKeyId
							"kms_master_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: TableClass
					"table_class": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Tags
					"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SSESpecification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "SSEEnabled": {
		//	      "type": "boolean"
		//	    },
		//	    "SSEType": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "SSEEnabled"
		//	  ],
		//	  "type": "object"
		//	}
		"sse_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: SSEEnabled
				"sse_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SSEType
				"sse_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: StreamArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"stream_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: StreamSpecification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "StreamViewType": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "StreamViewType"
		//	  ],
		//	  "type": "object"
		//	}
		"stream_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: StreamViewType
				"stream_view_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TableId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"table_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TableName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TimeToLiveSpecification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AttributeName": {
		//	      "type": "string"
		//	    },
		//	    "Enabled": {
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "required": [
		//	    "Enabled"
		//	  ],
		//	  "type": "object"
		//	}
		"time_to_live_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AttributeName
				"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: WarmThroughput
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "anyOf": [
		//	    {
		//	      "required": [
		//	        "ReadUnitsPerSecond"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "WriteUnitsPerSecond"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "ReadUnitsPerSecond": {
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "WriteUnitsPerSecond": {
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"warm_throughput": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ReadUnitsPerSecond
				"read_units_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: WriteUnitsPerSecond
				"write_units_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: WriteOnDemandThroughputSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "MaxWriteRequestUnits": {
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"write_on_demand_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MaxWriteRequestUnits
				"max_write_request_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: WriteProvisionedThroughputSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "WriteCapacityAutoScalingSettings": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "MaxCapacity": {
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "MinCapacity": {
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "SeedCapacity": {
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "TargetTrackingScalingPolicyConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "DisableScaleIn": {
		//	              "type": "boolean"
		//	            },
		//	            "ScaleInCooldown": {
		//	              "minimum": 0,
		//	              "type": "integer"
		//	            },
		//	            "ScaleOutCooldown": {
		//	              "minimum": 0,
		//	              "type": "integer"
		//	            },
		//	            "TargetValue": {
		//	              "format": "double",
		//	              "type": "number"
		//	            }
		//	          },
		//	          "required": [
		//	            "TargetValue"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "MinCapacity",
		//	        "MaxCapacity",
		//	        "TargetTrackingScalingPolicyConfiguration"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"write_provisioned_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: WriteCapacityAutoScalingSettings
				"write_capacity_auto_scaling_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MaxCapacity
						"max_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MinCapacity
						"min_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SeedCapacity
						"seed_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TargetTrackingScalingPolicyConfiguration
						"target_tracking_scaling_policy_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DisableScaleIn
								"disable_scale_in": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ScaleInCooldown
								"scale_in_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ScaleOutCooldown
								"scale_out_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: TargetValue
								"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::DynamoDB::GlobalTable",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DynamoDB::GlobalTable").WithTerraformTypeName("awscc_dynamodb_global_table")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"approximate_creation_date_time_precision": "ApproximateCreationDateTimePrecision",
		"arn":                                  "Arn",
		"attribute_definitions":                "AttributeDefinitions",
		"attribute_name":                       "AttributeName",
		"attribute_type":                       "AttributeType",
		"billing_mode":                         "BillingMode",
		"contributor_insights_specification":   "ContributorInsightsSpecification",
		"deletion_protection_enabled":          "DeletionProtectionEnabled",
		"disable_scale_in":                     "DisableScaleIn",
		"enabled":                              "Enabled",
		"global_secondary_indexes":             "GlobalSecondaryIndexes",
		"index_name":                           "IndexName",
		"key":                                  "Key",
		"key_schema":                           "KeySchema",
		"key_type":                             "KeyType",
		"kinesis_stream_specification":         "KinesisStreamSpecification",
		"kms_master_key_id":                    "KMSMasterKeyId",
		"local_secondary_indexes":              "LocalSecondaryIndexes",
		"max_capacity":                         "MaxCapacity",
		"max_read_request_units":               "MaxReadRequestUnits",
		"max_write_request_units":              "MaxWriteRequestUnits",
		"min_capacity":                         "MinCapacity",
		"non_key_attributes":                   "NonKeyAttributes",
		"point_in_time_recovery_enabled":       "PointInTimeRecoveryEnabled",
		"point_in_time_recovery_specification": "PointInTimeRecoverySpecification",
		"policy_document":                      "PolicyDocument",
		"projection":                           "Projection",
		"projection_type":                      "ProjectionType",
		"read_capacity_auto_scaling_settings":  "ReadCapacityAutoScalingSettings",
		"read_capacity_units":                  "ReadCapacityUnits",
		"read_on_demand_throughput_settings":   "ReadOnDemandThroughputSettings",
		"read_provisioned_throughput_settings": "ReadProvisionedThroughputSettings",
		"read_units_per_second":                "ReadUnitsPerSecond",
		"region":                               "Region",
		"replica_stream_specification":         "ReplicaStreamSpecification",
		"replicas":                             "Replicas",
		"resource_policy":                      "ResourcePolicy",
		"scale_in_cooldown":                    "ScaleInCooldown",
		"scale_out_cooldown":                   "ScaleOutCooldown",
		"seed_capacity":                        "SeedCapacity",
		"sse_enabled":                          "SSEEnabled",
		"sse_specification":                    "SSESpecification",
		"sse_type":                             "SSEType",
		"stream_arn":                           "StreamArn",
		"stream_specification":                 "StreamSpecification",
		"stream_view_type":                     "StreamViewType",
		"table_class":                          "TableClass",
		"table_id":                             "TableId",
		"table_name":                           "TableName",
		"tags":                                 "Tags",
		"target_tracking_scaling_policy_configuration": "TargetTrackingScalingPolicyConfiguration",
		"target_value":                          "TargetValue",
		"time_to_live_specification":            "TimeToLiveSpecification",
		"value":                                 "Value",
		"warm_throughput":                       "WarmThroughput",
		"write_capacity_auto_scaling_settings":  "WriteCapacityAutoScalingSettings",
		"write_on_demand_throughput_settings":   "WriteOnDemandThroughputSettings",
		"write_provisioned_throughput_settings": "WriteProvisionedThroughputSettings",
		"write_units_per_second":                "WriteUnitsPerSecond",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
