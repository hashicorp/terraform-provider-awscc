// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package dynamodb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_dynamodb_global_table", globalTableResource)
}

// globalTableResource returns the Terraform awscc_dynamodb_global_table resource.
// This Terraform resource corresponds to the CloudFormation AWS::DynamoDB::GlobalTable resource.
func globalTableResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AttributeDefinitions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "AttributeName": {
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "AttributeType": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "AttributeName",
		//	      "AttributeType"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"attribute_definitions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AttributeName
					"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 255),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
					// Property: AttributeType
					"attribute_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Required: true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtLeast(1),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: BillingMode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"billing_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: GlobalSecondaryIndexes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "IndexName": {
		//	        "maxLength": 255,
		//	        "minLength": 3,
		//	        "type": "string"
		//	      },
		//	      "KeySchema": {
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AttributeName": {
		//	              "maxLength": 255,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            },
		//	            "KeyType": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "KeyType",
		//	            "AttributeName"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "maxItems": 2,
		//	        "minItems": 1,
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "Projection": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "NonKeyAttributes": {
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "maxItems": 20,
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "ProjectionType": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "WarmThroughput": {
		//	        "additionalProperties": false,
		//	        "anyOf": [
		//	          {
		//	            "required": [
		//	              "ReadUnitsPerSecond"
		//	            ]
		//	          },
		//	          {
		//	            "required": [
		//	              "WriteUnitsPerSecond"
		//	            ]
		//	          }
		//	        ],
		//	        "properties": {
		//	          "ReadUnitsPerSecond": {
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          },
		//	          "WriteUnitsPerSecond": {
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "WriteOnDemandThroughputSettings": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "MaxWriteRequestUnits": {
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "WriteProvisionedThroughputSettings": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "WriteCapacityAutoScalingSettings": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MaxCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "MinCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "SeedCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "TargetTrackingScalingPolicyConfiguration": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "DisableScaleIn": {
		//	                    "type": "boolean"
		//	                  },
		//	                  "ScaleInCooldown": {
		//	                    "minimum": 0,
		//	                    "type": "integer"
		//	                  },
		//	                  "ScaleOutCooldown": {
		//	                    "minimum": 0,
		//	                    "type": "integer"
		//	                  },
		//	                  "TargetValue": {
		//	                    "format": "double",
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "TargetValue"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "MinCapacity",
		//	              "MaxCapacity",
		//	              "TargetTrackingScalingPolicyConfiguration"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "IndexName",
		//	      "Projection",
		//	      "KeySchema"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"global_secondary_indexes": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: IndexName
					"index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(3, 255),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: KeySchema
					"key_schema": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AttributeName
								"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthBetween(1, 255),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: KeyType
								"key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Optional: true,
						Computed: true,
						Validators: []validator.List{ /*START VALIDATORS*/
							listvalidator.SizeBetween(1, 2),
							listvalidator.UniqueValues(),
							fwvalidators.NotNullList(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Projection
					"projection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NonKeyAttributes
							"non_key_attributes": schema.SetAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								Validators: []validator.Set{ /*START VALIDATORS*/
									setvalidator.SizeAtMost(20),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
									setplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ProjectionType
							"projection_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						Validators: []validator.Object{ /*START VALIDATORS*/
							fwvalidators.NotNullObject(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: WarmThroughput
					"warm_throughput": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ReadUnitsPerSecond
							"read_units_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.Int64{ /*START VALIDATORS*/
									int64validator.AtLeast(1),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: WriteUnitsPerSecond
							"write_units_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.Int64{ /*START VALIDATORS*/
									int64validator.AtLeast(1),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: WriteOnDemandThroughputSettings
					"write_on_demand_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: MaxWriteRequestUnits
							"max_write_request_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.Int64{ /*START VALIDATORS*/
									int64validator.AtLeast(1),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: WriteProvisionedThroughputSettings
					"write_provisioned_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: WriteCapacityAutoScalingSettings
							"write_capacity_auto_scaling_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MaxCapacity
									"max_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.Int64{ /*START VALIDATORS*/
											int64validator.AtLeast(1),
											fwvalidators.NotNullInt64(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: MinCapacity
									"min_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.Int64{ /*START VALIDATORS*/
											int64validator.AtLeast(1),
											fwvalidators.NotNullInt64(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: SeedCapacity
									"seed_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.Int64{ /*START VALIDATORS*/
											int64validator.AtLeast(1),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: TargetTrackingScalingPolicyConfiguration
									"target_tracking_scaling_policy_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: DisableScaleIn
											"disable_scale_in": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
													boolplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: ScaleInCooldown
											"scale_in_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.Int64{ /*START VALIDATORS*/
													int64validator.AtLeast(0),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
													int64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: ScaleOutCooldown
											"scale_out_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.Int64{ /*START VALIDATORS*/
													int64validator.AtLeast(0),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
													int64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: TargetValue
											"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.Float64{ /*START VALIDATORS*/
													fwvalidators.NotNullFloat64(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
													float64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										Validators: []validator.Object{ /*START VALIDATORS*/
											fwvalidators.NotNullObject(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: KeySchema
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "AttributeName": {
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "KeyType": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "KeyType",
		//	      "AttributeName"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 2,
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"key_schema": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AttributeName
					"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 255),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
					// Property: KeyType
					"key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Required: true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(1, 2),
				listvalidator.UniqueValues(),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LocalSecondaryIndexes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "IndexName": {
		//	        "maxLength": 255,
		//	        "minLength": 3,
		//	        "type": "string"
		//	      },
		//	      "KeySchema": {
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AttributeName": {
		//	              "maxLength": 255,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            },
		//	            "KeyType": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "KeyType",
		//	            "AttributeName"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "maxItems": 2,
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "Projection": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "NonKeyAttributes": {
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "maxItems": 20,
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "ProjectionType": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "IndexName",
		//	      "Projection",
		//	      "KeySchema"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"local_secondary_indexes": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: IndexName
					"index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(3, 255),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: KeySchema
					"key_schema": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AttributeName
								"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthBetween(1, 255),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: KeyType
								"key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Optional: true,
						Computed: true,
						Validators: []validator.List{ /*START VALIDATORS*/
							listvalidator.SizeAtMost(2),
							listvalidator.UniqueValues(),
							fwvalidators.NotNullList(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Projection
					"projection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NonKeyAttributes
							"non_key_attributes": schema.SetAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								Validators: []validator.Set{ /*START VALIDATORS*/
									setvalidator.SizeAtMost(20),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
									setplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ProjectionType
							"projection_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						Validators: []validator.Object{ /*START VALIDATORS*/
							fwvalidators.NotNullObject(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
				setplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Replicas
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "ContributorInsightsSpecification": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Enabled": {
		//	            "type": "boolean"
		//	          }
		//	        },
		//	        "required": [
		//	          "Enabled"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "DeletionProtectionEnabled": {
		//	        "type": "boolean"
		//	      },
		//	      "GlobalSecondaryIndexes": {
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ContributorInsightsSpecification": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Enabled": {
		//	                  "type": "boolean"
		//	                }
		//	              },
		//	              "required": [
		//	                "Enabled"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "IndexName": {
		//	              "maxLength": 255,
		//	              "minLength": 3,
		//	              "type": "string"
		//	            },
		//	            "ReadOnDemandThroughputSettings": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "MaxReadRequestUnits": {
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "ReadProvisionedThroughputSettings": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ReadCapacityAutoScalingSettings": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "MaxCapacity": {
		//	                      "minimum": 1,
		//	                      "type": "integer"
		//	                    },
		//	                    "MinCapacity": {
		//	                      "minimum": 1,
		//	                      "type": "integer"
		//	                    },
		//	                    "SeedCapacity": {
		//	                      "minimum": 1,
		//	                      "type": "integer"
		//	                    },
		//	                    "TargetTrackingScalingPolicyConfiguration": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "DisableScaleIn": {
		//	                          "type": "boolean"
		//	                        },
		//	                        "ScaleInCooldown": {
		//	                          "minimum": 0,
		//	                          "type": "integer"
		//	                        },
		//	                        "ScaleOutCooldown": {
		//	                          "minimum": 0,
		//	                          "type": "integer"
		//	                        },
		//	                        "TargetValue": {
		//	                          "format": "double",
		//	                          "type": "number"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "TargetValue"
		//	                      ],
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "MinCapacity",
		//	                    "MaxCapacity",
		//	                    "TargetTrackingScalingPolicyConfiguration"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "ReadCapacityUnits": {
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "IndexName"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "KinesisStreamSpecification": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ApproximateCreationDateTimePrecision": {
		//	            "enum": [
		//	              "MICROSECOND",
		//	              "MILLISECOND"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "StreamArn": {
		//	            "relationshipRef": {
		//	              "propertyPath": "/properties/Arn",
		//	              "typeName": "AWS::Kinesis::Stream"
		//	            },
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "StreamArn"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "PointInTimeRecoverySpecification": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "PointInTimeRecoveryEnabled": {
		//	            "type": "boolean"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "ReadOnDemandThroughputSettings": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "MaxReadRequestUnits": {
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "ReadProvisionedThroughputSettings": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ReadCapacityAutoScalingSettings": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MaxCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "MinCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "SeedCapacity": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "TargetTrackingScalingPolicyConfiguration": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "DisableScaleIn": {
		//	                    "type": "boolean"
		//	                  },
		//	                  "ScaleInCooldown": {
		//	                    "minimum": 0,
		//	                    "type": "integer"
		//	                  },
		//	                  "ScaleOutCooldown": {
		//	                    "minimum": 0,
		//	                    "type": "integer"
		//	                  },
		//	                  "TargetValue": {
		//	                    "format": "double",
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "TargetValue"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "MinCapacity",
		//	              "MaxCapacity",
		//	              "TargetTrackingScalingPolicyConfiguration"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "ReadCapacityUnits": {
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Region": {
		//	        "type": "string"
		//	      },
		//	      "ReplicaStreamSpecification": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ResourcePolicy": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "PolicyDocument": {
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "PolicyDocument"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "ResourcePolicy"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "ResourcePolicy": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "PolicyDocument": {
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "PolicyDocument"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "SSESpecification": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "KMSMasterKeyId": {
		//	            "anyOf": [
		//	              {},
		//	              {},
		//	              {}
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "KMSMasterKeyId"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "TableClass": {
		//	        "type": "string"
		//	      },
		//	      "Tags": {
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Key": {
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Value",
		//	            "Key"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      }
		//	    },
		//	    "required": [
		//	      "Region"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"replicas": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ContributorInsightsSpecification
					"contributor_insights_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Enabled
							"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.Bool{ /*START VALIDATORS*/
									fwvalidators.NotNullBool(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: DeletionProtectionEnabled
					"deletion_protection_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
							boolplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: GlobalSecondaryIndexes
					"global_secondary_indexes": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ContributorInsightsSpecification
								"contributor_insights_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Enabled
										"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Bool{ /*START VALIDATORS*/
												fwvalidators.NotNullBool(),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
												boolplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: IndexName
								"index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthBetween(3, 255),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ReadOnDemandThroughputSettings
								"read_on_demand_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: MaxReadRequestUnits
										"max_read_request_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.AtLeast(1),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ReadProvisionedThroughputSettings
								"read_provisioned_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ReadCapacityAutoScalingSettings
										"read_capacity_auto_scaling_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: MaxCapacity
												"max_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													Validators: []validator.Int64{ /*START VALIDATORS*/
														int64validator.AtLeast(1),
														fwvalidators.NotNullInt64(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
														int64planmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: MinCapacity
												"min_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													Validators: []validator.Int64{ /*START VALIDATORS*/
														int64validator.AtLeast(1),
														fwvalidators.NotNullInt64(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
														int64planmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: SeedCapacity
												"seed_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													Validators: []validator.Int64{ /*START VALIDATORS*/
														int64validator.AtLeast(1),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
														int64planmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: TargetTrackingScalingPolicyConfiguration
												"target_tracking_scaling_policy_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DisableScaleIn
														"disable_scale_in": schema.BoolAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
																boolplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: ScaleInCooldown
														"scale_in_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															Validators: []validator.Int64{ /*START VALIDATORS*/
																int64validator.AtLeast(0),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
																int64planmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: ScaleOutCooldown
														"scale_out_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															Validators: []validator.Int64{ /*START VALIDATORS*/
																int64validator.AtLeast(0),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
																int64planmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: TargetValue
														"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															Validators: []validator.Float64{ /*START VALIDATORS*/
																fwvalidators.NotNullFloat64(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
																float64planmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Optional: true,
													Computed: true,
													Validators: []validator.Object{ /*START VALIDATORS*/
														fwvalidators.NotNullObject(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Optional: true,
											Computed: true,
											PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
												objectplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: ReadCapacityUnits
										"read_capacity_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.AtLeast(1),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
							setplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: KinesisStreamSpecification
					"kinesis_stream_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ApproximateCreationDateTimePrecision
							"approximate_creation_date_time_precision": schema.StringAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"MICROSECOND",
										"MILLISECOND",
									),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: StreamArn
							"stream_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.String{ /*START VALIDATORS*/
									fwvalidators.NotNullString(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: PointInTimeRecoverySpecification
					"point_in_time_recovery_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: PointInTimeRecoveryEnabled
							"point_in_time_recovery_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ReadOnDemandThroughputSettings
					"read_on_demand_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: MaxReadRequestUnits
							"max_read_request_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.Int64{ /*START VALIDATORS*/
									int64validator.AtLeast(1),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ReadProvisionedThroughputSettings
					"read_provisioned_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ReadCapacityAutoScalingSettings
							"read_capacity_auto_scaling_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MaxCapacity
									"max_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.Int64{ /*START VALIDATORS*/
											int64validator.AtLeast(1),
											fwvalidators.NotNullInt64(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: MinCapacity
									"min_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.Int64{ /*START VALIDATORS*/
											int64validator.AtLeast(1),
											fwvalidators.NotNullInt64(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: SeedCapacity
									"seed_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.Int64{ /*START VALIDATORS*/
											int64validator.AtLeast(1),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: TargetTrackingScalingPolicyConfiguration
									"target_tracking_scaling_policy_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: DisableScaleIn
											"disable_scale_in": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
													boolplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: ScaleInCooldown
											"scale_in_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.Int64{ /*START VALIDATORS*/
													int64validator.AtLeast(0),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
													int64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: ScaleOutCooldown
											"scale_out_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.Int64{ /*START VALIDATORS*/
													int64validator.AtLeast(0),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
													int64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: TargetValue
											"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.Float64{ /*START VALIDATORS*/
													fwvalidators.NotNullFloat64(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
													float64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										Validators: []validator.Object{ /*START VALIDATORS*/
											fwvalidators.NotNullObject(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ReadCapacityUnits
							"read_capacity_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.Int64{ /*START VALIDATORS*/
									int64validator.AtLeast(1),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Region
					"region": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
					// Property: ReplicaStreamSpecification
					"replica_stream_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ResourcePolicy
							"resource_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: PolicyDocument
									"policy_document": schema.StringAttribute{ /*START ATTRIBUTE*/
										CustomType: jsontypes.NormalizedType{},
										Optional:   true,
										Computed:   true,
										Validators: []validator.String{ /*START VALIDATORS*/
											fwvalidators.NotNullString(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								Validators: []validator.Object{ /*START VALIDATORS*/
									fwvalidators.NotNullObject(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ResourcePolicy
					"resource_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: PolicyDocument
							"policy_document": schema.StringAttribute{ /*START ATTRIBUTE*/
								CustomType: jsontypes.NormalizedType{},
								Optional:   true,
								Computed:   true,
								Validators: []validator.String{ /*START VALIDATORS*/
									fwvalidators.NotNullString(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: SSESpecification
					"sse_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: KMSMasterKeyId
							"kms_master_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.String{ /*START VALIDATORS*/
									fwvalidators.NotNullString(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: TableClass
					"table_class": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Tags
					"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
							setplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Required: true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtLeast(1),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: SSESpecification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "SSEEnabled": {
		//	      "type": "boolean"
		//	    },
		//	    "SSEType": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "SSEEnabled"
		//	  ],
		//	  "type": "object"
		//	}
		"sse_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: SSEEnabled
				"sse_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.Bool{ /*START VALIDATORS*/
						fwvalidators.NotNullBool(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SSEType
				"sse_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StreamArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"stream_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StreamSpecification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "StreamViewType": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "StreamViewType"
		//	  ],
		//	  "type": "object"
		//	}
		"stream_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: StreamViewType
				"stream_view_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TableId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"table_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TableName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TimeToLiveSpecification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AttributeName": {
		//	      "type": "string"
		//	    },
		//	    "Enabled": {
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "required": [
		//	    "Enabled"
		//	  ],
		//	  "type": "object"
		//	}
		"time_to_live_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AttributeName
				"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.Bool{ /*START VALIDATORS*/
						fwvalidators.NotNullBool(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: WarmThroughput
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "anyOf": [
		//	    {
		//	      "required": [
		//	        "ReadUnitsPerSecond"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "WriteUnitsPerSecond"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "ReadUnitsPerSecond": {
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "WriteUnitsPerSecond": {
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"warm_throughput": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ReadUnitsPerSecond
				"read_units_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.AtLeast(1),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: WriteUnitsPerSecond
				"write_units_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.AtLeast(1),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: WriteOnDemandThroughputSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "MaxWriteRequestUnits": {
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"write_on_demand_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MaxWriteRequestUnits
				"max_write_request_units": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.AtLeast(1),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: WriteProvisionedThroughputSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "WriteCapacityAutoScalingSettings": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "MaxCapacity": {
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "MinCapacity": {
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "SeedCapacity": {
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "TargetTrackingScalingPolicyConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "DisableScaleIn": {
		//	              "type": "boolean"
		//	            },
		//	            "ScaleInCooldown": {
		//	              "minimum": 0,
		//	              "type": "integer"
		//	            },
		//	            "ScaleOutCooldown": {
		//	              "minimum": 0,
		//	              "type": "integer"
		//	            },
		//	            "TargetValue": {
		//	              "format": "double",
		//	              "type": "number"
		//	            }
		//	          },
		//	          "required": [
		//	            "TargetValue"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "MinCapacity",
		//	        "MaxCapacity",
		//	        "TargetTrackingScalingPolicyConfiguration"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"write_provisioned_throughput_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: WriteCapacityAutoScalingSettings
				"write_capacity_auto_scaling_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MaxCapacity
						"max_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.Int64{ /*START VALIDATORS*/
								int64validator.AtLeast(1),
								fwvalidators.NotNullInt64(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: MinCapacity
						"min_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.Int64{ /*START VALIDATORS*/
								int64validator.AtLeast(1),
								fwvalidators.NotNullInt64(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SeedCapacity
						"seed_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.Int64{ /*START VALIDATORS*/
								int64validator.AtLeast(1),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
							// SeedCapacity is a write-only property.
						}, /*END ATTRIBUTE*/
						// Property: TargetTrackingScalingPolicyConfiguration
						"target_tracking_scaling_policy_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DisableScaleIn
								"disable_scale_in": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
										boolplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ScaleInCooldown
								"scale_in_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.Int64{ /*START VALIDATORS*/
										int64validator.AtLeast(0),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ScaleOutCooldown
								"scale_out_cooldown": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.Int64{ /*START VALIDATORS*/
										int64validator.AtLeast(0),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TargetValue
								"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.Float64{ /*START VALIDATORS*/
										fwvalidators.NotNullFloat64(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
										float64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Version: None. Resource Type definition for AWS::DynamoDB::GlobalTable",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DynamoDB::GlobalTable").WithTerraformTypeName("awscc_dynamodb_global_table")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"approximate_creation_date_time_precision": "ApproximateCreationDateTimePrecision",
		"arn":                                  "Arn",
		"attribute_definitions":                "AttributeDefinitions",
		"attribute_name":                       "AttributeName",
		"attribute_type":                       "AttributeType",
		"billing_mode":                         "BillingMode",
		"contributor_insights_specification":   "ContributorInsightsSpecification",
		"deletion_protection_enabled":          "DeletionProtectionEnabled",
		"disable_scale_in":                     "DisableScaleIn",
		"enabled":                              "Enabled",
		"global_secondary_indexes":             "GlobalSecondaryIndexes",
		"index_name":                           "IndexName",
		"key":                                  "Key",
		"key_schema":                           "KeySchema",
		"key_type":                             "KeyType",
		"kinesis_stream_specification":         "KinesisStreamSpecification",
		"kms_master_key_id":                    "KMSMasterKeyId",
		"local_secondary_indexes":              "LocalSecondaryIndexes",
		"max_capacity":                         "MaxCapacity",
		"max_read_request_units":               "MaxReadRequestUnits",
		"max_write_request_units":              "MaxWriteRequestUnits",
		"min_capacity":                         "MinCapacity",
		"non_key_attributes":                   "NonKeyAttributes",
		"point_in_time_recovery_enabled":       "PointInTimeRecoveryEnabled",
		"point_in_time_recovery_specification": "PointInTimeRecoverySpecification",
		"policy_document":                      "PolicyDocument",
		"projection":                           "Projection",
		"projection_type":                      "ProjectionType",
		"read_capacity_auto_scaling_settings":  "ReadCapacityAutoScalingSettings",
		"read_capacity_units":                  "ReadCapacityUnits",
		"read_on_demand_throughput_settings":   "ReadOnDemandThroughputSettings",
		"read_provisioned_throughput_settings": "ReadProvisionedThroughputSettings",
		"read_units_per_second":                "ReadUnitsPerSecond",
		"region":                               "Region",
		"replica_stream_specification":         "ReplicaStreamSpecification",
		"replicas":                             "Replicas",
		"resource_policy":                      "ResourcePolicy",
		"scale_in_cooldown":                    "ScaleInCooldown",
		"scale_out_cooldown":                   "ScaleOutCooldown",
		"seed_capacity":                        "SeedCapacity",
		"sse_enabled":                          "SSEEnabled",
		"sse_specification":                    "SSESpecification",
		"sse_type":                             "SSEType",
		"stream_arn":                           "StreamArn",
		"stream_specification":                 "StreamSpecification",
		"stream_view_type":                     "StreamViewType",
		"table_class":                          "TableClass",
		"table_id":                             "TableId",
		"table_name":                           "TableName",
		"tags":                                 "Tags",
		"target_tracking_scaling_policy_configuration": "TargetTrackingScalingPolicyConfiguration",
		"target_value":                          "TargetValue",
		"time_to_live_specification":            "TimeToLiveSpecification",
		"value":                                 "Value",
		"warm_throughput":                       "WarmThroughput",
		"write_capacity_auto_scaling_settings":  "WriteCapacityAutoScalingSettings",
		"write_on_demand_throughput_settings":   "WriteOnDemandThroughputSettings",
		"write_provisioned_throughput_settings": "WriteProvisionedThroughputSettings",
		"write_units_per_second":                "WriteUnitsPerSecond",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/Replicas/*/ReadProvisionedThroughputSettings/ReadCapacityAutoScalingSettings/SeedCapacity",
		"/properties/Replicas/*/GlobalSecondaryIndexes/*/ReadProvisionedThroughputSettings/ReadCapacityAutoScalingSettings/SeedCapacity",
		"/properties/WriteProvisionedThroughputSettings/WriteCapacityAutoScalingSettings/SeedCapacity",
		"/properties/GlobalSecondaryIndexes/*/WriteProvisionedThroughputSettings/WriteCapacityAutoScalingSettings/SeedCapacity",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(1200)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
