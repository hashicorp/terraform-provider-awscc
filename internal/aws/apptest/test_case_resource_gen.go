// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package apptest

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_apptest_test_case", testCaseResource)
	registry.AddListResourceFactory("awscc_apptest_test_case", generic.NewListResource(testCaseResource))
}

// testCaseResource returns the Terraform awscc_apptest_test_case resource.
// This Terraform resource corresponds to the CloudFormation AWS::AppTest::TestCase resource.
func testCaseResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType: timetypes.RFC3339Type{},
			Computed:   true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 1000,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(0, 1000),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LastUpdateTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"last_update_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType: timetypes.RFC3339Type{},
			Computed:   true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LatestVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Status": {
		//	      "enum": [
		//	        "Active",
		//	        "Deleting"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Version": {
		//	      "type": "number"
		//	    }
		//	  },
		//	  "required": [
		//	    "Status",
		//	    "Version"
		//	  ],
		//	  "type": "object"
		//	}
		"latest_version": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Status
				"status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Version
				"version": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^[A-Za-z][A-Za-z0-9_\\-]{1,59}$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^[A-Za-z][A-Za-z0-9_\\-]{1,59}$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "Active",
		//	    "Deleting"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Steps
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Action": {
		//	        "properties": {
		//	          "CompareAction": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Input": {
		//	                "properties": {
		//	                  "File": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "FileMetadata": {
		//	                        "properties": {
		//	                          "DataSets": {
		//	                            "items": {
		//	                              "additionalProperties": false,
		//	                              "properties": {
		//	                                "Ccsid": {
		//	                                  "pattern": "^\\S{1,50}$",
		//	                                  "type": "string"
		//	                                },
		//	                                "Format": {
		//	                                  "enum": [
		//	                                    "FIXED",
		//	                                    "VARIABLE",
		//	                                    "LINE_SEQUENTIAL"
		//	                                  ],
		//	                                  "type": "string"
		//	                                },
		//	                                "Length": {
		//	                                  "type": "number"
		//	                                },
		//	                                "Name": {
		//	                                  "pattern": "^\\S{1,100}$",
		//	                                  "type": "string"
		//	                                },
		//	                                "Type": {
		//	                                  "enum": [
		//	                                    "PS"
		//	                                  ],
		//	                                  "type": "string"
		//	                                }
		//	                              },
		//	                              "required": [
		//	                                "Ccsid",
		//	                                "Format",
		//	                                "Length",
		//	                                "Name",
		//	                                "Type"
		//	                              ],
		//	                              "type": "object"
		//	                            },
		//	                            "type": "array"
		//	                          },
		//	                          "DatabaseCDC": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "SourceMetadata": {
		//	                                "additionalProperties": false,
		//	                                "properties": {
		//	                                  "CaptureTool": {
		//	                                    "enum": [
		//	                                      "Precisely",
		//	                                      "AWS DMS"
		//	                                    ],
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "enum": [
		//	                                      "z/OS-DB2"
		//	                                    ],
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "CaptureTool",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "TargetMetadata": {
		//	                                "additionalProperties": false,
		//	                                "properties": {
		//	                                  "CaptureTool": {
		//	                                    "enum": [
		//	                                      "Precisely",
		//	                                      "AWS DMS"
		//	                                    ],
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Type": {
		//	                                    "enum": [
		//	                                      "PostgreSQL"
		//	                                    ],
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "CaptureTool",
		//	                                  "Type"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "SourceMetadata",
		//	                              "TargetMetadata"
		//	                            ],
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "type": "object"
		//	                      },
		//	                      "SourceLocation": {
		//	                        "pattern": "^\\S{1,1000}$",
		//	                        "type": "string"
		//	                      },
		//	                      "TargetLocation": {
		//	                        "pattern": "^\\S{1,1000}$",
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "FileMetadata",
		//	                      "SourceLocation",
		//	                      "TargetLocation"
		//	                    ],
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Output": {
		//	                "properties": {
		//	                  "File": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "FileLocation": {
		//	                        "maxLength": 1024,
		//	                        "minLength": 0,
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "Input"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "MainframeAction": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "ActionType": {
		//	                "properties": {
		//	                  "Batch": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "BatchJobName": {
		//	                        "pattern": "^\\S{1,1000}$",
		//	                        "type": "string"
		//	                      },
		//	                      "BatchJobParameters": {
		//	                        "additionalProperties": false,
		//	                        "patternProperties": {
		//	                          "": {
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "type": "object"
		//	                      },
		//	                      "ExportDataSetNames": {
		//	                        "items": {
		//	                          "pattern": "^\\S{1,100}$",
		//	                          "type": "string"
		//	                        },
		//	                        "type": "array"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "BatchJobName"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "Tn3270": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "ExportDataSetNames": {
		//	                        "items": {
		//	                          "pattern": "^\\S{1,100}$",
		//	                          "type": "string"
		//	                        },
		//	                        "type": "array"
		//	                      },
		//	                      "Script": {
		//	                        "additionalProperties": false,
		//	                        "properties": {
		//	                          "ScriptLocation": {
		//	                            "maxLength": 1024,
		//	                            "minLength": 0,
		//	                            "type": "string"
		//	                          },
		//	                          "Type": {
		//	                            "enum": [
		//	                              "Selenium"
		//	                            ],
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "ScriptLocation",
		//	                          "Type"
		//	                        ],
		//	                        "type": "object"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "Script"
		//	                    ],
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Properties": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "DmsTaskArn": {
		//	                    "pattern": "^\\S{1,1000}$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Resource": {
		//	                "pattern": "^\\S{1,1000}$",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "ActionType",
		//	              "Resource"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "ResourceAction": {
		//	            "properties": {
		//	              "CloudFormationAction": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "ActionType": {
		//	                    "enum": [
		//	                      "Create",
		//	                      "Delete"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "Resource": {
		//	                    "pattern": "^\\S{1,1000}$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Resource"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "M2ManagedApplicationAction": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "ActionType": {
		//	                    "enum": [
		//	                      "Configure",
		//	                      "Deconfigure"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "Properties": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "ForceStop": {
		//	                        "type": "boolean"
		//	                      },
		//	                      "ImportDataSetLocation": {
		//	                        "pattern": "^\\S{1,1000}$",
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "Resource": {
		//	                    "pattern": "^\\S{1,1000}$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "ActionType",
		//	                  "Resource"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "M2NonManagedApplicationAction": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "ActionType": {
		//	                    "enum": [
		//	                      "Configure",
		//	                      "Deconfigure"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "Resource": {
		//	                    "pattern": "^\\S{1,1000}$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "ActionType",
		//	                  "Resource"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Description": {
		//	        "maxLength": 1000,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      },
		//	      "Name": {
		//	        "pattern": "^[A-Za-z][A-Za-z0-9_\\-]{1,59}$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Action",
		//	      "Name"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 20,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"steps": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Action
					"action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CompareAction
							"compare_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Input
									"input": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: File
											"file": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: FileMetadata
													"file_metadata": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: DataSets
															"data_sets": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																	Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																		// Property: Ccsid
																		"ccsid": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,50}$"), ""),
																				fwvalidators.NotNullString(),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: Format
																		"format": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.OneOf(
																					"FIXED",
																					"VARIABLE",
																					"LINE_SEQUENTIAL",
																				),
																				fwvalidators.NotNullString(),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: Length
																		"length": schema.Float64Attribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.Float64{ /*START VALIDATORS*/
																				fwvalidators.NotNullFloat64(),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
																				float64planmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: Name
																		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,100}$"), ""),
																				fwvalidators.NotNullString(),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: Type
																		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.OneOf(
																					"PS",
																				),
																				fwvalidators.NotNullString(),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																	}, /*END SCHEMA*/
																}, /*END NESTED OBJECT*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																	listplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: DatabaseCDC
															"database_cdc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: SourceMetadata
																	"source_metadata": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: CaptureTool
																			"capture_tool": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Optional: true,
																				Computed: true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.OneOf(
																						"Precisely",
																						"AWS DMS",
																					),
																					fwvalidators.NotNullString(),
																				}, /*END VALIDATORS*/
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Optional: true,
																				Computed: true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.OneOf(
																						"z/OS-DB2",
																					),
																					fwvalidators.NotNullString(),
																				}, /*END VALIDATORS*/
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Optional: true,
																		Computed: true,
																		Validators: []validator.Object{ /*START VALIDATORS*/
																			fwvalidators.NotNullObject(),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TargetMetadata
																	"target_metadata": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: CaptureTool
																			"capture_tool": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Optional: true,
																				Computed: true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.OneOf(
																						"Precisely",
																						"AWS DMS",
																					),
																					fwvalidators.NotNullString(),
																				}, /*END VALIDATORS*/
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Type
																			"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Optional: true,
																				Computed: true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					stringvalidator.OneOf(
																						"PostgreSQL",
																					),
																					fwvalidators.NotNullString(),
																				}, /*END VALIDATORS*/
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Optional: true,
																		Computed: true,
																		Validators: []validator.Object{ /*START VALIDATORS*/
																			fwvalidators.NotNullObject(),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																			objectplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
														Optional: true,
														Computed: true,
														Validators: []validator.Object{ /*START VALIDATORS*/
															fwvalidators.NotNullObject(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
															objectplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: SourceLocation
													"source_location": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,1000}$"), ""),
															fwvalidators.NotNullString(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: TargetLocation
													"target_location": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,1000}$"), ""),
															fwvalidators.NotNullString(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										Validators: []validator.Object{ /*START VALIDATORS*/
											fwvalidators.NotNullObject(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Output
									"output": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: File
											"file": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: FileLocation
													"file_location": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.LengthBetween(0, 1024),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: MainframeAction
							"mainframe_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ActionType
									"action_type": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Batch
											"batch": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: BatchJobName
													"batch_job_name": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,1000}$"), ""),
															fwvalidators.NotNullString(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: BatchJobParameters
													"batch_job_parameters": // Pattern: ""
													schema.MapAttribute{    /*START ATTRIBUTE*/
														ElementType: types.StringType,
														Optional:    true,
														Computed:    true,
														PlanModifiers: []planmodifier.Map{ /*START PLAN MODIFIERS*/
															mapplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: ExportDataSetNames
													"export_data_set_names": schema.ListAttribute{ /*START ATTRIBUTE*/
														ElementType: types.StringType,
														Optional:    true,
														Computed:    true,
														Validators: []validator.List{ /*START VALIDATORS*/
															listvalidator.ValueStringsAre(
																stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,100}$"), ""),
															),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
															listplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Tn3270
											"tn_3270": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: ExportDataSetNames
													"export_data_set_names": schema.ListAttribute{ /*START ATTRIBUTE*/
														ElementType: types.StringType,
														Optional:    true,
														Computed:    true,
														Validators: []validator.List{ /*START VALIDATORS*/
															listvalidator.ValueStringsAre(
																stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,100}$"), ""),
															),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
															listplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Script
													"script": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: ScriptLocation
															"script_location": schema.StringAttribute{ /*START ATTRIBUTE*/
																Optional: true,
																Computed: true,
																Validators: []validator.String{ /*START VALIDATORS*/
																	stringvalidator.LengthBetween(0, 1024),
																	fwvalidators.NotNullString(),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																	stringplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Type
															"type": schema.StringAttribute{ /*START ATTRIBUTE*/
																Optional: true,
																Computed: true,
																Validators: []validator.String{ /*START VALIDATORS*/
																	stringvalidator.OneOf(
																		"Selenium",
																	),
																	fwvalidators.NotNullString(),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																	stringplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
														Optional: true,
														Computed: true,
														Validators: []validator.Object{ /*START VALIDATORS*/
															fwvalidators.NotNullObject(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
															objectplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										Validators: []validator.Object{ /*START VALIDATORS*/
											fwvalidators.NotNullObject(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Properties
									"properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: DmsTaskArn
											"dms_task_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,1000}$"), ""),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Resource
									"resource": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,1000}$"), ""),
											fwvalidators.NotNullString(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ResourceAction
							"resource_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: CloudFormationAction
									"cloudformation_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: ActionType
											"action_type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"Create",
														"Delete",
													),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Resource
											"resource": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,1000}$"), ""),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: M2ManagedApplicationAction
									"m2_managed_application_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: ActionType
											"action_type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"Configure",
														"Deconfigure",
													),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Properties
											"properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: ForceStop
													"force_stop": schema.BoolAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
															boolplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: ImportDataSetLocation
													"import_data_set_location": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,1000}$"), ""),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Resource
											"resource": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,1000}$"), ""),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: M2NonManagedApplicationAction
									"m2_non_managed_application_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: ActionType
											"action_type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"Configure",
														"Deconfigure",
													),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Resource
											"resource": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.RegexMatches(regexp.MustCompile("^\\S{1,1000}$"), ""),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Required: true,
					}, /*END ATTRIBUTE*/
					// Property: Description
					"description": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 1000),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.RegexMatches(regexp.MustCompile("^[A-Za-z][A-Za-z0-9_\\-]{1,59}$"), ""),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Required: true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(1, 20),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "maxLength": 256,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Map{ /*START PLAN MODIFIERS*/
				mapplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TestCaseArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"test_case_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TestCaseId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^[A-Za-z0-9:/\\-]{1,100}$",
		//	  "type": "string"
		//	}
		"test_case_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TestCaseVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "number"
		//	}
		"test_case_version": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
				float64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Represents a Test Case that can be captured and executed",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppTest::TestCase").WithTerraformTypeName("awscc_apptest_test_case")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "test_case_id",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"action":                            "Action",
		"action_type":                       "ActionType",
		"batch":                             "Batch",
		"batch_job_name":                    "BatchJobName",
		"batch_job_parameters":              "BatchJobParameters",
		"capture_tool":                      "CaptureTool",
		"ccsid":                             "Ccsid",
		"cloudformation_action":             "CloudFormationAction",
		"compare_action":                    "CompareAction",
		"creation_time":                     "CreationTime",
		"data_sets":                         "DataSets",
		"database_cdc":                      "DatabaseCDC",
		"description":                       "Description",
		"dms_task_arn":                      "DmsTaskArn",
		"export_data_set_names":             "ExportDataSetNames",
		"file":                              "File",
		"file_location":                     "FileLocation",
		"file_metadata":                     "FileMetadata",
		"force_stop":                        "ForceStop",
		"format":                            "Format",
		"import_data_set_location":          "ImportDataSetLocation",
		"input":                             "Input",
		"last_update_time":                  "LastUpdateTime",
		"latest_version":                    "LatestVersion",
		"length":                            "Length",
		"m2_managed_application_action":     "M2ManagedApplicationAction",
		"m2_non_managed_application_action": "M2NonManagedApplicationAction",
		"mainframe_action":                  "MainframeAction",
		"name":                              "Name",
		"output":                            "Output",
		"properties":                        "Properties",
		"resource":                          "Resource",
		"resource_action":                   "ResourceAction",
		"script":                            "Script",
		"script_location":                   "ScriptLocation",
		"source_location":                   "SourceLocation",
		"source_metadata":                   "SourceMetadata",
		"status":                            "Status",
		"steps":                             "Steps",
		"tags":                              "Tags",
		"target_location":                   "TargetLocation",
		"target_metadata":                   "TargetMetadata",
		"test_case_arn":                     "TestCaseArn",
		"test_case_id":                      "TestCaseId",
		"test_case_version":                 "TestCaseVersion",
		"tn_3270":                           "Tn3270",
		"type":                              "Type",
		"version":                           "Version",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
