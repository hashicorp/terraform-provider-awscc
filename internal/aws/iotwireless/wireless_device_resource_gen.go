// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package iotwireless

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"regexp"

	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_iotwireless_wireless_device", wirelessDeviceResource)
}

// wirelessDeviceResource returns the Terraform awscc_iotwireless_wireless_device resource.
// This Terraform resource corresponds to the CloudFormation AWS::IoTWireless::WirelessDevice resource.
func wirelessDeviceResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Wireless device arn. Returned after successful create.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Wireless device arn. Returned after successful create.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Wireless device description",
		//	  "maxLength": 2048,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Wireless device description",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(2048),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DestinationName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Wireless device destination name",
		//	  "maxLength": 128,
		//	  "type": "string"
		//	}
		"destination_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Wireless device destination name",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(128),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Wireless device Id. Returned after successful create.",
		//	  "maxLength": 256,
		//	  "type": "string"
		//	}
		"id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Wireless device Id. Returned after successful create.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LastUplinkReceivedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The date and time when the most recent uplink was received.",
		//	  "type": "string"
		//	}
		"last_uplink_received_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The date and time when the most recent uplink was received.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LoRaWAN
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The combination of Package, Station and Model which represents the version of the LoRaWAN Wireless Device.",
		//	  "oneOf": [
		//	    {
		//	      "required": [
		//	        "OtaaV11"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "OtaaV10x"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "AbpV11"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "AbpV10x"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "AbpV10x": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DevAddr": {
		//	          "pattern": "[a-fA-F0-9]{8}",
		//	          "type": "string"
		//	        },
		//	        "SessionKeys": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AppSKey": {
		//	              "pattern": "[a-fA-F0-9]{32}",
		//	              "type": "string"
		//	            },
		//	            "NwkSKey": {
		//	              "pattern": "[a-fA-F0-9]{32}",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "NwkSKey",
		//	            "AppSKey"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "DevAddr",
		//	        "SessionKeys"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "AbpV11": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DevAddr": {
		//	          "pattern": "[a-fA-F0-9]{8}",
		//	          "type": "string"
		//	        },
		//	        "SessionKeys": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AppSKey": {
		//	              "pattern": "[a-fA-F0-9]{32}",
		//	              "type": "string"
		//	            },
		//	            "FNwkSIntKey": {
		//	              "pattern": "[a-fA-F0-9]{32}",
		//	              "type": "string"
		//	            },
		//	            "NwkSEncKey": {
		//	              "pattern": "[a-fA-F0-9]{32}",
		//	              "type": "string"
		//	            },
		//	            "SNwkSIntKey": {
		//	              "pattern": "[a-fA-F0-9]{32}",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "FNwkSIntKey",
		//	            "SNwkSIntKey",
		//	            "NwkSEncKey",
		//	            "AppSKey"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "DevAddr",
		//	        "SessionKeys"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "DevEui": {
		//	      "pattern": "[a-f0-9]{16}",
		//	      "type": "string"
		//	    },
		//	    "DeviceProfileId": {
		//	      "maxLength": 256,
		//	      "type": "string"
		//	    },
		//	    "FPorts": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Applications": {
		//	          "description": "A list of optional LoRaWAN application information, which can be used for geolocation.",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "LoRaWAN application configuration, which can be used to perform geolocation.",
		//	            "properties": {
		//	              "DestinationName": {
		//	                "description": "The name of the position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.",
		//	                "maxLength": 128,
		//	                "pattern": "[a-zA-Z0-9-_]+",
		//	                "type": "string"
		//	              },
		//	              "FPort": {
		//	                "description": "The Fport value.",
		//	                "maximum": 223,
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "Type": {
		//	                "description": "Application type, which can be specified to obtain real-time position information of your LoRaWAN device.",
		//	                "enum": [
		//	                  "SemtechGeolocation"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "OtaaV10x": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AppEui": {
		//	          "pattern": "[a-fA-F0-9]{16}",
		//	          "type": "string"
		//	        },
		//	        "AppKey": {
		//	          "pattern": "[a-fA-F0-9]{32}",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "AppKey",
		//	        "AppEui"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "OtaaV11": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AppKey": {
		//	          "pattern": "[a-fA-F0-9]{32}",
		//	          "type": "string"
		//	        },
		//	        "JoinEui": {
		//	          "pattern": "[a-fA-F0-9]{16}",
		//	          "type": "string"
		//	        },
		//	        "NwkKey": {
		//	          "pattern": "[a-fA-F0-9]{32}",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "AppKey",
		//	        "NwkKey",
		//	        "JoinEui"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "ServiceProfileId": {
		//	      "maxLength": 256,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"lo_ra_wan": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AbpV10x
				"abp_v10_x": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DevAddr
						"dev_addr": schema.StringAttribute{ /*START ATTRIBUTE*/
							Required: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{8}"), ""),
							}, /*END VALIDATORS*/
						}, /*END ATTRIBUTE*/
						// Property: SessionKeys
						"session_keys": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AppSKey
								"app_s_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{32}"), ""),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
								// Property: NwkSKey
								"nwk_s_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{32}"), ""),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Required: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: AbpV11
				"abp_v11": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DevAddr
						"dev_addr": schema.StringAttribute{ /*START ATTRIBUTE*/
							Required: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{8}"), ""),
							}, /*END VALIDATORS*/
						}, /*END ATTRIBUTE*/
						// Property: SessionKeys
						"session_keys": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AppSKey
								"app_s_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{32}"), ""),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
								// Property: FNwkSIntKey
								"f_nwk_s_int_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{32}"), ""),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
								// Property: NwkSEncKey
								"nwk_s_enc_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{32}"), ""),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
								// Property: SNwkSIntKey
								"s_nwk_s_int_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{32}"), ""),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Required: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: DevEui
				"dev_eui": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.RegexMatches(regexp.MustCompile("[a-f0-9]{16}"), ""),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: DeviceProfileId
				"device_profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthAtMost(256),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: FPorts
				"f_ports": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Applications
						"applications": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DestinationName
									"destination_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The name of the position data destination that describes the AWS IoT rule that processes the device's position data for use by AWS IoT Core for LoRaWAN.",
										Optional:    true,
										Computed:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.LengthAtMost(128),
											stringvalidator.RegexMatches(regexp.MustCompile("[a-zA-Z0-9-_]+"), ""),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: FPort
									"f_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The Fport value.",
										Optional:    true,
										Computed:    true,
										Validators: []validator.Int64{ /*START VALIDATORS*/
											int64validator.Between(1, 223),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Application type, which can be specified to obtain real-time position information of your LoRaWAN device.",
										Optional:    true,
										Computed:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"SemtechGeolocation",
											),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Description: "A list of optional LoRaWAN application information, which can be used for geolocation.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
								setplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: OtaaV10x
				"otaa_v10_x": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AppEui
						"app_eui": schema.StringAttribute{ /*START ATTRIBUTE*/
							Required: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{16}"), ""),
							}, /*END VALIDATORS*/
						}, /*END ATTRIBUTE*/
						// Property: AppKey
						"app_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Required: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{32}"), ""),
							}, /*END VALIDATORS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: OtaaV11
				"otaa_v11": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AppKey
						"app_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Required: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{32}"), ""),
							}, /*END VALIDATORS*/
						}, /*END ATTRIBUTE*/
						// Property: JoinEui
						"join_eui": schema.StringAttribute{ /*START ATTRIBUTE*/
							Required: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{16}"), ""),
							}, /*END VALIDATORS*/
						}, /*END ATTRIBUTE*/
						// Property: NwkKey
						"nwk_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Required: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("[a-fA-F0-9]{32}"), ""),
							}, /*END VALIDATORS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ServiceProfileId
				"service_profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthAtMost(256),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The combination of Package, Station and Model which represents the version of the LoRaWAN Wireless Device.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Wireless device name",
		//	  "maxLength": 256,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Wireless device name",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(256),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of key-value pairs that contain metadata for the device. Currently not supported, will not create if tags are passed.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 256),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of key-value pairs that contain metadata for the device. Currently not supported, will not create if tags are passed.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(200),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ThingArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Thing arn. Passed into update to associate Thing with Wireless device.",
		//	  "type": "string"
		//	}
		"thing_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Thing arn. Passed into update to associate Thing with Wireless device.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ThingName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Thing Arn. If there is a Thing created, this can be returned with a Get call.",
		//	  "type": "string"
		//	}
		"thing_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Thing Arn. If there is a Thing created, this can be returned with a Get call.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Wireless device type, currently only Sidewalk and LoRa",
		//	  "enum": [
		//	    "Sidewalk",
		//	    "LoRaWAN"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Wireless device type, currently only Sidewalk and LoRa",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"Sidewalk",
					"LoRaWAN",
				),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	schema := schema.Schema{
		Description: "Create and manage wireless gateways, including LoRa gateways.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoTWireless::WirelessDevice").WithTerraformTypeName("awscc_iotwireless_wireless_device")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(false)
	opts = opts.WithAttributeNameMap(map[string]string{
		"abp_v10_x":               "AbpV10x",
		"abp_v11":                 "AbpV11",
		"app_eui":                 "AppEui",
		"app_key":                 "AppKey",
		"app_s_key":               "AppSKey",
		"applications":            "Applications",
		"arn":                     "Arn",
		"description":             "Description",
		"destination_name":        "DestinationName",
		"dev_addr":                "DevAddr",
		"dev_eui":                 "DevEui",
		"device_profile_id":       "DeviceProfileId",
		"f_nwk_s_int_key":         "FNwkSIntKey",
		"f_port":                  "FPort",
		"f_ports":                 "FPorts",
		"id":                      "Id",
		"join_eui":                "JoinEui",
		"key":                     "Key",
		"last_uplink_received_at": "LastUplinkReceivedAt",
		"lo_ra_wan":               "LoRaWAN",
		"name":                    "Name",
		"nwk_key":                 "NwkKey",
		"nwk_s_enc_key":           "NwkSEncKey",
		"nwk_s_key":               "NwkSKey",
		"otaa_v10_x":              "OtaaV10x",
		"otaa_v11":                "OtaaV11",
		"s_nwk_s_int_key":         "SNwkSIntKey",
		"service_profile_id":      "ServiceProfileId",
		"session_keys":            "SessionKeys",
		"tags":                    "Tags",
		"thing_arn":               "ThingArn",
		"thing_name":              "ThingName",
		"type":                    "Type",
		"value":                   "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
