// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iotfleethub

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_iotfleethub_application", applicationDataSource)
}

// applicationDataSource returns the Terraform awscc_iotfleethub_application data source.
// This Terraform data source corresponds to the CloudFormation AWS::IoTFleetHub::Application resource.
func applicationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApplicationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the application.",
		//	  "maxLength": 1600,
		//	  "minLength": 1,
		//	  "pattern": "^arn:[!-~]+$",
		//	  "type": "string"
		//	}
		"application_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApplicationCreationDate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "When the Application was created",
		//	  "type": "integer"
		//	}
		"application_creation_date": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "When the Application was created",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApplicationDescription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Application Description, should be between 1 and 2048 characters.",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "pattern": "^[ -~]*$",
		//	  "type": "string"
		//	}
		"application_description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Application Description, should be between 1 and 2048 characters.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApplicationId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the application.",
		//	  "maxLength": 36,
		//	  "minLength": 36,
		//	  "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	  "type": "string"
		//	}
		"application_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApplicationLastUpdateDate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "When the Application was last updated",
		//	  "type": "integer"
		//	}
		"application_last_update_date": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "When the Application was last updated",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApplicationName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Application Name, should be between 1 and 256 characters.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^[ -~]*$",
		//	  "type": "string"
		//	}
		"application_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Application Name, should be between 1 and 256 characters.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApplicationState
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The current state of the application.",
		//	  "type": "string"
		//	}
		"application_state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The current state of the application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApplicationUrl
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The URL of the application.",
		//	  "type": "string"
		//	}
		"application_url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The URL of the application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ErrorMessage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A message indicating why Create or Delete Application failed.",
		//	  "type": "string"
		//	}
		"error_message": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A message indicating why Create or Delete Application failed.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the role that the web application assumes when it interacts with AWS IoT Core. For more info on configuring this attribute, see https://docs.aws.amazon.com/iot/latest/apireference/API_iotfleethub_CreateApplication.html#API_iotfleethub_CreateApplication_RequestSyntax",
		//	  "maxLength": 1600,
		//	  "minLength": 1,
		//	  "pattern": "^arn:[!-~]+$",
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the role that the web application assumes when it interacts with AWS IoT Core. For more info on configuring this attribute, see https://docs.aws.amazon.com/iot/latest/apireference/API_iotfleethub_CreateApplication.html#API_iotfleethub_CreateApplication_RequestSyntax",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SsoClientId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS SSO application generated client ID (used with AWS SSO APIs).",
		//	  "type": "string"
		//	}
		"sso_client_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS SSO application generated client ID (used with AWS SSO APIs).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of key-value pairs that contain metadata for the application.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "To add or update tag, provide both key and value. To delete tag, provide only tag key to be deleted.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of key-value pairs that contain metadata for the application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::IoTFleetHub::Application",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoTFleetHub::Application").WithTerraformTypeName("awscc_iotfleethub_application")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"application_arn":              "ApplicationArn",
		"application_creation_date":    "ApplicationCreationDate",
		"application_description":      "ApplicationDescription",
		"application_id":               "ApplicationId",
		"application_last_update_date": "ApplicationLastUpdateDate",
		"application_name":             "ApplicationName",
		"application_state":            "ApplicationState",
		"application_url":              "ApplicationUrl",
		"error_message":                "ErrorMessage",
		"key":                          "Key",
		"role_arn":                     "RoleArn",
		"sso_client_id":                "SsoClientId",
		"tags":                         "Tags",
		"value":                        "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
