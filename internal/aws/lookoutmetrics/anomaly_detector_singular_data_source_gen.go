// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package lookoutmetrics

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_lookoutmetrics_anomaly_detector", anomalyDetectorDataSource)
}

// anomalyDetectorDataSource returns the Terraform awscc_lookoutmetrics_anomaly_detector data source.
// This Terraform data source corresponds to the CloudFormation AWS::LookoutMetrics::AnomalyDetector resource.
func anomalyDetectorDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AnomalyDetectorConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration options for the AnomalyDetector",
		//	  "properties": {
		//	    "AnomalyDetectorFrequency": {
		//	      "description": "Frequency of anomaly detection",
		//	      "enum": [
		//	        "PT5M",
		//	        "PT10M",
		//	        "PT1H",
		//	        "P1D"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "AnomalyDetectorFrequency"
		//	  ],
		//	  "type": "object"
		//	}
		"anomaly_detector_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AnomalyDetectorFrequency
				"anomaly_detector_frequency": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Frequency of anomaly detection",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration options for the AnomalyDetector",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AnomalyDetectorDescription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A description for the AnomalyDetector.",
		//	  "maxLength": 256,
		//	  "pattern": ".*\\S.*",
		//	  "type": "string"
		//	}
		"anomaly_detector_description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A description for the AnomalyDetector.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AnomalyDetectorName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name for the Amazon Lookout for Metrics Anomaly Detector",
		//	  "maxLength": 63,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]*",
		//	  "type": "string"
		//	}
		"anomaly_detector_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name for the Amazon Lookout for Metrics Anomaly Detector",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 256,
		//	  "pattern": "arn:([a-z\\d-]+):.*:.*:.*:.+",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: KmsKeyArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "KMS key used to encrypt the AnomalyDetector data",
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "pattern": "arn:aws.*:kms:.*:[0-9]{12}:key/.*",
		//	  "type": "string"
		//	}
		"kms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "KMS key used to encrypt the AnomalyDetector data",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MetricSetList
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of metric sets for anomaly detection",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "DimensionList": {
		//	        "description": "Dimensions for this MetricSet.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "description": "Name of a column in the data.",
		//	          "maxLength": 63,
		//	          "minLength": 1,
		//	          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]*",
		//	          "type": "string"
		//	        },
		//	        "minItems": 0,
		//	        "type": "array"
		//	      },
		//	      "MetricList": {
		//	        "description": "Metrics captured by this MetricSet.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AggregationFunction": {
		//	              "description": "Operator used to aggregate metric values",
		//	              "enum": [
		//	                "AVG",
		//	                "SUM"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "MetricName": {
		//	              "description": "Name of a column in the data.",
		//	              "maxLength": 63,
		//	              "minLength": 1,
		//	              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]*",
		//	              "type": "string"
		//	            },
		//	            "Namespace": {
		//	              "maxLength": 255,
		//	              "minLength": 1,
		//	              "pattern": "[^:].*",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "MetricName",
		//	            "AggregationFunction"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "minItems": 1,
		//	        "type": "array"
		//	      },
		//	      "MetricSetDescription": {
		//	        "description": "A description for the MetricSet.",
		//	        "maxLength": 256,
		//	        "pattern": ".*\\S.*",
		//	        "type": "string"
		//	      },
		//	      "MetricSetFrequency": {
		//	        "description": "A frequency period to aggregate the data",
		//	        "enum": [
		//	          "PT5M",
		//	          "PT10M",
		//	          "PT1H",
		//	          "P1D"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "MetricSetName": {
		//	        "description": "The name of the MetricSet.",
		//	        "maxLength": 63,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]*",
		//	        "type": "string"
		//	      },
		//	      "MetricSource": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AppFlowConfig": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "FlowName": {
		//	                "maxLength": 256,
		//	                "pattern": "[a-zA-Z0-9][\\w!@#.-]+",
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "maxLength": 256,
		//	                "pattern": "arn:([a-z\\d-]+):.*:.*:.*:.+",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "RoleArn",
		//	              "FlowName"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "CloudwatchConfig": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "RoleArn": {
		//	                "maxLength": 256,
		//	                "pattern": "arn:([a-z\\d-]+):.*:.*:.*:.+",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "RDSSourceConfig": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "DBInstanceIdentifier": {
		//	                "maxLength": 63,
		//	                "minLength": 1,
		//	                "pattern": "",
		//	                "type": "string"
		//	              },
		//	              "DatabaseHost": {
		//	                "maxLength": 253,
		//	                "minLength": 1,
		//	                "pattern": ".*\\S.*",
		//	                "type": "string"
		//	              },
		//	              "DatabaseName": {
		//	                "maxLength": 64,
		//	                "minLength": 1,
		//	                "pattern": "[a-zA-Z0-9_]+",
		//	                "type": "string"
		//	              },
		//	              "DatabasePort": {
		//	                "maximum": 65535,
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "RoleArn": {
		//	                "maxLength": 256,
		//	                "pattern": "arn:([a-z\\d-]+):.*:.*:.*:.+",
		//	                "type": "string"
		//	              },
		//	              "SecretManagerArn": {
		//	                "maxLength": 256,
		//	                "pattern": "arn:([a-z\\d-]+):.*:.*:secret:AmazonLookoutMetrics-.+",
		//	                "type": "string"
		//	              },
		//	              "TableName": {
		//	                "maxLength": 100,
		//	                "minLength": 1,
		//	                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
		//	                "type": "string"
		//	              },
		//	              "VpcConfiguration": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "SecurityGroupIdList": {
		//	                    "items": {
		//	                      "maxLength": 255,
		//	                      "minLength": 1,
		//	                      "pattern": "[-0-9a-zA-Z]+",
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  },
		//	                  "SubnetIdList": {
		//	                    "items": {
		//	                      "maxLength": 255,
		//	                      "pattern": "[\\-0-9a-zA-Z]+",
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "SubnetIdList",
		//	                  "SecurityGroupIdList"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "DBInstanceIdentifier",
		//	              "DatabaseHost",
		//	              "DatabasePort",
		//	              "SecretManagerArn",
		//	              "DatabaseName",
		//	              "TableName",
		//	              "RoleArn",
		//	              "VpcConfiguration"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "RedshiftSourceConfig": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "ClusterIdentifier": {
		//	                "maxLength": 63,
		//	                "minLength": 1,
		//	                "pattern": "",
		//	                "type": "string"
		//	              },
		//	              "DatabaseHost": {
		//	                "maxLength": 253,
		//	                "minLength": 1,
		//	                "pattern": ".*\\S.*",
		//	                "type": "string"
		//	              },
		//	              "DatabaseName": {
		//	                "maxLength": 100,
		//	                "minLength": 1,
		//	                "pattern": "[a-z0-9]+",
		//	                "type": "string"
		//	              },
		//	              "DatabasePort": {
		//	                "maximum": 65535,
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "RoleArn": {
		//	                "maxLength": 256,
		//	                "pattern": "arn:([a-z\\d-]+):.*:.*:.*:.+",
		//	                "type": "string"
		//	              },
		//	              "SecretManagerArn": {
		//	                "maxLength": 256,
		//	                "pattern": "arn:([a-z\\d-]+):.*:.*:secret:AmazonLookoutMetrics-.+",
		//	                "type": "string"
		//	              },
		//	              "TableName": {
		//	                "maxLength": 100,
		//	                "minLength": 1,
		//	                "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
		//	                "type": "string"
		//	              },
		//	              "VpcConfiguration": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "SecurityGroupIdList": {
		//	                    "items": {
		//	                      "maxLength": 255,
		//	                      "minLength": 1,
		//	                      "pattern": "[-0-9a-zA-Z]+",
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  },
		//	                  "SubnetIdList": {
		//	                    "items": {
		//	                      "maxLength": 255,
		//	                      "pattern": "[\\-0-9a-zA-Z]+",
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "SubnetIdList",
		//	                  "SecurityGroupIdList"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "ClusterIdentifier",
		//	              "DatabaseHost",
		//	              "DatabasePort",
		//	              "SecretManagerArn",
		//	              "DatabaseName",
		//	              "TableName",
		//	              "RoleArn",
		//	              "VpcConfiguration"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "S3SourceConfig": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "FileFormatDescriptor": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "CsvFormatDescriptor": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Charset": {
		//	                        "maxLength": 63,
		//	                        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]*",
		//	                        "type": "string"
		//	                      },
		//	                      "ContainsHeader": {
		//	                        "type": "boolean"
		//	                      },
		//	                      "Delimiter": {
		//	                        "maxLength": 1,
		//	                        "pattern": "[^\\r\\n]",
		//	                        "type": "string"
		//	                      },
		//	                      "FileCompression": {
		//	                        "enum": [
		//	                          "NONE",
		//	                          "GZIP"
		//	                        ],
		//	                        "type": "string"
		//	                      },
		//	                      "HeaderList": {
		//	                        "items": {
		//	                          "description": "Name of a column in the data.",
		//	                          "maxLength": 63,
		//	                          "minLength": 1,
		//	                          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]*",
		//	                          "type": "string"
		//	                        },
		//	                        "type": "array"
		//	                      },
		//	                      "QuoteSymbol": {
		//	                        "maxLength": 1,
		//	                        "pattern": "[^\\r\\n]|^$",
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "JsonFormatDescriptor": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Charset": {
		//	                        "maxLength": 63,
		//	                        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]*",
		//	                        "type": "string"
		//	                      },
		//	                      "FileCompression": {
		//	                        "enum": [
		//	                          "NONE",
		//	                          "GZIP"
		//	                        ],
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "HistoricalDataPathList": {
		//	                "items": {
		//	                  "maxLength": 1024,
		//	                  "pattern": "^s3://[a-z0-9].+$",
		//	                  "type": "string"
		//	                },
		//	                "maxItems": 1,
		//	                "minItems": 1,
		//	                "type": "array"
		//	              },
		//	              "RoleArn": {
		//	                "maxLength": 256,
		//	                "pattern": "arn:([a-z\\d-]+):.*:.*:.*:.+",
		//	                "type": "string"
		//	              },
		//	              "TemplatedPathList": {
		//	                "items": {
		//	                  "maxLength": 1024,
		//	                  "pattern": "^s3://[a-zA-Z0-9_\\-\\/ {}=]+$",
		//	                  "type": "string"
		//	                },
		//	                "maxItems": 1,
		//	                "minItems": 1,
		//	                "type": "array"
		//	              }
		//	            },
		//	            "required": [
		//	              "RoleArn",
		//	              "FileFormatDescriptor"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Offset": {
		//	        "description": "Offset, in seconds, between the frequency interval and the time at which the metrics are available.",
		//	        "maximum": 432000,
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      },
		//	      "TimestampColumn": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ColumnFormat": {
		//	            "description": "A timestamp format for the timestamps in the dataset",
		//	            "maxLength": 63,
		//	            "pattern": ".*\\S.*",
		//	            "type": "string"
		//	          },
		//	          "ColumnName": {
		//	            "description": "Name of a column in the data.",
		//	            "maxLength": 63,
		//	            "minLength": 1,
		//	            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\-_]*",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Timezone": {
		//	        "maxLength": 60,
		//	        "pattern": ".*\\S.*",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "MetricSetName",
		//	      "MetricList",
		//	      "MetricSource"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 1,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"metric_set_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DimensionList
					"dimension_list": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "Dimensions for this MetricSet.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MetricList
					"metric_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AggregationFunction
								"aggregation_function": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Operator used to aggregate metric values",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: MetricName
								"metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Name of a column in the data.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Namespace
								"namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "Metrics captured by this MetricSet.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MetricSetDescription
					"metric_set_description": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A description for the MetricSet.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MetricSetFrequency
					"metric_set_frequency": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A frequency period to aggregate the data",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MetricSetName
					"metric_set_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name of the MetricSet.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MetricSource
					"metric_source": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AppFlowConfig
							"app_flow_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: FlowName
									"flow_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: CloudwatchConfig
							"cloudwatch_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: RDSSourceConfig
							"rds_source_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DBInstanceIdentifier
									"db_instance_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: DatabaseHost
									"database_host": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: DatabaseName
									"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: DatabasePort
									"database_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: SecretManagerArn
									"secret_manager_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: TableName
									"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: VpcConfiguration
									"vpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: SecurityGroupIdList
											"security_group_id_list": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: SubnetIdList
											"subnet_id_list": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: RedshiftSourceConfig
							"redshift_source_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ClusterIdentifier
									"cluster_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: DatabaseHost
									"database_host": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: DatabaseName
									"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: DatabasePort
									"database_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: SecretManagerArn
									"secret_manager_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: TableName
									"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: VpcConfiguration
									"vpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: SecurityGroupIdList
											"security_group_id_list": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: SubnetIdList
											"subnet_id_list": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: S3SourceConfig
							"s3_source_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: FileFormatDescriptor
									"file_format_descriptor": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: CsvFormatDescriptor
											"csv_format_descriptor": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Charset
													"charset": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: ContainsHeader
													"contains_header": schema.BoolAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: Delimiter
													"delimiter": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: FileCompression
													"file_compression": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: HeaderList
													"header_list": schema.ListAttribute{ /*START ATTRIBUTE*/
														ElementType: types.StringType,
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: QuoteSymbol
													"quote_symbol": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: JsonFormatDescriptor
											"json_format_descriptor": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Charset
													"charset": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: FileCompression
													"file_compression": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: HistoricalDataPathList
									"historical_data_path_list": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: TemplatedPathList
									"templated_path_list": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Offset
					"offset": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "Offset, in seconds, between the frequency interval and the time at which the metrics are available.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: TimestampColumn
					"timestamp_column": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ColumnFormat
							"column_format": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A timestamp format for the timestamps in the dataset",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ColumnName
							"column_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Name of a column in the data.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Timezone
					"timezone": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of metric sets for anomaly detection",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::LookoutMetrics::AnomalyDetector",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::LookoutMetrics::AnomalyDetector").WithTerraformTypeName("awscc_lookoutmetrics_anomaly_detector")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"aggregation_function":         "AggregationFunction",
		"anomaly_detector_config":      "AnomalyDetectorConfig",
		"anomaly_detector_description": "AnomalyDetectorDescription",
		"anomaly_detector_frequency":   "AnomalyDetectorFrequency",
		"anomaly_detector_name":        "AnomalyDetectorName",
		"app_flow_config":              "AppFlowConfig",
		"arn":                          "Arn",
		"charset":                      "Charset",
		"cloudwatch_config":            "CloudwatchConfig",
		"cluster_identifier":           "ClusterIdentifier",
		"column_format":                "ColumnFormat",
		"column_name":                  "ColumnName",
		"contains_header":              "ContainsHeader",
		"csv_format_descriptor":        "CsvFormatDescriptor",
		"database_host":                "DatabaseHost",
		"database_name":                "DatabaseName",
		"database_port":                "DatabasePort",
		"db_instance_identifier":       "DBInstanceIdentifier",
		"delimiter":                    "Delimiter",
		"dimension_list":               "DimensionList",
		"file_compression":             "FileCompression",
		"file_format_descriptor":       "FileFormatDescriptor",
		"flow_name":                    "FlowName",
		"header_list":                  "HeaderList",
		"historical_data_path_list":    "HistoricalDataPathList",
		"json_format_descriptor":       "JsonFormatDescriptor",
		"kms_key_arn":                  "KmsKeyArn",
		"metric_list":                  "MetricList",
		"metric_name":                  "MetricName",
		"metric_set_description":       "MetricSetDescription",
		"metric_set_frequency":         "MetricSetFrequency",
		"metric_set_list":              "MetricSetList",
		"metric_set_name":              "MetricSetName",
		"metric_source":                "MetricSource",
		"namespace":                    "Namespace",
		"offset":                       "Offset",
		"quote_symbol":                 "QuoteSymbol",
		"rds_source_config":            "RDSSourceConfig",
		"redshift_source_config":       "RedshiftSourceConfig",
		"role_arn":                     "RoleArn",
		"s3_source_config":             "S3SourceConfig",
		"secret_manager_arn":           "SecretManagerArn",
		"security_group_id_list":       "SecurityGroupIdList",
		"subnet_id_list":               "SubnetIdList",
		"table_name":                   "TableName",
		"templated_path_list":          "TemplatedPathList",
		"timestamp_column":             "TimestampColumn",
		"timezone":                     "Timezone",
		"vpc_configuration":            "VpcConfiguration",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
