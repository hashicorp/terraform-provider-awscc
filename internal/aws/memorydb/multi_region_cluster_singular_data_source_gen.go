// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package memorydb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_memorydb_multi_region_cluster", multiRegionClusterDataSource)
}

// multiRegionClusterDataSource returns the Terraform awscc_memorydb_multi_region_cluster data source.
// This Terraform data source corresponds to the CloudFormation AWS::MemoryDB::MultiRegionCluster resource.
func multiRegionClusterDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ARN
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the multi region cluster.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the multi region cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of the multi region cluster.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of the multi region cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Engine
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The engine type used by the multi region cluster.",
		//	  "type": "string"
		//	}
		"engine": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The engine type used by the multi region cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EngineVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Redis engine version used by the multi region cluster.",
		//	  "type": "string"
		//	}
		"engine_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Redis engine version used by the multi region cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MultiRegionClusterName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.",
		//	  "type": "string"
		//	}
		"multi_region_cluster_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MultiRegionClusterNameSuffix
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the Multi Region cluster. This value must be unique as it also serves as the multi region cluster identifier.",
		//	  "pattern": "[a-z][a-z0-9\\-]*",
		//	  "type": "string"
		//	}
		"multi_region_cluster_name_suffix": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the Multi Region cluster. This value must be unique as it also serves as the multi region cluster identifier.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MultiRegionParameterGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the parameter group associated with the multi region cluster.",
		//	  "type": "string"
		//	}
		"multi_region_parameter_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the parameter group associated with the multi region cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NodeType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The compute and memory capacity of the nodes in the multi region cluster.",
		//	  "type": "string"
		//	}
		"node_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The compute and memory capacity of the nodes in the multi region cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NumShards
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of shards the multi region cluster will contain.",
		//	  "type": "integer"
		//	}
		"num_shards": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of shards the multi region cluster will contain.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the multi region cluster. For example, Available, Updating, Creating.",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the multi region cluster. For example, Available, Updating, Creating.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TLSEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A flag that enables in-transit encryption when set to true.\n\nYou cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.",
		//	  "type": "boolean"
		//	}
		"tls_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "A flag that enables in-transit encryption when set to true.\n\nYou cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this multi region cluster.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key for the tag. May not be null.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The tag's value. May be null.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key for the tag. May not be null.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The tag's value. May be null.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this multi region cluster.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdateStrategy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An enum string value that determines the update strategy for scaling. Possible values are 'COORDINATED' and 'UNCOORDINATED'. Default is 'COORDINATED'.",
		//	  "enum": [
		//	    "COORDINATED",
		//	    "UNCOORDINATED"
		//	  ],
		//	  "type": "string"
		//	}
		"update_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An enum string value that determines the update strategy for scaling. Possible values are 'COORDINATED' and 'UNCOORDINATED'. Default is 'COORDINATED'.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::MemoryDB::MultiRegionCluster",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::MemoryDB::MultiRegionCluster").WithTerraformTypeName("awscc_memorydb_multi_region_cluster")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                               "ARN",
		"description":                       "Description",
		"engine":                            "Engine",
		"engine_version":                    "EngineVersion",
		"key":                               "Key",
		"multi_region_cluster_name":         "MultiRegionClusterName",
		"multi_region_cluster_name_suffix":  "MultiRegionClusterNameSuffix",
		"multi_region_parameter_group_name": "MultiRegionParameterGroupName",
		"node_type":                         "NodeType",
		"num_shards":                        "NumShards",
		"status":                            "Status",
		"tags":                              "Tags",
		"tls_enabled":                       "TLSEnabled",
		"update_strategy":                   "UpdateStrategy",
		"value":                             "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
