// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cognito

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_cognito_user_pool_risk_configuration_attachment", userPoolRiskConfigurationAttachmentDataSource)
}

// userPoolRiskConfigurationAttachmentDataSource returns the Terraform awscc_cognito_user_pool_risk_configuration_attachment data source.
// This Terraform data source corresponds to the CloudFormation AWS::Cognito::UserPoolRiskConfigurationAttachment resource.
func userPoolRiskConfigurationAttachmentDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccountTakeoverRiskConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Actions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "HighAction": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "EventAction": {
		//	              "type": "string"
		//	            },
		//	            "Notify": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "EventAction",
		//	            "Notify"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "LowAction": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "EventAction": {
		//	              "type": "string"
		//	            },
		//	            "Notify": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "EventAction",
		//	            "Notify"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "MediumAction": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "EventAction": {
		//	              "type": "string"
		//	            },
		//	            "Notify": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "EventAction",
		//	            "Notify"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "NotifyConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BlockEmail": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "HtmlBody": {
		//	              "type": "string"
		//	            },
		//	            "Subject": {
		//	              "type": "string"
		//	            },
		//	            "TextBody": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Subject"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "From": {
		//	          "type": "string"
		//	        },
		//	        "MfaEmail": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "HtmlBody": {
		//	              "type": "string"
		//	            },
		//	            "Subject": {
		//	              "type": "string"
		//	            },
		//	            "TextBody": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Subject"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "NoActionEmail": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "HtmlBody": {
		//	              "type": "string"
		//	            },
		//	            "Subject": {
		//	              "type": "string"
		//	            },
		//	            "TextBody": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Subject"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "ReplyTo": {
		//	          "type": "string"
		//	        },
		//	        "SourceArn": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "SourceArn"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "Actions"
		//	  ],
		//	  "type": "object"
		//	}
		"account_takeover_risk_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Actions
				"actions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: HighAction
						"high_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EventAction
								"event_action": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Notify
								"notify": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LowAction
						"low_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EventAction
								"event_action": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Notify
								"notify": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MediumAction
						"medium_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EventAction
								"event_action": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Notify
								"notify": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: NotifyConfiguration
				"notify_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BlockEmail
						"block_email": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: HtmlBody
								"html_body": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Subject
								"subject": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: TextBody
								"text_body": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: From
						"from": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MfaEmail
						"mfa_email": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: HtmlBody
								"html_body": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Subject
								"subject": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: TextBody
								"text_body": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: NoActionEmail
						"no_action_email": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: HtmlBody
								"html_body": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Subject
								"subject": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: TextBody
								"text_body": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ReplyTo
						"reply_to": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SourceArn
						"source_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ClientId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"client_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: CompromisedCredentialsRiskConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Actions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "EventAction": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "EventAction"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "EventFilter": {
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "required": [
		//	    "Actions"
		//	  ],
		//	  "type": "object"
		//	}
		"compromised_credentials_risk_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Actions
				"actions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: EventAction
						"event_action": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EventFilter
				"event_filter": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RiskExceptionConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BlockedIPRangeList": {
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "SkippedIPRangeList": {
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"risk_exception_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BlockedIPRangeList
				"blocked_ip_range_list": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SkippedIPRangeList
				"skipped_ip_range_list": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: UserPoolId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"user_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Cognito::UserPoolRiskConfigurationAttachment",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Cognito::UserPoolRiskConfigurationAttachment").WithTerraformTypeName("awscc_cognito_user_pool_risk_configuration_attachment")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_takeover_risk_configuration": "AccountTakeoverRiskConfiguration",
		"actions":                             "Actions",
		"block_email":                         "BlockEmail",
		"blocked_ip_range_list":               "BlockedIPRangeList",
		"client_id":                           "ClientId",
		"compromised_credentials_risk_configuration": "CompromisedCredentialsRiskConfiguration",
		"event_action":                 "EventAction",
		"event_filter":                 "EventFilter",
		"from":                         "From",
		"high_action":                  "HighAction",
		"html_body":                    "HtmlBody",
		"low_action":                   "LowAction",
		"medium_action":                "MediumAction",
		"mfa_email":                    "MfaEmail",
		"no_action_email":              "NoActionEmail",
		"notify":                       "Notify",
		"notify_configuration":         "NotifyConfiguration",
		"reply_to":                     "ReplyTo",
		"risk_exception_configuration": "RiskExceptionConfiguration",
		"skipped_ip_range_list":        "SkippedIPRangeList",
		"source_arn":                   "SourceArn",
		"subject":                      "Subject",
		"text_body":                    "TextBody",
		"user_pool_id":                 "UserPoolId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
