// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cloudfront

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_cloudfront_monitoring_subscription", monitoringSubscriptionDataSource)
}

// monitoringSubscriptionDataSource returns the Terraform awscc_cloudfront_monitoring_subscription data source.
// This Terraform data source corresponds to the CloudFormation AWS::CloudFront::MonitoringSubscription resource.
func monitoringSubscriptionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DistributionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the distribution that you are enabling metrics for.",
		//	  "type": "string"
		//	}
		"distribution_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the distribution that you are enabling metrics for.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MonitoringSubscription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A subscription configuration for additional CloudWatch metrics.",
		//	  "properties": {
		//	    "RealtimeMetricsSubscriptionConfig": {
		//	      "additionalProperties": false,
		//	      "description": "A subscription configuration for additional CloudWatch metrics.",
		//	      "properties": {
		//	        "RealtimeMetricsSubscriptionStatus": {
		//	          "description": "A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.",
		//	          "enum": [
		//	            "Enabled",
		//	            "Disabled"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "RealtimeMetricsSubscriptionStatus"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"monitoring_subscription": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: RealtimeMetricsSubscriptionConfig
				"realtime_metrics_subscription_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: RealtimeMetricsSubscriptionStatus
						"realtime_metrics_subscription_status": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A subscription configuration for additional CloudWatch metrics.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A subscription configuration for additional CloudWatch metrics.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::CloudFront::MonitoringSubscription",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CloudFront::MonitoringSubscription").WithTerraformTypeName("awscc_cloudfront_monitoring_subscription")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"distribution_id":                      "DistributionId",
		"monitoring_subscription":              "MonitoringSubscription",
		"realtime_metrics_subscription_config": "RealtimeMetricsSubscriptionConfig",
		"realtime_metrics_subscription_status": "RealtimeMetricsSubscriptionStatus",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
