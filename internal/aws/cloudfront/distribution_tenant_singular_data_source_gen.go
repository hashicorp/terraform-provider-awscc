// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cloudfront

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_cloudfront_distribution_tenant", distributionTenantDataSource)
}

// distributionTenantDataSource returns the Terraform awscc_cloudfront_distribution_tenant data source.
// This Terraform data source corresponds to the CloudFormation AWS::CloudFront::DistributionTenant resource.
func distributionTenantDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectionGroupId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the connection group for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.",
		//	  "type": "string"
		//	}
		"connection_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the connection group for the distribution tenant. If you don't specify a connection group, CloudFront uses the default connection group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Customizations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.",
		//	  "properties": {
		//	    "Certificate": {
		//	      "additionalProperties": false,
		//	      "description": "The ACMlong (ACM) certificate.",
		//	      "properties": {
		//	        "Arn": {
		//	          "description": "The Amazon Resource Name (ARN) of the ACM certificate.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "GeoRestrictions": {
		//	      "additionalProperties": false,
		//	      "description": "The geographic restrictions.",
		//	      "properties": {
		//	        "Locations": {
		//	          "description": "The locations for geographic restrictions.",
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "RestrictionType": {
		//	          "description": "The method that you want to use to restrict distribution of your content by country:\n  +  ``none``: No geographic restriction is enabled, meaning access to content is not restricted by client geo location.\n  +  ``blacklist``: The ``Location`` elements specify the countries in which you don't want CloudFront to distribute your content.\n  +  ``whitelist``: The ``Location`` elements specify the countries in which you want CloudFront to distribute your content.",
		//	          "enum": [
		//	            "blacklist",
		//	            "whitelist",
		//	            "none"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "WebAcl": {
		//	      "additionalProperties": false,
		//	      "description": "The WAF web ACL.",
		//	      "properties": {
		//	        "Action": {
		//	          "description": "The action for the WAF web ACL customization. You can specify ``override`` to specify a separate WAF web ACL for the distribution tenant. If you specify ``disable``, the distribution tenant won't have WAF web ACL protections and won't inherit from the multi-tenant distribution.",
		//	          "enum": [
		//	            "override",
		//	            "disable"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "Arn": {
		//	          "description": "The Amazon Resource Name (ARN) of the WAF web ACL.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"customizations": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Certificate
				"certificate": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Arn
						"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) of the ACM certificate.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The ACMlong (ACM) certificate.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: GeoRestrictions
				"geo_restrictions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Locations
						"locations": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "The locations for geographic restrictions.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RestrictionType
						"restriction_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The method that you want to use to restrict distribution of your content by country:\n  +  ``none``: No geographic restriction is enabled, meaning access to content is not restricted by client geo location.\n  +  ``blacklist``: The ``Location`` elements specify the countries in which you don't want CloudFront to distribute your content.\n  +  ``whitelist``: The ``Location`` elements specify the countries in which you want CloudFront to distribute your content.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The geographic restrictions.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: WebAcl
				"web_acl": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Action
						"action": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The action for the WAF web ACL customization. You can specify ``override`` to specify a separate WAF web ACL for the distribution tenant. If you specify ``disable``, the distribution tenant won't have WAF web ACL protections and won't inherit from the multi-tenant distribution.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Arn
						"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) of the WAF web ACL.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The WAF web ACL.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Customizations for the distribution tenant. For each distribution tenant, you can specify the geographic restrictions, and the Amazon Resource Names (ARNs) for the ACM certificate and WAF web ACL. These are specific values that you can override or disable from the multi-tenant distribution that was used to create the distribution tenant.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DistributionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the multi-tenant distribution.",
		//	  "type": "string"
		//	}
		"distribution_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the multi-tenant distribution.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainResults
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The details about the domain result.",
		//	    "properties": {
		//	      "Domain": {
		//	        "description": "The specified domain.",
		//	        "type": "string"
		//	      },
		//	      "Status": {
		//	        "description": "Whether the domain is active or inactive.",
		//	        "enum": [
		//	          "active",
		//	          "inactive"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"domain_results": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Domain
					"domain": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The specified domain.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Status
					"status": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Whether the domain is active or inactive.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Domains
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The domains associated with the distribution tenant.",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"domains": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The domains associated with the distribution tenant.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ETag
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"e_tag": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Enabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether the distribution tenant is in an enabled state. If disabled, the distribution tenant won't serve traffic.",
		//	  "type": "boolean"
		//	}
		"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether the distribution tenant is in an enabled state. If disabled, the distribution tenant won't serve traffic.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"distribution_tenant_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastModifiedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"last_modified_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ManagedCertificateRequest
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "An object that represents the request for the Amazon CloudFront managed ACM certificate.",
		//	  "properties": {
		//	    "CertificateTransparencyLoggingPreference": {
		//	      "description": "You can opt out of certificate transparency logging by specifying the ``disabled`` option. Opt in by specifying ``enabled``. For more information, see [Certificate Transparency Logging](https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency) in the *User Guide*.",
		//	      "enum": [
		//	        "enabled",
		//	        "disabled"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "PrimaryDomainName": {
		//	      "description": "The primary domain name associated with the CloudFront managed ACM certificate.",
		//	      "type": "string"
		//	    },
		//	    "ValidationTokenHost": {
		//	      "description": "Specify how the HTTP validation token will be served when requesting the CloudFront managed ACM certificate.\n  +  For ``cloudfront``, CloudFront will automatically serve the validation token. Choose this mode if you can point the domain's DNS to CloudFront immediately.\n  +  For ``self-hosted``, you serve the validation token from your existing infrastructure. Choose this mode when you need to maintain current traffic flow while your certificate is being issued. You can place the validation token at the well-known path on your existing web server, wait for ACM to validate and issue the certificate, and then update your DNS to point to CloudFront.",
		//	      "enum": [
		//	        "cloudfront",
		//	        "self-hosted"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"managed_certificate_request": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CertificateTransparencyLoggingPreference
				"certificate_transparency_logging_preference": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "You can opt out of certificate transparency logging by specifying the ``disabled`` option. Opt in by specifying ``enabled``. For more information, see [Certificate Transparency Logging](https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency) in the *User Guide*.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PrimaryDomainName
				"primary_domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The primary domain name associated with the CloudFront managed ACM certificate.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ValidationTokenHost
				"validation_token_host": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specify how the HTTP validation token will be served when requesting the CloudFront managed ACM certificate.\n  +  For ``cloudfront``, CloudFront will automatically serve the validation token. Choose this mode if you can point the domain's DNS to CloudFront immediately.\n  +  For ``self-hosted``, you serve the validation token from your existing infrastructure. Choose this mode when you need to maintain current traffic flow while your certificate is being issued. You can place the validation token at the well-known path on your existing web server, wait for ACM to validate and issue the certificate, and then update your DNS to point to CloudFront.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "An object that represents the request for the Amazon CloudFront managed ACM certificate.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the distribution tenant.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the distribution tenant.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Parameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.",
		//	    "properties": {
		//	      "Name": {
		//	        "description": "The parameter name.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The parameter value.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The parameter name.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The parameter value.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of parameter values to add to the resource. A parameter is specified as a key-value pair. A valid parameter value must exist for any parameter that is marked as required in the multi-tenant distribution.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A complex type that contains zero or more ``Tag`` elements.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A complex type that contains ``Tag`` key and ``Tag`` value.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "A string that contains ``Tag`` key.\n The string length should be between 1 and 128 characters. Valid characters include ``a-z``, ``A-Z``, ``0-9``, space, and the special characters ``_ - . : / = + @``.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "A string that contains an optional ``Tag`` value.\n The string length should be between 0 and 256 characters. Valid characters include ``a-z``, ``A-Z``, ``0-9``, space, and the special characters ``_ - . : / = + @``.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A string that contains ``Tag`` key.\n The string length should be between 1 and 128 characters. Valid characters include ``a-z``, ``A-Z``, ``0-9``, space, and the special characters ``_ - . : / = + @``.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A string that contains an optional ``Tag`` value.\n The string length should be between 0 and 256 characters. Valid characters include ``a-z``, ``A-Z``, ``0-9``, space, and the special characters ``_ - . : / = + @``.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A complex type that contains zero or more ``Tag`` elements.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::CloudFront::DistributionTenant",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CloudFront::DistributionTenant").WithTerraformTypeName("awscc_cloudfront_distribution_tenant")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"action":      "Action",
		"arn":         "Arn",
		"certificate": "Certificate",
		"certificate_transparency_logging_preference": "CertificateTransparencyLoggingPreference",
		"connection_group_id":                         "ConnectionGroupId",
		"created_time":                                "CreatedTime",
		"customizations":                              "Customizations",
		"distribution_id":                             "DistributionId",
		"distribution_tenant_id":                      "Id",
		"domain":                                      "Domain",
		"domain_results":                              "DomainResults",
		"domains":                                     "Domains",
		"e_tag":                                       "ETag",
		"enabled":                                     "Enabled",
		"geo_restrictions":                            "GeoRestrictions",
		"key":                                         "Key",
		"last_modified_time":                          "LastModifiedTime",
		"locations":                                   "Locations",
		"managed_certificate_request":                 "ManagedCertificateRequest",
		"name":                                        "Name",
		"parameters":                                  "Parameters",
		"primary_domain_name":                         "PrimaryDomainName",
		"restriction_type":                            "RestrictionType",
		"status":                                      "Status",
		"tags":                                        "Tags",
		"validation_token_host":                       "ValidationTokenHost",
		"value":                                       "Value",
		"web_acl":                                     "WebAcl",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
