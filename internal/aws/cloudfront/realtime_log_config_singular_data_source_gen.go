// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cloudfront

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_cloudfront_realtime_log_config", realtimeLogConfigDataSource)
}

// realtimeLogConfigDataSource returns the Terraform awscc_cloudfront_realtime_log_config data source.
// This Terraform data source corresponds to the CloudFormation AWS::CloudFront::RealtimeLogConfig resource.
func realtimeLogConfigDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndPoints
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Contains information about the Amazon Kinesis data stream where you are sending real-time log data for this real-time log configuration.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Contains information about the Amazon Kinesis data stream where you are sending real-time log data in a real-time log configuration.",
		//	    "properties": {
		//	      "KinesisStreamConfig": {
		//	        "additionalProperties": false,
		//	        "description": "Contains information about the Amazon Kinesis data stream where you are sending real-time log data.",
		//	        "properties": {
		//	          "RoleArn": {
		//	            "description": "The Amazon Resource Name (ARN) of an IAMlong (IAM) role that CloudFront can use to send real-time log data to your Kinesis data stream.\n For more information the IAM role, see [Real-time log configuration IAM role](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-iam-role) in the *Amazon CloudFront Developer Guide*.",
		//	            "type": "string"
		//	          },
		//	          "StreamArn": {
		//	            "description": "The Amazon Resource Name (ARN) of the Kinesis data stream where you are sending real-time log data.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "RoleArn",
		//	          "StreamArn"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "StreamType": {
		//	        "description": "The type of data stream where you are sending real-time log data. The only valid value is ``Kinesis``.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "KinesisStreamConfig",
		//	      "StreamType"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"end_points": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: KinesisStreamConfig
					"kinesis_stream_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: RoleArn
							"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of an IAMlong (IAM) role that CloudFront can use to send real-time log data to your Kinesis data stream.\n For more information the IAM role, see [Real-time log configuration IAM role](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-iam-role) in the *Amazon CloudFront Developer Guide*.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: StreamArn
							"stream_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of the Kinesis data stream where you are sending real-time log data.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Contains information about the Amazon Kinesis data stream where you are sending real-time log data.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: StreamType
					"stream_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The type of data stream where you are sending real-time log data. The only valid value is ``Kinesis``.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Contains information about the Amazon Kinesis data stream where you are sending real-time log data for this real-time log configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Fields
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of fields that are included in each real-time log record. In an API response, the fields are provided in the same order in which they are sent to the Amazon Kinesis data stream.\n For more information about fields, see [Real-time log configuration fields](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields) in the *Amazon CloudFront Developer Guide*.",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"fields": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of fields that are included in each real-time log record. In an API response, the fields are provided in the same order in which they are sent to the Amazon Kinesis data stream.\n For more information about fields, see [Real-time log configuration fields](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/real-time-logs.html#understand-real-time-log-config-fields) in the *Amazon CloudFront Developer Guide*.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique name of this real-time log configuration.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique name of this real-time log configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SamplingRate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. The sampling rate is an integer between 1 and 100, inclusive.",
		//	  "maximum": 100,
		//	  "minimum": 1,
		//	  "type": "number"
		//	}
		"sampling_rate": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "The sampling rate for this real-time log configuration. The sampling rate determines the percentage of viewer requests that are represented in the real-time log data. The sampling rate is an integer between 1 and 100, inclusive.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::CloudFront::RealtimeLogConfig",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CloudFront::RealtimeLogConfig").WithTerraformTypeName("awscc_cloudfront_realtime_log_config")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                   "Arn",
		"end_points":            "EndPoints",
		"fields":                "Fields",
		"kinesis_stream_config": "KinesisStreamConfig",
		"name":                  "Name",
		"role_arn":              "RoleArn",
		"sampling_rate":         "SamplingRate",
		"stream_arn":            "StreamArn",
		"stream_type":           "StreamType",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
