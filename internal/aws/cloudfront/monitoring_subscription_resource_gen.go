// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package cloudfront

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_cloudfront_monitoring_subscription", monitoringSubscriptionResource)
}

// monitoringSubscriptionResource returns the Terraform awscc_cloudfront_monitoring_subscription resource.
// This Terraform resource corresponds to the CloudFormation AWS::CloudFront::MonitoringSubscription resource.
func monitoringSubscriptionResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DistributionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the distribution that you are enabling metrics for.",
		//	  "type": "string"
		//	}
		"distribution_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the distribution that you are enabling metrics for.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MonitoringSubscription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A subscription configuration for additional CloudWatch metrics.",
		//	  "properties": {
		//	    "RealtimeMetricsSubscriptionConfig": {
		//	      "additionalProperties": false,
		//	      "description": "A subscription configuration for additional CloudWatch metrics.",
		//	      "properties": {
		//	        "RealtimeMetricsSubscriptionStatus": {
		//	          "description": "A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.",
		//	          "enum": [
		//	            "Enabled",
		//	            "Disabled"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "RealtimeMetricsSubscriptionStatus"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"monitoring_subscription": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: RealtimeMetricsSubscriptionConfig
				"realtime_metrics_subscription_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: RealtimeMetricsSubscriptionStatus
						"realtime_metrics_subscription_status": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A flag that indicates whether additional CloudWatch metrics are enabled for a given CloudFront distribution.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.OneOf(
									"Enabled",
									"Disabled",
								),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A subscription configuration for additional CloudWatch metrics.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A subscription configuration for additional CloudWatch metrics.",
			Required:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CloudFront::MonitoringSubscription").WithTerraformTypeName("awscc_cloudfront_monitoring_subscription")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"distribution_id":                      "DistributionId",
		"monitoring_subscription":              "MonitoringSubscription",
		"realtime_metrics_subscription_config": "RealtimeMetricsSubscriptionConfig",
		"realtime_metrics_subscription_status": "RealtimeMetricsSubscriptionStatus",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
