// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package supportapp

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_supportapp_slack_channel_configuration", slackChannelConfigurationResource)
	registry.AddListResourceFactory("awscc_supportapp_slack_channel_configuration", generic.NewListResource(slackChannelConfigurationResource))
}

// slackChannelConfigurationResource returns the Terraform awscc_supportapp_slack_channel_configuration resource.
// This Terraform resource corresponds to the CloudFormation AWS::SupportApp::SlackChannelConfiguration resource.
func slackChannelConfigurationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ChannelId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The channel ID in Slack, which identifies a channel within a workspace.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^\\S+$",
		//	  "type": "string"
		//	}
		"channel_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The channel ID in Slack, which identifies a channel within a workspace.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 256),
				stringvalidator.RegexMatches(regexp.MustCompile("^\\S+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ChannelName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The channel name in Slack.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^.+$",
		//	  "type": "string"
		//	}
		"channel_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The channel name in Slack.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 256),
				stringvalidator.RegexMatches(regexp.MustCompile("^.+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ChannelRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of an IAM role that grants the AWS Support App access to perform operations for AWS services.",
		//	  "maxLength": 2048,
		//	  "minLength": 31,
		//	  "pattern": "^arn:aws[-a-z0-9]*:iam::[0-9]{12}:role\\/(.+)$",
		//	  "type": "string"
		//	}
		"channel_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of an IAM role that grants the AWS Support App access to perform operations for AWS services.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(31, 2048),
				stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws[-a-z0-9]*:iam::[0-9]{12}:role\\/(.+)$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: NotifyOnAddCorrespondenceToCase
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Whether to notify when a correspondence is added to a case.",
		//	  "type": "boolean"
		//	}
		"notify_on_add_correspondence_to_case": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Whether to notify when a correspondence is added to a case.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NotifyOnCaseSeverity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The severity level of a support case that a customer wants to get notified for.",
		//	  "enum": [
		//	    "none",
		//	    "all",
		//	    "high"
		//	  ],
		//	  "type": "string"
		//	}
		"notify_on_case_severity": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The severity level of a support case that a customer wants to get notified for.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"none",
					"all",
					"high",
				),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: NotifyOnCreateOrReopenCase
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Whether to notify when a case is created or reopened.",
		//	  "type": "boolean"
		//	}
		"notify_on_create_or_reopen_case": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Whether to notify when a case is created or reopened.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NotifyOnResolveCase
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Whether to notify when a case is resolved.",
		//	  "type": "boolean"
		//	}
		"notify_on_resolve_case": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Whether to notify when a case is resolved.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TeamId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The team ID in Slack, which uniquely identifies a workspace.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^\\S+$",
		//	  "type": "string"
		//	}
		"team_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The team ID in Slack, which uniquely identifies a workspace.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 256),
				stringvalidator.RegexMatches(regexp.MustCompile("^\\S+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "An AWS Support App resource that creates, updates, lists and deletes Slack channel configurations.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SupportApp::SlackChannelConfiguration").WithTerraformTypeName("awscc_supportapp_slack_channel_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "team_id",
			Description:       "The team ID in Slack, which uniquely identifies a workspace",
			RequiredForImport: true,
		},
		identity.Identifier{
			Name:              "channel_id",
			Description:       "The channel ID in Slack, which identifies a channel within a workspace",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"channel_id":                           "ChannelId",
		"channel_name":                         "ChannelName",
		"channel_role_arn":                     "ChannelRoleArn",
		"notify_on_add_correspondence_to_case": "NotifyOnAddCorrespondenceToCase",
		"notify_on_case_severity":              "NotifyOnCaseSeverity",
		"notify_on_create_or_reopen_case":      "NotifyOnCreateOrReopenCase",
		"notify_on_resolve_case":               "NotifyOnResolveCase",
		"team_id":                              "TeamId",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
