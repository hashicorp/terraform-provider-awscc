// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package omics

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_omics_sequence_store", sequenceStoreDataSource)
}

// sequenceStoreDataSource returns the Terraform awscc_omics_sequence_store data source.
// This Terraform data source corresponds to the CloudFormation AWS::Omics::SequenceStore resource.
func sequenceStoreDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccessLogLocation
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Location of the access logs.",
		//	  "pattern": "^$|^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,800})/)?$",
		//	  "type": "string"
		//	}
		"access_log_location": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Location of the access logs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The store's ARN.",
		//	  "maxLength": 127,
		//	  "minLength": 1,
		//	  "pattern": "^arn:.+$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The store's ARN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "When the store was created.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "When the store was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A description for the store.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A description for the store.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ETagAlgorithmFamily
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "MD5up",
		//	    "SHA256up",
		//	    "SHA512up"
		//	  ],
		//	  "type": "string"
		//	}
		"e_tag_algorithm_family": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: FallbackLocation
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An S3 location that is used to store files that have failed a direct upload.",
		//	  "minLength": 0,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"fallback_location": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An S3 location that is used to store files that have failed a direct upload.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A name for the store.",
		//	  "maxLength": 127,
		//	  "minLength": 1,
		//	  "pattern": "^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A name for the store.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PropagatedSetLevelTags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags keys to propagate to the S3 objects associated with read sets in the sequence store.",
		//	  "items": {
		//	    "maxLength": 128,
		//	    "minLength": 1,
		//	    "type": "string"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"propagated_set_level_tags": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The tags keys to propagate to the S3 objects associated with read sets in the sequence store.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: S3AccessPointArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "This is ARN of the access point associated with the S3 bucket storing read sets.",
		//	  "maxLength": 1024,
		//	  "minLength": 1,
		//	  "pattern": "^arn:[^:]*:s3:[^:]*:[^:]*:accesspoint/.*$",
		//	  "type": "string"
		//	}
		"s3_access_point_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "This is ARN of the access point associated with the S3 bucket storing read sets.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: S3AccessPolicy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The resource policy that controls S3 access on the store",
		//	  "type": "object"
		//	}
		"s3_access_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  jsontypes.NormalizedType{},
			Description: "The resource policy that controls S3 access on the store",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: S3Uri
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The S3 URI of the sequence store.",
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"s3_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The S3 URI of the sequence store.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SequenceStoreId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 36,
		//	  "minLength": 10,
		//	  "pattern": "^[0-9]+$",
		//	  "type": "string"
		//	}
		"sequence_store_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SseConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Server-side encryption (SSE) settings for a store.",
		//	  "properties": {
		//	    "KeyArn": {
		//	      "description": "An encryption key ARN.",
		//	      "maxLength": 2048,
		//	      "minLength": 20,
		//	      "pattern": "arn:([^:\n]*):([^:\n]*):([^:\n]*):([0-9]{12}):([^:\n]*)",
		//	      "type": "string"
		//	    },
		//	    "Type": {
		//	      "enum": [
		//	        "KMS"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Type"
		//	  ],
		//	  "type": "object"
		//	}
		"sse_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: KeyArn
				"key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "An encryption key ARN.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Server-side encryption (SSE) settings for a store.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "CREATING",
		//	    "ACTIVE",
		//	    "UPDATING",
		//	    "DELETING",
		//	    "FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: StatusMessage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status message of the sequence store.",
		//	  "maxLength": 127,
		//	  "minLength": 1,
		//	  "pattern": "^[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+$",
		//	  "type": "string"
		//	}
		"status_message": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status message of the sequence store.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "maxLength": 256,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdateTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The last-updated time of the sequence store.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"update_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "The last-updated time of the sequence store.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Omics::SequenceStore",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Omics::SequenceStore").WithTerraformTypeName("awscc_omics_sequence_store")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_log_location":       "AccessLogLocation",
		"arn":                       "Arn",
		"creation_time":             "CreationTime",
		"description":               "Description",
		"e_tag_algorithm_family":    "ETagAlgorithmFamily",
		"fallback_location":         "FallbackLocation",
		"key_arn":                   "KeyArn",
		"name":                      "Name",
		"propagated_set_level_tags": "PropagatedSetLevelTags",
		"s3_access_point_arn":       "S3AccessPointArn",
		"s3_access_policy":          "S3AccessPolicy",
		"s3_uri":                    "S3Uri",
		"sequence_store_id":         "SequenceStoreId",
		"sse_config":                "SseConfig",
		"status":                    "Status",
		"status_message":            "StatusMessage",
		"tags":                      "Tags",
		"type":                      "Type",
		"update_time":               "UpdateTime",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
