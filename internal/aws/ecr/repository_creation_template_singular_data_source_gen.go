// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ecr

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ecr_repository_creation_template", repositoryCreationTemplateDataSource)
}

// repositoryCreationTemplateDataSource returns the Terraform awscc_ecr_repository_creation_template data source.
// This Terraform data source corresponds to the CloudFormation AWS::ECR::RepositoryCreationTemplate resource.
func repositoryCreationTemplateDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AppliedFor
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "Enumerable Strings representing the repository creation scenarios that the template will apply towards.",
		//	    "enum": [
		//	      "REPLICATION",
		//	      "PULL_THROUGH_CACHE"
		//	    ],
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"applied_for": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of enumerable Strings representing the repository creation scenarios that the template will apply towards.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Create timestamp of the template.",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Create timestamp of the template.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CustomRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the role to be assumed by ECR. This role must be in the same account as the registry that you are configuring.",
		//	  "maxLength": 2048,
		//	  "pattern": "^arn:aws[-a-z0-9]*:iam::[0-9]{12}:role/[A-Za-z0-9+=,-.@_]*$",
		//	  "type": "string"
		//	}
		"custom_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the role to be assumed by ECR. This role must be in the same account as the registry that you are configuring.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the template.",
		//	  "maxLength": 256,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the template.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EncryptionConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest. By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.\n\nFor more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html",
		//	  "properties": {
		//	    "EncryptionType": {
		//	      "description": "The encryption type to use.",
		//	      "enum": [
		//	        "AES256",
		//	        "KMS",
		//	        "KMS_DSSE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "KmsKey": {
		//	      "description": "If you use the KMS or KMS_DSSE encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.",
		//	      "maxLength": 2048,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "EncryptionType"
		//	  ],
		//	  "type": "object"
		//	}
		"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EncryptionType
				"encryption_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The encryption type to use.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: KmsKey
				"kms_key": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "If you use the KMS or KMS_DSSE encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest. By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.\n\nFor more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ImageTagMutability
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The image tag mutability setting for the repository.",
		//	  "enum": [
		//	    "MUTABLE",
		//	    "IMMUTABLE"
		//	  ],
		//	  "type": "string"
		//	}
		"image_tag_mutability": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The image tag mutability setting for the repository.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LifecyclePolicy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html",
		//	  "maxLength": 30720,
		//	  "minLength": 100,
		//	  "type": "string"
		//	}
		"lifecycle_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The JSON lifecycle policy text to apply to the repository. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Prefix
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The prefix use to match the repository name and apply the template.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*/?|ROOT)$",
		//	  "type": "string"
		//	}
		"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The prefix use to match the repository name and apply the template.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RepositoryPolicy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html",
		//	  "type": "string"
		//	}
		"repository_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceTags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An array of key-value pairs to apply to this resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"resource_tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Update timestamp of the template.",
		//	  "type": "string"
		//	}
		"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Update timestamp of the template.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ECR::RepositoryCreationTemplate",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ECR::RepositoryCreationTemplate").WithTerraformTypeName("awscc_ecr_repository_creation_template")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"applied_for":              "AppliedFor",
		"created_at":               "CreatedAt",
		"custom_role_arn":          "CustomRoleArn",
		"description":              "Description",
		"encryption_configuration": "EncryptionConfiguration",
		"encryption_type":          "EncryptionType",
		"image_tag_mutability":     "ImageTagMutability",
		"key":                      "Key",
		"kms_key":                  "KmsKey",
		"lifecycle_policy":         "LifecyclePolicy",
		"prefix":                   "Prefix",
		"repository_policy":        "RepositoryPolicy",
		"resource_tags":            "ResourceTags",
		"updated_at":               "UpdatedAt",
		"value":                    "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
