// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ecr

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_ecr_registry_scanning_configuration", registryScanningConfigurationResource)
	registry.AddListResourceFactory("awscc_ecr_registry_scanning_configuration", generic.NewListResource(registryScanningConfigurationResource))
}

// registryScanningConfigurationResource returns the Terraform awscc_ecr_registry_scanning_configuration resource.
// This Terraform resource corresponds to the CloudFormation AWS::ECR::RegistryScanningConfiguration resource.
func registryScanningConfigurationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: RegistryId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The registry id.",
		//	  "pattern": "^[0-9]{12}$",
		//	  "type": "string"
		//	}
		"registry_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The registry id.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Rules
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The scanning rules associated with the registry.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The scanning rules associated with the registry.",
		//	    "properties": {
		//	      "RepositoryFilters": {
		//	        "description": "The details of a scanning repository filter. For more information on how to use filters, see [Using filters](https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html#image-scanning-filters) in the *Amazon Elastic Container Registry User Guide*.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "The filter settings used with image replication. Specifying a repository filter to a replication rule provides a method for controlling which repositories in a private registry are replicated. If no filters are added, the contents of all repositories are replicated.",
		//	          "properties": {
		//	            "Filter": {
		//	              "description": "The filter to use when scanning.",
		//	              "pattern": "^[a-z0-9*](?:[._\\-/a-z0-9*]?[a-z0-9*]+)*$",
		//	              "type": "string"
		//	            },
		//	            "FilterType": {
		//	              "description": "The type associated with the filter.",
		//	              "enum": [
		//	                "WILDCARD"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Filter",
		//	            "FilterType"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "maxItems": 100,
		//	        "minItems": 0,
		//	        "type": "array"
		//	      },
		//	      "ScanFrequency": {
		//	        "description": "The frequency that scans are performed at for a private registry. When the ``ENHANCED`` scan type is specified, the supported scan frequencies are ``CONTINUOUS_SCAN`` and ``SCAN_ON_PUSH``. When the ``BASIC`` scan type is specified, the ``SCAN_ON_PUSH`` scan frequency is supported. If scan on push is not specified, then the ``MANUAL`` scan frequency is set by default.",
		//	        "enum": [
		//	          "SCAN_ON_PUSH",
		//	          "CONTINUOUS_SCAN"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "ScanFrequency",
		//	      "RepositoryFilters"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 2,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: RepositoryFilters
					"repository_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Filter
								"filter": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The filter to use when scanning.",
									Required:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9*](?:[._\\-/a-z0-9*]?[a-z0-9*]+)*$"), ""),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
								// Property: FilterType
								"filter_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The type associated with the filter.",
									Required:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"WILDCARD",
										),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "The details of a scanning repository filter. For more information on how to use filters, see [Using filters](https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html#image-scanning-filters) in the *Amazon Elastic Container Registry User Guide*.",
						Required:    true,
						Validators: []validator.List{ /*START VALIDATORS*/
							listvalidator.SizeBetween(0, 100),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							generic.Multiset(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ScanFrequency
					"scan_frequency": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The frequency that scans are performed at for a private registry. When the ``ENHANCED`` scan type is specified, the supported scan frequencies are ``CONTINUOUS_SCAN`` and ``SCAN_ON_PUSH``. When the ``BASIC`` scan type is specified, the ``SCAN_ON_PUSH`` scan frequency is supported. If scan on push is not specified, then the ``MANUAL`` scan frequency is set by default.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"SCAN_ON_PUSH",
								"CONTINUOUS_SCAN",
							),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The scanning rules associated with the registry.",
			Required:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(0, 2),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ScanType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of scanning configured for the registry.",
		//	  "enum": [
		//	    "BASIC",
		//	    "ENHANCED"
		//	  ],
		//	  "type": "string"
		//	}
		"scan_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of scanning configured for the registry.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"BASIC",
					"ENHANCED",
				),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "The scanning configuration for a private registry.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ECR::RegistryScanningConfiguration").WithTerraformTypeName("awscc_ecr_registry_scanning_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "registry_id",
			Description:       "The registry id",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"filter":             "Filter",
		"filter_type":        "FilterType",
		"registry_id":        "RegistryId",
		"repository_filters": "RepositoryFilters",
		"rules":              "Rules",
		"scan_frequency":     "ScanFrequency",
		"scan_type":          "ScanType",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
