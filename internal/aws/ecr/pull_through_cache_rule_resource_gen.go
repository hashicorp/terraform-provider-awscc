// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ecr

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_ecr_pull_through_cache_rule", pullThroughCacheRuleResource)
}

// pullThroughCacheRuleResource returns the Terraform awscc_ecr_pull_through_cache_rule resource.
// This Terraform resource corresponds to the CloudFormation AWS::ECR::PullThroughCacheRule resource.
func pullThroughCacheRuleResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CredentialArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the Secrets Manager secret associated with the pull through cache rule.",
		//	  "maxLength": 612,
		//	  "minLength": 50,
		//	  "pattern": "^arn:aws:secretsmanager:[a-zA-Z0-9-:]+:secret:ecr\\-pullthroughcache\\/[a-zA-Z0-9\\/_+=.@-]+$",
		//	  "type": "string"
		//	}
		"credential_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the Secrets Manager secret associated with the pull through cache rule.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(50, 612),
				stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws:secretsmanager:[a-zA-Z0-9-:]+:secret:ecr\\-pullthroughcache\\/[a-zA-Z0-9\\/_+=.@-]+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// CredentialArn is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: CustomRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the IAM role associated with the pull through cache rule.",
		//	  "maxLength": 2048,
		//	  "type": "string"
		//	}
		"custom_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the IAM role associated with the pull through cache rule.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(2048),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// CustomRoleArn is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: EcrRepositoryPrefix
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon ECR repository prefix associated with the pull through cache rule.",
		//	  "maxLength": 30,
		//	  "minLength": 2,
		//	  "pattern": "^((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*/?|ROOT)$",
		//	  "type": "string"
		//	}
		"ecr_repository_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon ECR repository prefix associated with the pull through cache rule.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(2, 30),
				stringvalidator.RegexMatches(regexp.MustCompile("^((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*/?|ROOT)$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpstreamRegistry
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the upstream source registry associated with the pull through cache rule.",
		//	  "type": "string"
		//	}
		"upstream_registry": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the upstream source registry associated with the pull through cache rule.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// UpstreamRegistry is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: UpstreamRegistryUrl
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The upstream registry URL associated with the pull through cache rule.",
		//	  "type": "string"
		//	}
		"upstream_registry_url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The upstream registry URL associated with the pull through cache rule.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpstreamRepositoryPrefix
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The upstream repository prefix associated with the pull through cache rule.",
		//	  "maxLength": 30,
		//	  "minLength": 2,
		//	  "pattern": "^((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*/?|ROOT)$",
		//	  "type": "string"
		//	}
		"upstream_repository_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The upstream repository prefix associated with the pull through cache rule.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(2, 30),
				stringvalidator.RegexMatches(regexp.MustCompile("^((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*/?|ROOT)$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "The ``AWS::ECR::PullThroughCacheRule`` resource creates or updates a pull through cache rule. A pull through cache rule provides a way to cache images from an upstream registry in your Amazon ECR private registry.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ECR::PullThroughCacheRule").WithTerraformTypeName("awscc_ecr_pull_through_cache_rule")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "ecr_repository_prefix",
			Description:       "The Amazon ECR repository prefix associated with the pull through cache rule",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"credential_arn":             "CredentialArn",
		"custom_role_arn":            "CustomRoleArn",
		"ecr_repository_prefix":      "EcrRepositoryPrefix",
		"upstream_registry":          "UpstreamRegistry",
		"upstream_registry_url":      "UpstreamRegistryUrl",
		"upstream_repository_prefix": "UpstreamRepositoryPrefix",
	})

	opts = opts.IsImmutableType(true)

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/CredentialArn",
		"/properties/UpstreamRegistry",
		"/properties/CustomRoleArn",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
