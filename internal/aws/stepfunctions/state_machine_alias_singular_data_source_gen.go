// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package stepfunctions

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_stepfunctions_state_machine_alias", stateMachineAliasDataSource)
}

// stateMachineAliasDataSource returns the Terraform awscc_stepfunctions_state_machine_alias data source.
// This Terraform data source corresponds to the CloudFormation AWS::StepFunctions::StateMachineAlias resource.
func stateMachineAliasDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the alias.",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DeploymentPreference
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The settings to enable gradual state machine deployments.",
		//	  "properties": {
		//	    "Alarms": {
		//	      "description": "A list of CloudWatch alarm names that will be monitored during the deployment. The deployment will fail and rollback if any alarms go into ALARM state.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "maxItems": 100,
		//	      "minItems": 1,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "Interval": {
		//	      "description": "The time in minutes between each traffic shifting increment.",
		//	      "maximum": 2100,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "Percentage": {
		//	      "description": "The percentage of traffic to shift to the new version in each increment.",
		//	      "maximum": 99,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "StateMachineVersionArn": {
		//	      "maxLength": 2048,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "Type": {
		//	      "description": "The type of deployment to perform.",
		//	      "enum": [
		//	        "LINEAR",
		//	        "ALL_AT_ONCE",
		//	        "CANARY"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "StateMachineVersionArn",
		//	    "Type"
		//	  ],
		//	  "type": "object"
		//	}
		"deployment_preference": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Alarms
				"alarms": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "A list of CloudWatch alarm names that will be monitored during the deployment. The deployment will fail and rollback if any alarms go into ALARM state.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Interval
				"interval": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The time in minutes between each traffic shifting increment.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Percentage
				"percentage": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The percentage of traffic to shift to the new version in each increment.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: StateMachineVersionArn
				"state_machine_version_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The type of deployment to perform.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The settings to enable gradual state machine deployments.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An optional description of the alias.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An optional description of the alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The alias name.",
		//	  "maxLength": 80,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The alias name.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoutingConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The routing configuration of the alias. One or two versions can be mapped to an alias to split StartExecution requests of the same state machine.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "StateMachineVersionArn": {
		//	        "description": "The Amazon Resource Name (ARN) that identifies one or two state machine versions defined in the routing configuration.",
		//	        "maxLength": 2048,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Weight": {
		//	        "description": "The percentage of traffic you want to route to the state machine version. The sum of the weights in the routing configuration must be equal to 100.",
		//	        "maximum": 100,
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      }
		//	    },
		//	    "required": [
		//	      "StateMachineVersionArn",
		//	      "Weight"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 2,
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"routing_configuration": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: StateMachineVersionArn
					"state_machine_version_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The Amazon Resource Name (ARN) that identifies one or two state machine versions defined in the routing configuration.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Weight
					"weight": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The percentage of traffic you want to route to the state machine version. The sum of the weights in the routing configuration must be equal to 100.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The routing configuration of the alias. One or two versions can be mapped to an alias to split StartExecution requests of the same state machine.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::StepFunctions::StateMachineAlias",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::StepFunctions::StateMachineAlias").WithTerraformTypeName("awscc_stepfunctions_state_machine_alias")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"alarms":                    "Alarms",
		"arn":                       "Arn",
		"deployment_preference":     "DeploymentPreference",
		"description":               "Description",
		"interval":                  "Interval",
		"name":                      "Name",
		"percentage":                "Percentage",
		"routing_configuration":     "RoutingConfiguration",
		"state_machine_version_arn": "StateMachineVersionArn",
		"type":                      "Type",
		"weight":                    "Weight",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
