// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package neptune

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_neptune_db_instance", dBInstanceDataSource)
}

// dBInstanceDataSource returns the Terraform awscc_neptune_db_instance data source.
// This Terraform data source corresponds to the CloudFormation AWS::Neptune::DBInstance resource.
func dBInstanceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AllowMajorVersionUpgrade
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.",
		//	  "type": "boolean"
		//	}
		"allow_major_version_upgrade": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AutoMinorVersionUpgrade
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates that minor version patches are applied automatically.\n\nWhen updating this property, some interruptions may occur.",
		//	  "type": "boolean"
		//	}
		"auto_minor_version_upgrade": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates that minor version patches are applied automatically.\n\nWhen updating this property, some interruptions may occur.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the name of the Availability Zone the DB instance is located in.",
		//	  "type": "string"
		//	}
		"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the name of the Availability Zone the DB instance is located in.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DBClusterIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.",
		//	  "type": "string"
		//	}
		"db_cluster_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DBInstanceClass
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Contains the name of the compute and memory capacity class of the DB instance.\n\nIf you update this property, some interruptions may occur.",
		//	  "type": "string"
		//	}
		"db_instance_class": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Contains the name of the compute and memory capacity class of the DB instance.\n\nIf you update this property, some interruptions may occur.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DBInstanceIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.",
		//	  "type": "string"
		//	}
		"db_instance_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DBParameterGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of an existing DB parameter group or a reference to an AWS::Neptune::DBParameterGroup resource created in the template. If any of the data members of the referenced parameter group are changed during an update, the DB instance might need to be restarted, which causes some interruption. If the parameter group contains static parameters, whether they were changed or not, an update triggers a reboot.",
		//	  "type": "string"
		//	}
		"db_parameter_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of an existing DB parameter group or a reference to an AWS::Neptune::DBParameterGroup resource created in the template. If any of the data members of the referenced parameter group are changed during an update, the DB instance might need to be restarted, which causes some interruption. If the parameter group contains static parameters, whether they were changed or not, an update triggers a reboot.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DBSnapshotIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "This parameter is not supported.\n\n`AWS::Neptune::DBInstance` does not support restoring from snapshots.\n\n`AWS::Neptune::DBCluster` does support restoring from snapshots.\n\n",
		//	  "type": "string"
		//	}
		"db_snapshot_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "This parameter is not supported.\n\n`AWS::Neptune::DBInstance` does not support restoring from snapshots.\n\n`AWS::Neptune::DBCluster` does support restoring from snapshots.\n\n",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DBSubnetGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A DB subnet group to associate with the DB instance. If you update this value, the new subnet group must be a subnet group in a new virtual private cloud (VPC).",
		//	  "type": "string"
		//	}
		"db_subnet_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A DB subnet group to associate with the DB instance. If you update this value, the new subnet group must be a subnet group in a new virtual private cloud (VPC).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Endpoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The connection endpoint for the database. For example: `mystack-mydb-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com`.",
		//	  "type": "string"
		//	}
		"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The connection endpoint for the database. For example: `mystack-mydb-1apw1j4phylrk.cg034hpkmmjt.us-east-2.rds.amazonaws.com`.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Port
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The port number on which the database accepts connections. For example: `8182`.",
		//	  "type": "string"
		//	}
		"port": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The port number on which the database accepts connections. For example: `8182`.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PreferredMaintenanceWindow
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).",
		//	  "type": "string"
		//	}
		"preferred_maintenance_window": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An arbitrary set of tags (key-value pairs) for this DB instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An arbitrary set of tags (key-value pairs) for this DB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Neptune::DBInstance",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Neptune::DBInstance").WithTerraformTypeName("awscc_neptune_db_instance")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allow_major_version_upgrade":  "AllowMajorVersionUpgrade",
		"auto_minor_version_upgrade":   "AutoMinorVersionUpgrade",
		"availability_zone":            "AvailabilityZone",
		"db_cluster_identifier":        "DBClusterIdentifier",
		"db_instance_class":            "DBInstanceClass",
		"db_instance_identifier":       "DBInstanceIdentifier",
		"db_parameter_group_name":      "DBParameterGroupName",
		"db_snapshot_identifier":       "DBSnapshotIdentifier",
		"db_subnet_group_name":         "DBSubnetGroupName",
		"endpoint":                     "Endpoint",
		"key":                          "Key",
		"port":                         "Port",
		"preferred_maintenance_window": "PreferredMaintenanceWindow",
		"tags":                         "Tags",
		"value":                        "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
