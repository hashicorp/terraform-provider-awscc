// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package iot

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_iot_topic_rule", topicRuleResource)
}

// topicRuleResource returns the Terraform awscc_iot_topic_rule resource.
// This Terraform resource corresponds to the CloudFormation AWS::IoT::TopicRule resource.
func topicRuleResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RuleName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"rule_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TopicRulePayload
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Actions": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "CloudwatchAlarm": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "AlarmName": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "StateReason": {
		//	                "type": "string"
		//	              },
		//	              "StateValue": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "AlarmName",
		//	              "StateReason",
		//	              "StateValue",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "CloudwatchLogs": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "BatchMode": {
		//	                "type": "boolean"
		//	              },
		//	              "LogGroupName": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "LogGroupName",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "CloudwatchMetric": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MetricName": {
		//	                "type": "string"
		//	              },
		//	              "MetricNamespace": {
		//	                "type": "string"
		//	              },
		//	              "MetricTimestamp": {
		//	                "type": "string"
		//	              },
		//	              "MetricUnit": {
		//	                "type": "string"
		//	              },
		//	              "MetricValue": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "MetricName",
		//	              "MetricValue",
		//	              "MetricNamespace",
		//	              "MetricUnit",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "DynamoDB": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "HashKeyField": {
		//	                "type": "string"
		//	              },
		//	              "HashKeyType": {
		//	                "type": "string"
		//	              },
		//	              "HashKeyValue": {
		//	                "type": "string"
		//	              },
		//	              "PayloadField": {
		//	                "type": "string"
		//	              },
		//	              "RangeKeyField": {
		//	                "type": "string"
		//	              },
		//	              "RangeKeyType": {
		//	                "type": "string"
		//	              },
		//	              "RangeKeyValue": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "TableName": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "TableName",
		//	              "HashKeyField",
		//	              "HashKeyValue",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "DynamoDBv2": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "PutItem": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "TableName": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "TableName"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Elasticsearch": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Endpoint": {
		//	                "type": "string"
		//	              },
		//	              "Id": {
		//	                "type": "string"
		//	              },
		//	              "Index": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "Type": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type",
		//	              "Endpoint",
		//	              "Index",
		//	              "Id",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Firehose": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "BatchMode": {
		//	                "type": "boolean"
		//	              },
		//	              "DeliveryStreamName": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "Separator": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "DeliveryStreamName",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Http": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Auth": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Sigv4": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "RoleArn": {
		//	                        "type": "string"
		//	                      },
		//	                      "ServiceName": {
		//	                        "type": "string"
		//	                      },
		//	                      "SigningRegion": {
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "ServiceName",
		//	                      "SigningRegion",
		//	                      "RoleArn"
		//	                    ],
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "ConfirmationUrl": {
		//	                "type": "string"
		//	              },
		//	              "Headers": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Key": {
		//	                      "type": "string"
		//	                    },
		//	                    "Value": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Value",
		//	                    "Key"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Url": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Url"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "IotAnalytics": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "BatchMode": {
		//	                "type": "boolean"
		//	              },
		//	              "ChannelName": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "ChannelName",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "IotEvents": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "BatchMode": {
		//	                "type": "boolean"
		//	              },
		//	              "InputName": {
		//	                "type": "string"
		//	              },
		//	              "MessageId": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "InputName",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "IotSiteWise": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "PutAssetPropertyValueEntries": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "AssetId": {
		//	                      "type": "string"
		//	                    },
		//	                    "EntryId": {
		//	                      "type": "string"
		//	                    },
		//	                    "PropertyAlias": {
		//	                      "type": "string"
		//	                    },
		//	                    "PropertyId": {
		//	                      "type": "string"
		//	                    },
		//	                    "PropertyValues": {
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "properties": {
		//	                          "Quality": {
		//	                            "type": "string"
		//	                          },
		//	                          "Timestamp": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "OffsetInNanos": {
		//	                                "type": "string"
		//	                              },
		//	                              "TimeInSeconds": {
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "TimeInSeconds"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "Value": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "BooleanValue": {
		//	                                "type": "string"
		//	                              },
		//	                              "DoubleValue": {
		//	                                "type": "string"
		//	                              },
		//	                              "IntegerValue": {
		//	                                "type": "string"
		//	                              },
		//	                              "StringValue": {
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "Value",
		//	                          "Timestamp"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array",
		//	                      "uniqueItems": true
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "PropertyValues"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "PutAssetPropertyValueEntries",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Kafka": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "ClientProperties": {
		//	                "additionalProperties": false,
		//	                "patternProperties": {
		//	                  "": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "DestinationArn": {
		//	                "type": "string"
		//	              },
		//	              "Headers": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Key": {
		//	                      "type": "string"
		//	                    },
		//	                    "Value": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Value",
		//	                    "Key"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Key": {
		//	                "type": "string"
		//	              },
		//	              "Partition": {
		//	                "type": "string"
		//	              },
		//	              "Topic": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "DestinationArn",
		//	              "Topic",
		//	              "ClientProperties"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Kinesis": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "PartitionKey": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "StreamName": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "StreamName",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Lambda": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "FunctionArn": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Location": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "DeviceId": {
		//	                "type": "string"
		//	              },
		//	              "Latitude": {
		//	                "type": "string"
		//	              },
		//	              "Longitude": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "Timestamp": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Unit": {
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Value"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "TrackerName": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "RoleArn",
		//	              "TrackerName",
		//	              "DeviceId",
		//	              "Latitude",
		//	              "Longitude"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "OpenSearch": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Endpoint": {
		//	                "type": "string"
		//	              },
		//	              "Id": {
		//	                "type": "string"
		//	              },
		//	              "Index": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "Type": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type",
		//	              "Endpoint",
		//	              "Index",
		//	              "Id",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Republish": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Headers": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "ContentType": {
		//	                    "maxLength": 1024,
		//	                    "minLength": 0,
		//	                    "type": "string"
		//	                  },
		//	                  "CorrelationData": {
		//	                    "maxLength": 1024,
		//	                    "minLength": 0,
		//	                    "type": "string"
		//	                  },
		//	                  "MessageExpiry": {
		//	                    "maxLength": 1024,
		//	                    "minLength": 0,
		//	                    "type": "string"
		//	                  },
		//	                  "PayloadFormatIndicator": {
		//	                    "maxLength": 1024,
		//	                    "minLength": 0,
		//	                    "type": "string"
		//	                  },
		//	                  "ResponseTopic": {
		//	                    "maxLength": 1024,
		//	                    "minLength": 0,
		//	                    "type": "string"
		//	                  },
		//	                  "UserProperties": {
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Key": {
		//	                          "maxLength": 1024,
		//	                          "minLength": 0,
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "maxLength": 1024,
		//	                          "minLength": 0,
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Key",
		//	                        "Value"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "maxItems": 100,
		//	                    "minItems": 1,
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Qos": {
		//	                "type": "integer"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "Topic": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Topic",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "S3": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "BucketName": {
		//	                "type": "string"
		//	              },
		//	              "CannedAcl": {
		//	                "enum": [
		//	                  "private",
		//	                  "public-read",
		//	                  "public-read-write",
		//	                  "aws-exec-read",
		//	                  "authenticated-read",
		//	                  "bucket-owner-read",
		//	                  "bucket-owner-full-control",
		//	                  "log-delivery-write"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "Key": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "BucketName",
		//	              "Key",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Sns": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MessageFormat": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "TargetArn": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "TargetArn",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Sqs": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "QueueUrl": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "UseBase64": {
		//	                "type": "boolean"
		//	              }
		//	            },
		//	            "required": [
		//	              "RoleArn",
		//	              "QueueUrl"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "StepFunctions": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "ExecutionNamePrefix": {
		//	                "type": "string"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "StateMachineName": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "StateMachineName",
		//	              "RoleArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Timestream": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "DatabaseName": {
		//	                "type": "string"
		//	              },
		//	              "Dimensions": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Name": {
		//	                      "type": "string"
		//	                    },
		//	                    "Value": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Name",
		//	                    "Value"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "maxItems": 128,
		//	                "minItems": 1,
		//	                "type": "array"
		//	              },
		//	              "RoleArn": {
		//	                "type": "string"
		//	              },
		//	              "TableName": {
		//	                "type": "string"
		//	              },
		//	              "Timestamp": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Unit": {
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Value",
		//	                  "Unit"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "RoleArn",
		//	              "DatabaseName",
		//	              "TableName",
		//	              "Dimensions"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "AwsIotSqlVersion": {
		//	      "type": "string"
		//	    },
		//	    "Description": {
		//	      "type": "string"
		//	    },
		//	    "ErrorAction": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CloudwatchAlarm": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AlarmName": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "StateReason": {
		//	              "type": "string"
		//	            },
		//	            "StateValue": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "AlarmName",
		//	            "StateReason",
		//	            "StateValue",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "CloudwatchLogs": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "BatchMode": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "LogGroupName",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "CloudwatchMetric": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "MetricName": {
		//	              "type": "string"
		//	            },
		//	            "MetricNamespace": {
		//	              "type": "string"
		//	            },
		//	            "MetricTimestamp": {
		//	              "type": "string"
		//	            },
		//	            "MetricUnit": {
		//	              "type": "string"
		//	            },
		//	            "MetricValue": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "MetricName",
		//	            "MetricValue",
		//	            "MetricNamespace",
		//	            "MetricUnit",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "DynamoDB": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "HashKeyField": {
		//	              "type": "string"
		//	            },
		//	            "HashKeyType": {
		//	              "type": "string"
		//	            },
		//	            "HashKeyValue": {
		//	              "type": "string"
		//	            },
		//	            "PayloadField": {
		//	              "type": "string"
		//	            },
		//	            "RangeKeyField": {
		//	              "type": "string"
		//	            },
		//	            "RangeKeyType": {
		//	              "type": "string"
		//	            },
		//	            "RangeKeyValue": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "TableName": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "TableName",
		//	            "HashKeyField",
		//	            "HashKeyValue",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "DynamoDBv2": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "PutItem": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "TableName": {
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "TableName"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Elasticsearch": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Endpoint": {
		//	              "type": "string"
		//	            },
		//	            "Id": {
		//	              "type": "string"
		//	            },
		//	            "Index": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "Type": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Type",
		//	            "Endpoint",
		//	            "Index",
		//	            "Id",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Firehose": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "BatchMode": {
		//	              "type": "boolean"
		//	            },
		//	            "DeliveryStreamName": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "Separator": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "DeliveryStreamName",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Http": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Auth": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Sigv4": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "RoleArn": {
		//	                      "type": "string"
		//	                    },
		//	                    "ServiceName": {
		//	                      "type": "string"
		//	                    },
		//	                    "SigningRegion": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ServiceName",
		//	                    "SigningRegion",
		//	                    "RoleArn"
		//	                  ],
		//	                  "type": "object"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "ConfirmationUrl": {
		//	              "type": "string"
		//	            },
		//	            "Headers": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Key": {
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Value",
		//	                  "Key"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            },
		//	            "Url": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Url"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "IotAnalytics": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "BatchMode": {
		//	              "type": "boolean"
		//	            },
		//	            "ChannelName": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "ChannelName",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "IotEvents": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "BatchMode": {
		//	              "type": "boolean"
		//	            },
		//	            "InputName": {
		//	              "type": "string"
		//	            },
		//	            "MessageId": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "InputName",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "IotSiteWise": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "PutAssetPropertyValueEntries": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "AssetId": {
		//	                    "type": "string"
		//	                  },
		//	                  "EntryId": {
		//	                    "type": "string"
		//	                  },
		//	                  "PropertyAlias": {
		//	                    "type": "string"
		//	                  },
		//	                  "PropertyId": {
		//	                    "type": "string"
		//	                  },
		//	                  "PropertyValues": {
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Quality": {
		//	                          "type": "string"
		//	                        },
		//	                        "Timestamp": {
		//	                          "additionalProperties": false,
		//	                          "properties": {
		//	                            "OffsetInNanos": {
		//	                              "type": "string"
		//	                            },
		//	                            "TimeInSeconds": {
		//	                              "type": "string"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "TimeInSeconds"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Value": {
		//	                          "additionalProperties": false,
		//	                          "properties": {
		//	                            "BooleanValue": {
		//	                              "type": "string"
		//	                            },
		//	                            "DoubleValue": {
		//	                              "type": "string"
		//	                            },
		//	                            "IntegerValue": {
		//	                              "type": "string"
		//	                            },
		//	                            "StringValue": {
		//	                              "type": "string"
		//	                            }
		//	                          },
		//	                          "type": "object"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Value",
		//	                        "Timestamp"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  }
		//	                },
		//	                "required": [
		//	                  "PropertyValues"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "PutAssetPropertyValueEntries",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Kafka": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ClientProperties": {
		//	              "additionalProperties": false,
		//	              "patternProperties": {
		//	                "": {
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "DestinationArn": {
		//	              "type": "string"
		//	            },
		//	            "Headers": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Key": {
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Value",
		//	                  "Key"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            },
		//	            "Key": {
		//	              "type": "string"
		//	            },
		//	            "Partition": {
		//	              "type": "string"
		//	            },
		//	            "Topic": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "DestinationArn",
		//	            "Topic",
		//	            "ClientProperties"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Kinesis": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "PartitionKey": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "StreamName": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "StreamName",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Lambda": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "FunctionArn": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Location": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "DeviceId": {
		//	              "type": "string"
		//	            },
		//	            "Latitude": {
		//	              "type": "string"
		//	            },
		//	            "Longitude": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "Timestamp": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Unit": {
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Value"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "TrackerName": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "RoleArn",
		//	            "TrackerName",
		//	            "DeviceId",
		//	            "Latitude",
		//	            "Longitude"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "OpenSearch": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Endpoint": {
		//	              "type": "string"
		//	            },
		//	            "Id": {
		//	              "type": "string"
		//	            },
		//	            "Index": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "Type": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Type",
		//	            "Endpoint",
		//	            "Index",
		//	            "Id",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Republish": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Headers": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "ContentType": {
		//	                  "maxLength": 1024,
		//	                  "minLength": 0,
		//	                  "type": "string"
		//	                },
		//	                "CorrelationData": {
		//	                  "maxLength": 1024,
		//	                  "minLength": 0,
		//	                  "type": "string"
		//	                },
		//	                "MessageExpiry": {
		//	                  "maxLength": 1024,
		//	                  "minLength": 0,
		//	                  "type": "string"
		//	                },
		//	                "PayloadFormatIndicator": {
		//	                  "maxLength": 1024,
		//	                  "minLength": 0,
		//	                  "type": "string"
		//	                },
		//	                "ResponseTopic": {
		//	                  "maxLength": 1024,
		//	                  "minLength": 0,
		//	                  "type": "string"
		//	                },
		//	                "UserProperties": {
		//	                  "items": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Key": {
		//	                        "maxLength": 1024,
		//	                        "minLength": 0,
		//	                        "type": "string"
		//	                      },
		//	                      "Value": {
		//	                        "maxLength": 1024,
		//	                        "minLength": 0,
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "Key",
		//	                      "Value"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "maxItems": 100,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "Qos": {
		//	              "type": "integer"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "Topic": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Topic",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "S3": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "BucketName": {
		//	              "type": "string"
		//	            },
		//	            "CannedAcl": {
		//	              "enum": [
		//	                "private",
		//	                "public-read",
		//	                "public-read-write",
		//	                "aws-exec-read",
		//	                "authenticated-read",
		//	                "bucket-owner-read",
		//	                "bucket-owner-full-control",
		//	                "log-delivery-write"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "Key": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "BucketName",
		//	            "Key",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Sns": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "MessageFormat": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "TargetArn": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "TargetArn",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Sqs": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "QueueUrl": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "UseBase64": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "RoleArn",
		//	            "QueueUrl"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "StepFunctions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ExecutionNamePrefix": {
		//	              "type": "string"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "StateMachineName": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "StateMachineName",
		//	            "RoleArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Timestream": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "DatabaseName": {
		//	              "type": "string"
		//	            },
		//	            "Dimensions": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Name": {
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Name",
		//	                  "Value"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "maxItems": 128,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            },
		//	            "RoleArn": {
		//	              "type": "string"
		//	            },
		//	            "TableName": {
		//	              "type": "string"
		//	            },
		//	            "Timestamp": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Unit": {
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Value",
		//	                "Unit"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "RoleArn",
		//	            "DatabaseName",
		//	            "TableName",
		//	            "Dimensions"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RuleDisabled": {
		//	      "type": "boolean"
		//	    },
		//	    "Sql": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Actions",
		//	    "Sql"
		//	  ],
		//	  "type": "object"
		//	}
		"topic_rule_payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Actions
				"actions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CloudwatchAlarm
							"cloudwatch_alarm": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AlarmName
									"alarm_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: StateReason
									"state_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: StateValue
									"state_value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: CloudwatchLogs
							"cloudwatch_logs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BatchMode
									"batch_mode": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
											boolplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: LogGroupName
									"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: CloudwatchMetric
							"cloudwatch_metric": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MetricName
									"metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: MetricNamespace
									"metric_namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: MetricTimestamp
									"metric_timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: MetricUnit
									"metric_unit": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: MetricValue
									"metric_value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: DynamoDB
							"dynamo_db": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: HashKeyField
									"hash_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: HashKeyType
									"hash_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: HashKeyValue
									"hash_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: PayloadField
									"payload_field": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: RangeKeyField
									"range_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: RangeKeyType
									"range_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: RangeKeyValue
									"range_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: TableName
									"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: DynamoDBv2
							"dynamo_d_bv_2": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: PutItem
									"put_item": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: TableName
											"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Elasticsearch
							"elasticsearch": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Endpoint
									"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Id
									"id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Index
									"index": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Firehose
							"firehose": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BatchMode
									"batch_mode": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
											boolplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: DeliveryStreamName
									"delivery_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Separator
									"separator": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Http
							"http": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Auth
									"auth": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Sigv4
											"sigv_4": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: RoleArn
													"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
														Required: true,
													}, /*END ATTRIBUTE*/
													// Property: ServiceName
													"service_name": schema.StringAttribute{ /*START ATTRIBUTE*/
														Required: true,
													}, /*END ATTRIBUTE*/
													// Property: SigningRegion
													"signing_region": schema.StringAttribute{ /*START ATTRIBUTE*/
														Required: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ConfirmationUrl
									"confirmation_url": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Headers
									"headers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Key
												"key": schema.StringAttribute{ /*START ATTRIBUTE*/
													Required: true,
												}, /*END ATTRIBUTE*/
												// Property: Value
												"value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Required: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Optional: true,
										Computed: true,
										Validators: []validator.List{ /*START VALIDATORS*/
											listvalidator.UniqueValues(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
											listplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Url
									"url": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: IotAnalytics
							"iot_analytics": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BatchMode
									"batch_mode": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
											boolplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ChannelName
									"channel_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: IotEvents
							"iot_events": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BatchMode
									"batch_mode": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
											boolplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: InputName
									"input_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: MessageId
									"message_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: IotSiteWise
							"iot_site_wise": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: PutAssetPropertyValueEntries
									"put_asset_property_value_entries": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AssetId
												"asset_id": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: EntryId
												"entry_id": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: PropertyAlias
												"property_alias": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: PropertyId
												"property_id": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: PropertyValues
												"property_values": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: Quality
															"quality": schema.StringAttribute{ /*START ATTRIBUTE*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																	stringplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Timestamp
															"timestamp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: OffsetInNanos
																	"offset_in_nanos": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: TimeInSeconds
																	"time_in_seconds": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Required: true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Required: true,
															}, /*END ATTRIBUTE*/
															// Property: Value
															"value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: BooleanValue
																	"boolean_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: DoubleValue
																	"double_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: IntegerValue
																	"integer_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: StringValue
																	"string_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Required: true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Required: true,
													Validators: []validator.List{ /*START VALIDATORS*/
														listvalidator.UniqueValues(),
													}, /*END VALIDATORS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Required: true,
										Validators: []validator.List{ /*START VALIDATORS*/
											listvalidator.UniqueValues(),
										}, /*END VALIDATORS*/
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Kafka
							"kafka": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ClientProperties
									"client_properties": // Pattern: ""
									schema.MapAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Required:    true,
									}, /*END ATTRIBUTE*/
									// Property: DestinationArn
									"destination_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Headers
									"headers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Key
												"key": schema.StringAttribute{ /*START ATTRIBUTE*/
													Required: true,
												}, /*END ATTRIBUTE*/
												// Property: Value
												"value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Required: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Optional: true,
										Computed: true,
										Validators: []validator.List{ /*START VALIDATORS*/
											listvalidator.UniqueValues(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
											listplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Key
									"key": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Partition
									"partition": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Topic
									"topic": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Kinesis
							"kinesis": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: PartitionKey
									"partition_key": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: StreamName
									"stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Lambda
							"lambda": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: FunctionArn
									"function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Location
							"location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DeviceId
									"device_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Latitude
									"latitude": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Longitude
									"longitude": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Timestamp
									"timestamp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Unit
											"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: TrackerName
									"tracker_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: OpenSearch
							"open_search": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Endpoint
									"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Id
									"id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Index
									"index": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Republish
							"republish": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Headers
									"headers": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: ContentType
											"content_type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthBetween(0, 1024),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: CorrelationData
											"correlation_data": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthBetween(0, 1024),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: MessageExpiry
											"message_expiry": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthBetween(0, 1024),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: PayloadFormatIndicator
											"payload_format_indicator": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthBetween(0, 1024),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: ResponseTopic
											"response_topic": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthBetween(0, 1024),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: UserProperties
											"user_properties": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Key
														"key": schema.StringAttribute{ /*START ATTRIBUTE*/
															Required: true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.LengthBetween(0, 1024),
															}, /*END VALIDATORS*/
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Required: true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.LengthBetween(0, 1024),
															}, /*END VALIDATORS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Optional: true,
												Computed: true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeBetween(1, 100),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Qos
									"qos": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Topic
									"topic": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: S3
							"s3": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: BucketName
									"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: CannedAcl
									"canned_acl": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"private",
												"public-read",
												"public-read-write",
												"aws-exec-read",
												"authenticated-read",
												"bucket-owner-read",
												"bucket-owner-full-control",
												"log-delivery-write",
											),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Key
									"key": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Sns
							"sns": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MessageFormat
									"message_format": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: TargetArn
									"target_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Sqs
							"sqs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: QueueUrl
									"queue_url": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: UseBase64
									"use_base_64": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
											boolplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: StepFunctions
							"step_functions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ExecutionNamePrefix
									"execution_name_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: StateMachineName
									"state_machine_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Timestream
							"timestream": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DatabaseName
									"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Dimensions
									"dimensions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Name
												"name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Required: true,
												}, /*END ATTRIBUTE*/
												// Property: Value
												"value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Required: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Required: true,
										Validators: []validator.List{ /*START VALIDATORS*/
											listvalidator.SizeBetween(1, 128),
										}, /*END VALIDATORS*/
									}, /*END ATTRIBUTE*/
									// Property: RoleArn
									"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: TableName
									"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Required: true,
									}, /*END ATTRIBUTE*/
									// Property: Timestamp
									"timestamp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Unit
											"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Required: true,
				}, /*END ATTRIBUTE*/
				// Property: AwsIotSqlVersion
				"aws_iot_sql_version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Description
				"description": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ErrorAction
				"error_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CloudwatchAlarm
						"cloudwatch_alarm": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AlarmName
								"alarm_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: StateReason
								"state_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: StateValue
								"state_value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: CloudwatchLogs
						"cloudwatch_logs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BatchMode
								"batch_mode": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
										boolplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: CloudwatchMetric
						"cloudwatch_metric": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: MetricName
								"metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: MetricNamespace
								"metric_namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: MetricTimestamp
								"metric_timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: MetricUnit
								"metric_unit": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: MetricValue
								"metric_value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DynamoDB
						"dynamo_db": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: HashKeyField
								"hash_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: HashKeyType
								"hash_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: HashKeyValue
								"hash_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: PayloadField
								"payload_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RangeKeyField
								"range_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RangeKeyType
								"range_key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RangeKeyValue
								"range_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: TableName
								"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DynamoDBv2
						"dynamo_d_bv_2": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: PutItem
								"put_item": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: TableName
										"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Required: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Elasticsearch
						"elasticsearch": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Endpoint
								"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Id
								"id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Index
								"index": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Type
								"type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Firehose
						"firehose": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BatchMode
								"batch_mode": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
										boolplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: DeliveryStreamName
								"delivery_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Separator
								"separator": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Http
						"http": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Auth
								"auth": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Sigv4
										"sigv_4": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: RoleArn
												"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
													Required: true,
												}, /*END ATTRIBUTE*/
												// Property: ServiceName
												"service_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Required: true,
												}, /*END ATTRIBUTE*/
												// Property: SigningRegion
												"signing_region": schema.StringAttribute{ /*START ATTRIBUTE*/
													Required: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Optional: true,
											Computed: true,
											PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
												objectplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ConfirmationUrl
								"confirmation_url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Headers
								"headers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Key
											"key": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Optional: true,
									Computed: true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.UniqueValues(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Url
								"url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: IotAnalytics
						"iot_analytics": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BatchMode
								"batch_mode": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
										boolplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ChannelName
								"channel_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: IotEvents
						"iot_events": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BatchMode
								"batch_mode": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
										boolplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: InputName
								"input_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: MessageId
								"message_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: IotSiteWise
						"iot_site_wise": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: PutAssetPropertyValueEntries
								"put_asset_property_value_entries": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AssetId
											"asset_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: EntryId
											"entry_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: PropertyAlias
											"property_alias": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: PropertyId
											"property_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: PropertyValues
											"property_values": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Quality
														"quality": schema.StringAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Timestamp
														"timestamp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: OffsetInNanos
																"offset_in_nanos": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: TimeInSeconds
																"time_in_seconds": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Required: true,
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Required: true,
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: BooleanValue
																"boolean_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: DoubleValue
																"double_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: IntegerValue
																"integer_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: StringValue
																"string_value": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Required: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Required: true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.UniqueValues(),
												}, /*END VALIDATORS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Required: true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.UniqueValues(),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Kafka
						"kafka": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ClientProperties
								"client_properties": // Pattern: ""
								schema.MapAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Required:    true,
								}, /*END ATTRIBUTE*/
								// Property: DestinationArn
								"destination_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Headers
								"headers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Key
											"key": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Optional: true,
									Computed: true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.UniqueValues(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Partition
								"partition": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Topic
								"topic": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Kinesis
						"kinesis": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: PartitionKey
								"partition_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: StreamName
								"stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Lambda
						"lambda": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: FunctionArn
								"function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Location
						"location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DeviceId
								"device_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Latitude
								"latitude": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Longitude
								"longitude": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Timestamp
								"timestamp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Unit
										"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.StringAttribute{ /*START ATTRIBUTE*/
											Required: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TrackerName
								"tracker_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: OpenSearch
						"open_search": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Endpoint
								"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Id
								"id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Index
								"index": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Type
								"type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Republish
						"republish": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Headers
								"headers": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ContentType
										"content_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.LengthBetween(0, 1024),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: CorrelationData
										"correlation_data": schema.StringAttribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.LengthBetween(0, 1024),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: MessageExpiry
										"message_expiry": schema.StringAttribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.LengthBetween(0, 1024),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: PayloadFormatIndicator
										"payload_format_indicator": schema.StringAttribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.LengthBetween(0, 1024),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: ResponseTopic
										"response_topic": schema.StringAttribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.LengthBetween(0, 1024),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: UserProperties
										"user_properties": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
											NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Key
													"key": schema.StringAttribute{ /*START ATTRIBUTE*/
														Required: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.LengthBetween(0, 1024),
														}, /*END VALIDATORS*/
													}, /*END ATTRIBUTE*/
													// Property: Value
													"value": schema.StringAttribute{ /*START ATTRIBUTE*/
														Required: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.LengthBetween(0, 1024),
														}, /*END VALIDATORS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
											}, /*END NESTED OBJECT*/
											Optional: true,
											Computed: true,
											Validators: []validator.List{ /*START VALIDATORS*/
												listvalidator.SizeBetween(1, 100),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
												listplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Qos
								"qos": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Topic
								"topic": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: S3
						"s3": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BucketName
								"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: CannedAcl
								"canned_acl": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"private",
											"public-read",
											"public-read-write",
											"aws-exec-read",
											"authenticated-read",
											"bucket-owner-read",
											"bucket-owner-full-control",
											"log-delivery-write",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Sns
						"sns": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: MessageFormat
								"message_format": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: TargetArn
								"target_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Sqs
						"sqs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: QueueUrl
								"queue_url": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: UseBase64
								"use_base_64": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
										boolplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: StepFunctions
						"step_functions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ExecutionNamePrefix
								"execution_name_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: StateMachineName
								"state_machine_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Timestream
						"timestream": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DatabaseName
								"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Dimensions
								"dimensions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Name
											"name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.StringAttribute{ /*START ATTRIBUTE*/
												Required: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Required: true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.SizeBetween(1, 128),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
								// Property: RoleArn
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: TableName
								"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Required: true,
								}, /*END ATTRIBUTE*/
								// Property: Timestamp
								"timestamp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Unit
										"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
											Required: true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.StringAttribute{ /*START ATTRIBUTE*/
											Required: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: RuleDisabled
				"rule_disabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Sql
				"sql": schema.StringAttribute{ /*START ATTRIBUTE*/
					Required: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Required: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::IoT::TopicRule",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoT::TopicRule").WithTerraformTypeName("awscc_iot_topic_rule")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"actions":                          "Actions",
		"alarm_name":                       "AlarmName",
		"arn":                              "Arn",
		"asset_id":                         "AssetId",
		"auth":                             "Auth",
		"aws_iot_sql_version":              "AwsIotSqlVersion",
		"batch_mode":                       "BatchMode",
		"boolean_value":                    "BooleanValue",
		"bucket_name":                      "BucketName",
		"canned_acl":                       "CannedAcl",
		"channel_name":                     "ChannelName",
		"client_properties":                "ClientProperties",
		"cloudwatch_alarm":                 "CloudwatchAlarm",
		"cloudwatch_logs":                  "CloudwatchLogs",
		"cloudwatch_metric":                "CloudwatchMetric",
		"confirmation_url":                 "ConfirmationUrl",
		"content_type":                     "ContentType",
		"correlation_data":                 "CorrelationData",
		"database_name":                    "DatabaseName",
		"delivery_stream_name":             "DeliveryStreamName",
		"description":                      "Description",
		"destination_arn":                  "DestinationArn",
		"device_id":                        "DeviceId",
		"dimensions":                       "Dimensions",
		"double_value":                     "DoubleValue",
		"dynamo_d_bv_2":                    "DynamoDBv2",
		"dynamo_db":                        "DynamoDB",
		"elasticsearch":                    "Elasticsearch",
		"endpoint":                         "Endpoint",
		"entry_id":                         "EntryId",
		"error_action":                     "ErrorAction",
		"execution_name_prefix":            "ExecutionNamePrefix",
		"firehose":                         "Firehose",
		"function_arn":                     "FunctionArn",
		"hash_key_field":                   "HashKeyField",
		"hash_key_type":                    "HashKeyType",
		"hash_key_value":                   "HashKeyValue",
		"headers":                          "Headers",
		"http":                             "Http",
		"id":                               "Id",
		"index":                            "Index",
		"input_name":                       "InputName",
		"integer_value":                    "IntegerValue",
		"iot_analytics":                    "IotAnalytics",
		"iot_events":                       "IotEvents",
		"iot_site_wise":                    "IotSiteWise",
		"kafka":                            "Kafka",
		"key":                              "Key",
		"kinesis":                          "Kinesis",
		"lambda":                           "Lambda",
		"latitude":                         "Latitude",
		"location":                         "Location",
		"log_group_name":                   "LogGroupName",
		"longitude":                        "Longitude",
		"message_expiry":                   "MessageExpiry",
		"message_format":                   "MessageFormat",
		"message_id":                       "MessageId",
		"metric_name":                      "MetricName",
		"metric_namespace":                 "MetricNamespace",
		"metric_timestamp":                 "MetricTimestamp",
		"metric_unit":                      "MetricUnit",
		"metric_value":                     "MetricValue",
		"name":                             "Name",
		"offset_in_nanos":                  "OffsetInNanos",
		"open_search":                      "OpenSearch",
		"partition":                        "Partition",
		"partition_key":                    "PartitionKey",
		"payload_field":                    "PayloadField",
		"payload_format_indicator":         "PayloadFormatIndicator",
		"property_alias":                   "PropertyAlias",
		"property_id":                      "PropertyId",
		"property_values":                  "PropertyValues",
		"put_asset_property_value_entries": "PutAssetPropertyValueEntries",
		"put_item":                         "PutItem",
		"qos":                              "Qos",
		"quality":                          "Quality",
		"queue_url":                        "QueueUrl",
		"range_key_field":                  "RangeKeyField",
		"range_key_type":                   "RangeKeyType",
		"range_key_value":                  "RangeKeyValue",
		"republish":                        "Republish",
		"response_topic":                   "ResponseTopic",
		"role_arn":                         "RoleArn",
		"rule_disabled":                    "RuleDisabled",
		"rule_name":                        "RuleName",
		"s3":                               "S3",
		"separator":                        "Separator",
		"service_name":                     "ServiceName",
		"signing_region":                   "SigningRegion",
		"sigv_4":                           "Sigv4",
		"sns":                              "Sns",
		"sql":                              "Sql",
		"sqs":                              "Sqs",
		"state_machine_name":               "StateMachineName",
		"state_reason":                     "StateReason",
		"state_value":                      "StateValue",
		"step_functions":                   "StepFunctions",
		"stream_name":                      "StreamName",
		"string_value":                     "StringValue",
		"table_name":                       "TableName",
		"tags":                             "Tags",
		"target_arn":                       "TargetArn",
		"time_in_seconds":                  "TimeInSeconds",
		"timestamp":                        "Timestamp",
		"timestream":                       "Timestream",
		"topic":                            "Topic",
		"topic_rule_payload":               "TopicRulePayload",
		"tracker_name":                     "TrackerName",
		"type":                             "Type",
		"unit":                             "Unit",
		"url":                              "Url",
		"use_base_64":                      "UseBase64",
		"user_properties":                  "UserProperties",
		"value":                            "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
