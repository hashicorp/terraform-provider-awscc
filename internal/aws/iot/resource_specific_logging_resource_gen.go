// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package iot

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_iot_resource_specific_logging", resourceSpecificLoggingResource)
	registry.AddListResourceFactory("awscc_iot_resource_specific_logging", generic.NewListResource(resourceSpecificLoggingResource))
}

// resourceSpecificLoggingResource returns the Terraform awscc_iot_resource_specific_logging resource.
// This Terraform resource corresponds to the CloudFormation AWS::IoT::ResourceSpecificLogging resource.
func resourceSpecificLoggingResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: LogLevel
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.",
		//	  "enum": [
		//	    "ERROR",
		//	    "WARN",
		//	    "INFO",
		//	    "DEBUG",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"log_level": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"ERROR",
					"WARN",
					"INFO",
					"DEBUG",
					"DISABLED",
				),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: TargetId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Unique Id for a Target (TargetType:TargetName), this will be internally built to serve as primary identifier for a log target.",
		//	  "maxLength": 140,
		//	  "minLength": 13,
		//	  "pattern": "[a-zA-Z0-9.:\\s_\\-]+",
		//	  "type": "string"
		//	}
		"target_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Unique Id for a Target (TargetType:TargetName), this will be internally built to serve as primary identifier for a log target.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TargetName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The target name.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "[a-zA-Z0-9.:\\s_\\-]+",
		//	  "type": "string"
		//	}
		"target_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The target name.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 128),
				stringvalidator.RegexMatches(regexp.MustCompile("[a-zA-Z0-9.:\\s_\\-]+"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TargetType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The target type. Value must be THING_GROUP, CLIENT_ID, SOURCE_IP, PRINCIPAL_ID, or EVENT_TYPE.",
		//	  "enum": [
		//	    "THING_GROUP",
		//	    "CLIENT_ID",
		//	    "SOURCE_IP",
		//	    "PRINCIPAL_ID",
		//	    "EVENT_TYPE"
		//	  ],
		//	  "type": "string"
		//	}
		"target_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The target type. Value must be THING_GROUP, CLIENT_ID, SOURCE_IP, PRINCIPAL_ID, or EVENT_TYPE.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"THING_GROUP",
					"CLIENT_ID",
					"SOURCE_IP",
					"PRINCIPAL_ID",
					"EVENT_TYPE",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource-specific logging allows you to specify a logging level for a specific thing group.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoT::ResourceSpecificLogging").WithTerraformTypeName("awscc_iot_resource_specific_logging")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "target_id",
			Description:       "Unique Id for a Target (TargetType:TargetName), this will be internally built to serve as primary identifier for a log target",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"log_level":   "LogLevel",
		"target_id":   "TargetId",
		"target_name": "TargetName",
		"target_type": "TargetType",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
