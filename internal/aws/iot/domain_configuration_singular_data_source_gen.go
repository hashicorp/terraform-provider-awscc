// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iot

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_iot_domain_configuration", domainConfigurationDataSource)
}

// domainConfigurationDataSource returns the Terraform awscc_iot_domain_configuration data source.
// This Terraform data source corresponds to the CloudFormation AWS::IoT::DomainConfiguration resource.
func domainConfigurationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApplicationProtocol
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "SECURE_MQTT",
		//	    "MQTT_WSS",
		//	    "HTTPS",
		//	    "DEFAULT"
		//	  ],
		//	  "type": "string"
		//	}
		"application_protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: AuthenticationType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "AWS_X509",
		//	    "CUSTOM_AUTH",
		//	    "AWS_SIGV4",
		//	    "CUSTOM_AUTH_X509",
		//	    "DEFAULT"
		//	  ],
		//	  "type": "string"
		//	}
		"authentication_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: AuthorizerConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AllowAuthorizerOverride": {
		//	      "type": "boolean"
		//	    },
		//	    "DefaultAuthorizerName": {
		//	      "maxLength": 128,
		//	      "minLength": 1,
		//	      "pattern": "^[\\w=,@-]+$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"authorizer_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AllowAuthorizerOverride
				"allow_authorizer_override": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DefaultAuthorizerName
				"default_authorizer_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ClientCertificateConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "ClientCertificateCallbackArn": {
		//	      "maxLength": 170,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"client_certificate_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ClientCertificateCallbackArn
				"client_certificate_callback_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainConfigurationName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "^[\\w.-]+$",
		//	  "type": "string"
		//	}
		"domain_configuration_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainConfigurationStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"domain_configuration_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 253,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "ENDPOINT",
		//	    "AWS_MANAGED",
		//	    "CUSTOMER_MANAGED"
		//	  ],
		//	  "type": "string"
		//	}
		"domain_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ServerCertificateArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "maxLength": 2048,
		//	    "minLength": 1,
		//	    "pattern": "^arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\\d{1}:\\d{12}:certificate/[a-zA-Z0-9/-]+$",
		//	    "type": "string"
		//	  },
		//	  "maxItems": 1,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"server_certificate_arns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ServerCertificateConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "EnableOCSPCheck": {
		//	      "type": "boolean"
		//	    },
		//	    "OcspAuthorizedResponderArn": {
		//	      "maxLength": 2048,
		//	      "minLength": 1,
		//	      "pattern": "^arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\\d{1}:\\d{12}:certificate/[a-zA-Z0-9/-]+$",
		//	      "type": "string"
		//	    },
		//	    "OcspLambdaArn": {
		//	      "maxLength": 170,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"server_certificate_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EnableOCSPCheck
				"enable_ocsp_check": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: OcspAuthorizedResponderArn
				"ocsp_authorized_responder_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: OcspLambdaArn
				"ocsp_lambda_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ServerCertificates
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "ServerCertificateArn": {
		//	        "maxLength": 2048,
		//	        "minLength": 1,
		//	        "pattern": "^arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\\d{1}:\\d{12}:certificate/[a-zA-Z0-9/-]+$",
		//	        "type": "string"
		//	      },
		//	      "ServerCertificateStatus": {
		//	        "enum": [
		//	          "INVALID",
		//	          "VALID"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "ServerCertificateStatusDetail": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"server_certificates": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ServerCertificateArn
					"server_certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ServerCertificateStatus
					"server_certificate_status": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ServerCertificateStatusDetail
					"server_certificate_status_detail": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ServiceType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "DATA",
		//	    "CREDENTIAL_PROVIDER",
		//	    "JOBS"
		//	  ],
		//	  "type": "string"
		//	}
		"service_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TlsConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "SecurityPolicy": {
		//	      "maxLength": 128,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tls_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: SecurityPolicy
				"security_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ValidationCertificateArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\\d{1}:\\d{12}:certificate/[a-zA-Z0-9/-]+$",
		//	  "type": "string"
		//	}
		"validation_certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::IoT::DomainConfiguration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoT::DomainConfiguration").WithTerraformTypeName("awscc_iot_domain_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allow_authorizer_override":        "AllowAuthorizerOverride",
		"application_protocol":             "ApplicationProtocol",
		"arn":                              "Arn",
		"authentication_type":              "AuthenticationType",
		"authorizer_config":                "AuthorizerConfig",
		"client_certificate_callback_arn":  "ClientCertificateCallbackArn",
		"client_certificate_config":        "ClientCertificateConfig",
		"default_authorizer_name":          "DefaultAuthorizerName",
		"domain_configuration_name":        "DomainConfigurationName",
		"domain_configuration_status":      "DomainConfigurationStatus",
		"domain_name":                      "DomainName",
		"domain_type":                      "DomainType",
		"enable_ocsp_check":                "EnableOCSPCheck",
		"key":                              "Key",
		"ocsp_authorized_responder_arn":    "OcspAuthorizedResponderArn",
		"ocsp_lambda_arn":                  "OcspLambdaArn",
		"security_policy":                  "SecurityPolicy",
		"server_certificate_arn":           "ServerCertificateArn",
		"server_certificate_arns":          "ServerCertificateArns",
		"server_certificate_config":        "ServerCertificateConfig",
		"server_certificate_status":        "ServerCertificateStatus",
		"server_certificate_status_detail": "ServerCertificateStatusDetail",
		"server_certificates":              "ServerCertificates",
		"service_type":                     "ServiceType",
		"tags":                             "Tags",
		"tls_config":                       "TlsConfig",
		"validation_certificate_arn":       "ValidationCertificateArn",
		"value":                            "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
