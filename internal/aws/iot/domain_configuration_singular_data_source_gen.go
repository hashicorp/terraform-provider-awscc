// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iot

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_iot_domain_configuration", domainConfigurationDataSourceType)
}

// domainConfigurationDataSourceType returns the Terraform awscc_iot_domain_configuration data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::IoT::DomainConfiguration resource type.
func domainConfigurationDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"authorizer_config": {
			// Property: AuthorizerConfig
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "AllowAuthorizerOverride": {
			//       "type": "boolean"
			//     },
			//     "DefaultAuthorizerName": {
			//       "maxLength": 128,
			//       "minLength": 1,
			//       "pattern": "",
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"allow_authorizer_override": {
						// Property: AllowAuthorizerOverride
						Type:     types.BoolType,
						Computed: true,
					},
					"default_authorizer_name": {
						// Property: DefaultAuthorizerName
						Type:     types.StringType,
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"domain_configuration_name": {
			// Property: DomainConfigurationName
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 128,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"domain_configuration_status": {
			// Property: DomainConfigurationStatus
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "ENABLED",
			//     "DISABLED"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"domain_name": {
			// Property: DomainName
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 253,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"domain_type": {
			// Property: DomainType
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "ENDPOINT",
			//     "AWS_MANAGED",
			//     "CUSTOMER_MANAGED"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"server_certificate_arns": {
			// Property: ServerCertificateArns
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "maxLength": 2048,
			//     "minLength": 1,
			//     "pattern": "",
			//     "type": "string"
			//   },
			//   "maxItems": 1,
			//   "minItems": 0,
			//   "type": "array"
			// }
			Type:     types.ListType{ElemType: types.StringType},
			Computed: true,
		},
		"server_certificates": {
			// Property: ServerCertificates
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "ServerCertificateArn": {
			//         "maxLength": 2048,
			//         "minLength": 1,
			//         "pattern": "",
			//         "type": "string"
			//       },
			//       "ServerCertificateStatus": {
			//         "enum": [
			//           "INVALID",
			//           "VALID"
			//         ],
			//         "type": "string"
			//       },
			//       "ServerCertificateStatusDetail": {
			//         "type": "string"
			//       }
			//     },
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"server_certificate_arn": {
						// Property: ServerCertificateArn
						Type:     types.StringType,
						Computed: true,
					},
					"server_certificate_status": {
						// Property: ServerCertificateStatus
						Type:     types.StringType,
						Computed: true,
					},
					"server_certificate_status_detail": {
						// Property: ServerCertificateStatusDetail
						Type:     types.StringType,
						Computed: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
		"service_type": {
			// Property: ServiceType
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "DATA",
			//     "CREDENTIAL_PROVIDER",
			//     "JOBS"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "type": "string"
			//       },
			//       "Value": {
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "type": "array"
			// }
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Type:     types.StringType,
						Computed: true,
					},
					"value": {
						// Property: Value
						Type:     types.StringType,
						Computed: true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
		"validation_certificate_arn": {
			// Property: ValidationCertificateArn
			// CloudFormation resource type schema:
			// {
			//   "pattern": "",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::IoT::DomainConfiguration",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoT::DomainConfiguration").WithTerraformTypeName("awscc_iot_domain_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allow_authorizer_override":        "AllowAuthorizerOverride",
		"arn":                              "Arn",
		"authorizer_config":                "AuthorizerConfig",
		"default_authorizer_name":          "DefaultAuthorizerName",
		"domain_configuration_name":        "DomainConfigurationName",
		"domain_configuration_status":      "DomainConfigurationStatus",
		"domain_name":                      "DomainName",
		"domain_type":                      "DomainType",
		"key":                              "Key",
		"server_certificate_arn":           "ServerCertificateArn",
		"server_certificate_arns":          "ServerCertificateArns",
		"server_certificate_status":        "ServerCertificateStatus",
		"server_certificate_status_detail": "ServerCertificateStatusDetail",
		"server_certificates":              "ServerCertificates",
		"service_type":                     "ServiceType",
		"tags":                             "Tags",
		"validation_certificate_arn":       "ValidationCertificateArn",
		"value":                            "Value",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_iot_domain_configuration", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
