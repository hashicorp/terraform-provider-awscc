// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package deadline

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_deadline_fleet", fleetResource)
}

// fleetResource returns the Terraform awscc_deadline_fleet resource.
// This Terraform resource corresponds to the CloudFormation AWS::Deadline::Fleet resource.
func fleetResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^arn:(aws[a-zA-Z-]*):deadline:[a-z0-9-]+:[0-9]+:farm/farm-[0-9a-z]{32}/fleet/fleet-[0-9a-z]{32}",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Capabilities
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Amounts": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Max": {
		//	            "type": "number"
		//	          },
		//	          "Min": {
		//	            "type": "number"
		//	          },
		//	          "Name": {
		//	            "maxLength": 100,
		//	            "minLength": 1,
		//	            "pattern": "^([a-zA-Z][a-zA-Z0-9]{0,63}:)?amount(\\.[a-zA-Z][a-zA-Z0-9]{0,63})+$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Min",
		//	          "Name"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 15,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "Attributes": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Name": {
		//	            "maxLength": 100,
		//	            "minLength": 1,
		//	            "pattern": "^([a-zA-Z][a-zA-Z0-9]{0,63}:)?attr(\\.[a-zA-Z][a-zA-Z0-9]{0,63})+$",
		//	            "type": "string"
		//	          },
		//	          "Values": {
		//	            "items": {
		//	              "maxLength": 100,
		//	              "minLength": 1,
		//	              "pattern": "^[a-zA-Z_]([a-zA-Z0-9_\\-]{0,99})$",
		//	              "type": "string"
		//	            },
		//	            "maxItems": 10,
		//	            "minItems": 1,
		//	            "type": "array"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name",
		//	          "Values"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 15,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"capabilities": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Amounts
				"amounts": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Max
							"max": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Min
							"min": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Attributes
				"attributes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Values
							"values": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Configuration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "CustomerManaged": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Mode": {
		//	          "enum": [
		//	            "NO_SCALING",
		//	            "EVENT_BASED_AUTO_SCALING"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "StorageProfileId": {
		//	          "pattern": "^sp-[0-9a-f]{32}$",
		//	          "type": "string"
		//	        },
		//	        "WorkerCapabilities": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AcceleratorCount": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Max": {
		//	                  "maximum": 2147483647,
		//	                  "minimum": 0,
		//	                  "type": "integer"
		//	                },
		//	                "Min": {
		//	                  "maximum": 2147483647,
		//	                  "minimum": 0,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "Min"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "AcceleratorTotalMemoryMiB": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Max": {
		//	                  "maximum": 2147483647,
		//	                  "minimum": 0,
		//	                  "type": "integer"
		//	                },
		//	                "Min": {
		//	                  "maximum": 2147483647,
		//	                  "minimum": 0,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "Min"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "AcceleratorTypes": {
		//	              "items": {
		//	                "enum": [
		//	                  "gpu"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "CpuArchitectureType": {
		//	              "enum": [
		//	                "x86_64",
		//	                "arm64"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "CustomAmounts": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Max": {
		//	                    "type": "number"
		//	                  },
		//	                  "Min": {
		//	                    "type": "number"
		//	                  },
		//	                  "Name": {
		//	                    "maxLength": 100,
		//	                    "minLength": 1,
		//	                    "pattern": "^([a-zA-Z][a-zA-Z0-9]{0,63}:)?amount(\\.[a-zA-Z][a-zA-Z0-9]{0,63})+$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Min",
		//	                  "Name"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "maxItems": 15,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            },
		//	            "CustomAttributes": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Name": {
		//	                    "maxLength": 100,
		//	                    "minLength": 1,
		//	                    "pattern": "^([a-zA-Z][a-zA-Z0-9]{0,63}:)?attr(\\.[a-zA-Z][a-zA-Z0-9]{0,63})+$",
		//	                    "type": "string"
		//	                  },
		//	                  "Values": {
		//	                    "items": {
		//	                      "maxLength": 100,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-zA-Z_]([a-zA-Z0-9_\\-]{0,99})$",
		//	                      "type": "string"
		//	                    },
		//	                    "maxItems": 10,
		//	                    "minItems": 1,
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Name",
		//	                  "Values"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "maxItems": 15,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            },
		//	            "MemoryMiB": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Max": {
		//	                  "maximum": 2147483647,
		//	                  "minimum": 512,
		//	                  "type": "integer"
		//	                },
		//	                "Min": {
		//	                  "maximum": 2147483647,
		//	                  "minimum": 512,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "Min"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "OsFamily": {
		//	              "enum": [
		//	                "WINDOWS",
		//	                "LINUX",
		//	                "MACOS"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "VCpuCount": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Max": {
		//	                  "maximum": 10000,
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                },
		//	                "Min": {
		//	                  "maximum": 10000,
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "Min"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "CpuArchitectureType",
		//	            "MemoryMiB",
		//	            "OsFamily",
		//	            "VCpuCount"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "Mode",
		//	        "WorkerCapabilities"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "ServiceManagedEc2": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "InstanceCapabilities": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AcceleratorCapabilities": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Count": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Max": {
		//	                      "maximum": 2147483647,
		//	                      "minimum": 0,
		//	                      "type": "integer"
		//	                    },
		//	                    "Min": {
		//	                      "maximum": 2147483647,
		//	                      "minimum": 0,
		//	                      "type": "integer"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Min"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "Selections": {
		//	                  "items": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Name": {
		//	                        "enum": [
		//	                          "t4",
		//	                          "a10g",
		//	                          "l4",
		//	                          "l40s"
		//	                        ],
		//	                        "type": "string"
		//	                      },
		//	                      "Runtime": {
		//	                        "maxLength": 100,
		//	                        "minLength": 1,
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "Name"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "required": [
		//	                "Selections"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "AllowedInstanceTypes": {
		//	              "items": {
		//	                "pattern": "^[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$",
		//	                "type": "string"
		//	              },
		//	              "maxItems": 100,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            },
		//	            "CpuArchitectureType": {
		//	              "enum": [
		//	                "x86_64",
		//	                "arm64"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "CustomAmounts": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Max": {
		//	                    "type": "number"
		//	                  },
		//	                  "Min": {
		//	                    "type": "number"
		//	                  },
		//	                  "Name": {
		//	                    "maxLength": 100,
		//	                    "minLength": 1,
		//	                    "pattern": "^([a-zA-Z][a-zA-Z0-9]{0,63}:)?amount(\\.[a-zA-Z][a-zA-Z0-9]{0,63})+$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Min",
		//	                  "Name"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "maxItems": 15,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            },
		//	            "CustomAttributes": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Name": {
		//	                    "maxLength": 100,
		//	                    "minLength": 1,
		//	                    "pattern": "^([a-zA-Z][a-zA-Z0-9]{0,63}:)?attr(\\.[a-zA-Z][a-zA-Z0-9]{0,63})+$",
		//	                    "type": "string"
		//	                  },
		//	                  "Values": {
		//	                    "items": {
		//	                      "maxLength": 100,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-zA-Z_]([a-zA-Z0-9_\\-]{0,99})$",
		//	                      "type": "string"
		//	                    },
		//	                    "maxItems": 10,
		//	                    "minItems": 1,
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Name",
		//	                  "Values"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "maxItems": 15,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            },
		//	            "ExcludedInstanceTypes": {
		//	              "items": {
		//	                "pattern": "^[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$",
		//	                "type": "string"
		//	              },
		//	              "maxItems": 100,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            },
		//	            "MemoryMiB": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Max": {
		//	                  "maximum": 2147483647,
		//	                  "minimum": 512,
		//	                  "type": "integer"
		//	                },
		//	                "Min": {
		//	                  "maximum": 2147483647,
		//	                  "minimum": 512,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "Min"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "OsFamily": {
		//	              "enum": [
		//	                "LINUX",
		//	                "WINDOWS"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "RootEbsVolume": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Iops": {
		//	                  "default": 3000,
		//	                  "maximum": 16000,
		//	                  "minimum": 3000,
		//	                  "type": "integer"
		//	                },
		//	                "SizeGiB": {
		//	                  "default": 250,
		//	                  "type": "integer"
		//	                },
		//	                "ThroughputMiB": {
		//	                  "default": 125,
		//	                  "maximum": 1000,
		//	                  "minimum": 125,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "VCpuCount": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Max": {
		//	                  "maximum": 10000,
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                },
		//	                "Min": {
		//	                  "maximum": 10000,
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "Min"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "CpuArchitectureType",
		//	            "MemoryMiB",
		//	            "OsFamily",
		//	            "VCpuCount"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "InstanceMarketOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Type": {
		//	              "enum": [
		//	                "on-demand",
		//	                "spot"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Type"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "InstanceCapabilities",
		//	        "InstanceMarketOptions"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CustomerManaged
				"customer_managed": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Mode
						"mode": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.OneOf(
									"NO_SCALING",
									"EVENT_BASED_AUTO_SCALING",
								),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: StorageProfileId
						"storage_profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^sp-[0-9a-f]{32}$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: WorkerCapabilities
						"worker_capabilities": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AcceleratorCount
								"accelerator_count": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Max
										"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(0, 2147483647),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: Min
										"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(0, 2147483647),
												fwvalidators.NotNullInt64(),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: AcceleratorTotalMemoryMiB
								"accelerator_total_memory_mi_b": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Max
										"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(0, 2147483647),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: Min
										"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(0, 2147483647),
												fwvalidators.NotNullInt64(),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: AcceleratorTypes
								"accelerator_types": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Optional:    true,
									Computed:    true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.ValueStringsAre(
											stringvalidator.OneOf(
												"gpu",
											),
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: CpuArchitectureType
								"cpu_architecture_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"x86_64",
											"arm64",
										),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: CustomAmounts
								"custom_amounts": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Max
											"max": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
													float64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Min
											"min": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.Float64{ /*START VALIDATORS*/
													fwvalidators.NotNullFloat64(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
													float64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Name
											"name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthBetween(1, 100),
													stringvalidator.RegexMatches(regexp.MustCompile("^([a-zA-Z][a-zA-Z0-9]{0,63}:)?amount(\\.[a-zA-Z][a-zA-Z0-9]{0,63})+$"), ""),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Optional: true,
									Computed: true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.SizeBetween(1, 15),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: CustomAttributes
								"custom_attributes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Name
											"name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthBetween(1, 100),
													stringvalidator.RegexMatches(regexp.MustCompile("^([a-zA-Z][a-zA-Z0-9]{0,63}:)?attr(\\.[a-zA-Z][a-zA-Z0-9]{0,63})+$"), ""),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Values
											"values": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeBetween(1, 10),
													listvalidator.ValueStringsAre(
														stringvalidator.LengthBetween(1, 100),
														stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z_]([a-zA-Z0-9_\\-]{0,99})$"), ""),
													),
													fwvalidators.NotNullList(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Optional: true,
									Computed: true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.SizeBetween(1, 15),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: MemoryMiB
								"memory_mi_b": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Max
										"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(512, 2147483647),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: Min
										"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(512, 2147483647),
												fwvalidators.NotNullInt64(),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									Validators: []validator.Object{ /*START VALIDATORS*/
										fwvalidators.NotNullObject(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: OsFamily
								"os_family": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"WINDOWS",
											"LINUX",
											"MACOS",
										),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: VCpuCount
								"v_cpu_count": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Max
										"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(1, 10000),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: Min
										"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(1, 10000),
												fwvalidators.NotNullInt64(),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									Validators: []validator.Object{ /*START VALIDATORS*/
										fwvalidators.NotNullObject(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ServiceManagedEc2
				"service_managed_ec_2": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: InstanceCapabilities
						"instance_capabilities": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AcceleratorCapabilities
								"accelerator_capabilities": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Count
										"count": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Max
												"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													Validators: []validator.Int64{ /*START VALIDATORS*/
														int64validator.Between(0, 2147483647),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
														int64planmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Min
												"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													Validators: []validator.Int64{ /*START VALIDATORS*/
														int64validator.Between(0, 2147483647),
														fwvalidators.NotNullInt64(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
														int64planmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Optional: true,
											Computed: true,
											PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
												objectplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: Selections
										"selections": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
											NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Name
													"name": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.OneOf(
																"t4",
																"a10g",
																"l4",
																"l40s",
															),
															fwvalidators.NotNullString(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Runtime
													"runtime": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.LengthBetween(1, 100),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
											}, /*END NESTED OBJECT*/
											Optional: true,
											Computed: true,
											Validators: []validator.List{ /*START VALIDATORS*/
												listvalidator.SizeAtLeast(1),
												fwvalidators.NotNullList(),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
												listplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: AllowedInstanceTypes
								"allowed_instance_types": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Optional:    true,
									Computed:    true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.SizeBetween(1, 100),
										listvalidator.ValueStringsAre(
											stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$"), ""),
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: CpuArchitectureType
								"cpu_architecture_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"x86_64",
											"arm64",
										),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: CustomAmounts
								"custom_amounts": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Max
											"max": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
													float64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Min
											"min": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.Float64{ /*START VALIDATORS*/
													fwvalidators.NotNullFloat64(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
													float64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Name
											"name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthBetween(1, 100),
													stringvalidator.RegexMatches(regexp.MustCompile("^([a-zA-Z][a-zA-Z0-9]{0,63}:)?amount(\\.[a-zA-Z][a-zA-Z0-9]{0,63})+$"), ""),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Optional: true,
									Computed: true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.SizeBetween(1, 15),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: CustomAttributes
								"custom_attributes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Name
											"name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthBetween(1, 100),
													stringvalidator.RegexMatches(regexp.MustCompile("^([a-zA-Z][a-zA-Z0-9]{0,63}:)?attr(\\.[a-zA-Z][a-zA-Z0-9]{0,63})+$"), ""),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Values
											"values": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeBetween(1, 10),
													listvalidator.ValueStringsAre(
														stringvalidator.LengthBetween(1, 100),
														stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z_]([a-zA-Z0-9_\\-]{0,99})$"), ""),
													),
													fwvalidators.NotNullList(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Optional: true,
									Computed: true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.SizeBetween(1, 15),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ExcludedInstanceTypes
								"excluded_instance_types": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Optional:    true,
									Computed:    true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.SizeBetween(1, 100),
										listvalidator.ValueStringsAre(
											stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$"), ""),
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: MemoryMiB
								"memory_mi_b": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Max
										"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(512, 2147483647),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: Min
										"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(512, 2147483647),
												fwvalidators.NotNullInt64(),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									Validators: []validator.Object{ /*START VALIDATORS*/
										fwvalidators.NotNullObject(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: OsFamily
								"os_family": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"LINUX",
											"WINDOWS",
										),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: RootEbsVolume
								"root_ebs_volume": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Iops
										"iops": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Default:  int64default.StaticInt64(3000),
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(3000, 16000),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: SizeGiB
										"size_gi_b": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Default:  int64default.StaticInt64(250),
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: ThroughputMiB
										"throughput_mi_b": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Default:  int64default.StaticInt64(125),
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(125, 1000),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: VCpuCount
								"v_cpu_count": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Max
										"max": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(1, 10000),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: Min
										"min": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(1, 10000),
												fwvalidators.NotNullInt64(),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Optional: true,
									Computed: true,
									Validators: []validator.Object{ /*START VALIDATORS*/
										fwvalidators.NotNullObject(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: InstanceMarketOptions
						"instance_market_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Type
								"type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"on-demand",
											"spot",
										),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Required: true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "",
		//	  "maxLength": 100,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			Default:  stringdefault.StaticString(""),
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(0, 100),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DisplayName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 100),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: FarmId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^farm-[0-9a-f]{32}$",
		//	  "type": "string"
		//	}
		"farm_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^farm-[0-9a-f]{32}$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: FleetId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^fleet-[0-9a-f]{32}$",
		//	  "type": "string"
		//	}
		"fleet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaxWorkerCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maximum": 2147483647,
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"max_worker_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.Between(0, 2147483647),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: MinWorkerCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": 0,
		//	  "maximum": 2147483647,
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"min_worker_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			Default:  int64default.StaticInt64(0),
			Validators: []validator.Int64{ /*START VALIDATORS*/
				int64validator.Between(0, 2147483647),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^arn:(aws[a-zA-Z-]*):iam::\\d{12}:role(/[!-.0-~]+)*/[\\w+=,.@-]+$",
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^arn:(aws[a-zA-Z-]*):iam::\\d{12}:role(/[!-.0-~]+)*/[\\w+=,.@-]+$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "ACTIVE",
		//	    "CREATE_IN_PROGRESS",
		//	    "UPDATE_IN_PROGRESS",
		//	    "CREATE_FAILED",
		//	    "UPDATE_FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 127,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 127),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 255),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: WorkerCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "integer"
		//	}
		"worker_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Definition of AWS::Deadline::Fleet Resource Type",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Deadline::Fleet").WithTerraformTypeName("awscc_deadline_fleet")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"accelerator_capabilities":      "AcceleratorCapabilities",
		"accelerator_count":             "AcceleratorCount",
		"accelerator_total_memory_mi_b": "AcceleratorTotalMemoryMiB",
		"accelerator_types":             "AcceleratorTypes",
		"allowed_instance_types":        "AllowedInstanceTypes",
		"amounts":                       "Amounts",
		"arn":                           "Arn",
		"attributes":                    "Attributes",
		"capabilities":                  "Capabilities",
		"configuration":                 "Configuration",
		"count":                         "Count",
		"cpu_architecture_type":         "CpuArchitectureType",
		"custom_amounts":                "CustomAmounts",
		"custom_attributes":             "CustomAttributes",
		"customer_managed":              "CustomerManaged",
		"description":                   "Description",
		"display_name":                  "DisplayName",
		"excluded_instance_types":       "ExcludedInstanceTypes",
		"farm_id":                       "FarmId",
		"fleet_id":                      "FleetId",
		"instance_capabilities":         "InstanceCapabilities",
		"instance_market_options":       "InstanceMarketOptions",
		"iops":                          "Iops",
		"key":                           "Key",
		"max":                           "Max",
		"max_worker_count":              "MaxWorkerCount",
		"memory_mi_b":                   "MemoryMiB",
		"min":                           "Min",
		"min_worker_count":              "MinWorkerCount",
		"mode":                          "Mode",
		"name":                          "Name",
		"os_family":                     "OsFamily",
		"role_arn":                      "RoleArn",
		"root_ebs_volume":               "RootEbsVolume",
		"runtime":                       "Runtime",
		"selections":                    "Selections",
		"service_managed_ec_2":          "ServiceManagedEc2",
		"size_gi_b":                     "SizeGiB",
		"status":                        "Status",
		"storage_profile_id":            "StorageProfileId",
		"tags":                          "Tags",
		"throughput_mi_b":               "ThroughputMiB",
		"type":                          "Type",
		"v_cpu_count":                   "VCpuCount",
		"value":                         "Value",
		"values":                        "Values",
		"worker_capabilities":           "WorkerCapabilities",
		"worker_count":                  "WorkerCount",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
