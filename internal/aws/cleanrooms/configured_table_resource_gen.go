// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package cleanrooms

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_cleanrooms_configured_table", configuredTableResource)
}

// configuredTableResource returns the Terraform awscc_cleanrooms_configured_table resource.
// This Terraform resource corresponds to the CloudFormation AWS::CleanRooms::ConfiguredTable resource.
func configuredTableResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AllowedColumns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "maxLength": 128,
		//	    "pattern": "^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$",
		//	    "type": "string"
		//	  },
		//	  "maxItems": 100,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"allowed_columns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Required:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(1, 100),
				listvalidator.ValueStringsAre(
					stringvalidator.LengthAtMost(128),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$"), ""),
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AnalysisMethod
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "DIRECT_QUERY"
		//	  ],
		//	  "type": "string"
		//	}
		"analysis_method": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"DIRECT_QUERY",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AnalysisRules
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Policy": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "V1": {
		//	            "properties": {
		//	              "Aggregation": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "AdditionalAnalyses": {
		//	                    "enum": [
		//	                      "ALLOWED",
		//	                      "REQUIRED",
		//	                      "NOT_ALLOWED"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "AggregateColumns": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "ColumnNames": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 127,
		//	                            "minLength": 1,
		//	                            "pattern": "^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$",
		//	                            "type": "string"
		//	                          },
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        },
		//	                        "Function": {
		//	                          "enum": [
		//	                            "SUM",
		//	                            "SUM_DISTINCT",
		//	                            "COUNT",
		//	                            "COUNT_DISTINCT",
		//	                            "AVG"
		//	                          ],
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "ColumnNames",
		//	                        "Function"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "minItems": 1,
		//	                    "type": "array"
		//	                  },
		//	                  "AllowedJoinOperators": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "enum": [
		//	                        "OR",
		//	                        "AND"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "maxItems": 2,
		//	                    "type": "array"
		//	                  },
		//	                  "DimensionColumns": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "maxLength": 127,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$",
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  },
		//	                  "JoinColumns": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "maxLength": 127,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$",
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  },
		//	                  "JoinRequired": {
		//	                    "enum": [
		//	                      "QUERY_RUNNER"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "OutputConstraints": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "ColumnName": {
		//	                          "maxLength": 127,
		//	                          "minLength": 1,
		//	                          "pattern": "^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$",
		//	                          "type": "string"
		//	                        },
		//	                        "Minimum": {
		//	                          "maximum": 100000,
		//	                          "minimum": 2,
		//	                          "type": "number"
		//	                        },
		//	                        "Type": {
		//	                          "enum": [
		//	                            "COUNT_DISTINCT"
		//	                          ],
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "ColumnName",
		//	                        "Minimum",
		//	                        "Type"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "minItems": 1,
		//	                    "type": "array"
		//	                  },
		//	                  "ScalarFunctions": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "enum": [
		//	                        "TRUNC",
		//	                        "ABS",
		//	                        "CEILING",
		//	                        "FLOOR",
		//	                        "LN",
		//	                        "LOG",
		//	                        "ROUND",
		//	                        "SQRT",
		//	                        "CAST",
		//	                        "LOWER",
		//	                        "RTRIM",
		//	                        "UPPER",
		//	                        "COALESCE",
		//	                        "CONVERT",
		//	                        "CURRENT_DATE",
		//	                        "DATEADD",
		//	                        "EXTRACT",
		//	                        "GETDATE",
		//	                        "SUBSTRING",
		//	                        "TO_CHAR",
		//	                        "TO_DATE",
		//	                        "TO_NUMBER",
		//	                        "TO_TIMESTAMP",
		//	                        "TRIM"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "AggregateColumns",
		//	                  "JoinColumns",
		//	                  "DimensionColumns",
		//	                  "ScalarFunctions",
		//	                  "OutputConstraints"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Custom": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "AdditionalAnalyses": {
		//	                    "enum": [
		//	                      "ALLOWED",
		//	                      "REQUIRED",
		//	                      "NOT_ALLOWED"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "AllowedAnalyses": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "maxLength": 200,
		//	                      "minLength": 0,
		//	                      "pattern": "(ANY_QUERY|arn:[\\w]{3}:cleanrooms:[\\w]{2}-[\\w]{4,9}-[\\d]:[\\d]{12}:membership/[\\d\\w-]+/analysistemplate/[\\d\\w-]+)",
		//	                      "type": "string"
		//	                    },
		//	                    "minItems": 0,
		//	                    "type": "array"
		//	                  },
		//	                  "AllowedAnalysisProviders": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "maxLength": 12,
		//	                      "minLength": 12,
		//	                      "pattern": "\\d+",
		//	                      "type": "string"
		//	                    },
		//	                    "minItems": 0,
		//	                    "type": "array"
		//	                  },
		//	                  "DifferentialPrivacy": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Columns": {
		//	                        "insertionOrder": false,
		//	                        "items": {
		//	                          "additionalProperties": false,
		//	                          "properties": {
		//	                            "Name": {
		//	                              "type": "string"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "Name"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "minItems": 1,
		//	                        "type": "array"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "Columns"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "DisallowedOutputColumns": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "maxLength": 127,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$",
		//	                      "type": "string"
		//	                    },
		//	                    "minItems": 0,
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "AllowedAnalyses"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "List": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "AdditionalAnalyses": {
		//	                    "enum": [
		//	                      "ALLOWED",
		//	                      "REQUIRED",
		//	                      "NOT_ALLOWED"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "AllowedJoinOperators": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "enum": [
		//	                        "OR",
		//	                        "AND"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "maxItems": 2,
		//	                    "type": "array"
		//	                  },
		//	                  "JoinColumns": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "maxLength": 127,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$",
		//	                      "type": "string"
		//	                    },
		//	                    "minItems": 1,
		//	                    "type": "array"
		//	                  },
		//	                  "ListColumns": {
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "maxLength": 127,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$",
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "JoinColumns",
		//	                  "ListColumns"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "V1"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "Type": {
		//	        "enum": [
		//	          "AGGREGATION",
		//	          "LIST",
		//	          "CUSTOM"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Type",
		//	      "Policy"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 1,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"analysis_rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Policy
					"policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: V1
							"v1": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Aggregation
									"aggregation": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AdditionalAnalyses
											"additional_analyses": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"ALLOWED",
														"REQUIRED",
														"NOT_ALLOWED",
													),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: AggregateColumns
											"aggregate_columns": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: ColumnNames
														"column_names": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeAtLeast(1),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 127),
																	stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$"), ""),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Function
														"function": schema.StringAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"SUM",
																	"SUM_DISTINCT",
																	"COUNT",
																	"COUNT_DISTINCT",
																	"AVG",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Optional: true,
												Computed: true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeAtLeast(1),
													fwvalidators.NotNullList(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: AllowedJoinOperators
											"allowed_join_operators": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeAtMost(2),
													listvalidator.ValueStringsAre(
														stringvalidator.OneOf(
															"OR",
															"AND",
														),
													),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: DimensionColumns
											"dimension_columns": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.ValueStringsAre(
														stringvalidator.LengthBetween(1, 127),
														stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$"), ""),
													),
													fwvalidators.NotNullList(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: JoinColumns
											"join_columns": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.ValueStringsAre(
														stringvalidator.LengthBetween(1, 127),
														stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$"), ""),
													),
													fwvalidators.NotNullList(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: JoinRequired
											"join_required": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"QUERY_RUNNER",
													),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: OutputConstraints
											"output_constraints": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: ColumnName
														"column_name": schema.StringAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.LengthBetween(1, 127),
																stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$"), ""),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Minimum
														"minimum": schema.Float64Attribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															Validators: []validator.Float64{ /*START VALIDATORS*/
																float64validator.Between(2.000000, 100000.000000),
																fwvalidators.NotNullFloat64(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
																float64planmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Type
														"type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"COUNT_DISTINCT",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Optional: true,
												Computed: true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeAtLeast(1),
													fwvalidators.NotNullList(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: ScalarFunctions
											"scalar_functions": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.ValueStringsAre(
														stringvalidator.OneOf(
															"TRUNC",
															"ABS",
															"CEILING",
															"FLOOR",
															"LN",
															"LOG",
															"ROUND",
															"SQRT",
															"CAST",
															"LOWER",
															"RTRIM",
															"UPPER",
															"COALESCE",
															"CONVERT",
															"CURRENT_DATE",
															"DATEADD",
															"EXTRACT",
															"GETDATE",
															"SUBSTRING",
															"TO_CHAR",
															"TO_DATE",
															"TO_NUMBER",
															"TO_TIMESTAMP",
															"TRIM",
														),
													),
													fwvalidators.NotNullList(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Custom
									"custom": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AdditionalAnalyses
											"additional_analyses": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"ALLOWED",
														"REQUIRED",
														"NOT_ALLOWED",
													),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: AllowedAnalyses
											"allowed_analyses": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeAtLeast(0),
													listvalidator.ValueStringsAre(
														stringvalidator.LengthBetween(0, 200),
														stringvalidator.RegexMatches(regexp.MustCompile("(ANY_QUERY|arn:[\\w]{3}:cleanrooms:[\\w]{2}-[\\w]{4,9}-[\\d]:[\\d]{12}:membership/[\\d\\w-]+/analysistemplate/[\\d\\w-]+)"), ""),
													),
													fwvalidators.NotNullList(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: AllowedAnalysisProviders
											"allowed_analysis_providers": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeAtLeast(0),
													listvalidator.ValueStringsAre(
														stringvalidator.LengthBetween(12, 12),
														stringvalidator.RegexMatches(regexp.MustCompile("\\d+"), ""),
													),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: DifferentialPrivacy
											"differential_privacy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Columns
													"columns": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
														NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: Name
																"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
														}, /*END NESTED OBJECT*/
														Optional: true,
														Computed: true,
														Validators: []validator.List{ /*START VALIDATORS*/
															listvalidator.SizeAtLeast(1),
															fwvalidators.NotNullList(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
															generic.Multiset(),
															listplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: DisallowedOutputColumns
											"disallowed_output_columns": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeAtLeast(0),
													listvalidator.ValueStringsAre(
														stringvalidator.LengthBetween(1, 127),
														stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$"), ""),
													),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: List
									"list": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AdditionalAnalyses
											"additional_analyses": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"ALLOWED",
														"REQUIRED",
														"NOT_ALLOWED",
													),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: AllowedJoinOperators
											"allowed_join_operators": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeAtMost(2),
													listvalidator.ValueStringsAre(
														stringvalidator.OneOf(
															"OR",
															"AND",
														),
													),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: JoinColumns
											"join_columns": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.SizeAtLeast(1),
													listvalidator.ValueStringsAre(
														stringvalidator.LengthBetween(1, 127),
														stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$"), ""),
													),
													fwvalidators.NotNullList(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: ListColumns
											"list_columns": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.ValueStringsAre(
														stringvalidator.LengthBetween(1, 127),
														stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9_](([a-z0-9_ ]+-)*([a-z0-9_ ]+))?$"), ""),
													),
													fwvalidators.NotNullList(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													generic.Multiset(),
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								Validators: []validator.Object{ /*START VALIDATORS*/
									fwvalidators.NotNullObject(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						Validators: []validator.Object{ /*START VALIDATORS*/
							fwvalidators.NotNullObject(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"AGGREGATION",
								"LIST",
								"CUSTOM",
							),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(1, 1),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 100,
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ConfiguredTableIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 36,
		//	  "minLength": 36,
		//	  "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
		//	  "type": "string"
		//	}
		"configured_table_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 255,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 100),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: TableReference
		// CloudFormation resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "Athena": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DatabaseName": {
		//	          "maxLength": 128,
		//	          "type": "string"
		//	        },
		//	        "OutputLocation": {
		//	          "maxLength": 1024,
		//	          "minLength": 8,
		//	          "type": "string"
		//	        },
		//	        "TableName": {
		//	          "maxLength": 128,
		//	          "type": "string"
		//	        },
		//	        "WorkGroup": {
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "DatabaseName",
		//	        "TableName",
		//	        "WorkGroup"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Glue": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DatabaseName": {
		//	          "maxLength": 128,
		//	          "pattern": "^[a-zA-Z0-9_](([a-zA-Z0-9_ ]+-)*([a-zA-Z0-9_ ]+))?$",
		//	          "type": "string"
		//	        },
		//	        "TableName": {
		//	          "maxLength": 128,
		//	          "pattern": "^[a-zA-Z0-9_](([a-zA-Z0-9_ ]+-)*([a-zA-Z0-9_ ]+))?$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "DatabaseName",
		//	        "TableName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Snowflake": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AccountIdentifier": {
		//	          "maxLength": 256,
		//	          "minLength": 3,
		//	          "type": "string"
		//	        },
		//	        "DatabaseName": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "SchemaName": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "SecretArn": {
		//	          "maxLength": 256,
		//	          "type": "string"
		//	        },
		//	        "TableName": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "TableSchema": {
		//	          "properties": {
		//	            "V1": {
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "ColumnName": {
		//	                    "maxLength": 128,
		//	                    "type": "string"
		//	                  },
		//	                  "ColumnType": {
		//	                    "maxLength": 255,
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "ColumnName",
		//	                  "ColumnType"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "maxItems": 250,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "AccountIdentifier",
		//	        "DatabaseName",
		//	        "SchemaName",
		//	        "SecretArn",
		//	        "TableName",
		//	        "TableSchema"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"table_reference": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Athena
				"athena": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(128),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: OutputLocation
						"output_location": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(8, 1024),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: TableName
						"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(128),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: WorkGroup
						"work_group": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(1, 128),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Glue
				"glue": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(128),
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_](([a-zA-Z0-9_ ]+-)*([a-zA-Z0-9_ ]+))?$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: TableName
						"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(128),
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_](([a-zA-Z0-9_ ]+-)*([a-zA-Z0-9_ ]+))?$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Snowflake
				"snowflake": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AccountIdentifier
						"account_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(3, 256),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(1, 256),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SchemaName
						"schema_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(1, 256),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SecretArn
						"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(256),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: TableName
						"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(1, 256),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: TableSchema
						"table_schema": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: V1
								"v1": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: ColumnName
											"column_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthAtMost(128),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: ColumnType
											"column_type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.LengthAtMost(255),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Optional: true,
									Computed: true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.SizeBetween(1, 250),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										generic.Multiset(),
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Required: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 256),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Represents a table that can be associated with collaborations",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CleanRooms::ConfiguredTable").WithTerraformTypeName("awscc_cleanrooms_configured_table")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_identifier":          "AccountIdentifier",
		"additional_analyses":         "AdditionalAnalyses",
		"aggregate_columns":           "AggregateColumns",
		"aggregation":                 "Aggregation",
		"allowed_analyses":            "AllowedAnalyses",
		"allowed_analysis_providers":  "AllowedAnalysisProviders",
		"allowed_columns":             "AllowedColumns",
		"allowed_join_operators":      "AllowedJoinOperators",
		"analysis_method":             "AnalysisMethod",
		"analysis_rules":              "AnalysisRules",
		"arn":                         "Arn",
		"athena":                      "Athena",
		"column_name":                 "ColumnName",
		"column_names":                "ColumnNames",
		"column_type":                 "ColumnType",
		"columns":                     "Columns",
		"configured_table_identifier": "ConfiguredTableIdentifier",
		"custom":                      "Custom",
		"database_name":               "DatabaseName",
		"description":                 "Description",
		"differential_privacy":        "DifferentialPrivacy",
		"dimension_columns":           "DimensionColumns",
		"disallowed_output_columns":   "DisallowedOutputColumns",
		"function":                    "Function",
		"glue":                        "Glue",
		"join_columns":                "JoinColumns",
		"join_required":               "JoinRequired",
		"key":                         "Key",
		"list":                        "List",
		"list_columns":                "ListColumns",
		"minimum":                     "Minimum",
		"name":                        "Name",
		"output_constraints":          "OutputConstraints",
		"output_location":             "OutputLocation",
		"policy":                      "Policy",
		"scalar_functions":            "ScalarFunctions",
		"schema_name":                 "SchemaName",
		"secret_arn":                  "SecretArn",
		"snowflake":                   "Snowflake",
		"table_name":                  "TableName",
		"table_reference":             "TableReference",
		"table_schema":                "TableSchema",
		"tags":                        "Tags",
		"type":                        "Type",
		"v1":                          "V1",
		"value":                       "Value",
		"work_group":                  "WorkGroup",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
