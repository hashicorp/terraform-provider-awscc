// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package codeartifact

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_codeartifact_package_group", packageGroupDataSource)
}

// packageGroupDataSource returns the Terraform awscc_codeartifact_package_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::CodeArtifact::PackageGroup resource.
func packageGroupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the package group.",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the package group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ContactInfo
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The contact info of the package group.",
		//	  "maxLength": 1000,
		//	  "type": "string"
		//	}
		"contact_info": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The contact info of the package group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The text description of the package group.",
		//	  "maxLength": 1000,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The text description of the package group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the domain that contains the package group.",
		//	  "maxLength": 50,
		//	  "minLength": 2,
		//	  "pattern": "^([a-z][a-z0-9\\-]{0,48}[a-z0-9])$",
		//	  "type": "string"
		//	}
		"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the domain that contains the package group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainOwner
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The 12-digit account ID of the AWS account that owns the domain.",
		//	  "pattern": "[0-9]{12}",
		//	  "type": "string"
		//	}
		"domain_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The 12-digit account ID of the AWS account that owns the domain.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OriginConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The package origin configuration of the package group.",
		//	  "properties": {
		//	    "Restrictions": {
		//	      "additionalProperties": false,
		//	      "description": "The origin configuration that is applied to the package group.",
		//	      "properties": {
		//	        "ExternalUpstream": {
		//	          "additionalProperties": false,
		//	          "description": "The external upstream restriction determines if new package versions can be ingested or retained from external connections.",
		//	          "properties": {
		//	            "Repositories": {
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "RestrictionMode": {
		//	              "enum": [
		//	                "ALLOW",
		//	                "BLOCK",
		//	                "ALLOW_SPECIFIC_REPOSITORIES",
		//	                "INHERIT"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "RestrictionMode"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "InternalUpstream": {
		//	          "additionalProperties": false,
		//	          "description": "The internal upstream restriction determines if new package versions can be ingested or retained from upstream repositories.",
		//	          "properties": {
		//	            "Repositories": {
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "RestrictionMode": {
		//	              "enum": [
		//	                "ALLOW",
		//	                "BLOCK",
		//	                "ALLOW_SPECIFIC_REPOSITORIES",
		//	                "INHERIT"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "RestrictionMode"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Publish": {
		//	          "additionalProperties": false,
		//	          "description": "The publish restriction determines if new package versions can be published.",
		//	          "properties": {
		//	            "Repositories": {
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "RestrictionMode": {
		//	              "enum": [
		//	                "ALLOW",
		//	                "BLOCK",
		//	                "ALLOW_SPECIFIC_REPOSITORIES",
		//	                "INHERIT"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "RestrictionMode"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "Restrictions"
		//	  ],
		//	  "type": "object"
		//	}
		"origin_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Restrictions
				"restrictions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ExternalUpstream
						"external_upstream": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Repositories
								"repositories": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RestrictionMode
								"restriction_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The external upstream restriction determines if new package versions can be ingested or retained from external connections.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: InternalUpstream
						"internal_upstream": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Repositories
								"repositories": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RestrictionMode
								"restriction_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The internal upstream restriction determines if new package versions can be ingested or retained from upstream repositories.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Publish
						"publish": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Repositories
								"repositories": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: RestrictionMode
								"restriction_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The publish restriction determines if new package versions can be published.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The origin configuration that is applied to the package group.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The package origin configuration of the package group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Pattern
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The package group pattern that is used to gather packages.",
		//	  "maxLength": 520,
		//	  "minLength": 2,
		//	  "type": "string"
		//	}
		"pattern": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The package group pattern that is used to gather packages.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to the package group.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to the package group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::CodeArtifact::PackageGroup",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CodeArtifact::PackageGroup").WithTerraformTypeName("awscc_codeartifact_package_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                  "Arn",
		"contact_info":         "ContactInfo",
		"description":          "Description",
		"domain_name":          "DomainName",
		"domain_owner":         "DomainOwner",
		"external_upstream":    "ExternalUpstream",
		"internal_upstream":    "InternalUpstream",
		"key":                  "Key",
		"origin_configuration": "OriginConfiguration",
		"pattern":              "Pattern",
		"publish":              "Publish",
		"repositories":         "Repositories",
		"restriction_mode":     "RestrictionMode",
		"restrictions":         "Restrictions",
		"tags":                 "Tags",
		"value":                "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
