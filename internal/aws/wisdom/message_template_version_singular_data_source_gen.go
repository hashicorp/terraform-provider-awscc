// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package wisdom

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_wisdom_message_template_version", messageTemplateVersionDataSource)
}

// messageTemplateVersionDataSource returns the Terraform awscc_wisdom_message_template_version data source.
// This Terraform data source corresponds to the CloudFormation AWS::Wisdom::MessageTemplateVersion resource.
func messageTemplateVersionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: MessageTemplateArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unqualified Amazon Resource Name (ARN) of the message template.",
		//	  "pattern": "^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})?$",
		//	  "type": "string"
		//	}
		"message_template_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unqualified Amazon Resource Name (ARN) of the message template.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MessageTemplateContentSha256
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The content SHA256 of the message template.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"message_template_content_sha_256": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The content SHA256 of the message template.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MessageTemplateVersionArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unqualified Amazon Resource Name (ARN) of the message template version.",
		//	  "pattern": "^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}):[0-9]+?$",
		//	  "type": "string"
		//	}
		"message_template_version_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unqualified Amazon Resource Name (ARN) of the message template version.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MessageTemplateVersionNumber
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Current version number of the message template.",
		//	  "type": "number"
		//	}
		"message_template_version_number": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "Current version number of the message template.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Wisdom::MessageTemplateVersion",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Wisdom::MessageTemplateVersion").WithTerraformTypeName("awscc_wisdom_message_template_version")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"message_template_arn":             "MessageTemplateArn",
		"message_template_content_sha_256": "MessageTemplateContentSha256",
		"message_template_version_arn":     "MessageTemplateVersionArn",
		"message_template_version_number":  "MessageTemplateVersionNumber",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
