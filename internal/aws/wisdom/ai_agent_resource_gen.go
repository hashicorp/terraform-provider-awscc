// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package wisdom

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_wisdom_ai_agent", aIAgentResource)
}

// aIAgentResource returns the Terraform awscc_wisdom_ai_agent resource.
// This Terraform resource corresponds to the CloudFormation AWS::Wisdom::AIAgent resource.
func aIAgentResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AIAgentArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}){0,2}$",
		//	  "type": "string"
		//	}
		"ai_agent_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AIAgentId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$|^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}){0,2}(:[A-Z0-9_$]+){0,1}$",
		//	  "type": "string"
		//	}
		"ai_agent_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AssistantArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}){0,2}$",
		//	  "type": "string"
		//	}
		"assistant_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AssistantId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$|^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}){0,2}$",
		//	  "type": "string"
		//	}
		"assistant_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$|^arn:[a-z-]*?:wisdom:[a-z0-9-]*?:[0-9]{12}:[a-z-]*?/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(?:/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}){0,2}$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Configuration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "AnswerRecommendationAIAgentConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AnswerGenerationAIGuardrailId": {
		//	          "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$",
		//	          "type": "string"
		//	        },
		//	        "AnswerGenerationAIPromptId": {
		//	          "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$",
		//	          "type": "string"
		//	        },
		//	        "AssociationConfigurations": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "AssociationConfigurationData": {
		//	                "properties": {
		//	                  "KnowledgeBaseAssociationConfigurationData": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "ContentTagFilter": {
		//	                        "properties": {
		//	                          "AndConditions": {
		//	                            "items": {
		//	                              "additionalProperties": false,
		//	                              "properties": {
		//	                                "Key": {
		//	                                  "maxLength": 128,
		//	                                  "minLength": 1,
		//	                                  "pattern": "",
		//	                                  "type": "string"
		//	                                },
		//	                                "Value": {
		//	                                  "maxLength": 256,
		//	                                  "minLength": 1,
		//	                                  "type": "string"
		//	                                }
		//	                              },
		//	                              "required": [
		//	                                "Key"
		//	                              ],
		//	                              "type": "object"
		//	                            },
		//	                            "type": "array"
		//	                          },
		//	                          "OrConditions": {
		//	                            "items": {
		//	                              "properties": {
		//	                                "AndConditions": {
		//	                                  "items": {
		//	                                    "additionalProperties": false,
		//	                                    "properties": {
		//	                                      "Key": {
		//	                                        "maxLength": 128,
		//	                                        "minLength": 1,
		//	                                        "pattern": "",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "Value": {
		//	                                        "maxLength": 256,
		//	                                        "minLength": 1,
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "required": [
		//	                                      "Key"
		//	                                    ],
		//	                                    "type": "object"
		//	                                  },
		//	                                  "type": "array"
		//	                                },
		//	                                "TagCondition": {
		//	                                  "additionalProperties": false,
		//	                                  "properties": {
		//	                                    "Key": {
		//	                                      "maxLength": 128,
		//	                                      "minLength": 1,
		//	                                      "pattern": "",
		//	                                      "type": "string"
		//	                                    },
		//	                                    "Value": {
		//	                                      "maxLength": 256,
		//	                                      "minLength": 1,
		//	                                      "type": "string"
		//	                                    }
		//	                                  },
		//	                                  "required": [
		//	                                    "Key"
		//	                                  ],
		//	                                  "type": "object"
		//	                                }
		//	                              },
		//	                              "type": "object"
		//	                            },
		//	                            "type": "array"
		//	                          },
		//	                          "TagCondition": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "Key": {
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "",
		//	                                "type": "string"
		//	                              },
		//	                              "Value": {
		//	                                "maxLength": 256,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "Key"
		//	                            ],
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "type": "object"
		//	                      },
		//	                      "MaxResults": {
		//	                        "maximum": 100,
		//	                        "minimum": 1,
		//	                        "type": "number"
		//	                      },
		//	                      "OverrideKnowledgeBaseSearchType": {
		//	                        "enum": [
		//	                          "HYBRID",
		//	                          "SEMANTIC"
		//	                        ],
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "AssociationId": {
		//	                "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
		//	                "type": "string"
		//	              },
		//	              "AssociationType": {
		//	                "enum": [
		//	                  "KNOWLEDGE_BASE"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "IntentLabelingGenerationAIPromptId": {
		//	          "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$",
		//	          "type": "string"
		//	        },
		//	        "QueryReformulationAIPromptId": {
		//	          "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ManualSearchAIAgentConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AnswerGenerationAIGuardrailId": {
		//	          "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$",
		//	          "type": "string"
		//	        },
		//	        "AnswerGenerationAIPromptId": {
		//	          "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$",
		//	          "type": "string"
		//	        },
		//	        "AssociationConfigurations": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "AssociationConfigurationData": {
		//	                "properties": {
		//	                  "KnowledgeBaseAssociationConfigurationData": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "ContentTagFilter": {
		//	                        "properties": {
		//	                          "AndConditions": {
		//	                            "items": {
		//	                              "additionalProperties": false,
		//	                              "properties": {
		//	                                "Key": {
		//	                                  "maxLength": 128,
		//	                                  "minLength": 1,
		//	                                  "pattern": "",
		//	                                  "type": "string"
		//	                                },
		//	                                "Value": {
		//	                                  "maxLength": 256,
		//	                                  "minLength": 1,
		//	                                  "type": "string"
		//	                                }
		//	                              },
		//	                              "required": [
		//	                                "Key"
		//	                              ],
		//	                              "type": "object"
		//	                            },
		//	                            "type": "array"
		//	                          },
		//	                          "OrConditions": {
		//	                            "items": {
		//	                              "properties": {
		//	                                "AndConditions": {
		//	                                  "items": {
		//	                                    "additionalProperties": false,
		//	                                    "properties": {
		//	                                      "Key": {
		//	                                        "maxLength": 128,
		//	                                        "minLength": 1,
		//	                                        "pattern": "",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "Value": {
		//	                                        "maxLength": 256,
		//	                                        "minLength": 1,
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "required": [
		//	                                      "Key"
		//	                                    ],
		//	                                    "type": "object"
		//	                                  },
		//	                                  "type": "array"
		//	                                },
		//	                                "TagCondition": {
		//	                                  "additionalProperties": false,
		//	                                  "properties": {
		//	                                    "Key": {
		//	                                      "maxLength": 128,
		//	                                      "minLength": 1,
		//	                                      "pattern": "",
		//	                                      "type": "string"
		//	                                    },
		//	                                    "Value": {
		//	                                      "maxLength": 256,
		//	                                      "minLength": 1,
		//	                                      "type": "string"
		//	                                    }
		//	                                  },
		//	                                  "required": [
		//	                                    "Key"
		//	                                  ],
		//	                                  "type": "object"
		//	                                }
		//	                              },
		//	                              "type": "object"
		//	                            },
		//	                            "type": "array"
		//	                          },
		//	                          "TagCondition": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "Key": {
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "",
		//	                                "type": "string"
		//	                              },
		//	                              "Value": {
		//	                                "maxLength": 256,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "Key"
		//	                            ],
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "type": "object"
		//	                      },
		//	                      "MaxResults": {
		//	                        "maximum": 100,
		//	                        "minimum": 1,
		//	                        "type": "number"
		//	                      },
		//	                      "OverrideKnowledgeBaseSearchType": {
		//	                        "enum": [
		//	                          "HYBRID",
		//	                          "SEMANTIC"
		//	                        ],
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "AssociationId": {
		//	                "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
		//	                "type": "string"
		//	              },
		//	              "AssociationType": {
		//	                "enum": [
		//	                  "KNOWLEDGE_BASE"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "SelfServiceAIAgentConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AssociationConfigurations": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "AssociationConfigurationData": {
		//	                "properties": {
		//	                  "KnowledgeBaseAssociationConfigurationData": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "ContentTagFilter": {
		//	                        "properties": {
		//	                          "AndConditions": {
		//	                            "items": {
		//	                              "additionalProperties": false,
		//	                              "properties": {
		//	                                "Key": {
		//	                                  "maxLength": 128,
		//	                                  "minLength": 1,
		//	                                  "pattern": "",
		//	                                  "type": "string"
		//	                                },
		//	                                "Value": {
		//	                                  "maxLength": 256,
		//	                                  "minLength": 1,
		//	                                  "type": "string"
		//	                                }
		//	                              },
		//	                              "required": [
		//	                                "Key"
		//	                              ],
		//	                              "type": "object"
		//	                            },
		//	                            "type": "array"
		//	                          },
		//	                          "OrConditions": {
		//	                            "items": {
		//	                              "properties": {
		//	                                "AndConditions": {
		//	                                  "items": {
		//	                                    "additionalProperties": false,
		//	                                    "properties": {
		//	                                      "Key": {
		//	                                        "maxLength": 128,
		//	                                        "minLength": 1,
		//	                                        "pattern": "",
		//	                                        "type": "string"
		//	                                      },
		//	                                      "Value": {
		//	                                        "maxLength": 256,
		//	                                        "minLength": 1,
		//	                                        "type": "string"
		//	                                      }
		//	                                    },
		//	                                    "required": [
		//	                                      "Key"
		//	                                    ],
		//	                                    "type": "object"
		//	                                  },
		//	                                  "type": "array"
		//	                                },
		//	                                "TagCondition": {
		//	                                  "additionalProperties": false,
		//	                                  "properties": {
		//	                                    "Key": {
		//	                                      "maxLength": 128,
		//	                                      "minLength": 1,
		//	                                      "pattern": "",
		//	                                      "type": "string"
		//	                                    },
		//	                                    "Value": {
		//	                                      "maxLength": 256,
		//	                                      "minLength": 1,
		//	                                      "type": "string"
		//	                                    }
		//	                                  },
		//	                                  "required": [
		//	                                    "Key"
		//	                                  ],
		//	                                  "type": "object"
		//	                                }
		//	                              },
		//	                              "type": "object"
		//	                            },
		//	                            "type": "array"
		//	                          },
		//	                          "TagCondition": {
		//	                            "additionalProperties": false,
		//	                            "properties": {
		//	                              "Key": {
		//	                                "maxLength": 128,
		//	                                "minLength": 1,
		//	                                "pattern": "",
		//	                                "type": "string"
		//	                              },
		//	                              "Value": {
		//	                                "maxLength": 256,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "Key"
		//	                            ],
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "type": "object"
		//	                      },
		//	                      "MaxResults": {
		//	                        "maximum": 100,
		//	                        "minimum": 1,
		//	                        "type": "number"
		//	                      },
		//	                      "OverrideKnowledgeBaseSearchType": {
		//	                        "enum": [
		//	                          "HYBRID",
		//	                          "SEMANTIC"
		//	                        ],
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "AssociationId": {
		//	                "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$",
		//	                "type": "string"
		//	              },
		//	              "AssociationType": {
		//	                "enum": [
		//	                  "KNOWLEDGE_BASE"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "SelfServiceAIGuardrailId": {
		//	          "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$",
		//	          "type": "string"
		//	        },
		//	        "SelfServiceAnswerGenerationAIPromptId": {
		//	          "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$",
		//	          "type": "string"
		//	        },
		//	        "SelfServicePreProcessingAIPromptId": {
		//	          "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AnswerRecommendationAIAgentConfiguration
				"answer_recommendation_ai_agent_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AnswerGenerationAIGuardrailId
						"answer_generation_ai_guardrail_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AnswerGenerationAIPromptId
						"answer_generation_ai_prompt_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AssociationConfigurations
						"association_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AssociationConfigurationData
									"association_configuration_data": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: KnowledgeBaseAssociationConfigurationData
											"knowledge_base_association_configuration_data": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: ContentTagFilter
													"content_tag_filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: AndConditions
															"and_conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																	Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																		// Property: Key
																		"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.LengthBetween(1, 128),
																				fwvalidators.NotNullString(),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: Value
																		"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.LengthBetween(1, 256),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																	}, /*END SCHEMA*/
																}, /*END NESTED OBJECT*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																	listplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: OrConditions
															"or_conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																	Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																		// Property: AndConditions
																		"and_conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: Key
																					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Optional: true,
																						Computed: true,
																						Validators: []validator.String{ /*START VALIDATORS*/
																							stringvalidator.LengthBetween(1, 128),
																							fwvalidators.NotNullString(),
																						}, /*END VALIDATORS*/
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: Value
																					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Optional: true,
																						Computed: true,
																						Validators: []validator.String{ /*START VALIDATORS*/
																							stringvalidator.LengthBetween(1, 256),
																						}, /*END VALIDATORS*/
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																			}, /*END NESTED OBJECT*/
																			Optional: true,
																			Computed: true,
																			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																				listplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: TagCondition
																		"tag_condition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																				// Property: Key
																				"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																					Optional: true,
																					Computed: true,
																					Validators: []validator.String{ /*START VALIDATORS*/
																						stringvalidator.LengthBetween(1, 128),
																						fwvalidators.NotNullString(),
																					}, /*END VALIDATORS*/
																					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																						stringplanmodifier.UseStateForUnknown(),
																					}, /*END PLAN MODIFIERS*/
																				}, /*END ATTRIBUTE*/
																				// Property: Value
																				"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																					Optional: true,
																					Computed: true,
																					Validators: []validator.String{ /*START VALIDATORS*/
																						stringvalidator.LengthBetween(1, 256),
																					}, /*END VALIDATORS*/
																					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																						stringplanmodifier.UseStateForUnknown(),
																					}, /*END PLAN MODIFIERS*/
																				}, /*END ATTRIBUTE*/
																			}, /*END SCHEMA*/
																			Optional: true,
																			Computed: true,
																			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																				objectplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																	}, /*END SCHEMA*/
																}, /*END NESTED OBJECT*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																	listplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: TagCondition
															"tag_condition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Key
																	"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			fwvalidators.NotNullString(),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Value
																	"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 256),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
															objectplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: MaxResults
													"max_results": schema.Float64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.Float64{ /*START VALIDATORS*/
															float64validator.Between(1.000000, 100.000000),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
															float64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: OverrideKnowledgeBaseSearchType
													"override_knowledge_base_search_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.OneOf(
																"HYBRID",
																"SEMANTIC",
															),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: AssociationId
									"association_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"), ""),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: AssociationType
									"association_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"KNOWLEDGE_BASE",
											),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: IntentLabelingGenerationAIPromptId
						"intent_labeling_generation_ai_prompt_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: QueryReformulationAIPromptId
						"query_reformulation_ai_prompt_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ManualSearchAIAgentConfiguration
				"manual_search_ai_agent_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AnswerGenerationAIGuardrailId
						"answer_generation_ai_guardrail_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AnswerGenerationAIPromptId
						"answer_generation_ai_prompt_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AssociationConfigurations
						"association_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AssociationConfigurationData
									"association_configuration_data": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: KnowledgeBaseAssociationConfigurationData
											"knowledge_base_association_configuration_data": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: ContentTagFilter
													"content_tag_filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: AndConditions
															"and_conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																	Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																		// Property: Key
																		"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.LengthBetween(1, 128),
																				fwvalidators.NotNullString(),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: Value
																		"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.LengthBetween(1, 256),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																	}, /*END SCHEMA*/
																}, /*END NESTED OBJECT*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																	listplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: OrConditions
															"or_conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																	Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																		// Property: AndConditions
																		"and_conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: Key
																					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Optional: true,
																						Computed: true,
																						Validators: []validator.String{ /*START VALIDATORS*/
																							stringvalidator.LengthBetween(1, 128),
																							fwvalidators.NotNullString(),
																						}, /*END VALIDATORS*/
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: Value
																					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Optional: true,
																						Computed: true,
																						Validators: []validator.String{ /*START VALIDATORS*/
																							stringvalidator.LengthBetween(1, 256),
																						}, /*END VALIDATORS*/
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																			}, /*END NESTED OBJECT*/
																			Optional: true,
																			Computed: true,
																			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																				listplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: TagCondition
																		"tag_condition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																				// Property: Key
																				"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																					Optional: true,
																					Computed: true,
																					Validators: []validator.String{ /*START VALIDATORS*/
																						stringvalidator.LengthBetween(1, 128),
																						fwvalidators.NotNullString(),
																					}, /*END VALIDATORS*/
																					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																						stringplanmodifier.UseStateForUnknown(),
																					}, /*END PLAN MODIFIERS*/
																				}, /*END ATTRIBUTE*/
																				// Property: Value
																				"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																					Optional: true,
																					Computed: true,
																					Validators: []validator.String{ /*START VALIDATORS*/
																						stringvalidator.LengthBetween(1, 256),
																					}, /*END VALIDATORS*/
																					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																						stringplanmodifier.UseStateForUnknown(),
																					}, /*END PLAN MODIFIERS*/
																				}, /*END ATTRIBUTE*/
																			}, /*END SCHEMA*/
																			Optional: true,
																			Computed: true,
																			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																				objectplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																	}, /*END SCHEMA*/
																}, /*END NESTED OBJECT*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																	listplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: TagCondition
															"tag_condition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Key
																	"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			fwvalidators.NotNullString(),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Value
																	"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 256),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
															objectplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: MaxResults
													"max_results": schema.Float64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.Float64{ /*START VALIDATORS*/
															float64validator.Between(1.000000, 100.000000),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
															float64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: OverrideKnowledgeBaseSearchType
													"override_knowledge_base_search_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.OneOf(
																"HYBRID",
																"SEMANTIC",
															),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: AssociationId
									"association_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"), ""),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: AssociationType
									"association_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"KNOWLEDGE_BASE",
											),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SelfServiceAIAgentConfiguration
				"self_service_ai_agent_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AssociationConfigurations
						"association_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AssociationConfigurationData
									"association_configuration_data": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: KnowledgeBaseAssociationConfigurationData
											"knowledge_base_association_configuration_data": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: ContentTagFilter
													"content_tag_filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: AndConditions
															"and_conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																	Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																		// Property: Key
																		"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.LengthBetween(1, 128),
																				fwvalidators.NotNullString(),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: Value
																		"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Optional: true,
																			Computed: true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.LengthBetween(1, 256),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																	}, /*END SCHEMA*/
																}, /*END NESTED OBJECT*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																	listplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: OrConditions
															"or_conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																	Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																		// Property: AndConditions
																		"and_conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																					// Property: Key
																					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Optional: true,
																						Computed: true,
																						Validators: []validator.String{ /*START VALIDATORS*/
																							stringvalidator.LengthBetween(1, 128),
																							fwvalidators.NotNullString(),
																						}, /*END VALIDATORS*/
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																					// Property: Value
																					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																						Optional: true,
																						Computed: true,
																						Validators: []validator.String{ /*START VALIDATORS*/
																							stringvalidator.LengthBetween(1, 256),
																						}, /*END VALIDATORS*/
																						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																							stringplanmodifier.UseStateForUnknown(),
																						}, /*END PLAN MODIFIERS*/
																					}, /*END ATTRIBUTE*/
																				}, /*END SCHEMA*/
																			}, /*END NESTED OBJECT*/
																			Optional: true,
																			Computed: true,
																			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																				listplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: TagCondition
																		"tag_condition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																				// Property: Key
																				"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																					Optional: true,
																					Computed: true,
																					Validators: []validator.String{ /*START VALIDATORS*/
																						stringvalidator.LengthBetween(1, 128),
																						fwvalidators.NotNullString(),
																					}, /*END VALIDATORS*/
																					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																						stringplanmodifier.UseStateForUnknown(),
																					}, /*END PLAN MODIFIERS*/
																				}, /*END ATTRIBUTE*/
																				// Property: Value
																				"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																					Optional: true,
																					Computed: true,
																					Validators: []validator.String{ /*START VALIDATORS*/
																						stringvalidator.LengthBetween(1, 256),
																					}, /*END VALIDATORS*/
																					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																						stringplanmodifier.UseStateForUnknown(),
																					}, /*END PLAN MODIFIERS*/
																				}, /*END ATTRIBUTE*/
																			}, /*END SCHEMA*/
																			Optional: true,
																			Computed: true,
																			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																				objectplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																	}, /*END SCHEMA*/
																}, /*END NESTED OBJECT*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																	listplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: TagCondition
															"tag_condition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Key
																	"key": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 128),
																			fwvalidators.NotNullString(),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Value
																	"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Optional: true,
																		Computed: true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.LengthBetween(1, 256),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Optional: true,
																Computed: true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
															objectplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: MaxResults
													"max_results": schema.Float64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.Float64{ /*START VALIDATORS*/
															float64validator.Between(1.000000, 100.000000),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
															float64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: OverrideKnowledgeBaseSearchType
													"override_knowledge_base_search_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.OneOf(
																"HYBRID",
																"SEMANTIC",
															),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: AssociationId
									"association_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"), ""),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: AssociationType
									"association_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"KNOWLEDGE_BASE",
											),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SelfServiceAIGuardrailId
						"self_service_ai_guardrail_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SelfServiceAnswerGenerationAIPromptId
						"self_service_answer_generation_ai_prompt_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SelfServicePreProcessingAIPromptId
						"self_service_pre_processing_ai_prompt_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}(:[A-Z0-9_$]+){0,1}$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Required: true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9\\s_.,-]+",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9\\s_.,-]+"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9\\s_.,-]+",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9\\s_.,-]+"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "maxLength": 256,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Map{ /*START PLAN MODIFIERS*/
				mapplanmodifier.UseStateForUnknown(),
				mapplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "MANUAL_SEARCH",
		//	    "ANSWER_RECOMMENDATION",
		//	    "SELF_SERVICE"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"MANUAL_SEARCH",
					"ANSWER_RECOMMENDATION",
					"SELF_SERVICE",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Definition of AWS::Wisdom::AIAgent Resource Type",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Wisdom::AIAgent").WithTerraformTypeName("awscc_wisdom_ai_agent")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"ai_agent_arn":                                 "AIAgentArn",
		"ai_agent_id":                                  "AIAgentId",
		"and_conditions":                               "AndConditions",
		"answer_generation_ai_guardrail_id":            "AnswerGenerationAIGuardrailId",
		"answer_generation_ai_prompt_id":               "AnswerGenerationAIPromptId",
		"answer_recommendation_ai_agent_configuration": "AnswerRecommendationAIAgentConfiguration",
		"assistant_arn":                                "AssistantArn",
		"assistant_id":                                 "AssistantId",
		"association_configuration_data":               "AssociationConfigurationData",
		"association_configurations":                   "AssociationConfigurations",
		"association_id":                               "AssociationId",
		"association_type":                             "AssociationType",
		"configuration":                                "Configuration",
		"content_tag_filter":                           "ContentTagFilter",
		"description":                                  "Description",
		"intent_labeling_generation_ai_prompt_id":      "IntentLabelingGenerationAIPromptId",
		"key": "Key",
		"knowledge_base_association_configuration_data": "KnowledgeBaseAssociationConfigurationData",
		"manual_search_ai_agent_configuration":          "ManualSearchAIAgentConfiguration",
		"max_results":                                   "MaxResults",
		"name":                                          "Name",
		"or_conditions":                                 "OrConditions",
		"override_knowledge_base_search_type":           "OverrideKnowledgeBaseSearchType",
		"query_reformulation_ai_prompt_id":              "QueryReformulationAIPromptId",
		"self_service_ai_agent_configuration":           "SelfServiceAIAgentConfiguration",
		"self_service_ai_guardrail_id":                  "SelfServiceAIGuardrailId",
		"self_service_answer_generation_ai_prompt_id":   "SelfServiceAnswerGenerationAIPromptId",
		"self_service_pre_processing_ai_prompt_id":      "SelfServicePreProcessingAIPromptId",
		"tag_condition":                                 "TagCondition",
		"tags":                                          "Tags",
		"type":                                          "Type",
		"value":                                         "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
