// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package autoscaling

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_autoscaling_scheduled_action", scheduledActionDataSource)
}

// scheduledActionDataSource returns the Terraform awscc_autoscaling_scheduled_action data source.
// This Terraform data source corresponds to the CloudFormation AWS::AutoScaling::ScheduledAction resource.
func scheduledActionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AutoScalingGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the Auto Scaling group.",
		//	  "type": "string"
		//	}
		"auto_scaling_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the Auto Scaling group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DesiredCapacity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain.",
		//	  "type": "integer"
		//	}
		"desired_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.",
		//	  "type": "string"
		//	}
		"end_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaxSize
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The minimum size of the Auto Scaling group.",
		//	  "type": "integer"
		//	}
		"max_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The minimum size of the Auto Scaling group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MinSize
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The minimum size of the Auto Scaling group.",
		//	  "type": "integer"
		//	}
		"min_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The minimum size of the Auto Scaling group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Recurrence
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The recurring schedule for the action, in Unix cron syntax format. When StartTime and EndTime are specified with Recurrence , they form the boundaries of when the recurring action starts and stops.",
		//	  "type": "string"
		//	}
		"recurrence": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The recurring schedule for the action, in Unix cron syntax format. When StartTime and EndTime are specified with Recurrence , they form the boundaries of when the recurring action starts and stops.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ScheduledActionName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Auto-generated unique identifier",
		//	  "type": "string"
		//	}
		"scheduled_action_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Auto-generated unique identifier",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StartTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.",
		//	  "type": "string"
		//	}
		"start_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TimeZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The time zone for the cron expression.",
		//	  "type": "string"
		//	}
		"time_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The time zone for the cron expression.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::AutoScaling::ScheduledAction",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AutoScaling::ScheduledAction").WithTerraformTypeName("awscc_autoscaling_scheduled_action")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"auto_scaling_group_name": "AutoScalingGroupName",
		"desired_capacity":        "DesiredCapacity",
		"end_time":                "EndTime",
		"max_size":                "MaxSize",
		"min_size":                "MinSize",
		"recurrence":              "Recurrence",
		"scheduled_action_name":   "ScheduledActionName",
		"start_time":              "StartTime",
		"time_zone":               "TimeZone",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
