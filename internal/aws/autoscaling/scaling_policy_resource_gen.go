// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package autoscaling

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_autoscaling_scaling_policy", scalingPolicyResource)
}

// scalingPolicyResource returns the Terraform awscc_autoscaling_scaling_policy resource.
// This Terraform resource corresponds to the CloudFormation AWS::AutoScaling::ScalingPolicy resource.
func scalingPolicyResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AdjustmentType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies how the scaling adjustment is interpreted. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.",
		//	  "type": "string"
		//	}
		"adjustment_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies how the scaling adjustment is interpreted. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the AutoScaling scaling policy",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the AutoScaling scaling policy",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AutoScalingGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the Auto Scaling group.",
		//	  "type": "string"
		//	}
		"auto_scaling_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the Auto Scaling group.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Cooldown
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The duration of the policy's cooldown period, in seconds. When a cooldown period is specified here, it overrides the default cooldown period defined for the Auto Scaling group.",
		//	  "type": "string"
		//	}
		"cooldown": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The duration of the policy's cooldown period, in seconds. When a cooldown period is specified here, it overrides the default cooldown period defined for the Auto Scaling group.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EstimatedInstanceWarmup
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. If not provided, the default is to use the value from the default cooldown period for the Auto Scaling group. Valid only if the policy type is TargetTrackingScaling or StepScaling.",
		//	  "type": "integer"
		//	}
		"estimated_instance_warmup": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. If not provided, the default is to use the value from the default cooldown period for the Auto Scaling group. Valid only if the policy type is TargetTrackingScaling or StepScaling.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MetricAggregationType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average. Valid only if the policy type is StepScaling.",
		//	  "type": "string"
		//	}
		"metric_aggregation_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average. Valid only if the policy type is StepScaling.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MinAdjustmentMagnitude
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The minimum value to scale by when the adjustment type is PercentChangeInCapacity. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a MinAdjustmentMagnitude of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a MinAdjustmentMagnitude of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.",
		//	  "type": "integer"
		//	}
		"min_adjustment_magnitude": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The minimum value to scale by when the adjustment type is PercentChangeInCapacity. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a MinAdjustmentMagnitude of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a MinAdjustmentMagnitude of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PolicyName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"policy_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PolicyType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "One of the following policy types: TargetTrackingScaling, StepScaling, SimpleScaling (default), PredictiveScaling",
		//	  "type": "string"
		//	}
		"policy_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "One of the following policy types: TargetTrackingScaling, StepScaling, SimpleScaling (default), PredictiveScaling",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PredictiveScalingConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A predictive scaling policy. Includes support for predefined metrics only.",
		//	  "properties": {
		//	    "MaxCapacityBreachBehavior": {
		//	      "type": "string"
		//	    },
		//	    "MaxCapacityBuffer": {
		//	      "type": "integer"
		//	    },
		//	    "MetricSpecifications": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "CustomizedCapacityMetricSpecification": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MetricDataQueries": {
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Expression": {
		//	                      "type": "string"
		//	                    },
		//	                    "Id": {
		//	                      "type": "string"
		//	                    },
		//	                    "Label": {
		//	                      "type": "string"
		//	                    },
		//	                    "MetricStat": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Metric": {
		//	                          "additionalProperties": false,
		//	                          "properties": {
		//	                            "Dimensions": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "additionalProperties": false,
		//	                                "properties": {
		//	                                  "Name": {
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Value": {
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "Value",
		//	                                  "Name"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "type": "array",
		//	                              "uniqueItems": true
		//	                            },
		//	                            "MetricName": {
		//	                              "type": "string"
		//	                            },
		//	                            "Namespace": {
		//	                              "type": "string"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "MetricName",
		//	                            "Namespace"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Stat": {
		//	                          "type": "string"
		//	                        },
		//	                        "Unit": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Stat",
		//	                        "Metric"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "ReturnData": {
		//	                      "type": "boolean"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Id"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              }
		//	            },
		//	            "required": [
		//	              "MetricDataQueries"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "CustomizedLoadMetricSpecification": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MetricDataQueries": {
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Expression": {
		//	                      "type": "string"
		//	                    },
		//	                    "Id": {
		//	                      "type": "string"
		//	                    },
		//	                    "Label": {
		//	                      "type": "string"
		//	                    },
		//	                    "MetricStat": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Metric": {
		//	                          "additionalProperties": false,
		//	                          "properties": {
		//	                            "Dimensions": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "additionalProperties": false,
		//	                                "properties": {
		//	                                  "Name": {
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Value": {
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "Value",
		//	                                  "Name"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "type": "array",
		//	                              "uniqueItems": true
		//	                            },
		//	                            "MetricName": {
		//	                              "type": "string"
		//	                            },
		//	                            "Namespace": {
		//	                              "type": "string"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "MetricName",
		//	                            "Namespace"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Stat": {
		//	                          "type": "string"
		//	                        },
		//	                        "Unit": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Stat",
		//	                        "Metric"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "ReturnData": {
		//	                      "type": "boolean"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Id"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              }
		//	            },
		//	            "required": [
		//	              "MetricDataQueries"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "CustomizedScalingMetricSpecification": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MetricDataQueries": {
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Expression": {
		//	                      "type": "string"
		//	                    },
		//	                    "Id": {
		//	                      "type": "string"
		//	                    },
		//	                    "Label": {
		//	                      "type": "string"
		//	                    },
		//	                    "MetricStat": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Metric": {
		//	                          "additionalProperties": false,
		//	                          "properties": {
		//	                            "Dimensions": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "additionalProperties": false,
		//	                                "properties": {
		//	                                  "Name": {
		//	                                    "type": "string"
		//	                                  },
		//	                                  "Value": {
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "Value",
		//	                                  "Name"
		//	                                ],
		//	                                "type": "object"
		//	                              },
		//	                              "type": "array",
		//	                              "uniqueItems": true
		//	                            },
		//	                            "MetricName": {
		//	                              "type": "string"
		//	                            },
		//	                            "Namespace": {
		//	                              "type": "string"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "MetricName",
		//	                            "Namespace"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Stat": {
		//	                          "type": "string"
		//	                        },
		//	                        "Unit": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Stat",
		//	                        "Metric"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "ReturnData": {
		//	                      "type": "boolean"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Id"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              }
		//	            },
		//	            "required": [
		//	              "MetricDataQueries"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "PredefinedLoadMetricSpecification": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "PredefinedMetricType": {
		//	                "type": "string"
		//	              },
		//	              "ResourceLabel": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "PredefinedMetricType"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "PredefinedMetricPairSpecification": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "PredefinedMetricType": {
		//	                "type": "string"
		//	              },
		//	              "ResourceLabel": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "PredefinedMetricType"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "PredefinedScalingMetricSpecification": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "PredefinedMetricType": {
		//	                "type": "string"
		//	              },
		//	              "ResourceLabel": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "PredefinedMetricType"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "TargetValue": {
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "TargetValue"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "Mode": {
		//	      "type": "string"
		//	    },
		//	    "SchedulingBufferTime": {
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "MetricSpecifications"
		//	  ],
		//	  "type": "object"
		//	}
		"predictive_scaling_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MaxCapacityBreachBehavior
				"max_capacity_breach_behavior": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: MaxCapacityBuffer
				"max_capacity_buffer": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: MetricSpecifications
				"metric_specifications": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CustomizedCapacityMetricSpecification
							"customized_capacity_metric_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MetricDataQueries
									"metric_data_queries": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Expression
												"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Id
												"id": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													Validators: []validator.String{ /*START VALIDATORS*/
														fwvalidators.NotNullString(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Label
												"label": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: MetricStat
												"metric_stat": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Metric
														"metric": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: Dimensions
																"dimensions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
																	NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: Name
																			"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Optional: true,
																				Computed: true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					fwvalidators.NotNullString(),
																				}, /*END VALIDATORS*/
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Value
																			"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Optional: true,
																				Computed: true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					fwvalidators.NotNullString(),
																				}, /*END VALIDATORS*/
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																	}, /*END NESTED OBJECT*/
																	Optional: true,
																	Computed: true,
																	PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
																		setplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: MetricName
																"metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Namespace
																"namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Optional: true,
															Computed: true,
															Validators: []validator.Object{ /*START VALIDATORS*/
																fwvalidators.NotNullObject(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Stat
														"stat": schema.StringAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															Validators: []validator.String{ /*START VALIDATORS*/
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Unit
														"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: ReturnData
												"return_data": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
														boolplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Optional: true,
										Computed: true,
										Validators: []validator.Set{ /*START VALIDATORS*/
											fwvalidators.NotNullSet(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
											setplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: CustomizedLoadMetricSpecification
							"customized_load_metric_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MetricDataQueries
									"metric_data_queries": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Expression
												"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Id
												"id": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													Validators: []validator.String{ /*START VALIDATORS*/
														fwvalidators.NotNullString(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Label
												"label": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: MetricStat
												"metric_stat": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Metric
														"metric": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: Dimensions
																"dimensions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
																	NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: Name
																			"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Optional: true,
																				Computed: true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					fwvalidators.NotNullString(),
																				}, /*END VALIDATORS*/
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Value
																			"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Optional: true,
																				Computed: true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					fwvalidators.NotNullString(),
																				}, /*END VALIDATORS*/
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																	}, /*END NESTED OBJECT*/
																	Optional: true,
																	Computed: true,
																	PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
																		setplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: MetricName
																"metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Namespace
																"namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Optional: true,
															Computed: true,
															Validators: []validator.Object{ /*START VALIDATORS*/
																fwvalidators.NotNullObject(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Stat
														"stat": schema.StringAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															Validators: []validator.String{ /*START VALIDATORS*/
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Unit
														"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: ReturnData
												"return_data": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
														boolplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Optional: true,
										Computed: true,
										Validators: []validator.Set{ /*START VALIDATORS*/
											fwvalidators.NotNullSet(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
											setplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: CustomizedScalingMetricSpecification
							"customized_scaling_metric_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MetricDataQueries
									"metric_data_queries": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Expression
												"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Id
												"id": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													Validators: []validator.String{ /*START VALIDATORS*/
														fwvalidators.NotNullString(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Label
												"label": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: MetricStat
												"metric_stat": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Metric
														"metric": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: Dimensions
																"dimensions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
																	NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: Name
																			"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Optional: true,
																				Computed: true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					fwvalidators.NotNullString(),
																				}, /*END VALIDATORS*/
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																			// Property: Value
																			"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Optional: true,
																				Computed: true,
																				Validators: []validator.String{ /*START VALIDATORS*/
																					fwvalidators.NotNullString(),
																				}, /*END VALIDATORS*/
																				PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																					stringplanmodifier.UseStateForUnknown(),
																				}, /*END PLAN MODIFIERS*/
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																	}, /*END NESTED OBJECT*/
																	Optional: true,
																	Computed: true,
																	PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
																		setplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: MetricName
																"metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Namespace
																"namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Optional: true,
															Computed: true,
															Validators: []validator.Object{ /*START VALIDATORS*/
																fwvalidators.NotNullObject(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Stat
														"stat": schema.StringAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															Validators: []validator.String{ /*START VALIDATORS*/
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Unit
														"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
															Optional: true,
															Computed: true,
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: ReturnData
												"return_data": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
														boolplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Optional: true,
										Computed: true,
										Validators: []validator.Set{ /*START VALIDATORS*/
											fwvalidators.NotNullSet(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
											setplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: PredefinedLoadMetricSpecification
							"predefined_load_metric_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: PredefinedMetricType
									"predefined_metric_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											fwvalidators.NotNullString(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ResourceLabel
									"resource_label": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: PredefinedMetricPairSpecification
							"predefined_metric_pair_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: PredefinedMetricType
									"predefined_metric_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											fwvalidators.NotNullString(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ResourceLabel
									"resource_label": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: PredefinedScalingMetricSpecification
							"predefined_scaling_metric_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: PredefinedMetricType
									"predefined_metric_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											fwvalidators.NotNullString(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ResourceLabel
									"resource_label": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: TargetValue
							"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.Float64{ /*START VALIDATORS*/
									fwvalidators.NotNullFloat64(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
									float64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Optional: true,
					Computed: true,
					Validators: []validator.Set{ /*START VALIDATORS*/
						fwvalidators.NotNullSet(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
						setplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Mode
				"mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SchedulingBufferTime
				"scheduling_buffer_time": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A predictive scaling policy. Includes support for predefined metrics only.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ScalingAdjustment
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value. Required if the policy type is SimpleScaling. (Not used with any other policy type.)",
		//	  "type": "integer"
		//	}
		"scaling_adjustment": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value. Required if the policy type is SimpleScaling. (Not used with any other policy type.)",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StepAdjustments
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A set of adjustments that enable you to scale based on the size of the alarm breach. Required if the policy type is StepScaling. (Not used with any other policy type.)",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "insertionOrder": false,
		//	    "properties": {
		//	      "MetricIntervalLowerBound": {
		//	        "type": "number"
		//	      },
		//	      "MetricIntervalUpperBound": {
		//	        "type": "number"
		//	      },
		//	      "ScalingAdjustment": {
		//	        "type": "integer"
		//	      }
		//	    },
		//	    "required": [
		//	      "ScalingAdjustment"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"step_adjustments": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: MetricIntervalLowerBound
					"metric_interval_lower_bound": schema.Float64Attribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
							float64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: MetricIntervalUpperBound
					"metric_interval_upper_bound": schema.Float64Attribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
							float64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ScalingAdjustment
					"scaling_adjustment": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.Int64{ /*START VALIDATORS*/
							fwvalidators.NotNullInt64(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A set of adjustments that enable you to scale based on the size of the alarm breach. Required if the policy type is StepScaling. (Not used with any other policy type.)",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TargetTrackingConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A target tracking scaling policy. Includes support for predefined or customized metrics.",
		//	  "properties": {
		//	    "CustomizedMetricSpecification": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Dimensions": {
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Name": {
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Value",
		//	              "Name"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        },
		//	        "MetricName": {
		//	          "type": "string"
		//	        },
		//	        "Metrics": {
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Expression": {
		//	                "type": "string"
		//	              },
		//	              "Id": {
		//	                "type": "string"
		//	              },
		//	              "Label": {
		//	                "type": "string"
		//	              },
		//	              "MetricStat": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Metric": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Dimensions": {
		//	                        "insertionOrder": false,
		//	                        "items": {
		//	                          "additionalProperties": false,
		//	                          "properties": {
		//	                            "Name": {
		//	                              "type": "string"
		//	                            },
		//	                            "Value": {
		//	                              "type": "string"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "Value",
		//	                            "Name"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "type": "array",
		//	                        "uniqueItems": true
		//	                      },
		//	                      "MetricName": {
		//	                        "type": "string"
		//	                      },
		//	                      "Namespace": {
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "MetricName",
		//	                      "Namespace"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "Period": {
		//	                    "type": "integer"
		//	                  },
		//	                  "Stat": {
		//	                    "type": "string"
		//	                  },
		//	                  "Unit": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Stat",
		//	                  "Metric"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Period": {
		//	                "type": "integer"
		//	              },
		//	              "ReturnData": {
		//	                "type": "boolean"
		//	              }
		//	            },
		//	            "required": [
		//	              "Id"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        },
		//	        "Namespace": {
		//	          "type": "string"
		//	        },
		//	        "Period": {
		//	          "type": "integer"
		//	        },
		//	        "Statistic": {
		//	          "type": "string"
		//	        },
		//	        "Unit": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "DisableScaleIn": {
		//	      "type": "boolean"
		//	    },
		//	    "PredefinedMetricSpecification": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "PredefinedMetricType": {
		//	          "type": "string"
		//	        },
		//	        "ResourceLabel": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "PredefinedMetricType"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "TargetValue": {
		//	      "type": "number"
		//	    }
		//	  },
		//	  "required": [
		//	    "TargetValue"
		//	  ],
		//	  "type": "object"
		//	}
		"target_tracking_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CustomizedMetricSpecification
				"customized_metric_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Dimensions
						"dimensions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Name
									"name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											fwvalidators.NotNullString(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											fwvalidators.NotNullString(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
								setplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: MetricName
						"metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Metrics
						"metrics": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Expression
									"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Id
									"id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											fwvalidators.NotNullString(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Label
									"label": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: MetricStat
									"metric_stat": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Metric
											"metric": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Dimensions
													"dimensions": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
														NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: Name
																"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Value
																"value": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Optional: true,
																	Computed: true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
														}, /*END NESTED OBJECT*/
														Optional: true,
														Computed: true,
														PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
															setplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: MetricName
													"metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															fwvalidators.NotNullString(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Namespace
													"namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															fwvalidators.NotNullString(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												Validators: []validator.Object{ /*START VALIDATORS*/
													fwvalidators.NotNullObject(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Period
											"period": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
													int64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Stat
											"stat": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												Validators: []validator.String{ /*START VALIDATORS*/
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Unit
											"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Period
									"period": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ReturnData
									"return_data": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
											boolplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
								setplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Namespace
						"namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Period
						"period": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Statistic
						"statistic": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Unit
						"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: DisableScaleIn
				"disable_scale_in": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: PredefinedMetricSpecification
				"predefined_metric_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: PredefinedMetricType
						"predefined_metric_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: ResourceLabel
						"resource_label": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TargetValue
				"target_value": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					Validators: []validator.Float64{ /*START VALIDATORS*/
						fwvalidators.NotNullFloat64(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
						float64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A target tracking scaling policy. Includes support for predefined or customized metrics.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "The AWS::AutoScaling::ScalingPolicy resource specifies an Amazon EC2 Auto Scaling scaling policy so that the Auto Scaling group can scale the number of instances available for your application.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AutoScaling::ScalingPolicy").WithTerraformTypeName("awscc_autoscaling_scaling_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"adjustment_type":         "AdjustmentType",
		"arn":                     "Arn",
		"auto_scaling_group_name": "AutoScalingGroupName",
		"cooldown":                "Cooldown",
		"customized_capacity_metric_specification": "CustomizedCapacityMetricSpecification",
		"customized_load_metric_specification":     "CustomizedLoadMetricSpecification",
		"customized_metric_specification":          "CustomizedMetricSpecification",
		"customized_scaling_metric_specification":  "CustomizedScalingMetricSpecification",
		"dimensions":                           "Dimensions",
		"disable_scale_in":                     "DisableScaleIn",
		"estimated_instance_warmup":            "EstimatedInstanceWarmup",
		"expression":                           "Expression",
		"id":                                   "Id",
		"label":                                "Label",
		"max_capacity_breach_behavior":         "MaxCapacityBreachBehavior",
		"max_capacity_buffer":                  "MaxCapacityBuffer",
		"metric":                               "Metric",
		"metric_aggregation_type":              "MetricAggregationType",
		"metric_data_queries":                  "MetricDataQueries",
		"metric_interval_lower_bound":          "MetricIntervalLowerBound",
		"metric_interval_upper_bound":          "MetricIntervalUpperBound",
		"metric_name":                          "MetricName",
		"metric_specifications":                "MetricSpecifications",
		"metric_stat":                          "MetricStat",
		"metrics":                              "Metrics",
		"min_adjustment_magnitude":             "MinAdjustmentMagnitude",
		"mode":                                 "Mode",
		"name":                                 "Name",
		"namespace":                            "Namespace",
		"period":                               "Period",
		"policy_name":                          "PolicyName",
		"policy_type":                          "PolicyType",
		"predefined_load_metric_specification": "PredefinedLoadMetricSpecification",
		"predefined_metric_pair_specification": "PredefinedMetricPairSpecification",
		"predefined_metric_specification":      "PredefinedMetricSpecification",
		"predefined_metric_type":               "PredefinedMetricType",
		"predefined_scaling_metric_specification": "PredefinedScalingMetricSpecification",
		"predictive_scaling_configuration":        "PredictiveScalingConfiguration",
		"resource_label":                          "ResourceLabel",
		"return_data":                             "ReturnData",
		"scaling_adjustment":                      "ScalingAdjustment",
		"scheduling_buffer_time":                  "SchedulingBufferTime",
		"stat":                                    "Stat",
		"statistic":                               "Statistic",
		"step_adjustments":                        "StepAdjustments",
		"target_tracking_configuration":           "TargetTrackingConfiguration",
		"target_value":                            "TargetValue",
		"unit":                                    "Unit",
		"value":                                   "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
