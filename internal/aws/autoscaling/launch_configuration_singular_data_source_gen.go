// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package autoscaling

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_autoscaling_launch_configuration", launchConfigurationDataSource)
}

// launchConfigurationDataSource returns the Terraform awscc_autoscaling_launch_configuration data source.
// This Terraform data source corresponds to the CloudFormation AWS::AutoScaling::LaunchConfiguration resource.
func launchConfigurationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AssociatePublicIpAddress
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.",
		//	  "type": "boolean"
		//	}
		"associate_public_ip_address": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "For Auto Scaling groups that are running in a virtual private cloud (VPC), specifies whether to assign a public IP address to the group's instances.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: BlockDeviceMappings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "BlockDeviceMapping is a property of AWS::AutoScaling::LaunchConfiguration that describes a block device mapping for an Auto Scaling group.",
		//	    "properties": {
		//	      "DeviceName": {
		//	        "description": "The device name exposed to the EC2 instance (for example, /dev/sdh or xvdh). ",
		//	        "type": "string"
		//	      },
		//	      "Ebs": {
		//	        "additionalProperties": false,
		//	        "description": "Parameters used to automatically set up EBS volumes when an instance is launched.",
		//	        "properties": {
		//	          "DeleteOnTermination": {
		//	            "description": "Indicates whether the volume is deleted on instance termination. ",
		//	            "type": "boolean"
		//	          },
		//	          "Encrypted": {
		//	            "description": "Specifies whether the volume should be encrypted. ",
		//	            "type": "boolean"
		//	          },
		//	          "Iops": {
		//	            "description": "The number of input/output (I/O) operations per second (IOPS) to provision for the volume. ",
		//	            "type": "integer"
		//	          },
		//	          "SnapshotId": {
		//	            "description": "The snapshot ID of the volume to use.",
		//	            "type": "string"
		//	          },
		//	          "Throughput": {
		//	            "description": "The throughput (MiBps) to provision for a gp3 volume.",
		//	            "type": "integer"
		//	          },
		//	          "VolumeSize": {
		//	            "description": "The volume size, in GiBs.",
		//	            "type": "integer"
		//	          },
		//	          "VolumeType": {
		//	            "description": "The volume type.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "NoDevice": {
		//	        "description": "Setting this value to true suppresses the specified device included in the block device mapping of the AMI.",
		//	        "type": "boolean"
		//	      },
		//	      "VirtualName": {
		//	        "description": "The name of the virtual device.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "DeviceName"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"block_device_mappings": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DeviceName
					"device_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The device name exposed to the EC2 instance (for example, /dev/sdh or xvdh). ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Ebs
					"ebs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DeleteOnTermination
							"delete_on_termination": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Indicates whether the volume is deleted on instance termination. ",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Encrypted
							"encrypted": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies whether the volume should be encrypted. ",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Iops
							"iops": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The number of input/output (I/O) operations per second (IOPS) to provision for the volume. ",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: SnapshotId
							"snapshot_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The snapshot ID of the volume to use.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Throughput
							"throughput": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The throughput (MiBps) to provision for a gp3 volume.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: VolumeSize
							"volume_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The volume size, in GiBs.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: VolumeType
							"volume_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The volume type.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Parameters used to automatically set up EBS volumes when an instance is launched.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: NoDevice
					"no_device": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Description: "Setting this value to true suppresses the specified device included in the block device mapping of the AMI.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: VirtualName
					"virtual_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name of the virtual device.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ClassicLinkVPCId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.",
		//	  "type": "string"
		//	}
		"classic_link_vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ClassicLinkVPCSecurityGroups
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"classic_link_vpc_security_groups": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EbsOptimized
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).",
		//	  "type": "boolean"
		//	}
		"ebs_optimized": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IamInstanceProfile
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.",
		//	  "type": "string"
		//	}
		"iam_instance_profile": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ImageId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.",
		//	  "type": "string"
		//	}
		"image_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Amazon EC2 instance you want to use to create the launch configuration.",
		//	  "type": "string"
		//	}
		"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Amazon EC2 instance you want to use to create the launch configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceMonitoring
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.",
		//	  "type": "boolean"
		//	}
		"instance_monitoring": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the instance type of the EC2 instance.",
		//	  "type": "string"
		//	}
		"instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the instance type of the EC2 instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KernelId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Provides the ID of the kernel associated with the EC2 AMI.",
		//	  "type": "string"
		//	}
		"kernel_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Provides the ID of the kernel associated with the EC2 AMI.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KeyName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Provides the name of the EC2 key pair.",
		//	  "type": "string"
		//	}
		"key_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Provides the name of the EC2 key pair.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LaunchConfigurationName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the launch configuration. This name must be unique per Region per account.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"launch_configuration_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the launch configuration. This name must be unique per Region per account.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MetadataOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The metadata options for the instances.",
		//	  "properties": {
		//	    "HttpEndpoint": {
		//	      "description": "This parameter enables or disables the HTTP metadata endpoint on your instances.",
		//	      "type": "string"
		//	    },
		//	    "HttpPutResponseHopLimit": {
		//	      "description": "The desired HTTP PUT response hop limit for instance metadata requests.",
		//	      "type": "integer"
		//	    },
		//	    "HttpTokens": {
		//	      "description": "The state of token usage for your instance metadata requests.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"metadata_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: HttpEndpoint
				"http_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "This parameter enables or disables the HTTP metadata endpoint on your instances.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: HttpPutResponseHopLimit
				"http_put_response_hop_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The desired HTTP PUT response hop limit for instance metadata requests.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: HttpTokens
				"http_tokens": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The state of token usage for your instance metadata requests.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The metadata options for the instances.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PlacementTenancy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tenancy of the instance, either default or dedicated.",
		//	  "type": "string"
		//	}
		"placement_tenancy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The tenancy of the instance, either default or dedicated.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RamDiskId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the RAM disk to select.",
		//	  "type": "string"
		//	}
		"ram_disk_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the RAM disk to select.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SecurityGroups
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list that contains the security groups to assign to the instances in the Auto Scaling group.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "anyOf": [
		//	      {},
		//	      {}
		//	    ],
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"security_groups": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list that contains the security groups to assign to the instances in the Auto Scaling group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SpotPrice
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.",
		//	  "type": "string"
		//	}
		"spot_price": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The maximum hourly price you are willing to pay for any Spot Instances launched to fulfill the request.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UserData
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Base64-encoded user data to make available to the launched EC2 instances.",
		//	  "maxLength": 21847,
		//	  "type": "string"
		//	}
		"user_data": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Base64-encoded user data to make available to the launched EC2 instances.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::AutoScaling::LaunchConfiguration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AutoScaling::LaunchConfiguration").WithTerraformTypeName("awscc_autoscaling_launch_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"associate_public_ip_address":      "AssociatePublicIpAddress",
		"block_device_mappings":            "BlockDeviceMappings",
		"classic_link_vpc_id":              "ClassicLinkVPCId",
		"classic_link_vpc_security_groups": "ClassicLinkVPCSecurityGroups",
		"delete_on_termination":            "DeleteOnTermination",
		"device_name":                      "DeviceName",
		"ebs":                              "Ebs",
		"ebs_optimized":                    "EbsOptimized",
		"encrypted":                        "Encrypted",
		"http_endpoint":                    "HttpEndpoint",
		"http_put_response_hop_limit":      "HttpPutResponseHopLimit",
		"http_tokens":                      "HttpTokens",
		"iam_instance_profile":             "IamInstanceProfile",
		"image_id":                         "ImageId",
		"instance_id":                      "InstanceId",
		"instance_monitoring":              "InstanceMonitoring",
		"instance_type":                    "InstanceType",
		"iops":                             "Iops",
		"kernel_id":                        "KernelId",
		"key_name":                         "KeyName",
		"launch_configuration_name":        "LaunchConfigurationName",
		"metadata_options":                 "MetadataOptions",
		"no_device":                        "NoDevice",
		"placement_tenancy":                "PlacementTenancy",
		"ram_disk_id":                      "RamDiskId",
		"security_groups":                  "SecurityGroups",
		"snapshot_id":                      "SnapshotId",
		"spot_price":                       "SpotPrice",
		"throughput":                       "Throughput",
		"user_data":                        "UserData",
		"virtual_name":                     "VirtualName",
		"volume_size":                      "VolumeSize",
		"volume_type":                      "VolumeType",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
