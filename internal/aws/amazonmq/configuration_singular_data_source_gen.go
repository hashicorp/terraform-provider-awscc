// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package amazonmq

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_amazonmq_configuration", configurationDataSource)
}

// configurationDataSource returns the Terraform awscc_amazonmq_configuration data source.
// This Terraform data source corresponds to the CloudFormation AWS::AmazonMQ::Configuration resource.
func configurationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the Amazon MQ configuration.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the Amazon MQ configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AuthenticationStrategy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The authentication strategy associated with the configuration. The default is SIMPLE.",
		//	  "type": "string"
		//	}
		"authentication_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The authentication strategy associated with the configuration. The default is SIMPLE.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Data
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The base64-encoded XML configuration.",
		//	  "type": "string"
		//	}
		"data": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The base64-encoded XML configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the configuration.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EngineType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of broker engine. Note: Currently, Amazon MQ only supports ACTIVEMQ for creating and editing broker configurations.",
		//	  "type": "string"
		//	}
		"engine_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of broker engine. Note: Currently, Amazon MQ only supports ACTIVEMQ for creating and editing broker configurations.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EngineVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The version of the broker engine.",
		//	  "type": "string"
		//	}
		"engine_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The version of the broker engine.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Amazon MQ configuration.",
		//	  "type": "string"
		//	}
		"configuration_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Amazon MQ configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the configuration.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Revision
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The revision number of the configuration.",
		//	  "type": "string"
		//	}
		"revision": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The revision number of the configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Create tags when creating the configuration.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Create tags when creating the configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::AmazonMQ::Configuration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AmazonMQ::Configuration").WithTerraformTypeName("awscc_amazonmq_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                     "Arn",
		"authentication_strategy": "AuthenticationStrategy",
		"configuration_id":        "Id",
		"data":                    "Data",
		"description":             "Description",
		"engine_type":             "EngineType",
		"engine_version":          "EngineVersion",
		"key":                     "Key",
		"name":                    "Name",
		"revision":                "Revision",
		"tags":                    "Tags",
		"value":                   "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
