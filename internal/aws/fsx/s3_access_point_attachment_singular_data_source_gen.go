// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package fsx

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_fsx_s3_access_point_attachment", s3AccessPointAttachmentDataSource)
}

// s3AccessPointAttachmentDataSource returns the Terraform awscc_fsx_s3_access_point_attachment data source.
// This Terraform data source corresponds to the CloudFormation AWS::FSx::S3AccessPointAttachment resource.
func s3AccessPointAttachmentDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Name of the S3AccessPointAttachment",
		//	  "maxLength": 50,
		//	  "minLength": 3,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Name of the S3AccessPointAttachment",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OpenZFSConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "FileSystemIdentity": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "PosixUser": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Gid": {
		//	              "description": "",
		//	              "maximum": 4294967295,
		//	              "minimum": 0,
		//	              "type": "number"
		//	            },
		//	            "SecondaryGids": {
		//	              "description": "",
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Gid": {
		//	                    "description": "",
		//	                    "maximum": 4294967295,
		//	                    "minimum": 0,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Gid"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Uid": {
		//	              "description": "",
		//	              "maximum": 4294967295,
		//	              "minimum": 0,
		//	              "type": "number"
		//	            }
		//	          },
		//	          "required": [
		//	            "Uid",
		//	            "Gid"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Type": {
		//	          "description": "",
		//	          "enum": [
		//	            "POSIX"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Type",
		//	        "PosixUser"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "VolumeId": {
		//	      "description": "",
		//	      "maxLength": 23,
		//	      "minLength": 23,
		//	      "pattern": "^(fsvol-[0-9a-f]{17,})$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "VolumeId",
		//	    "FileSystemIdentity"
		//	  ],
		//	  "type": "object"
		//	}
		"open_zfs_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: FileSystemIdentity
				"file_system_identity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: PosixUser
						"posix_user": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Gid
								"gid": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Description: "",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SecondaryGids
								"secondary_gids": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Gid
											"gid": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Description: "",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Uid
								"uid": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Description: "",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Type
						"type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VolumeId
				"volume_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: S3AccessPoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Alias": {
		//	      "description": "",
		//	      "maxLength": 63,
		//	      "minLength": 1,
		//	      "pattern": "^[0-9a-z\\\\-]{1,63}",
		//	      "type": "string"
		//	    },
		//	    "Policy": {
		//	      "description": "",
		//	      "maxLength": 200000,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "ResourceARN": {
		//	      "description": "",
		//	      "maxLength": 1024,
		//	      "minLength": 8,
		//	      "pattern": "",
		//	      "type": "string"
		//	    },
		//	    "VpcConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "VpcId": {
		//	          "description": "",
		//	          "maxLength": 21,
		//	          "minLength": 12,
		//	          "pattern": "^(vpc-[0-9a-f]{8,})$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "VpcId"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"s3_access_point": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Alias
				"alias": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Policy
				"policy": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ResourceARN
				"resource_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: VpcConfiguration
				"vpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: VpcId
						"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "enum": [
		//	    "OPENZFS"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::FSx::S3AccessPointAttachment",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::FSx::S3AccessPointAttachment").WithTerraformTypeName("awscc_fsx_s3_access_point_attachment")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"alias":                  "Alias",
		"file_system_identity":   "FileSystemIdentity",
		"gid":                    "Gid",
		"name":                   "Name",
		"open_zfs_configuration": "OpenZFSConfiguration",
		"policy":                 "Policy",
		"posix_user":             "PosixUser",
		"resource_arn":           "ResourceARN",
		"s3_access_point":        "S3AccessPoint",
		"secondary_gids":         "SecondaryGids",
		"type":                   "Type",
		"uid":                    "Uid",
		"volume_id":              "VolumeId",
		"vpc_configuration":      "VpcConfiguration",
		"vpc_id":                 "VpcId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
