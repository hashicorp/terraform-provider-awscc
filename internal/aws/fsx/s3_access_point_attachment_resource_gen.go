// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package fsx

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_fsx_s3_access_point_attachment", s3AccessPointAttachmentResource)
}

// s3AccessPointAttachmentResource returns the Terraform awscc_fsx_s3_access_point_attachment resource.
// This Terraform resource corresponds to the CloudFormation AWS::FSx::S3AccessPointAttachment resource.
func s3AccessPointAttachmentResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Name of the S3AccessPointAttachment",
		//	  "maxLength": 50,
		//	  "minLength": 3,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Name of the S3AccessPointAttachment",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(3, 50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OpenZFSConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "FileSystemIdentity": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "PosixUser": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Gid": {
		//	              "description": "",
		//	              "maximum": 4294967295,
		//	              "minimum": 0,
		//	              "type": "number"
		//	            },
		//	            "SecondaryGids": {
		//	              "description": "",
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Gid": {
		//	                    "description": "",
		//	                    "maximum": 4294967295,
		//	                    "minimum": 0,
		//	                    "type": "number"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Gid"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Uid": {
		//	              "description": "",
		//	              "maximum": 4294967295,
		//	              "minimum": 0,
		//	              "type": "number"
		//	            }
		//	          },
		//	          "required": [
		//	            "Uid",
		//	            "Gid"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Type": {
		//	          "description": "",
		//	          "enum": [
		//	            "POSIX"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Type",
		//	        "PosixUser"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "VolumeId": {
		//	      "description": "",
		//	      "maxLength": 23,
		//	      "minLength": 23,
		//	      "pattern": "^(fsvol-[0-9a-f]{17,})$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "VolumeId",
		//	    "FileSystemIdentity"
		//	  ],
		//	  "type": "object"
		//	}
		"open_zfs_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: FileSystemIdentity
				"file_system_identity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: PosixUser
						"posix_user": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Gid
								"gid": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Description: "",
									Required:    true,
									Validators: []validator.Float64{ /*START VALIDATORS*/
										float64validator.Between(0.000000, 4294967295.000000),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
								// Property: SecondaryGids
								"secondary_gids": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Gid
											"gid": schema.Float64Attribute{ /*START ATTRIBUTE*/
												Description: "",
												Optional:    true,
												Computed:    true,
												Validators: []validator.Float64{ /*START VALIDATORS*/
													float64validator.Between(0.000000, 4294967295.000000),
													fwvalidators.NotNullFloat64(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
													float64planmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Description: "",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Uid
								"uid": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Description: "",
									Required:    true,
									Validators: []validator.Float64{ /*START VALIDATORS*/
										float64validator.Between(0.000000, 4294967295.000000),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Required: true,
						}, /*END ATTRIBUTE*/
						// Property: Type
						"type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "",
							Required:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.OneOf(
									"POSIX",
								),
							}, /*END VALIDATORS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Required: true,
				}, /*END ATTRIBUTE*/
				// Property: VolumeId
				"volume_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "",
					Required:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(23, 23),
						stringvalidator.RegexMatches(regexp.MustCompile("^(fsvol-[0-9a-f]{17,})$"), ""),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Required: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: S3AccessPoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Alias": {
		//	      "description": "",
		//	      "maxLength": 63,
		//	      "minLength": 1,
		//	      "pattern": "^[0-9a-z\\\\-]{1,63}",
		//	      "type": "string"
		//	    },
		//	    "Policy": {
		//	      "description": "",
		//	      "maxLength": 200000,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "ResourceARN": {
		//	      "description": "",
		//	      "maxLength": 1024,
		//	      "minLength": 8,
		//	      "pattern": "",
		//	      "type": "string"
		//	    },
		//	    "VpcConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "VpcId": {
		//	          "description": "",
		//	          "maxLength": 21,
		//	          "minLength": 12,
		//	          "pattern": "^(vpc-[0-9a-f]{8,})$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "VpcId"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"s3_access_point": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Alias
				"alias": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "",
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Policy
				"policy": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(1, 200000),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
					// Policy is a write-only property.
				}, /*END ATTRIBUTE*/
				// Property: ResourceARN
				"resource_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "",
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: VpcConfiguration
				"vpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: VpcId
						"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(12, 21),
								stringvalidator.RegexMatches(regexp.MustCompile("^(vpc-[0-9a-f]{8,})$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
				objectplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "enum": [
		//	    "OPENZFS"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"OPENZFS",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource type definition for AWS::FSx::S3AccessPointAttachment",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::FSx::S3AccessPointAttachment").WithTerraformTypeName("awscc_fsx_s3_access_point_attachment")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"alias":                  "Alias",
		"file_system_identity":   "FileSystemIdentity",
		"gid":                    "Gid",
		"name":                   "Name",
		"open_zfs_configuration": "OpenZFSConfiguration",
		"policy":                 "Policy",
		"posix_user":             "PosixUser",
		"resource_arn":           "ResourceARN",
		"s3_access_point":        "S3AccessPoint",
		"secondary_gids":         "SecondaryGids",
		"type":                   "Type",
		"uid":                    "Uid",
		"volume_id":              "VolumeId",
		"vpc_configuration":      "VpcConfiguration",
		"vpc_id":                 "VpcId",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/S3AccessPoint/Policy",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
