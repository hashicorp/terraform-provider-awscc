// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package connectcampaignsv2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_connectcampaignsv2_campaign", campaignDataSource)
}

// campaignDataSource returns the Terraform awscc_connectcampaignsv2_campaign data source.
// This Terraform data source corresponds to the CloudFormation AWS::ConnectCampaignsV2::Campaign resource.
func campaignDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Amazon Connect Campaign Arn",
		//	  "maxLength": 256,
		//	  "minLength": 0,
		//	  "pattern": "^arn:aws[-a-z0-9]*:connect-campaigns:[-a-z0-9]*:[0-9]{12}:campaign/[-a-zA-Z0-9]*$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Amazon Connect Campaign Arn",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ChannelSubtypeConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "anyOf": [
		//	    {
		//	      "required": [
		//	        "Telephony"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "Sms"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "Email"
		//	      ]
		//	    }
		//	  ],
		//	  "description": "The possible types of channel subtype config parameters",
		//	  "properties": {
		//	    "Email": {
		//	      "additionalProperties": false,
		//	      "description": "Email Channel Subtype config",
		//	      "properties": {
		//	        "Capacity": {
		//	          "description": "Allocates outbound capacity for the specific channel of this campaign between multiple active campaigns",
		//	          "maximum": 1,
		//	          "minimum": 0.01,
		//	          "type": "number"
		//	        },
		//	        "DefaultOutboundConfig": {
		//	          "additionalProperties": false,
		//	          "description": "Default SMS outbound config",
		//	          "properties": {
		//	            "ConnectSourceEmailAddress": {
		//	              "description": "Email address used for Email messages",
		//	              "maxLength": 255,
		//	              "minLength": 1,
		//	              "pattern": "^[\\w-\\.\\+]+@([\\w-]+\\.)+[\\w-]{2,4}$",
		//	              "type": "string"
		//	            },
		//	            "SourceEmailAddressDisplayName": {
		//	              "description": "The name of the source email address display name",
		//	              "maxLength": 127,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            },
		//	            "WisdomTemplateArn": {
		//	              "description": "Arn",
		//	              "maxLength": 500,
		//	              "minLength": 20,
		//	              "pattern": "^arn:.*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "ConnectSourceEmailAddress",
		//	            "WisdomTemplateArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "OutboundMode": {
		//	          "additionalProperties": false,
		//	          "description": "Email Outbound Mode",
		//	          "properties": {
		//	            "AgentlessConfig": {
		//	              "additionalProperties": false,
		//	              "description": "Agentless config",
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "OutboundMode",
		//	        "DefaultOutboundConfig"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Sms": {
		//	      "additionalProperties": false,
		//	      "description": "SMS Channel Subtype config",
		//	      "properties": {
		//	        "Capacity": {
		//	          "description": "Allocates outbound capacity for the specific channel of this campaign between multiple active campaigns",
		//	          "maximum": 1,
		//	          "minimum": 0.01,
		//	          "type": "number"
		//	        },
		//	        "DefaultOutboundConfig": {
		//	          "additionalProperties": false,
		//	          "description": "Default SMS outbound config",
		//	          "properties": {
		//	            "ConnectSourcePhoneNumberArn": {
		//	              "description": "Arn",
		//	              "maxLength": 500,
		//	              "minLength": 20,
		//	              "pattern": "^arn:.*$",
		//	              "type": "string"
		//	            },
		//	            "WisdomTemplateArn": {
		//	              "description": "Arn",
		//	              "maxLength": 500,
		//	              "minLength": 20,
		//	              "pattern": "^arn:.*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "ConnectSourcePhoneNumberArn",
		//	            "WisdomTemplateArn"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "OutboundMode": {
		//	          "additionalProperties": false,
		//	          "description": "SMS Outbound Mode",
		//	          "properties": {
		//	            "AgentlessConfig": {
		//	              "additionalProperties": false,
		//	              "description": "Agentless config",
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "OutboundMode",
		//	        "DefaultOutboundConfig"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Telephony": {
		//	      "additionalProperties": false,
		//	      "description": "Telephony Channel Subtype config",
		//	      "properties": {
		//	        "Capacity": {
		//	          "description": "Allocates outbound capacity for the specific channel of this campaign between multiple active campaigns",
		//	          "maximum": 1,
		//	          "minimum": 0.01,
		//	          "type": "number"
		//	        },
		//	        "ConnectQueueId": {
		//	          "description": "The queue for the call",
		//	          "maxLength": 500,
		//	          "type": "string"
		//	        },
		//	        "DefaultOutboundConfig": {
		//	          "additionalProperties": false,
		//	          "description": "Default Telephone Outbound config",
		//	          "properties": {
		//	            "AnswerMachineDetectionConfig": {
		//	              "additionalProperties": false,
		//	              "description": "The configuration used for answering machine detection during outbound calls",
		//	              "properties": {
		//	                "AwaitAnswerMachinePrompt": {
		//	                  "description": "Enables detection of prompts (e.g., beep after after a voicemail greeting)",
		//	                  "type": "boolean"
		//	                },
		//	                "EnableAnswerMachineDetection": {
		//	                  "description": "Flag to decided whether outbound calls should have answering machine detection enabled or not",
		//	                  "type": "boolean"
		//	                }
		//	              },
		//	              "required": [
		//	                "EnableAnswerMachineDetection"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ConnectContactFlowId": {
		//	              "description": "The identifier of the contact flow for the outbound call",
		//	              "maxLength": 500,
		//	              "type": "string"
		//	            },
		//	            "ConnectSourcePhoneNumber": {
		//	              "description": "The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.",
		//	              "maxLength": 100,
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "ConnectContactFlowId"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "OutboundMode": {
		//	          "additionalProperties": false,
		//	          "description": "Telephony Outbound Mode",
		//	          "oneOf": [
		//	            {
		//	              "required": [
		//	                "ProgressiveConfig"
		//	              ]
		//	            },
		//	            {
		//	              "required": [
		//	                "PredictiveConfig"
		//	              ]
		//	            },
		//	            {
		//	              "required": [
		//	                "AgentlessConfig"
		//	              ]
		//	            }
		//	          ],
		//	          "properties": {
		//	            "AgentlessConfig": {
		//	              "additionalProperties": false,
		//	              "description": "Agentless config",
		//	              "type": "object"
		//	            },
		//	            "PredictiveConfig": {
		//	              "additionalProperties": false,
		//	              "description": "Predictive config",
		//	              "properties": {
		//	                "BandwidthAllocation": {
		//	                  "description": "The bandwidth allocation of a queue resource.",
		//	                  "maximum": 1,
		//	                  "minimum": 0,
		//	                  "type": "number"
		//	                }
		//	              },
		//	              "required": [
		//	                "BandwidthAllocation"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ProgressiveConfig": {
		//	              "additionalProperties": false,
		//	              "description": "Progressive config",
		//	              "properties": {
		//	                "BandwidthAllocation": {
		//	                  "description": "The bandwidth allocation of a queue resource.",
		//	                  "maximum": 1,
		//	                  "minimum": 0,
		//	                  "type": "number"
		//	                }
		//	              },
		//	              "required": [
		//	                "BandwidthAllocation"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "OutboundMode",
		//	        "DefaultOutboundConfig"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"channel_subtype_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Email
				"email": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Capacity
						"capacity": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "Allocates outbound capacity for the specific channel of this campaign between multiple active campaigns",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DefaultOutboundConfig
						"default_outbound_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ConnectSourceEmailAddress
								"connect_source_email_address": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Email address used for Email messages",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SourceEmailAddressDisplayName
								"source_email_address_display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the source email address display name",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: WisdomTemplateArn
								"wisdom_template_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Arn",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Default SMS outbound config",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: OutboundMode
						"outbound_mode": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AgentlessConfig
								"agentless_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									CustomType:  jsontypes.NormalizedType{},
									Description: "Agentless config",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Email Outbound Mode",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Email Channel Subtype config",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Sms
				"sms": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Capacity
						"capacity": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "Allocates outbound capacity for the specific channel of this campaign between multiple active campaigns",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DefaultOutboundConfig
						"default_outbound_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ConnectSourcePhoneNumberArn
								"connect_source_phone_number_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Arn",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: WisdomTemplateArn
								"wisdom_template_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Arn",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Default SMS outbound config",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: OutboundMode
						"outbound_mode": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AgentlessConfig
								"agentless_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									CustomType:  jsontypes.NormalizedType{},
									Description: "Agentless config",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "SMS Outbound Mode",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "SMS Channel Subtype config",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Telephony
				"telephony": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Capacity
						"capacity": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Description: "Allocates outbound capacity for the specific channel of this campaign between multiple active campaigns",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ConnectQueueId
						"connect_queue_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The queue for the call",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DefaultOutboundConfig
						"default_outbound_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AnswerMachineDetectionConfig
								"answer_machine_detection_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AwaitAnswerMachinePrompt
										"await_answer_machine_prompt": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Description: "Enables detection of prompts (e.g., beep after after a voicemail greeting)",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: EnableAnswerMachineDetection
										"enable_answer_machine_detection": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Description: "Flag to decided whether outbound calls should have answering machine detection enabled or not",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The configuration used for answering machine detection during outbound calls",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ConnectContactFlowId
								"connect_contact_flow_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The identifier of the contact flow for the outbound call",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ConnectSourcePhoneNumber
								"connect_source_phone_number": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Default Telephone Outbound config",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: OutboundMode
						"outbound_mode": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AgentlessConfig
								"agentless_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									CustomType:  jsontypes.NormalizedType{},
									Description: "Agentless config",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: PredictiveConfig
								"predictive_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: BandwidthAllocation
										"bandwidth_allocation": schema.Float64Attribute{ /*START ATTRIBUTE*/
											Description: "The bandwidth allocation of a queue resource.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "Predictive config",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ProgressiveConfig
								"progressive_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: BandwidthAllocation
										"bandwidth_allocation": schema.Float64Attribute{ /*START ATTRIBUTE*/
											Description: "The bandwidth allocation of a queue resource.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "Progressive config",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Telephony Outbound Mode",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Telephony Channel Subtype config",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The possible types of channel subtype config parameters",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CommunicationLimitsOverride
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Communication limits config",
		//	  "properties": {
		//	    "AllChannelsSubtypes": {
		//	      "additionalProperties": false,
		//	      "description": "Communication limits",
		//	      "properties": {
		//	        "CommunicationLimitList": {
		//	          "description": "List of communication limit",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "Communication Limit",
		//	            "properties": {
		//	              "Frequency": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "MaxCountPerRecipient": {
		//	                "minimum": 1,
		//	                "type": "integer"
		//	              },
		//	              "Unit": {
		//	                "description": "The communication limit time unit",
		//	                "enum": [
		//	                  "DAY"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "MaxCountPerRecipient",
		//	              "Frequency",
		//	              "Unit"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"communication_limits_override": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AllChannelsSubtypes
				"all_channels_subtypes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CommunicationLimitList
						"communication_limit_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Frequency
									"frequency": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: MaxCountPerRecipient
									"max_count_per_recipient": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Unit
									"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The communication limit time unit",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Description: "List of communication limit",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Communication limits",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Communication limits config",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CommunicationTimeConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Campaign communication time config",
		//	  "properties": {
		//	    "Email": {
		//	      "additionalProperties": false,
		//	      "description": "Time window config",
		//	      "properties": {
		//	        "OpenHours": {
		//	          "additionalProperties": false,
		//	          "description": "Open Hours config",
		//	          "properties": {
		//	            "DailyHours": {
		//	              "description": "Daily Hours map",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "description": "Daily Hour",
		//	                "properties": {
		//	                  "Key": {
		//	                    "description": "Day of week",
		//	                    "enum": [
		//	                      "MONDAY",
		//	                      "TUESDAY",
		//	                      "WEDNESDAY",
		//	                      "THURSDAY",
		//	                      "FRIDAY",
		//	                      "SATURDAY",
		//	                      "SUNDAY"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "description": "List of time range",
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "description": "Time range in 24 hour format",
		//	                      "properties": {
		//	                        "EndTime": {
		//	                          "description": "Time in ISO 8601 format, e.g. T23:11",
		//	                          "pattern": "^T\\d{2}:\\d{2}$",
		//	                          "type": "string"
		//	                        },
		//	                        "StartTime": {
		//	                          "description": "Time in ISO 8601 format, e.g. T23:11",
		//	                          "pattern": "^T\\d{2}:\\d{2}$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "StartTime",
		//	                        "EndTime"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            }
		//	          },
		//	          "required": [
		//	            "DailyHours"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "RestrictedPeriods": {
		//	          "additionalProperties": false,
		//	          "description": "Restricted period config",
		//	          "oneOf": [
		//	            {
		//	              "required": [
		//	                "RestrictedPeriodList"
		//	              ]
		//	            }
		//	          ],
		//	          "properties": {
		//	            "RestrictedPeriodList": {
		//	              "description": "List of restricted period",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "description": "Restricted period",
		//	                "properties": {
		//	                  "EndDate": {
		//	                    "description": "Date in ISO 8601 format, e.g. 2024-01-01",
		//	                    "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
		//	                    "type": "string"
		//	                  },
		//	                  "Name": {
		//	                    "description": "The name of a restricted period",
		//	                    "maxLength": 127,
		//	                    "type": "string"
		//	                  },
		//	                  "StartDate": {
		//	                    "description": "Date in ISO 8601 format, e.g. 2024-01-01",
		//	                    "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "StartDate",
		//	                  "EndDate"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "type": "array"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "OpenHours"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "LocalTimeZoneConfig": {
		//	      "additionalProperties": false,
		//	      "description": "Local time zone config",
		//	      "properties": {
		//	        "DefaultTimeZone": {
		//	          "description": "Time Zone Id in the IANA format",
		//	          "type": "string"
		//	        },
		//	        "LocalTimeZoneDetection": {
		//	          "description": "Local TimeZone Detection method list",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "description": "Local TimeZone Detection method",
		//	            "enum": [
		//	              "ZIP_CODE",
		//	              "AREA_CODE"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Sms": {
		//	      "additionalProperties": false,
		//	      "description": "Time window config",
		//	      "properties": {
		//	        "OpenHours": {
		//	          "additionalProperties": false,
		//	          "description": "Open Hours config",
		//	          "properties": {
		//	            "DailyHours": {
		//	              "description": "Daily Hours map",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "description": "Daily Hour",
		//	                "properties": {
		//	                  "Key": {
		//	                    "description": "Day of week",
		//	                    "enum": [
		//	                      "MONDAY",
		//	                      "TUESDAY",
		//	                      "WEDNESDAY",
		//	                      "THURSDAY",
		//	                      "FRIDAY",
		//	                      "SATURDAY",
		//	                      "SUNDAY"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "description": "List of time range",
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "description": "Time range in 24 hour format",
		//	                      "properties": {
		//	                        "EndTime": {
		//	                          "description": "Time in ISO 8601 format, e.g. T23:11",
		//	                          "pattern": "^T\\d{2}:\\d{2}$",
		//	                          "type": "string"
		//	                        },
		//	                        "StartTime": {
		//	                          "description": "Time in ISO 8601 format, e.g. T23:11",
		//	                          "pattern": "^T\\d{2}:\\d{2}$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "StartTime",
		//	                        "EndTime"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            }
		//	          },
		//	          "required": [
		//	            "DailyHours"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "RestrictedPeriods": {
		//	          "additionalProperties": false,
		//	          "description": "Restricted period config",
		//	          "oneOf": [
		//	            {
		//	              "required": [
		//	                "RestrictedPeriodList"
		//	              ]
		//	            }
		//	          ],
		//	          "properties": {
		//	            "RestrictedPeriodList": {
		//	              "description": "List of restricted period",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "description": "Restricted period",
		//	                "properties": {
		//	                  "EndDate": {
		//	                    "description": "Date in ISO 8601 format, e.g. 2024-01-01",
		//	                    "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
		//	                    "type": "string"
		//	                  },
		//	                  "Name": {
		//	                    "description": "The name of a restricted period",
		//	                    "maxLength": 127,
		//	                    "type": "string"
		//	                  },
		//	                  "StartDate": {
		//	                    "description": "Date in ISO 8601 format, e.g. 2024-01-01",
		//	                    "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "StartDate",
		//	                  "EndDate"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "type": "array"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "OpenHours"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Telephony": {
		//	      "additionalProperties": false,
		//	      "description": "Time window config",
		//	      "properties": {
		//	        "OpenHours": {
		//	          "additionalProperties": false,
		//	          "description": "Open Hours config",
		//	          "properties": {
		//	            "DailyHours": {
		//	              "description": "Daily Hours map",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "description": "Daily Hour",
		//	                "properties": {
		//	                  "Key": {
		//	                    "description": "Day of week",
		//	                    "enum": [
		//	                      "MONDAY",
		//	                      "TUESDAY",
		//	                      "WEDNESDAY",
		//	                      "THURSDAY",
		//	                      "FRIDAY",
		//	                      "SATURDAY",
		//	                      "SUNDAY"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "description": "List of time range",
		//	                    "insertionOrder": false,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "description": "Time range in 24 hour format",
		//	                      "properties": {
		//	                        "EndTime": {
		//	                          "description": "Time in ISO 8601 format, e.g. T23:11",
		//	                          "pattern": "^T\\d{2}:\\d{2}$",
		//	                          "type": "string"
		//	                        },
		//	                        "StartTime": {
		//	                          "description": "Time in ISO 8601 format, e.g. T23:11",
		//	                          "pattern": "^T\\d{2}:\\d{2}$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "StartTime",
		//	                        "EndTime"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            }
		//	          },
		//	          "required": [
		//	            "DailyHours"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "RestrictedPeriods": {
		//	          "additionalProperties": false,
		//	          "description": "Restricted period config",
		//	          "oneOf": [
		//	            {
		//	              "required": [
		//	                "RestrictedPeriodList"
		//	              ]
		//	            }
		//	          ],
		//	          "properties": {
		//	            "RestrictedPeriodList": {
		//	              "description": "List of restricted period",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "description": "Restricted period",
		//	                "properties": {
		//	                  "EndDate": {
		//	                    "description": "Date in ISO 8601 format, e.g. 2024-01-01",
		//	                    "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
		//	                    "type": "string"
		//	                  },
		//	                  "Name": {
		//	                    "description": "The name of a restricted period",
		//	                    "maxLength": 127,
		//	                    "type": "string"
		//	                  },
		//	                  "StartDate": {
		//	                    "description": "Date in ISO 8601 format, e.g. 2024-01-01",
		//	                    "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "StartDate",
		//	                  "EndDate"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "type": "array"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "OpenHours"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "LocalTimeZoneConfig"
		//	  ],
		//	  "type": "object"
		//	}
		"communication_time_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Email
				"email": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: OpenHours
						"open_hours": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DailyHours
								"daily_hours": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Key
											"key": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Day of week",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: EndTime
														"end_time": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Time in ISO 8601 format, e.g. T23:11",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: StartTime
														"start_time": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Time in ISO 8601 format, e.g. T23:11",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Description: "List of time range",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Description: "Daily Hours map",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Open Hours config",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RestrictedPeriods
						"restricted_periods": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: RestrictedPeriodList
								"restricted_period_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: EndDate
											"end_date": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Date in ISO 8601 format, e.g. 2024-01-01",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Name
											"name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The name of a restricted period",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: StartDate
											"start_date": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Date in ISO 8601 format, e.g. 2024-01-01",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Description: "List of restricted period",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Restricted period config",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Time window config",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: LocalTimeZoneConfig
				"local_time_zone_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DefaultTimeZone
						"default_time_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Time Zone Id in the IANA format",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: LocalTimeZoneDetection
						"local_time_zone_detection": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "Local TimeZone Detection method list",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Local time zone config",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Sms
				"sms": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: OpenHours
						"open_hours": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DailyHours
								"daily_hours": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Key
											"key": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Day of week",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: EndTime
														"end_time": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Time in ISO 8601 format, e.g. T23:11",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: StartTime
														"start_time": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Time in ISO 8601 format, e.g. T23:11",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Description: "List of time range",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Description: "Daily Hours map",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Open Hours config",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RestrictedPeriods
						"restricted_periods": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: RestrictedPeriodList
								"restricted_period_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: EndDate
											"end_date": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Date in ISO 8601 format, e.g. 2024-01-01",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Name
											"name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The name of a restricted period",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: StartDate
											"start_date": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Date in ISO 8601 format, e.g. 2024-01-01",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Description: "List of restricted period",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Restricted period config",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Time window config",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Telephony
				"telephony": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: OpenHours
						"open_hours": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DailyHours
								"daily_hours": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Key
											"key": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Day of week",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: EndTime
														"end_time": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Time in ISO 8601 format, e.g. T23:11",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: StartTime
														"start_time": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Time in ISO 8601 format, e.g. T23:11",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Description: "List of time range",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Description: "Daily Hours map",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Open Hours config",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RestrictedPeriods
						"restricted_periods": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: RestrictedPeriodList
								"restricted_period_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: EndDate
											"end_date": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Date in ISO 8601 format, e.g. 2024-01-01",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Name
											"name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The name of a restricted period",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: StartDate
											"start_date": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Date in ISO 8601 format, e.g. 2024-01-01",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Description: "List of restricted period",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Restricted period config",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Time window config",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Campaign communication time config",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectCampaignFlowArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Arn",
		//	  "maxLength": 500,
		//	  "minLength": 20,
		//	  "pattern": "^arn:.*$",
		//	  "type": "string"
		//	}
		"connect_campaign_flow_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Arn",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectInstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Amazon Connect Instance Id",
		//	  "maxLength": 256,
		//	  "minLength": 0,
		//	  "pattern": "^[a-zA-Z0-9_\\-.]*$",
		//	  "type": "string"
		//	}
		"connect_instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Amazon Connect Instance Id",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Campaign name",
		//	  "maxLength": 127,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Campaign name",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Schedule
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Campaign schedule",
		//	  "properties": {
		//	    "EndTime": {
		//	      "description": "Timestamp with no UTC offset or timezone",
		//	      "maxLength": 100,
		//	      "type": "string"
		//	    },
		//	    "RefreshFrequency": {
		//	      "description": "Time duration in ISO 8601 format",
		//	      "maxLength": 50,
		//	      "minLength": 0,
		//	      "pattern": "^[a-zA-Z0-9.]*$",
		//	      "type": "string"
		//	    },
		//	    "StartTime": {
		//	      "description": "Timestamp with no UTC offset or timezone",
		//	      "maxLength": 100,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "StartTime",
		//	    "EndTime"
		//	  ],
		//	  "type": "object"
		//	}
		"schedule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EndTime
				"end_time": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Timestamp with no UTC offset or timezone",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RefreshFrequency
				"refresh_frequency": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Time duration in ISO 8601 format",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: StartTime
				"start_time": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Timestamp with no UTC offset or timezone",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Campaign schedule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Source
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The possible source of the campaign",
		//	  "oneOf": [
		//	    {
		//	      "required": [
		//	        "CustomerProfilesSegmentArn"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "EventTrigger"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "CustomerProfilesSegmentArn": {
		//	      "description": "Arn",
		//	      "maxLength": 500,
		//	      "minLength": 20,
		//	      "pattern": "^arn:.*$",
		//	      "type": "string"
		//	    },
		//	    "EventTrigger": {
		//	      "additionalProperties": false,
		//	      "description": "The event trigger of the campaign",
		//	      "properties": {
		//	        "CustomerProfilesDomainArn": {
		//	          "description": "Arn",
		//	          "maxLength": 500,
		//	          "minLength": 20,
		//	          "pattern": "^arn:.*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"source": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CustomerProfilesSegmentArn
				"customer_profiles_segment_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Arn",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: EventTrigger
				"event_trigger": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CustomerProfilesDomainArn
						"customer_profiles_domain_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Arn",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The event trigger of the campaign",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The possible source of the campaign",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "One or more tags.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "One or more tags.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ConnectCampaignsV2::Campaign",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ConnectCampaignsV2::Campaign").WithTerraformTypeName("awscc_connectcampaignsv2_campaign")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"agentless_config":                  "AgentlessConfig",
		"all_channels_subtypes":             "AllChannelsSubtypes",
		"answer_machine_detection_config":   "AnswerMachineDetectionConfig",
		"arn":                               "Arn",
		"await_answer_machine_prompt":       "AwaitAnswerMachinePrompt",
		"bandwidth_allocation":              "BandwidthAllocation",
		"capacity":                          "Capacity",
		"channel_subtype_config":            "ChannelSubtypeConfig",
		"communication_limit_list":          "CommunicationLimitList",
		"communication_limits_override":     "CommunicationLimitsOverride",
		"communication_time_config":         "CommunicationTimeConfig",
		"connect_campaign_flow_arn":         "ConnectCampaignFlowArn",
		"connect_contact_flow_id":           "ConnectContactFlowId",
		"connect_instance_id":               "ConnectInstanceId",
		"connect_queue_id":                  "ConnectQueueId",
		"connect_source_email_address":      "ConnectSourceEmailAddress",
		"connect_source_phone_number":       "ConnectSourcePhoneNumber",
		"connect_source_phone_number_arn":   "ConnectSourcePhoneNumberArn",
		"customer_profiles_domain_arn":      "CustomerProfilesDomainArn",
		"customer_profiles_segment_arn":     "CustomerProfilesSegmentArn",
		"daily_hours":                       "DailyHours",
		"default_outbound_config":           "DefaultOutboundConfig",
		"default_time_zone":                 "DefaultTimeZone",
		"email":                             "Email",
		"enable_answer_machine_detection":   "EnableAnswerMachineDetection",
		"end_date":                          "EndDate",
		"end_time":                          "EndTime",
		"event_trigger":                     "EventTrigger",
		"frequency":                         "Frequency",
		"key":                               "Key",
		"local_time_zone_config":            "LocalTimeZoneConfig",
		"local_time_zone_detection":         "LocalTimeZoneDetection",
		"max_count_per_recipient":           "MaxCountPerRecipient",
		"name":                              "Name",
		"open_hours":                        "OpenHours",
		"outbound_mode":                     "OutboundMode",
		"predictive_config":                 "PredictiveConfig",
		"progressive_config":                "ProgressiveConfig",
		"refresh_frequency":                 "RefreshFrequency",
		"restricted_period_list":            "RestrictedPeriodList",
		"restricted_periods":                "RestrictedPeriods",
		"schedule":                          "Schedule",
		"sms":                               "Sms",
		"source":                            "Source",
		"source_email_address_display_name": "SourceEmailAddressDisplayName",
		"start_date":                        "StartDate",
		"start_time":                        "StartTime",
		"tags":                              "Tags",
		"telephony":                         "Telephony",
		"unit":                              "Unit",
		"value":                             "Value",
		"wisdom_template_arn":               "WisdomTemplateArn",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
