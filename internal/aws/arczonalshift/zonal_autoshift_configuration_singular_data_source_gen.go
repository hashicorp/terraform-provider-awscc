// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package arczonalshift

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_arczonalshift_zonal_autoshift_configuration", zonalAutoshiftConfigurationDataSource)
}

// zonalAutoshiftConfigurationDataSource returns the Terraform awscc_arczonalshift_zonal_autoshift_configuration data source.
// This Terraform data source corresponds to the CloudFormation AWS::ARCZonalShift::ZonalAutoshiftConfiguration resource.
func zonalAutoshiftConfigurationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: PracticeRunConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BlockedDates": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "maxLength": 10,
		//	        "minLength": 10,
		//	        "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
		//	        "type": "string"
		//	      },
		//	      "maxItems": 15,
		//	      "minItems": 0,
		//	      "type": "array"
		//	    },
		//	    "BlockedWindows": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "maxLength": 19,
		//	        "minLength": 19,
		//	        "pattern": "^(Mon|Tue|Wed|Thu|Fri|Sat|Sun):[0-9]{2}:[0-9]{2}-(Mon|Tue|Wed|Thu|Fri|Sat|Sun):[0-9]{2}:[0-9]{2}$",
		//	        "type": "string"
		//	      },
		//	      "maxItems": 15,
		//	      "minItems": 0,
		//	      "type": "array"
		//	    },
		//	    "BlockingAlarms": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AlarmIdentifier": {
		//	            "maxLength": 1024,
		//	            "minLength": 8,
		//	            "pattern": "^.*$",
		//	            "type": "string"
		//	          },
		//	          "Type": {
		//	            "maxLength": 10,
		//	            "minLength": 8,
		//	            "pattern": "^[a-zA-Z]*$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "AlarmIdentifier",
		//	          "Type"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 1,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "OutcomeAlarms": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AlarmIdentifier": {
		//	            "maxLength": 1024,
		//	            "minLength": 8,
		//	            "pattern": "^.*$",
		//	            "type": "string"
		//	          },
		//	          "Type": {
		//	            "maxLength": 10,
		//	            "minLength": 8,
		//	            "pattern": "^[a-zA-Z]*$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "AlarmIdentifier",
		//	          "Type"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 1,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "required": [
		//	    "OutcomeAlarms"
		//	  ],
		//	  "type": "object"
		//	}
		"practice_run_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BlockedDates
				"blocked_dates": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: BlockedWindows
				"blocked_windows": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: BlockingAlarms
				"blocking_alarms": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AlarmIdentifier
							"alarm_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: OutcomeAlarms
				"outcome_alarms": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AlarmIdentifier
							"alarm_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 1024,
		//	  "minLength": 8,
		//	  "type": "string"
		//	}
		"resource_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ZonalAutoshiftStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "ENABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"zonal_autoshift_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ARCZonalShift::ZonalAutoshiftConfiguration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ARCZonalShift::ZonalAutoshiftConfiguration").WithTerraformTypeName("awscc_arczonalshift_zonal_autoshift_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"alarm_identifier":           "AlarmIdentifier",
		"blocked_dates":              "BlockedDates",
		"blocked_windows":            "BlockedWindows",
		"blocking_alarms":            "BlockingAlarms",
		"outcome_alarms":             "OutcomeAlarms",
		"practice_run_configuration": "PracticeRunConfiguration",
		"resource_identifier":        "ResourceIdentifier",
		"type":                       "Type",
		"zonal_autoshift_status":     "ZonalAutoshiftStatus",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
