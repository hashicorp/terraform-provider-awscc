// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iotsitewise

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_iotsitewise_asset_model", assetModelDataSource)
}

// assetModelDataSource returns the Terraform awscc_iotsitewise_asset_model data source.
// This Terraform data source corresponds to the CloudFormation AWS::IoTSiteWise::AssetModel resource.
func assetModelDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AssetModelArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the asset model, which has the following format.",
		//	  "type": "string"
		//	}
		"asset_model_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the asset model, which has the following format.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AssetModelCompositeModels
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Contains a composite model definition in an asset model. This composite model definition is applied to all assets created from the asset model.",
		//	    "properties": {
		//	      "ComposedAssetModelId": {
		//	        "description": "The component model ID for which the composite model is composed of",
		//	        "type": "string"
		//	      },
		//	      "CompositeModelProperties": {
		//	        "description": "The property definitions of the asset model. You can specify up to 200 properties per asset model.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Contains information about an asset model property.",
		//	          "properties": {
		//	            "DataType": {
		//	              "description": "The data type of the asset model property.",
		//	              "enum": [
		//	                "STRING",
		//	                "INTEGER",
		//	                "DOUBLE",
		//	                "BOOLEAN",
		//	                "STRUCT"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "DataTypeSpec": {
		//	              "description": "The data type of the structure for this property.",
		//	              "enum": [
		//	                "AWS/ALARM_STATE"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "ExternalId": {
		//	              "description": "The External ID of the Asset Model Property",
		//	              "maxLength": 128,
		//	              "minLength": 2,
		//	              "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	              "type": "string"
		//	            },
		//	            "Id": {
		//	              "description": "The ID of the Asset Model Property",
		//	              "maxLength": 36,
		//	              "minLength": 36,
		//	              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	              "type": "string"
		//	            },
		//	            "LogicalId": {
		//	              "description": "Customer provided Logical ID for property.",
		//	              "maxLength": 256,
		//	              "minLength": 1,
		//	              "pattern": "",
		//	              "type": "string"
		//	            },
		//	            "Name": {
		//	              "description": "The name of the asset model property.",
		//	              "type": "string"
		//	            },
		//	            "Type": {
		//	              "additionalProperties": false,
		//	              "description": "The property type",
		//	              "properties": {
		//	                "Attribute": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "DefaultValue": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "Metric": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Expression": {
		//	                      "description": "The mathematical expression that defines the metric aggregation function. You can specify up to 10 functions per expression.",
		//	                      "type": "string"
		//	                    },
		//	                    "Variables": {
		//	                      "description": "The list of variables used in the expression.",
		//	                      "insertionOrder": false,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "properties": {
		//	                          "Name": {
		//	                            "description": "The friendly name of the variable to be used in the expression.",
		//	                            "type": "string"
		//	                          },
		//	                          "Value": {
		//	                            "additionalProperties": false,
		//	                            "description": "The variable that identifies an asset property from which to use values.",
		//	                            "properties": {
		//	                              "HierarchyExternalId": {
		//	                                "description": "The External ID of the hierarchy that is trying to be referenced",
		//	                                "maxLength": 128,
		//	                                "minLength": 2,
		//	                                "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	                                "type": "string"
		//	                              },
		//	                              "HierarchyId": {
		//	                                "description": "The ID of the hierarchy that is trying to be referenced",
		//	                                "maxLength": 36,
		//	                                "minLength": 36,
		//	                                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	                                "type": "string"
		//	                              },
		//	                              "HierarchyLogicalId": {
		//	                                "maxLength": 256,
		//	                                "minLength": 1,
		//	                                "pattern": "",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyExternalId": {
		//	                                "description": "The External ID of the property that is trying to be referenced",
		//	                                "maxLength": 128,
		//	                                "minLength": 2,
		//	                                "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyId": {
		//	                                "description": "The ID of the property that is trying to be referenced",
		//	                                "maxLength": 36,
		//	                                "minLength": 36,
		//	                                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyLogicalId": {
		//	                                "maxLength": 256,
		//	                                "minLength": 1,
		//	                                "pattern": "",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyPath": {
		//	                                "description": "The path of the property that is trying to be referenced",
		//	                                "insertionOrder": true,
		//	                                "items": {
		//	                                  "additionalProperties": false,
		//	                                  "description": "The definition for property path which is used to reference properties in transforms/metrics",
		//	                                  "properties": {
		//	                                    "Name": {
		//	                                      "description": "The name of the property",
		//	                                      "type": "string"
		//	                                    }
		//	                                  },
		//	                                  "required": [
		//	                                    "Name"
		//	                                  ],
		//	                                  "type": "object"
		//	                                },
		//	                                "type": "array"
		//	                              }
		//	                            },
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "Name",
		//	                          "Value"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    },
		//	                    "Window": {
		//	                      "additionalProperties": false,
		//	                      "description": "The window (time interval) over which AWS IoT SiteWise computes the metric's aggregation expression",
		//	                      "properties": {
		//	                        "Tumbling": {
		//	                          "additionalProperties": false,
		//	                          "description": "Contains a tumbling window, which is a repeating fixed-sized, non-overlapping, and contiguous time interval. This window is used in metric and aggregation computations.",
		//	                          "properties": {
		//	                            "Interval": {
		//	                              "description": "The time interval for the tumbling window.",
		//	                              "type": "string"
		//	                            },
		//	                            "Offset": {
		//	                              "description": "The shift or reference point on timeline for the contiguous time intervals.",
		//	                              "type": "string"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "Interval"
		//	                          ],
		//	                          "type": "object"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Expression",
		//	                    "Variables",
		//	                    "Window"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "Transform": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Expression": {
		//	                      "description": "The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.",
		//	                      "type": "string"
		//	                    },
		//	                    "Variables": {
		//	                      "description": "The list of variables used in the expression.",
		//	                      "insertionOrder": false,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "properties": {
		//	                          "Name": {
		//	                            "description": "The friendly name of the variable to be used in the expression.",
		//	                            "type": "string"
		//	                          },
		//	                          "Value": {
		//	                            "additionalProperties": false,
		//	                            "description": "The variable that identifies an asset property from which to use values.",
		//	                            "properties": {
		//	                              "HierarchyExternalId": {
		//	                                "description": "The External ID of the hierarchy that is trying to be referenced",
		//	                                "maxLength": 128,
		//	                                "minLength": 2,
		//	                                "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	                                "type": "string"
		//	                              },
		//	                              "HierarchyId": {
		//	                                "description": "The ID of the hierarchy that is trying to be referenced",
		//	                                "maxLength": 36,
		//	                                "minLength": 36,
		//	                                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	                                "type": "string"
		//	                              },
		//	                              "HierarchyLogicalId": {
		//	                                "maxLength": 256,
		//	                                "minLength": 1,
		//	                                "pattern": "",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyExternalId": {
		//	                                "description": "The External ID of the property that is trying to be referenced",
		//	                                "maxLength": 128,
		//	                                "minLength": 2,
		//	                                "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyId": {
		//	                                "description": "The ID of the property that is trying to be referenced",
		//	                                "maxLength": 36,
		//	                                "minLength": 36,
		//	                                "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyLogicalId": {
		//	                                "maxLength": 256,
		//	                                "minLength": 1,
		//	                                "pattern": "",
		//	                                "type": "string"
		//	                              },
		//	                              "PropertyPath": {
		//	                                "description": "The path of the property that is trying to be referenced",
		//	                                "insertionOrder": true,
		//	                                "items": {
		//	                                  "additionalProperties": false,
		//	                                  "description": "The definition for property path which is used to reference properties in transforms/metrics",
		//	                                  "properties": {
		//	                                    "Name": {
		//	                                      "description": "The name of the property",
		//	                                      "type": "string"
		//	                                    }
		//	                                  },
		//	                                  "required": [
		//	                                    "Name"
		//	                                  ],
		//	                                  "type": "object"
		//	                                },
		//	                                "type": "array"
		//	                              }
		//	                            },
		//	                            "type": "object"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "Name",
		//	                          "Value"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Expression",
		//	                    "Variables"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "TypeName": {
		//	                  "enum": [
		//	                    "Measurement",
		//	                    "Attribute",
		//	                    "Transform",
		//	                    "Metric"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "TypeName"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "Unit": {
		//	              "description": "The unit of the asset model property, such as Newtons or RPM.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Name",
		//	            "DataType",
		//	            "Type"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "Description": {
		//	        "description": "A description for the asset composite model.",
		//	        "type": "string"
		//	      },
		//	      "ExternalId": {
		//	        "description": "The External ID of the composite model",
		//	        "maxLength": 128,
		//	        "minLength": 2,
		//	        "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	        "type": "string"
		//	      },
		//	      "Id": {
		//	        "description": "The Actual ID of the composite model",
		//	        "maxLength": 36,
		//	        "minLength": 36,
		//	        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	        "type": "string"
		//	      },
		//	      "Name": {
		//	        "description": "A unique, friendly name for the asset composite model.",
		//	        "type": "string"
		//	      },
		//	      "ParentAssetModelCompositeModelExternalId": {
		//	        "description": "The parent composite model External ID",
		//	        "maxLength": 128,
		//	        "minLength": 2,
		//	        "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	        "type": "string"
		//	      },
		//	      "Path": {
		//	        "description": "The path of the composite model. This is only for derived composite models",
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "Type": {
		//	        "description": "The type of the composite model. For alarm composite models, this type is AWS/ALARM",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Name",
		//	      "Type"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"asset_model_composite_models": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ComposedAssetModelId
					"composed_asset_model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The component model ID for which the composite model is composed of",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: CompositeModelProperties
					"composite_model_properties": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DataType
								"data_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The data type of the asset model property.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: DataTypeSpec
								"data_type_spec": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The data type of the structure for this property.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ExternalId
								"external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The External ID of the Asset Model Property",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Id
								"id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The ID of the Asset Model Property",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: LogicalId
								"logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Customer provided Logical ID for property.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Name
								"name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the asset model property.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Type
								"type": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Attribute
										"attribute": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: DefaultValue
												"default_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Metric
										"metric": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Expression
												"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The mathematical expression that defines the metric aggregation function. You can specify up to 10 functions per expression.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Variables
												"variables": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: Name
															"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The friendly name of the variable to be used in the expression.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: Value
															"value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: HierarchyExternalId
																	"hierarchy_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The External ID of the hierarchy that is trying to be referenced",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: HierarchyId
																	"hierarchy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the hierarchy that is trying to be referenced",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: HierarchyLogicalId
																	"hierarchy_logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Computed: true,
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyExternalId
																	"property_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The External ID of the property that is trying to be referenced",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyId
																	"property_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the property that is trying to be referenced",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyLogicalId
																	"property_logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Computed: true,
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyPath
																	"property_path": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																		NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																				// Property: Name
																				"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																					Description: "The name of the property",
																					Computed:    true,
																				}, /*END ATTRIBUTE*/
																			}, /*END SCHEMA*/
																		}, /*END NESTED OBJECT*/
																		Description: "The path of the property that is trying to be referenced",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "The variable that identifies an asset property from which to use values.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "The list of variables used in the expression.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Window
												"window": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Tumbling
														"tumbling": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: Interval
																"interval": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The time interval for the tumbling window.",
																	Computed:    true,
																}, /*END ATTRIBUTE*/
																// Property: Offset
																"offset": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The shift or reference point on timeline for the contiguous time intervals.",
																	Computed:    true,
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Contains a tumbling window, which is a repeating fixed-sized, non-overlapping, and contiguous time interval. This window is used in metric and aggregation computations.",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "The window (time interval) over which AWS IoT SiteWise computes the metric's aggregation expression",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Transform
										"transform": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Expression
												"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Variables
												"variables": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: Name
															"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The friendly name of the variable to be used in the expression.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: Value
															"value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: HierarchyExternalId
																	"hierarchy_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The External ID of the hierarchy that is trying to be referenced",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: HierarchyId
																	"hierarchy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the hierarchy that is trying to be referenced",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: HierarchyLogicalId
																	"hierarchy_logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Computed: true,
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyExternalId
																	"property_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The External ID of the property that is trying to be referenced",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyId
																	"property_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The ID of the property that is trying to be referenced",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyLogicalId
																	"property_logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Computed: true,
																	}, /*END ATTRIBUTE*/
																	// Property: PropertyPath
																	"property_path": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																		NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																				// Property: Name
																				"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																					Description: "The name of the property",
																					Computed:    true,
																				}, /*END ATTRIBUTE*/
																			}, /*END SCHEMA*/
																		}, /*END NESTED OBJECT*/
																		Description: "The path of the property that is trying to be referenced",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "The variable that identifies an asset property from which to use values.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "The list of variables used in the expression.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: TypeName
										"type_name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The property type",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Unit
								"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The unit of the asset model property, such as Newtons or RPM.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "The property definitions of the asset model. You can specify up to 200 properties per asset model.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Description
					"description": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A description for the asset composite model.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ExternalId
					"external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The External ID of the composite model",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Id
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The Actual ID of the composite model",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A unique, friendly name for the asset composite model.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ParentAssetModelCompositeModelExternalId
					"parent_asset_model_composite_model_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The parent composite model External ID",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Path
					"path": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "The path of the composite model. This is only for derived composite models",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The type of the composite model. For alarm composite models, this type is AWS/ALARM",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AssetModelDescription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A description for the asset model.",
		//	  "type": "string"
		//	}
		"asset_model_description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A description for the asset model.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AssetModelExternalId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The external ID of the asset model.",
		//	  "maxLength": 128,
		//	  "minLength": 2,
		//	  "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	  "type": "string"
		//	}
		"asset_model_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The external ID of the asset model.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AssetModelHierarchies
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Contains information about an asset model hierarchy.",
		//	    "properties": {
		//	      "ChildAssetModelId": {
		//	        "description": "The ID of the asset model. All assets in this hierarchy must be instances of the child AssetModelId asset model.",
		//	        "type": "string"
		//	      },
		//	      "ExternalId": {
		//	        "description": "Customer provided external ID for hierarchy",
		//	        "maxLength": 128,
		//	        "minLength": 2,
		//	        "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	        "type": "string"
		//	      },
		//	      "Id": {
		//	        "description": "Customer provided actual ID for hierarchy",
		//	        "maxLength": 36,
		//	        "minLength": 36,
		//	        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	        "type": "string"
		//	      },
		//	      "LogicalId": {
		//	        "description": "Customer provided logical ID for hierarchy.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Name": {
		//	        "description": "The name of the asset model hierarchy.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Name",
		//	      "ChildAssetModelId"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"asset_model_hierarchies": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ChildAssetModelId
					"child_asset_model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID of the asset model. All assets in this hierarchy must be instances of the child AssetModelId asset model.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ExternalId
					"external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Customer provided external ID for hierarchy",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Id
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Customer provided actual ID for hierarchy",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: LogicalId
					"logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Customer provided logical ID for hierarchy.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name of the asset model hierarchy.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. You can specify up to 10 hierarchies per asset model.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AssetModelId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the asset model.",
		//	  "maxLength": 36,
		//	  "minLength": 36,
		//	  "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	  "type": "string"
		//	}
		"asset_model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the asset model.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AssetModelName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique, friendly name for the asset model.",
		//	  "type": "string"
		//	}
		"asset_model_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique, friendly name for the asset model.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AssetModelProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The property definitions of the asset model. You can specify up to 200 properties per asset model.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Contains information about an asset model property.",
		//	    "properties": {
		//	      "DataType": {
		//	        "description": "The data type of the asset model property.",
		//	        "enum": [
		//	          "STRING",
		//	          "INTEGER",
		//	          "DOUBLE",
		//	          "BOOLEAN",
		//	          "STRUCT"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "DataTypeSpec": {
		//	        "description": "The data type of the structure for this property.",
		//	        "enum": [
		//	          "AWS/ALARM_STATE"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "ExternalId": {
		//	        "description": "The External ID of the Asset Model Property",
		//	        "maxLength": 128,
		//	        "minLength": 2,
		//	        "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	        "type": "string"
		//	      },
		//	      "Id": {
		//	        "description": "The ID of the Asset Model Property",
		//	        "maxLength": 36,
		//	        "minLength": 36,
		//	        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	        "type": "string"
		//	      },
		//	      "LogicalId": {
		//	        "description": "Customer provided Logical ID for property.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Name": {
		//	        "description": "The name of the asset model property.",
		//	        "type": "string"
		//	      },
		//	      "Type": {
		//	        "additionalProperties": false,
		//	        "description": "The property type",
		//	        "properties": {
		//	          "Attribute": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "DefaultValue": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Metric": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Expression": {
		//	                "description": "The mathematical expression that defines the metric aggregation function. You can specify up to 10 functions per expression.",
		//	                "type": "string"
		//	              },
		//	              "Variables": {
		//	                "description": "The list of variables used in the expression.",
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Name": {
		//	                      "description": "The friendly name of the variable to be used in the expression.",
		//	                      "type": "string"
		//	                    },
		//	                    "Value": {
		//	                      "additionalProperties": false,
		//	                      "description": "The variable that identifies an asset property from which to use values.",
		//	                      "properties": {
		//	                        "HierarchyExternalId": {
		//	                          "description": "The External ID of the hierarchy that is trying to be referenced",
		//	                          "maxLength": 128,
		//	                          "minLength": 2,
		//	                          "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	                          "type": "string"
		//	                        },
		//	                        "HierarchyId": {
		//	                          "description": "The ID of the hierarchy that is trying to be referenced",
		//	                          "maxLength": 36,
		//	                          "minLength": 36,
		//	                          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	                          "type": "string"
		//	                        },
		//	                        "HierarchyLogicalId": {
		//	                          "maxLength": 256,
		//	                          "minLength": 1,
		//	                          "pattern": "",
		//	                          "type": "string"
		//	                        },
		//	                        "PropertyExternalId": {
		//	                          "description": "The External ID of the property that is trying to be referenced",
		//	                          "maxLength": 128,
		//	                          "minLength": 2,
		//	                          "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	                          "type": "string"
		//	                        },
		//	                        "PropertyId": {
		//	                          "description": "The ID of the property that is trying to be referenced",
		//	                          "maxLength": 36,
		//	                          "minLength": 36,
		//	                          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	                          "type": "string"
		//	                        },
		//	                        "PropertyLogicalId": {
		//	                          "maxLength": 256,
		//	                          "minLength": 1,
		//	                          "pattern": "",
		//	                          "type": "string"
		//	                        },
		//	                        "PropertyPath": {
		//	                          "description": "The path of the property that is trying to be referenced",
		//	                          "insertionOrder": true,
		//	                          "items": {
		//	                            "additionalProperties": false,
		//	                            "description": "The definition for property path which is used to reference properties in transforms/metrics",
		//	                            "properties": {
		//	                              "Name": {
		//	                                "description": "The name of the property",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "Name"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Name",
		//	                    "Value"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "Window": {
		//	                "additionalProperties": false,
		//	                "description": "The window (time interval) over which AWS IoT SiteWise computes the metric's aggregation expression",
		//	                "properties": {
		//	                  "Tumbling": {
		//	                    "additionalProperties": false,
		//	                    "description": "Contains a tumbling window, which is a repeating fixed-sized, non-overlapping, and contiguous time interval. This window is used in metric and aggregation computations.",
		//	                    "properties": {
		//	                      "Interval": {
		//	                        "description": "The time interval for the tumbling window.",
		//	                        "type": "string"
		//	                      },
		//	                      "Offset": {
		//	                        "description": "The shift or reference point on timeline for the contiguous time intervals.",
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "Interval"
		//	                    ],
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "Expression",
		//	              "Variables",
		//	              "Window"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Transform": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Expression": {
		//	                "description": "The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.",
		//	                "type": "string"
		//	              },
		//	              "Variables": {
		//	                "description": "The list of variables used in the expression.",
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Name": {
		//	                      "description": "The friendly name of the variable to be used in the expression.",
		//	                      "type": "string"
		//	                    },
		//	                    "Value": {
		//	                      "additionalProperties": false,
		//	                      "description": "The variable that identifies an asset property from which to use values.",
		//	                      "properties": {
		//	                        "HierarchyExternalId": {
		//	                          "description": "The External ID of the hierarchy that is trying to be referenced",
		//	                          "maxLength": 128,
		//	                          "minLength": 2,
		//	                          "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	                          "type": "string"
		//	                        },
		//	                        "HierarchyId": {
		//	                          "description": "The ID of the hierarchy that is trying to be referenced",
		//	                          "maxLength": 36,
		//	                          "minLength": 36,
		//	                          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	                          "type": "string"
		//	                        },
		//	                        "HierarchyLogicalId": {
		//	                          "maxLength": 256,
		//	                          "minLength": 1,
		//	                          "pattern": "",
		//	                          "type": "string"
		//	                        },
		//	                        "PropertyExternalId": {
		//	                          "description": "The External ID of the property that is trying to be referenced",
		//	                          "maxLength": 128,
		//	                          "minLength": 2,
		//	                          "pattern": "[a-zA-Z0-9_][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9_]+",
		//	                          "type": "string"
		//	                        },
		//	                        "PropertyId": {
		//	                          "description": "The ID of the property that is trying to be referenced",
		//	                          "maxLength": 36,
		//	                          "minLength": 36,
		//	                          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
		//	                          "type": "string"
		//	                        },
		//	                        "PropertyLogicalId": {
		//	                          "maxLength": 256,
		//	                          "minLength": 1,
		//	                          "pattern": "",
		//	                          "type": "string"
		//	                        },
		//	                        "PropertyPath": {
		//	                          "description": "The path of the property that is trying to be referenced",
		//	                          "insertionOrder": true,
		//	                          "items": {
		//	                            "additionalProperties": false,
		//	                            "description": "The definition for property path which is used to reference properties in transforms/metrics",
		//	                            "properties": {
		//	                              "Name": {
		//	                                "description": "The name of the property",
		//	                                "type": "string"
		//	                              }
		//	                            },
		//	                            "required": [
		//	                              "Name"
		//	                            ],
		//	                            "type": "object"
		//	                          },
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Name",
		//	                    "Value"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              }
		//	            },
		//	            "required": [
		//	              "Expression",
		//	              "Variables"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "TypeName": {
		//	            "enum": [
		//	              "Measurement",
		//	              "Attribute",
		//	              "Transform",
		//	              "Metric"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "TypeName"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "Unit": {
		//	        "description": "The unit of the asset model property, such as Newtons or RPM.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Name",
		//	      "DataType",
		//	      "Type"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"asset_model_properties": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DataType
					"data_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The data type of the asset model property.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: DataTypeSpec
					"data_type_spec": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The data type of the structure for this property.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ExternalId
					"external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The External ID of the Asset Model Property",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Id
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID of the Asset Model Property",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: LogicalId
					"logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Customer provided Logical ID for property.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name of the asset model property.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Attribute
							"attribute": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DefaultValue
									"default_value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Metric
							"metric": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Expression
									"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The mathematical expression that defines the metric aggregation function. You can specify up to 10 functions per expression.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Variables
									"variables": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Name
												"name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The friendly name of the variable to be used in the expression.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Value
												"value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: HierarchyExternalId
														"hierarchy_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The External ID of the hierarchy that is trying to be referenced",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: HierarchyId
														"hierarchy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The ID of the hierarchy that is trying to be referenced",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: HierarchyLogicalId
														"hierarchy_logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: PropertyExternalId
														"property_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The External ID of the property that is trying to be referenced",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: PropertyId
														"property_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The ID of the property that is trying to be referenced",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: PropertyLogicalId
														"property_logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: PropertyPath
														"property_path": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
															NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Name
																	"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the property",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
															}, /*END NESTED OBJECT*/
															Description: "The path of the property that is trying to be referenced",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "The variable that identifies an asset property from which to use values.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "The list of variables used in the expression.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Window
									"window": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Tumbling
											"tumbling": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Interval
													"interval": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "The time interval for the tumbling window.",
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: Offset
													"offset": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "The shift or reference point on timeline for the contiguous time intervals.",
														Computed:    true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "Contains a tumbling window, which is a repeating fixed-sized, non-overlapping, and contiguous time interval. This window is used in metric and aggregation computations.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The window (time interval) over which AWS IoT SiteWise computes the metric's aggregation expression",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Transform
							"transform": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Expression
									"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The mathematical expression that defines the transformation function. You can specify up to 10 functions per expression.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Variables
									"variables": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Name
												"name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The friendly name of the variable to be used in the expression.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Value
												"value": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: HierarchyExternalId
														"hierarchy_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The External ID of the hierarchy that is trying to be referenced",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: HierarchyId
														"hierarchy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The ID of the hierarchy that is trying to be referenced",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: HierarchyLogicalId
														"hierarchy_logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: PropertyExternalId
														"property_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The External ID of the property that is trying to be referenced",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: PropertyId
														"property_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The ID of the property that is trying to be referenced",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: PropertyLogicalId
														"property_logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: PropertyPath
														"property_path": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
															NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Name
																	"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The name of the property",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
															}, /*END NESTED OBJECT*/
															Description: "The path of the property that is trying to be referenced",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "The variable that identifies an asset property from which to use values.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "The list of variables used in the expression.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: TypeName
							"type_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "The property type",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Unit
					"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The unit of the asset model property, such as Newtons or RPM.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The property definitions of the asset model. You can specify up to 200 properties per asset model.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AssetModelType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the asset model (ASSET_MODEL OR COMPONENT_MODEL or INTERFACE)",
		//	  "type": "string"
		//	}
		"asset_model_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the asset model (ASSET_MODEL OR COMPONENT_MODEL or INTERFACE)",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnforcedAssetModelInterfaceRelationships
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "a list of asset model and interface relationships",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Contains information about enforced interface hierarchy and asset model hierarchy",
		//	    "properties": {
		//	      "InterfaceAssetModelId": {
		//	        "description": "The ID of the interface that is enforced to the asset model",
		//	        "type": "string"
		//	      },
		//	      "PropertyMappings": {
		//	        "description": "Contains information about enforced interface property and asset model property",
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Contains information about enforced interface property and asset model property",
		//	          "properties": {
		//	            "AssetModelPropertyExternalId": {
		//	              "description": "The external ID of the enforced asset model property",
		//	              "type": "string"
		//	            },
		//	            "AssetModelPropertyLogicalId": {
		//	              "description": "The logical ID of the enforced asset model property",
		//	              "type": "string"
		//	            },
		//	            "InterfaceAssetModelPropertyExternalId": {
		//	              "description": "The external ID of the enforced interface property",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "InterfaceAssetModelPropertyExternalId"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"enforced_asset_model_interface_relationships": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: InterfaceAssetModelId
					"interface_asset_model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID of the interface that is enforced to the asset model",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: PropertyMappings
					"property_mappings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AssetModelPropertyExternalId
								"asset_model_property_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The external ID of the enforced asset model property",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: AssetModelPropertyLogicalId
								"asset_model_property_logical_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The logical ID of the enforced asset model property",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: InterfaceAssetModelPropertyExternalId
								"interface_asset_model_property_external_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The external ID of the enforced interface property",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "Contains information about enforced interface property and asset model property",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "a list of asset model and interface relationships",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of key-value pairs that contain metadata for the asset model.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of key-value pairs that contain metadata for the asset model.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::IoTSiteWise::AssetModel",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoTSiteWise::AssetModel").WithTerraformTypeName("awscc_iotsitewise_asset_model")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"asset_model_arn":                              "AssetModelArn",
		"asset_model_composite_models":                 "AssetModelCompositeModels",
		"asset_model_description":                      "AssetModelDescription",
		"asset_model_external_id":                      "AssetModelExternalId",
		"asset_model_hierarchies":                      "AssetModelHierarchies",
		"asset_model_id":                               "AssetModelId",
		"asset_model_name":                             "AssetModelName",
		"asset_model_properties":                       "AssetModelProperties",
		"asset_model_property_external_id":             "AssetModelPropertyExternalId",
		"asset_model_property_logical_id":              "AssetModelPropertyLogicalId",
		"asset_model_type":                             "AssetModelType",
		"attribute":                                    "Attribute",
		"child_asset_model_id":                         "ChildAssetModelId",
		"composed_asset_model_id":                      "ComposedAssetModelId",
		"composite_model_properties":                   "CompositeModelProperties",
		"data_type":                                    "DataType",
		"data_type_spec":                               "DataTypeSpec",
		"default_value":                                "DefaultValue",
		"description":                                  "Description",
		"enforced_asset_model_interface_relationships": "EnforcedAssetModelInterfaceRelationships",
		"expression":                                   "Expression",
		"external_id":                                  "ExternalId",
		"hierarchy_external_id":                        "HierarchyExternalId",
		"hierarchy_id":                                 "HierarchyId",
		"hierarchy_logical_id":                         "HierarchyLogicalId",
		"id":                                           "Id",
		"interface_asset_model_id":                     "InterfaceAssetModelId",
		"interface_asset_model_property_external_id":   "InterfaceAssetModelPropertyExternalId",
		"interval":                                     "Interval",
		"key":                                          "Key",
		"logical_id":                                   "LogicalId",
		"metric":                                       "Metric",
		"name":                                         "Name",
		"offset":                                       "Offset",
		"parent_asset_model_composite_model_external_id": "ParentAssetModelCompositeModelExternalId",
		"path":                 "Path",
		"property_external_id": "PropertyExternalId",
		"property_id":          "PropertyId",
		"property_logical_id":  "PropertyLogicalId",
		"property_mappings":    "PropertyMappings",
		"property_path":        "PropertyPath",
		"tags":                 "Tags",
		"transform":            "Transform",
		"tumbling":             "Tumbling",
		"type":                 "Type",
		"type_name":            "TypeName",
		"unit":                 "Unit",
		"value":                "Value",
		"variables":            "Variables",
		"window":               "Window",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
