// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package vpclattice

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_vpclattice_target_group", targetGroupDataSource)
}

// targetGroupDataSource returns the Terraform awscc_vpclattice_target_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::VpcLattice::TargetGroup resource.
func targetGroupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "pattern": "^arn:[a-z0-9\\-]+:vpc-lattice:[a-zA-Z0-9\\-]+:\\d{12}:targetgroup/tg-[0-9a-z]{17}$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Config
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "HealthCheck": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "HealthCheckIntervalSeconds": {
		//	          "maximum": 300,
		//	          "minimum": 5,
		//	          "type": "integer"
		//	        },
		//	        "HealthCheckTimeoutSeconds": {
		//	          "maximum": 120,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "HealthyThresholdCount": {
		//	          "maximum": 10,
		//	          "minimum": 2,
		//	          "type": "integer"
		//	        },
		//	        "Matcher": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "HttpCode": {
		//	              "maxLength": 2000,
		//	              "minLength": 3,
		//	              "pattern": "^[0-9-,]+$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "HttpCode"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Path": {
		//	          "maxLength": 2048,
		//	          "minLength": 0,
		//	          "pattern": "(^/[a-zA-Z0-9@:%_+.~#?\u0026/=-]*$|(^$))",
		//	          "type": "string"
		//	        },
		//	        "Port": {
		//	          "maximum": 65535,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "Protocol": {
		//	          "enum": [
		//	            "HTTP",
		//	            "HTTPS"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "ProtocolVersion": {
		//	          "enum": [
		//	            "HTTP1",
		//	            "HTTP2"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "UnhealthyThresholdCount": {
		//	          "maximum": 10,
		//	          "minimum": 2,
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "IpAddressType": {
		//	      "default": "IPV4",
		//	      "enum": [
		//	        "IPV4",
		//	        "IPV6"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "LambdaEventStructureVersion": {
		//	      "enum": [
		//	        "V1",
		//	        "V2"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Port": {
		//	      "maximum": 65535,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "Protocol": {
		//	      "enum": [
		//	        "HTTP",
		//	        "HTTPS",
		//	        "TCP"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "ProtocolVersion": {
		//	      "default": "HTTP1",
		//	      "enum": [
		//	        "HTTP1",
		//	        "HTTP2",
		//	        "GRPC"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "VpcIdentifier": {
		//	      "maxLength": 2048,
		//	      "minLength": 5,
		//	      "pattern": "^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: HealthCheck
				"health_check": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HealthCheckIntervalSeconds
						"health_check_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HealthCheckTimeoutSeconds
						"health_check_timeout_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HealthyThresholdCount
						"healthy_threshold_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Matcher
						"matcher": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: HttpCode
								"http_code": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Path
						"path": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Protocol
						"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ProtocolVersion
						"protocol_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: UnhealthyThresholdCount
						"unhealthy_threshold_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IpAddressType
				"ip_address_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LambdaEventStructureVersion
				"lambda_event_structure_version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Port
				"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Protocol
				"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProtocolVersion
				"protocol_version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VpcIdentifier
				"vpc_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 20,
		//	  "minLength": 20,
		//	  "pattern": "^tg-[0-9a-z]{17}$",
		//	  "type": "string"
		//	}
		"target_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LastUpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"last_updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 128,
		//	  "minLength": 3,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "CREATE_IN_PROGRESS",
		//	    "ACTIVE",
		//	    "DELETE_IN_PROGRESS",
		//	    "CREATE_FAILED",
		//	    "DELETE_FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Targets
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": [],
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Id": {
		//	        "type": "string"
		//	      },
		//	      "Port": {
		//	        "maximum": 65535,
		//	        "minimum": 1,
		//	        "type": "integer"
		//	      }
		//	    },
		//	    "required": [
		//	      "Id"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 100,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"targets": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Id
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Port
					"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "IP",
		//	    "LAMBDA",
		//	    "INSTANCE",
		//	    "ALB"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::VpcLattice::TargetGroup",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::VpcLattice::TargetGroup").WithTerraformTypeName("awscc_vpclattice_target_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                            "Arn",
		"config":                         "Config",
		"created_at":                     "CreatedAt",
		"enabled":                        "Enabled",
		"health_check":                   "HealthCheck",
		"health_check_interval_seconds":  "HealthCheckIntervalSeconds",
		"health_check_timeout_seconds":   "HealthCheckTimeoutSeconds",
		"healthy_threshold_count":        "HealthyThresholdCount",
		"http_code":                      "HttpCode",
		"id":                             "Id",
		"ip_address_type":                "IpAddressType",
		"key":                            "Key",
		"lambda_event_structure_version": "LambdaEventStructureVersion",
		"last_updated_at":                "LastUpdatedAt",
		"matcher":                        "Matcher",
		"name":                           "Name",
		"path":                           "Path",
		"port":                           "Port",
		"protocol":                       "Protocol",
		"protocol_version":               "ProtocolVersion",
		"status":                         "Status",
		"tags":                           "Tags",
		"target_group_id":                "Id",
		"targets":                        "Targets",
		"type":                           "Type",
		"unhealthy_threshold_count":      "UnhealthyThresholdCount",
		"value":                          "Value",
		"vpc_identifier":                 "VpcIdentifier",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
