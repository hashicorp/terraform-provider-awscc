// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package events

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_events_event_bus_policy", eventBusPolicyDataSource)
}

// eventBusPolicyDataSource returns the Terraform awscc_events_event_bus_policy data source.
// This Terraform data source corresponds to the CloudFormation AWS::Events::EventBusPolicy resource.
func eventBusPolicyDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Action
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The action that you are enabling the other account to perform.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "events:[a-zA-Z]+",
		//	  "type": "string"
		//	}
		"action": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The action that you are enabling the other account to perform.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Condition
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "This parameter enables you to limit the permission to accounts that fulfill a certain condition, such as being a member of a certain AWS organization.",
		//	  "properties": {
		//	    "Key": {
		//	      "description": "Specifies the value for the key. Currently, this must be the ID of the organization.",
		//	      "type": "string"
		//	    },
		//	    "Type": {
		//	      "description": "Specifies the type of condition. Currently the only supported value is StringEquals.",
		//	      "type": "string"
		//	    },
		//	    "Value": {
		//	      "description": "Specifies the key for the condition. Currently the only supported key is aws:PrincipalOrgID.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"condition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Key
				"key": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies the value for the key. Currently, this must be the ID of the organization.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies the type of condition. Currently the only supported value is StringEquals.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Value
				"value": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies the key for the condition. Currently the only supported key is aws:PrincipalOrgID.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "This parameter enables you to limit the permission to accounts that fulfill a certain condition, such as being a member of a certain AWS organization.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EventBusName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the event bus associated with the rule. If you omit this, the default event bus is used.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "[\\.\\-_A-Za-z0-9]+",
		//	  "type": "string"
		//	}
		"event_bus_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the event bus associated with the rule. If you omit this, the default event bus is used.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Principal
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify \"*\" to permit any account to put events to your default event bus.",
		//	  "maxLength": 12,
		//	  "minLength": 1,
		//	  "pattern": "(\\d{12}|\\*)",
		//	  "type": "string"
		//	}
		"principal": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify \"*\" to permit any account to put events to your default event bus.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Statement
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A JSON string that describes the permission policy statement. You can include a Policy parameter in the request instead of using the StatementId, Action, Principal, or Condition parameters.",
		//	  "type": "object"
		//	}
		"statement": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  jsontypes.NormalizedType{},
			Description: "A JSON string that describes the permission policy statement. You can include a Policy parameter in the request instead of using the StatementId, Action, Principal, or Condition parameters.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StatementId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An identifier string for the external account that you are granting permissions to",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "[a-zA-Z0-9-_]+",
		//	  "type": "string"
		//	}
		"statement_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An identifier string for the external account that you are granting permissions to",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Events::EventBusPolicy",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Events::EventBusPolicy").WithTerraformTypeName("awscc_events_event_bus_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"action":         "Action",
		"condition":      "Condition",
		"event_bus_name": "EventBusName",
		"key":            "Key",
		"principal":      "Principal",
		"statement":      "Statement",
		"statement_id":   "StatementId",
		"type":           "Type",
		"value":          "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
