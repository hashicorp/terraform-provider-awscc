// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package events

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_events_event_bus", eventBusDataSource)
}

// eventBusDataSource returns the Terraform awscc_events_event_bus data source.
// This Terraform data source corresponds to the CloudFormation AWS::Events::EventBus resource.
func eventBusDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) for the event bus.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) for the event bus.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DeadLetterConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Dead Letter Queue for the event bus.",
		//	  "properties": {
		//	    "Arn": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"dead_letter_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Arn
				"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Dead Letter Queue for the event bus.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the event bus.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the event bus.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EventSourceName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched with.",
		//	  "type": "string"
		//	}
		"event_source_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "If you are creating a partner event bus, this specifies the partner event source that the new event bus will be matched with.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KmsKeyIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Kms Key Identifier used to encrypt events at rest in the event bus.",
		//	  "type": "string"
		//	}
		"kms_key_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Kms Key Identifier used to encrypt events at rest in the event bus.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LogConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The logging configuration settings for vended logs.",
		//	  "properties": {
		//	    "IncludeDetail": {
		//	      "description": "Configures whether or not to include event detail, input transformer details, target properties, and target input in the applicable log messages.",
		//	      "enum": [
		//	        "FULL",
		//	        "NONE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Level": {
		//	      "description": "Configures the log level of the EventBus and determines which log messages are sent to Ingestion Hub for delivery.",
		//	      "enum": [
		//	        "INFO",
		//	        "ERROR",
		//	        "TRACE",
		//	        "OFF"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"log_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: IncludeDetail
				"include_detail": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Configures whether or not to include event detail, input transformer details, target properties, and target input in the applicable log messages.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Level
				"level": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Configures the log level of the EventBus and determines which log messages are sent to Ingestion Hub for delivery.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The logging configuration settings for vended logs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the event bus.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the event bus.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Policy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A JSON string that describes the permission policy statement for the event bus.",
		//	  "type": "string"
		//	}
		"policy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A JSON string that describes the permission policy statement for the event bus.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Any tags assigned to the event bus.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Any tags assigned to the event bus.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Events::EventBus",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Events::EventBus").WithTerraformTypeName("awscc_events_event_bus")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                "Arn",
		"dead_letter_config": "DeadLetterConfig",
		"description":        "Description",
		"event_source_name":  "EventSourceName",
		"include_detail":     "IncludeDetail",
		"key":                "Key",
		"kms_key_identifier": "KmsKeyIdentifier",
		"level":              "Level",
		"log_config":         "LogConfig",
		"name":               "Name",
		"policy":             "Policy",
		"tags":               "Tags",
		"value":              "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
