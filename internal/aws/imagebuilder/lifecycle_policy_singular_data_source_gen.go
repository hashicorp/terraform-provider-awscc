// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package imagebuilder

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_imagebuilder_lifecycle_policy", lifecyclePolicyDataSource)
}

// lifecyclePolicyDataSource returns the Terraform awscc_imagebuilder_lifecycle_policy data source.
// This Terraform data source corresponds to the CloudFormation AWS::ImageBuilder::LifecyclePolicy resource.
func lifecyclePolicyDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the lifecycle policy.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the lifecycle policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the lifecycle policy.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the lifecycle policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ExecutionRole
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The execution role of the lifecycle policy.",
		//	  "type": "string"
		//	}
		"execution_role": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The execution role of the lifecycle policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the lifecycle policy.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the lifecycle policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyDetails
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The policy details of the lifecycle policy.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The policy detail of the lifecycle policy.",
		//	    "properties": {
		//	      "Action": {
		//	        "additionalProperties": false,
		//	        "description": "The action of the policy detail.",
		//	        "properties": {
		//	          "IncludeResources": {
		//	            "additionalProperties": false,
		//	            "description": "The included resources of the policy detail.",
		//	            "properties": {
		//	              "Amis": {
		//	                "description": "Use to configure lifecycle actions on AMIs.",
		//	                "type": "boolean"
		//	              },
		//	              "Containers": {
		//	                "description": "Use to configure lifecycle actions on containers.",
		//	                "type": "boolean"
		//	              },
		//	              "Snapshots": {
		//	                "description": "Use to configure lifecycle actions on snapshots.",
		//	                "type": "boolean"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Type": {
		//	            "description": "The action type of the policy detail.",
		//	            "enum": [
		//	              "DELETE",
		//	              "DEPRECATE",
		//	              "DISABLE"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Type"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "ExclusionRules": {
		//	        "additionalProperties": false,
		//	        "description": "The exclusion rules to apply of the policy detail.",
		//	        "properties": {
		//	          "Amis": {
		//	            "additionalProperties": false,
		//	            "description": "The AMI exclusion rules for the policy detail.",
		//	            "properties": {
		//	              "IsPublic": {
		//	                "description": "Use to apply lifecycle policy actions on whether the AMI is public.",
		//	                "type": "boolean"
		//	              },
		//	              "LastLaunched": {
		//	                "additionalProperties": false,
		//	                "description": "Use to apply lifecycle policy actions on AMIs launched before a certain time.",
		//	                "properties": {
		//	                  "Unit": {
		//	                    "description": "The value's time unit.",
		//	                    "enum": [
		//	                      "DAYS",
		//	                      "WEEKS",
		//	                      "MONTHS",
		//	                      "YEARS"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "description": "The last launched value.",
		//	                    "type": "integer"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Value",
		//	                  "Unit"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Regions": {
		//	                "description": "Use to apply lifecycle policy actions on AMIs distributed to a set of regions.",
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "SharedAccounts": {
		//	                "description": "Use to apply lifecycle policy actions on AMIs shared with a set of regions.",
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "TagMap": {
		//	                "additionalProperties": false,
		//	                "description": "The AMIs to select by tag.",
		//	                "patternProperties": {
		//	                  "": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "TagMap": {
		//	            "additionalProperties": false,
		//	            "description": "The Image Builder tags to filter on.",
		//	            "patternProperties": {
		//	              "": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Filter": {
		//	        "additionalProperties": false,
		//	        "description": "The filters to apply of the policy detail.",
		//	        "properties": {
		//	          "RetainAtLeast": {
		//	            "description": "The minimum number of Image Builder resources to retain.",
		//	            "type": "integer"
		//	          },
		//	          "Type": {
		//	            "description": "The filter type.",
		//	            "enum": [
		//	              "AGE",
		//	              "COUNT"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Unit": {
		//	            "description": "The value's time unit.",
		//	            "enum": [
		//	              "DAYS",
		//	              "WEEKS",
		//	              "MONTHS",
		//	              "YEARS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "description": "The filter value.",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "required": [
		//	          "Type",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "Action",
		//	      "Filter"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"policy_details": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Action
					"action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: IncludeResources
							"include_resources": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Amis
									"amis": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Description: "Use to configure lifecycle actions on AMIs.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Containers
									"containers": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Description: "Use to configure lifecycle actions on containers.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Snapshots
									"snapshots": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Description: "Use to configure lifecycle actions on snapshots.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "The included resources of the policy detail.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The action type of the policy detail.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "The action of the policy detail.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ExclusionRules
					"exclusion_rules": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Amis
							"amis": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: IsPublic
									"is_public": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Description: "Use to apply lifecycle policy actions on whether the AMI is public.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: LastLaunched
									"last_launched": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Unit
											"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The value's time unit.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Description: "The last launched value.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Use to apply lifecycle policy actions on AMIs launched before a certain time.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Regions
									"regions": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Description: "Use to apply lifecycle policy actions on AMIs distributed to a set of regions.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: SharedAccounts
									"shared_accounts": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Description: "Use to apply lifecycle policy actions on AMIs shared with a set of regions.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: TagMap
									"tag_map":           // Pattern: ""
									schema.MapAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Description: "The AMIs to select by tag.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "The AMI exclusion rules for the policy detail.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: TagMap
							"tag_map":           // Pattern: ""
							schema.MapAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "The Image Builder tags to filter on.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "The exclusion rules to apply of the policy detail.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Filter
					"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: RetainAtLeast
							"retain_at_least": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The minimum number of Image Builder resources to retain.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The filter type.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Unit
							"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The value's time unit.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The filter value.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "The filters to apply of the policy detail.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The policy details of the lifecycle policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceSelection
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The resource selection of the lifecycle policy.",
		//	  "properties": {
		//	    "Recipes": {
		//	      "description": "The recipes to select.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "The recipe to apply the lifecycle policy for.",
		//	        "properties": {
		//	          "Name": {
		//	            "description": "The recipe name.",
		//	            "type": "string"
		//	          },
		//	          "SemanticVersion": {
		//	            "description": "The recipe version.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name",
		//	          "SemanticVersion"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "TagMap": {
		//	      "additionalProperties": false,
		//	      "description": "The Image Builder resources to select by tag.",
		//	      "patternProperties": {
		//	        "": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"resource_selection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Recipes
				"recipes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The recipe name.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: SemanticVersion
							"semantic_version": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The recipe version.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The recipes to select.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TagMap
				"tag_map":           // Pattern: ""
				schema.MapAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The Image Builder resources to select by tag.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The resource selection of the lifecycle policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The resource type of the lifecycle policy.",
		//	  "enum": [
		//	    "AMI_IMAGE",
		//	    "CONTAINER_IMAGE"
		//	  ],
		//	  "type": "string"
		//	}
		"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The resource type of the lifecycle policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the lifecycle policy.",
		//	  "enum": [
		//	    "DISABLED",
		//	    "ENABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the lifecycle policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The tags associated with the lifecycle policy.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The tags associated with the lifecycle policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ImageBuilder::LifecyclePolicy",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ImageBuilder::LifecyclePolicy").WithTerraformTypeName("awscc_imagebuilder_lifecycle_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"action":             "Action",
		"amis":               "Amis",
		"arn":                "Arn",
		"containers":         "Containers",
		"description":        "Description",
		"exclusion_rules":    "ExclusionRules",
		"execution_role":     "ExecutionRole",
		"filter":             "Filter",
		"include_resources":  "IncludeResources",
		"is_public":          "IsPublic",
		"last_launched":      "LastLaunched",
		"name":               "Name",
		"policy_details":     "PolicyDetails",
		"recipes":            "Recipes",
		"regions":            "Regions",
		"resource_selection": "ResourceSelection",
		"resource_type":      "ResourceType",
		"retain_at_least":    "RetainAtLeast",
		"semantic_version":   "SemanticVersion",
		"shared_accounts":    "SharedAccounts",
		"snapshots":          "Snapshots",
		"status":             "Status",
		"tag_map":            "TagMap",
		"tags":               "Tags",
		"type":               "Type",
		"unit":               "Unit",
		"value":              "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
