// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package opensearchservice

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_opensearchservice_domain", domainDataSource)
}

// domainDataSource returns the Terraform awscc_opensearchservice_domain data source.
// This Terraform data source corresponds to the CloudFormation AWS::OpenSearchService::Domain resource.
func domainDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccessPolicies
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "object"
		//	}
		"access_policies": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType: jsontypes.NormalizedType{},
			Computed:   true,
		}, /*END ATTRIBUTE*/
		// Property: AdvancedOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"advanced_options":  // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AdvancedSecurityOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AnonymousAuthDisableDate": {
		//	      "type": "string"
		//	    },
		//	    "AnonymousAuthEnabled": {
		//	      "type": "boolean"
		//	    },
		//	    "Enabled": {
		//	      "type": "boolean"
		//	    },
		//	    "InternalUserDatabaseEnabled": {
		//	      "type": "boolean"
		//	    },
		//	    "JWTOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "PublicKey": {
		//	          "type": "string"
		//	        },
		//	        "RolesKey": {
		//	          "type": "string"
		//	        },
		//	        "SubjectKey": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "MasterUserOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "MasterUserARN": {
		//	          "type": "string"
		//	        },
		//	        "MasterUserName": {
		//	          "type": "string"
		//	        },
		//	        "MasterUserPassword": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "SAMLOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "Idp": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "EntityId": {
		//	              "type": "string"
		//	            },
		//	            "MetadataContent": {
		//	              "maxLength": 1048576,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "MetadataContent",
		//	            "EntityId"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "MasterBackendRole": {
		//	          "type": "string"
		//	        },
		//	        "MasterUserName": {
		//	          "type": "string"
		//	        },
		//	        "RolesKey": {
		//	          "type": "string"
		//	        },
		//	        "SessionTimeoutMinutes": {
		//	          "type": "integer"
		//	        },
		//	        "SubjectKey": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"advanced_security_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AnonymousAuthDisableDate
				"anonymous_auth_disable_date": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: AnonymousAuthEnabled
				"anonymous_auth_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InternalUserDatabaseEnabled
				"internal_user_database_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: JWTOptions
				"jwt_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PublicKey
						"public_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RolesKey
						"roles_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SubjectKey
						"subject_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: MasterUserOptions
				"master_user_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MasterUserARN
						"master_user_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MasterUserName
						"master_user_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MasterUserPassword
						"master_user_password": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SAMLOptions
				"saml_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Idp
						"idp": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EntityId
								"entity_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: MetadataContent
								"metadata_content": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MasterBackendRole
						"master_backend_role": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MasterUserName
						"master_user_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RolesKey
						"roles_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SessionTimeoutMinutes
						"session_timeout_minutes": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SubjectKey
						"subject_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ClusterConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "ColdStorageOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "DedicatedMasterCount": {
		//	      "type": "integer"
		//	    },
		//	    "DedicatedMasterEnabled": {
		//	      "type": "boolean"
		//	    },
		//	    "DedicatedMasterType": {
		//	      "type": "string"
		//	    },
		//	    "InstanceCount": {
		//	      "type": "integer"
		//	    },
		//	    "InstanceType": {
		//	      "type": "string"
		//	    },
		//	    "MultiAZWithStandbyEnabled": {
		//	      "type": "boolean"
		//	    },
		//	    "NodeOptions": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "NodeConfig": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Count": {
		//	                "type": "integer"
		//	              },
		//	              "Enabled": {
		//	                "type": "boolean"
		//	              },
		//	              "Type": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "NodeType": {
		//	            "enum": [
		//	              "coordinator"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "WarmCount": {
		//	      "type": "integer"
		//	    },
		//	    "WarmEnabled": {
		//	      "type": "boolean"
		//	    },
		//	    "WarmType": {
		//	      "type": "string"
		//	    },
		//	    "ZoneAwarenessConfig": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AvailabilityZoneCount": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ZoneAwarenessEnabled": {
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"cluster_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ColdStorageOptions
				"cold_storage_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DedicatedMasterCount
				"dedicated_master_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DedicatedMasterEnabled
				"dedicated_master_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DedicatedMasterType
				"dedicated_master_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InstanceCount
				"instance_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InstanceType
				"instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: MultiAZWithStandbyEnabled
				"multi_az_with_standby_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: NodeOptions
				"node_options": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NodeConfig
							"node_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Count
									"count": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Enabled
									"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: NodeType
							"node_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: WarmCount
				"warm_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: WarmEnabled
				"warm_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: WarmType
				"warm_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ZoneAwarenessConfig
				"zone_awareness_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AvailabilityZoneCount
						"availability_zone_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ZoneAwarenessEnabled
				"zone_awareness_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: CognitoOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Enabled": {
		//	      "type": "boolean"
		//	    },
		//	    "IdentityPoolId": {
		//	      "type": "string"
		//	    },
		//	    "RoleArn": {
		//	      "type": "string"
		//	    },
		//	    "UserPoolId": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"cognito_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IdentityPoolId
				"identity_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleArn
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: UserPoolId
				"user_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"domain_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainEndpoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"domain_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainEndpointOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "CustomEndpoint": {
		//	      "type": "string"
		//	    },
		//	    "CustomEndpointCertificateArn": {
		//	      "type": "string"
		//	    },
		//	    "CustomEndpointEnabled": {
		//	      "type": "boolean"
		//	    },
		//	    "EnforceHTTPS": {
		//	      "type": "boolean"
		//	    },
		//	    "TLSSecurityPolicy": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"domain_endpoint_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CustomEndpoint
				"custom_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CustomEndpointCertificateArn
				"custom_endpoint_certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CustomEndpointEnabled
				"custom_endpoint_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EnforceHTTPS
				"enforce_https": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TLSSecurityPolicy
				"tls_security_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainEndpointV2
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"domain_endpoint_v2": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainEndpoints
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"domain_endpoints":  // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: EBSOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "EBSEnabled": {
		//	      "type": "boolean"
		//	    },
		//	    "Iops": {
		//	      "type": "integer"
		//	    },
		//	    "Throughput": {
		//	      "type": "integer"
		//	    },
		//	    "VolumeSize": {
		//	      "type": "integer"
		//	    },
		//	    "VolumeType": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"ebs_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EBSEnabled
				"ebs_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Iops
				"iops": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Throughput
				"throughput": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VolumeSize
				"volume_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VolumeType
				"volume_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: EncryptionAtRestOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Enabled": {
		//	      "type": "boolean"
		//	    },
		//	    "KmsKeyId": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"encryption_at_rest_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: KmsKeyId
				"kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: EngineVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"engine_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: IPAddressType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"ip_address_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"domain_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: IdentityCenterOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Options for configuring Identity Center",
		//	  "properties": {
		//	    "EnabledAPIAccess": {
		//	      "description": "Whether Identity Center is enabled.",
		//	      "type": "boolean"
		//	    },
		//	    "IdentityCenterApplicationARN": {
		//	      "description": "The ARN of the Identity Center application.",
		//	      "type": "string"
		//	    },
		//	    "IdentityCenterInstanceARN": {
		//	      "description": "The ARN of the Identity Center instance.",
		//	      "type": "string"
		//	    },
		//	    "IdentityStoreId": {
		//	      "description": "The IdentityStoreId for Identity Center options.",
		//	      "type": "string"
		//	    },
		//	    "RolesKey": {
		//	      "description": "The roles key for Identity Center options.",
		//	      "enum": [
		//	        "GroupName",
		//	        "GroupId"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "SubjectKey": {
		//	      "description": "The subject key for Identity Center options.",
		//	      "enum": [
		//	        "UserName",
		//	        "UserId",
		//	        "Email"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"identity_center_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EnabledAPIAccess
				"enabled_api_access": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Whether Identity Center is enabled.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IdentityCenterApplicationARN
				"identity_center_application_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the Identity Center application.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IdentityCenterInstanceARN
				"identity_center_instance_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the Identity Center instance.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IdentityStoreId
				"identity_store_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The IdentityStoreId for Identity Center options.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RolesKey
				"roles_key": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The roles key for Identity Center options.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SubjectKey
				"subject_key": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The subject key for Identity Center options.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Options for configuring Identity Center",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LogPublishingOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CloudWatchLogsLogGroupArn": {
		//	          "type": "string"
		//	        },
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"log_publishing_options":  // Pattern: ""
		schema.MapNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: CloudWatchLogsLogGroupArn
					"cloudwatch_logs_log_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Enabled
					"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: NodeToNodeEncryptionOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Enabled": {
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"node_to_node_encryption_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: OffPeakWindowOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Enabled": {
		//	      "type": "boolean"
		//	    },
		//	    "OffPeakWindow": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "WindowStartTime": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Hours": {
		//	              "maximum": 23,
		//	              "minimum": 0,
		//	              "type": "integer"
		//	            },
		//	            "Minutes": {
		//	              "maximum": 59,
		//	              "minimum": 0,
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "required": [
		//	            "Hours",
		//	            "Minutes"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"off_peak_window_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: OffPeakWindow
				"off_peak_window": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: WindowStartTime
						"window_start_time": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Hours
								"hours": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Minutes
								"minutes": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ServiceSoftwareOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AutomatedUpdateDate": {
		//	      "type": "string"
		//	    },
		//	    "Cancellable": {
		//	      "type": "boolean"
		//	    },
		//	    "CurrentVersion": {
		//	      "type": "string"
		//	    },
		//	    "Description": {
		//	      "type": "string"
		//	    },
		//	    "NewVersion": {
		//	      "type": "string"
		//	    },
		//	    "OptionalDeployment": {
		//	      "type": "boolean"
		//	    },
		//	    "UpdateAvailable": {
		//	      "type": "boolean"
		//	    },
		//	    "UpdateStatus": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"service_software_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AutomatedUpdateDate
				"automated_update_date": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Cancellable
				"cancellable": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CurrentVersion
				"current_version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Description
				"description": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: NewVersion
				"new_version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: OptionalDeployment
				"optional_deployment": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: UpdateAvailable
				"update_available": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: UpdateStatus
				"update_status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SkipShardMigrationWait
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "boolean"
		//	}
		"skip_shard_migration_wait": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SnapshotOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AutomatedSnapshotStartHour": {
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"snapshot_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AutomatedSnapshotStartHour
				"automated_snapshot_start_hour": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SoftwareUpdateOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AutoSoftwareUpdateEnabled": {
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"software_update_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AutoSoftwareUpdateEnabled
				"auto_software_update_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An arbitrary set of tags (key-value pairs) for this Domain.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The value of the tag.",
		//	        "maxLength": 128,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The key of the tag.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value of the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key of the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An arbitrary set of tags (key-value pairs) for this Domain.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VPCOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "SecurityGroupIds": {
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "SubnetIds": {
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"vpc_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: SecurityGroupIds
				"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SubnetIds
				"subnet_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::OpenSearchService::Domain",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::OpenSearchService::Domain").WithTerraformTypeName("awscc_opensearchservice_domain")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_policies":                 "AccessPolicies",
		"advanced_options":                "AdvancedOptions",
		"advanced_security_options":       "AdvancedSecurityOptions",
		"anonymous_auth_disable_date":     "AnonymousAuthDisableDate",
		"anonymous_auth_enabled":          "AnonymousAuthEnabled",
		"arn":                             "Arn",
		"auto_software_update_enabled":    "AutoSoftwareUpdateEnabled",
		"automated_snapshot_start_hour":   "AutomatedSnapshotStartHour",
		"automated_update_date":           "AutomatedUpdateDate",
		"availability_zone_count":         "AvailabilityZoneCount",
		"cancellable":                     "Cancellable",
		"cloudwatch_logs_log_group_arn":   "CloudWatchLogsLogGroupArn",
		"cluster_config":                  "ClusterConfig",
		"cognito_options":                 "CognitoOptions",
		"cold_storage_options":            "ColdStorageOptions",
		"count":                           "Count",
		"current_version":                 "CurrentVersion",
		"custom_endpoint":                 "CustomEndpoint",
		"custom_endpoint_certificate_arn": "CustomEndpointCertificateArn",
		"custom_endpoint_enabled":         "CustomEndpointEnabled",
		"dedicated_master_count":          "DedicatedMasterCount",
		"dedicated_master_enabled":        "DedicatedMasterEnabled",
		"dedicated_master_type":           "DedicatedMasterType",
		"description":                     "Description",
		"domain_arn":                      "DomainArn",
		"domain_endpoint":                 "DomainEndpoint",
		"domain_endpoint_options":         "DomainEndpointOptions",
		"domain_endpoint_v2":              "DomainEndpointV2",
		"domain_endpoints":                "DomainEndpoints",
		"domain_id":                       "Id",
		"domain_name":                     "DomainName",
		"ebs_enabled":                     "EBSEnabled",
		"ebs_options":                     "EBSOptions",
		"enabled":                         "Enabled",
		"enabled_api_access":              "EnabledAPIAccess",
		"encryption_at_rest_options":      "EncryptionAtRestOptions",
		"enforce_https":                   "EnforceHTTPS",
		"engine_version":                  "EngineVersion",
		"entity_id":                       "EntityId",
		"hours":                           "Hours",
		"identity_center_application_arn": "IdentityCenterApplicationARN",
		"identity_center_instance_arn":    "IdentityCenterInstanceARN",
		"identity_center_options":         "IdentityCenterOptions",
		"identity_pool_id":                "IdentityPoolId",
		"identity_store_id":               "IdentityStoreId",
		"idp":                             "Idp",
		"instance_count":                  "InstanceCount",
		"instance_type":                   "InstanceType",
		"internal_user_database_enabled":  "InternalUserDatabaseEnabled",
		"iops":                            "Iops",
		"ip_address_type":                 "IPAddressType",
		"jwt_options":                     "JWTOptions",
		"key":                             "Key",
		"kms_key_id":                      "KmsKeyId",
		"log_publishing_options":          "LogPublishingOptions",
		"master_backend_role":             "MasterBackendRole",
		"master_user_arn":                 "MasterUserARN",
		"master_user_name":                "MasterUserName",
		"master_user_options":             "MasterUserOptions",
		"master_user_password":            "MasterUserPassword",
		"metadata_content":                "MetadataContent",
		"minutes":                         "Minutes",
		"multi_az_with_standby_enabled":   "MultiAZWithStandbyEnabled",
		"new_version":                     "NewVersion",
		"node_config":                     "NodeConfig",
		"node_options":                    "NodeOptions",
		"node_to_node_encryption_options": "NodeToNodeEncryptionOptions",
		"node_type":                       "NodeType",
		"off_peak_window":                 "OffPeakWindow",
		"off_peak_window_options":         "OffPeakWindowOptions",
		"optional_deployment":             "OptionalDeployment",
		"public_key":                      "PublicKey",
		"role_arn":                        "RoleArn",
		"roles_key":                       "RolesKey",
		"saml_options":                    "SAMLOptions",
		"security_group_ids":              "SecurityGroupIds",
		"service_software_options":        "ServiceSoftwareOptions",
		"session_timeout_minutes":         "SessionTimeoutMinutes",
		"skip_shard_migration_wait":       "SkipShardMigrationWait",
		"snapshot_options":                "SnapshotOptions",
		"software_update_options":         "SoftwareUpdateOptions",
		"subject_key":                     "SubjectKey",
		"subnet_ids":                      "SubnetIds",
		"tags":                            "Tags",
		"throughput":                      "Throughput",
		"tls_security_policy":             "TLSSecurityPolicy",
		"type":                            "Type",
		"update_available":                "UpdateAvailable",
		"update_status":                   "UpdateStatus",
		"user_pool_id":                    "UserPoolId",
		"value":                           "Value",
		"volume_size":                     "VolumeSize",
		"volume_type":                     "VolumeType",
		"vpc_options":                     "VPCOptions",
		"warm_count":                      "WarmCount",
		"warm_enabled":                    "WarmEnabled",
		"warm_type":                       "WarmType",
		"window_start_time":               "WindowStartTime",
		"zone_awareness_config":           "ZoneAwarenessConfig",
		"zone_awareness_enabled":          "ZoneAwarenessEnabled",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
