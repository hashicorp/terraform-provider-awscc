// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package opensearchservice

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_opensearchservice_application", applicationDataSource)
}

// applicationDataSource returns the Terraform awscc_opensearchservice_application data source.
// This Terraform data source corresponds to the CloudFormation AWS::OpenSearchService::Application resource.
func applicationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AppConfigs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of application configurations.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair of AppConfig",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The configuration key",
		//	        "enum": [
		//	          "opensearchDashboards.dashboardAdmin.users",
		//	          "opensearchDashboards.dashboardAdmin.groups"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The configuration value.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"app_configs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The configuration key",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The configuration value.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of application configurations.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Amazon Resource Name (ARN) format.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Amazon Resource Name (ARN) format.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DataSources
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of data sources.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Datasource arn and description",
		//	    "properties": {
		//	      "DataSourceArn": {
		//	        "description": "The ARN of the data source.",
		//	        "type": "string"
		//	      },
		//	      "DataSourceDescription": {
		//	        "description": "Description of the data source.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "DataSourceArn"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"data_sources": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DataSourceArn
					"data_source_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ARN of the data source.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: DataSourceDescription
					"data_source_description": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Description of the data source.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of data sources.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Endpoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The endpoint for the application.",
		//	  "type": "string"
		//	}
		"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The endpoint for the application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IamIdentityCenterOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Options for configuring IAM Identity Center",
		//	  "properties": {
		//	    "Enabled": {
		//	      "description": "Whether IAM Identity Center is enabled.",
		//	      "type": "boolean"
		//	    },
		//	    "IamIdentityCenterInstanceArn": {
		//	      "description": "The ARN of the IAM Identity Center instance.",
		//	      "type": "string"
		//	    },
		//	    "IamRoleForIdentityCenterApplicationArn": {
		//	      "description": "The ARN of the IAM role for Identity Center application.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"iam_identity_center_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Whether IAM Identity Center is enabled.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IamIdentityCenterInstanceArn
				"iam_identity_center_instance_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the IAM Identity Center instance.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IamRoleForIdentityCenterApplicationArn
				"iam_role_for_identity_center_application_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the IAM role for Identity Center application.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Options for configuring IAM Identity Center",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the application.",
		//	  "maxLength": 40,
		//	  "minLength": 3,
		//	  "type": "string"
		//	}
		"application_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the application.",
		//	  "maxLength": 40,
		//	  "minLength": 3,
		//	  "pattern": "[a-z][a-z0-9\\-]+",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An arbitrary set of tags (key-value pairs) for this application.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair metadata associated with resource",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key in the key-value pair",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value in the key-value pair",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key in the key-value pair",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value in the key-value pair",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An arbitrary set of tags (key-value pairs) for this application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::OpenSearchService::Application",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::OpenSearchService::Application").WithTerraformTypeName("awscc_opensearchservice_application")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"app_configs":                      "AppConfigs",
		"application_id":                   "Id",
		"arn":                              "Arn",
		"data_source_arn":                  "DataSourceArn",
		"data_source_description":          "DataSourceDescription",
		"data_sources":                     "DataSources",
		"enabled":                          "Enabled",
		"endpoint":                         "Endpoint",
		"iam_identity_center_instance_arn": "IamIdentityCenterInstanceArn",
		"iam_identity_center_options":      "IamIdentityCenterOptions",
		"iam_role_for_identity_center_application_arn": "IamRoleForIdentityCenterApplicationArn",
		"key":   "Key",
		"name":  "Name",
		"tags":  "Tags",
		"value": "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
