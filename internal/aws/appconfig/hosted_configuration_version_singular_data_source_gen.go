// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package appconfig

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_appconfig_hosted_configuration_version", hostedConfigurationVersionDataSource)
}

// hostedConfigurationVersionDataSource returns the Terraform awscc_appconfig_hosted_configuration_version data source.
// This Terraform data source corresponds to the CloudFormation AWS::AppConfig::HostedConfigurationVersion resource.
func hostedConfigurationVersionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApplicationId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The application ID.",
		//	  "pattern": "[a-z0-9]{4,7}",
		//	  "type": "string"
		//	}
		"application_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The application ID.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConfigurationProfileId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The configuration profile ID.",
		//	  "pattern": "[a-z0-9]{4,7}",
		//	  "type": "string"
		//	}
		"configuration_profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The configuration profile ID.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Content
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The content of the configuration or the configuration data.",
		//	  "type": "string"
		//	}
		"content": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The content of the configuration or the configuration data.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ContentType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A standard MIME type describing the format of the configuration content.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"content_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A standard MIME type describing the format of the configuration content.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A description of the hosted configuration version.",
		//	  "maxLength": 1024,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A description of the hosted configuration version.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LatestVersionNumber
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An optional locking token used to prevent race conditions from overwriting configuration updates when creating a new version. To ensure your data is not overwritten when creating multiple hosted configuration versions in rapid succession, specify the version number of the latest hosted configuration version.",
		//	  "type": "integer"
		//	}
		"latest_version_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "An optional locking token used to prevent race conditions from overwriting configuration updates when creating a new version. To ensure your data is not overwritten when creating multiple hosted configuration versions in rapid succession, specify the version number of the latest hosted configuration version.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VersionLabel
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A user-defined label for an AWS AppConfig hosted configuration version.",
		//	  "maxLength": 64,
		//	  "minLength": 0,
		//	  "pattern": "^$|.*[^0-9].*",
		//	  "type": "string"
		//	}
		"version_label": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A user-defined label for an AWS AppConfig hosted configuration version.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VersionNumber
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Current version number of hosted configuration version.",
		//	  "type": "string"
		//	}
		"version_number": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Current version number of hosted configuration version.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::AppConfig::HostedConfigurationVersion",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppConfig::HostedConfigurationVersion").WithTerraformTypeName("awscc_appconfig_hosted_configuration_version")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"application_id":           "ApplicationId",
		"configuration_profile_id": "ConfigurationProfileId",
		"content":                  "Content",
		"content_type":             "ContentType",
		"description":              "Description",
		"latest_version_number":    "LatestVersionNumber",
		"version_label":            "VersionLabel",
		"version_number":           "VersionNumber",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
