// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package entityresolution

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_entityresolution_id_namespace", idNamespaceDataSource)
}

// idNamespaceDataSource returns the Terraform awscc_entityresolution_id_namespace data source.
// This Terraform data source corresponds to the CloudFormation AWS::EntityResolution::IdNamespace resource.
func idNamespaceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The date and time when the IdNamespace was created",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The date and time when the IdNamespace was created",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 255,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: IdMappingWorkflowProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "IdMappingType": {
		//	        "enum": [
		//	          "PROVIDER",
		//	          "RULE_BASED"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "ProviderProperties": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ProviderConfiguration": {
		//	            "additionalProperties": false,
		//	            "description": "Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format.",
		//	            "patternProperties": {
		//	              "": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "ProviderServiceArn": {
		//	            "maxLength": 255,
		//	            "minLength": 20,
		//	            "pattern": "^arn:(aws|aws-us-gov|aws-cn):(entityresolution):([a-z]{2}-[a-z]{1,10}-[0-9])::providerservice/([a-zA-Z0-9_-]{1,255})/([a-zA-Z0-9_-]{1,255})$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "ProviderServiceArn"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "RuleBasedProperties": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AttributeMatchingModel": {
		//	            "enum": [
		//	              "ONE_TO_ONE",
		//	              "MANY_TO_MANY"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "RecordMatchingModels": {
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "enum": [
		//	                "ONE_SOURCE_TO_ONE_TARGET",
		//	                "MANY_SOURCE_TO_ONE_TARGET"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "RuleDefinitionTypes": {
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "enum": [
		//	                "SOURCE",
		//	                "TARGET"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "Rules": {
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "MatchingKeys": {
		//	                  "insertionOrder": false,
		//	                  "items": {
		//	                    "maxLength": 255,
		//	                    "minLength": 0,
		//	                    "pattern": "^[a-zA-Z_0-9- \\t]*$",
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 25,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                },
		//	                "RuleName": {
		//	                  "maxLength": 255,
		//	                  "minLength": 0,
		//	                  "pattern": "^[a-zA-Z_0-9- \\t]*$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "RuleName",
		//	                "MatchingKeys"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "maxItems": 25,
		//	            "minItems": 1,
		//	            "type": "array"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "IdMappingType"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 1,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"id_mapping_workflow_properties": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: IdMappingType
					"id_mapping_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ProviderProperties
					"provider_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ProviderConfiguration
							"provider_configuration": // Pattern: ""
							schema.MapAttribute{      /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ProviderServiceArn
							"provider_service_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: RuleBasedProperties
					"rule_based_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AttributeMatchingModel
							"attribute_matching_model": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: RecordMatchingModels
							"record_matching_models": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: RuleDefinitionTypes
							"rule_definition_types": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Rules
							"rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: MatchingKeys
										"matching_keys": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: RuleName
										"rule_name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: IdNamespaceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The arn associated with the IdNamespace",
		//	  "pattern": "^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(idnamespace/[a-zA-Z_0-9-]{1,255})$",
		//	  "type": "string"
		//	}
		"id_namespace_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The arn associated with the IdNamespace",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IdNamespaceName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z_0-9-]*$",
		//	  "type": "string"
		//	}
		"id_namespace_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: InputSourceConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "InputSourceARN": {
		//	        "pattern": "^arn:(aws|aws-us-gov|aws-cn):entityresolution:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(matchingworkflow/[a-zA-Z_0-9-]{1,255})$|^arn:(aws|aws-us-gov|aws-cn):glue:[a-z]{2}-[a-z]{1,10}-[0-9]:[0-9]{12}:(table/[a-zA-Z_0-9-]{1,255}/[a-zA-Z_0-9-]{1,255})$",
		//	        "type": "string"
		//	      },
		//	      "SchemaName": {
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z_0-9-]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "InputSourceARN"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 20,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"input_source_config": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: InputSourceARN
					"input_source_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SchemaName
					"schema_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 512,
		//	  "minLength": 32,
		//	  "pattern": "^arn:(aws|aws-us-gov|aws-cn):iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$",
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "SOURCE",
		//	    "TARGET"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The date and time when the IdNamespace was updated",
		//	  "type": "string"
		//	}
		"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The date and time when the IdNamespace was updated",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EntityResolution::IdNamespace",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EntityResolution::IdNamespace").WithTerraformTypeName("awscc_entityresolution_id_namespace")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"attribute_matching_model":       "AttributeMatchingModel",
		"created_at":                     "CreatedAt",
		"description":                    "Description",
		"id_mapping_type":                "IdMappingType",
		"id_mapping_workflow_properties": "IdMappingWorkflowProperties",
		"id_namespace_arn":               "IdNamespaceArn",
		"id_namespace_name":              "IdNamespaceName",
		"input_source_arn":               "InputSourceARN",
		"input_source_config":            "InputSourceConfig",
		"key":                            "Key",
		"matching_keys":                  "MatchingKeys",
		"provider_configuration":         "ProviderConfiguration",
		"provider_properties":            "ProviderProperties",
		"provider_service_arn":           "ProviderServiceArn",
		"record_matching_models":         "RecordMatchingModels",
		"role_arn":                       "RoleArn",
		"rule_based_properties":          "RuleBasedProperties",
		"rule_definition_types":          "RuleDefinitionTypes",
		"rule_name":                      "RuleName",
		"rules":                          "Rules",
		"schema_name":                    "SchemaName",
		"tags":                           "Tags",
		"type":                           "Type",
		"updated_at":                     "UpdatedAt",
		"value":                          "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
