// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package datazone

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_datazone_project_membership", projectMembershipDataSource)
}

// projectMembershipDataSource returns the Terraform awscc_datazone_project_membership data source.
// This Terraform data source corresponds to the CloudFormation AWS::DataZone::ProjectMembership resource.
func projectMembershipDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Designation
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "PROJECT_OWNER",
		//	    "PROJECT_CONTRIBUTOR",
		//	    "PROJECT_CATALOG_VIEWER",
		//	    "PROJECT_CATALOG_CONSUMER",
		//	    "PROJECT_CATALOG_STEWARD"
		//	  ],
		//	  "type": "string"
		//	}
		"designation": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^dzd[-_][a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"domain_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Member
		// CloudFormation resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "GroupIdentifier": {
		//	      "type": "string"
		//	    },
		//	    "UserIdentifier": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"member": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: GroupIdentifier
				"group_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: UserIdentifier
				"user_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^[a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"project_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::DataZone::ProjectMembership",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataZone::ProjectMembership").WithTerraformTypeName("awscc_datazone_project_membership")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"designation":        "Designation",
		"domain_identifier":  "DomainIdentifier",
		"group_identifier":   "GroupIdentifier",
		"member":             "Member",
		"project_identifier": "ProjectIdentifier",
		"user_identifier":    "UserIdentifier",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
