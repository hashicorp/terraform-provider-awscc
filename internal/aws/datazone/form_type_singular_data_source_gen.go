// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package datazone

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_datazone_form_type", formTypeDataSource)
}

// formTypeDataSource returns the Terraform awscc_datazone_form_type data source.
// This Terraform data source corresponds to the CloudFormation AWS::DataZone::FormType resource.
func formTypeDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The timestamp of when this Amazon DataZone metadata form type was created.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "The timestamp of when this Amazon DataZone metadata form type was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedBy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The user who created this Amazon DataZone metadata form type.",
		//	  "pattern": "^[a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"created_by": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The user who created this Amazon DataZone metadata form type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of this Amazon DataZone metadata form type.",
		//	  "maxLength": 2048,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of this Amazon DataZone metadata form type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Amazon DataZone domain in which this metadata form type is created.",
		//	  "pattern": "^dzd[-_][a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"domain_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Amazon DataZone domain in which this metadata form type is created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Amazon DataZone domain in which this metadata form type is created.",
		//	  "pattern": "^dzd[-_][a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"domain_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Amazon DataZone domain in which this metadata form type is created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FormTypeIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of this Amazon DataZone metadata form type.",
		//	  "maxLength": 385,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"form_type_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of this Amazon DataZone metadata form type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Model
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The model of this Amazon DataZone metadata form type.",
		//	  "properties": {
		//	    "Smithy": {
		//	      "maxLength": 100000,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"model": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Smithy
				"smithy": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The model of this Amazon DataZone metadata form type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of this Amazon DataZone metadata form type.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of this Amazon DataZone metadata form type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OwningProjectId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the project that owns this Amazon DataZone metadata form type.",
		//	  "pattern": "^[a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"owning_project_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the project that owns this Amazon DataZone metadata form type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OwningProjectIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Amazon DataZone project that owns this metadata form type.",
		//	  "pattern": "^[a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"owning_project_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Amazon DataZone project that owns this metadata form type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Revision
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The revision of this Amazon DataZone metadata form type.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"revision": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The revision of this Amazon DataZone metadata form type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of this Amazon DataZone metadata form type.",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of this Amazon DataZone metadata form type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::DataZone::FormType",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataZone::FormType").WithTerraformTypeName("awscc_datazone_form_type")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"created_at":                "CreatedAt",
		"created_by":                "CreatedBy",
		"description":               "Description",
		"domain_id":                 "DomainId",
		"domain_identifier":         "DomainIdentifier",
		"form_type_identifier":      "FormTypeIdentifier",
		"model":                     "Model",
		"name":                      "Name",
		"owning_project_id":         "OwningProjectId",
		"owning_project_identifier": "OwningProjectIdentifier",
		"revision":                  "Revision",
		"smithy":                    "Smithy",
		"status":                    "Status",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
