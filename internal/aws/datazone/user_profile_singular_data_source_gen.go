// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package datazone

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_datazone_user_profile", userProfileDataSource)
}

// userProfileDataSource returns the Terraform awscc_datazone_user_profile data source.
// This Terraform data source corresponds to the CloudFormation AWS::DataZone::UserProfile resource.
func userProfileDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Details
		// CloudFormation resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "Iam": {
		//	      "additionalProperties": false,
		//	      "description": "The details of the IAM User Profile.",
		//	      "properties": {
		//	        "Arn": {
		//	          "description": "The ARN of the IAM User Profile.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Sso": {
		//	      "additionalProperties": false,
		//	      "description": "The details of the SSO User Profile.",
		//	      "properties": {
		//	        "FirstName": {
		//	          "description": "The First Name of the IAM User Profile.",
		//	          "type": "string"
		//	        },
		//	        "LastName": {
		//	          "description": "The Last Name of the IAM User Profile.",
		//	          "type": "string"
		//	        },
		//	        "Username": {
		//	          "description": "The username of the SSO User Profile.",
		//	          "maxLength": 1024,
		//	          "minLength": 1,
		//	          "pattern": "^[a-zA-Z_0-9+=,.@-]+$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"details": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Iam
				"iam": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Arn
						"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN of the IAM User Profile.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The details of the IAM User Profile.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Sso
				"sso": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: FirstName
						"first_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The First Name of the IAM User Profile.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: LastName
						"last_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Last Name of the IAM User Profile.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Username
						"username": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The username of the SSO User Profile.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The details of the SSO User Profile.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the Amazon DataZone domain in which the user profile is created.",
		//	  "pattern": "^dzd[-_][a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"domain_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the Amazon DataZone domain in which the user profile is created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the Amazon DataZone domain in which the user profile would be created.",
		//	  "pattern": "^dzd[-_][a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"domain_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the Amazon DataZone domain in which the user profile would be created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Amazon DataZone user profile.",
		//	  "type": "string"
		//	}
		"user_profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Amazon DataZone user profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the user profile.",
		//	  "enum": [
		//	    "ASSIGNED",
		//	    "NOT_ASSIGNED",
		//	    "ACTIVATED",
		//	    "DEACTIVATED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the user profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the user profile.",
		//	  "enum": [
		//	    "IAM",
		//	    "SSO"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the user profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UserIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the user.",
		//	  "pattern": "(^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$|^[a-zA-Z_0-9+=,.@-]+$|^arn:aws:iam::\\d{12}:.+$)",
		//	  "type": "string"
		//	}
		"user_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the user.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UserType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the user.",
		//	  "enum": [
		//	    "IAM_USER",
		//	    "IAM_ROLE",
		//	    "SSO_USER"
		//	  ],
		//	  "type": "string"
		//	}
		"user_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the user.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::DataZone::UserProfile",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataZone::UserProfile").WithTerraformTypeName("awscc_datazone_user_profile")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":               "Arn",
		"details":           "Details",
		"domain_id":         "DomainId",
		"domain_identifier": "DomainIdentifier",
		"first_name":        "FirstName",
		"iam":               "Iam",
		"last_name":         "LastName",
		"sso":               "Sso",
		"status":            "Status",
		"type":              "Type",
		"user_identifier":   "UserIdentifier",
		"user_profile_id":   "Id",
		"user_type":         "UserType",
		"username":          "Username",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
