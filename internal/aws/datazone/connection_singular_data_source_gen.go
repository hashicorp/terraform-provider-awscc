// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package datazone

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_datazone_connection", connectionDataSource)
}

// connectionDataSource returns the Terraform awscc_datazone_connection data source.
// This Terraform data source corresponds to the CloudFormation AWS::DataZone::Connection resource.
func connectionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AwsLocation
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "AWS Location of project",
		//	  "properties": {
		//	    "AccessRole": {
		//	      "maxLength": 2048,
		//	      "pattern": "^arn:aws[^:]*:iam::\\d{12}:(role|role/service-role)/[\\w+=,.@-]*$",
		//	      "type": "string"
		//	    },
		//	    "AwsAccountId": {
		//	      "pattern": "^\\d{12}$",
		//	      "type": "string"
		//	    },
		//	    "AwsRegion": {
		//	      "pattern": "^[a-z]{2}-[a-z]{4,10}-\\d$",
		//	      "type": "string"
		//	    },
		//	    "IamConnectionId": {
		//	      "maxLength": 128,
		//	      "pattern": "^[a-zA-Z0-9]+$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"aws_location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AccessRole
				"access_role": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: AwsAccountId
				"aws_account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: AwsRegion
				"aws_region": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IamConnectionId
				"iam_connection_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "AWS Location of project",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the connection.",
		//	  "maxLength": 128,
		//	  "pattern": "^[a-zA-Z0-9]+$",
		//	  "type": "string"
		//	}
		"connection_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the connection.",
		//	  "maxLength": 128,
		//	  "pattern": "^[\\S\\s]*$",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the domain in which the connection is created.",
		//	  "pattern": "^dzd[_][a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"domain_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the domain in which the connection is created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the domain in which the connection is created.",
		//	  "pattern": "^dzd[_][a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"domain_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the domain in which the connection is created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainUnitId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the domain unit in which the connection is created.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^[a-z0-9_\\-]+$",
		//	  "type": "string"
		//	}
		"domain_unit_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the domain unit in which the connection is created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnvironmentId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the environment in which the connection is created.",
		//	  "pattern": "^[a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"environment_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the environment in which the connection is created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnvironmentIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the environment in which the connection is created.",
		//	  "type": "string"
		//	}
		"environment_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the environment in which the connection is created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnvironmentUserRole
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The role of the user in the environment.",
		//	  "type": "string"
		//	}
		"environment_user_role": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The role of the user in the environment.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the connection.",
		//	  "maxLength": 64,
		//	  "pattern": "^[\\w][\\w\\.\\-\\_]*$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the project in which the connection is created.",
		//	  "pattern": "^[a-zA-Z0-9_-]{1,36}$",
		//	  "type": "string"
		//	}
		"project_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the project in which the connection is created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Props
		// CloudFormation resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "AthenaProperties": {
		//	      "additionalProperties": false,
		//	      "description": "Athena Properties Input",
		//	      "properties": {
		//	        "WorkgroupName": {
		//	          "maxLength": 128,
		//	          "pattern": "^[a-zA-Z0-9._-]+$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "WorkgroupName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "GlueProperties": {
		//	      "additionalProperties": false,
		//	      "description": "Glue Properties Input",
		//	      "properties": {
		//	        "GlueConnectionInput": {
		//	          "additionalProperties": false,
		//	          "description": "Glue Connection Input",
		//	          "properties": {
		//	            "AthenaProperties": {
		//	              "additionalProperties": false,
		//	              "description": "Property Map",
		//	              "patternProperties": {
		//	                "": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 1,
		//	                  "pattern": "",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "AuthenticationConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "Authentication Configuration Input",
		//	              "properties": {
		//	                "AuthenticationType": {
		//	                  "description": "Authentication Type",
		//	                  "enum": [
		//	                    "BASIC",
		//	                    "OAUTH2",
		//	                    "CUSTOM"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "BasicAuthenticationCredentials": {
		//	                  "additionalProperties": false,
		//	                  "description": "Basic Authentication Credentials",
		//	                  "properties": {
		//	                    "Password": {
		//	                      "maxLength": 512,
		//	                      "pattern": "^.*$",
		//	                      "type": "string"
		//	                    },
		//	                    "UserName": {
		//	                      "maxLength": 512,
		//	                      "pattern": "^\\S+$",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "CustomAuthenticationCredentials": {
		//	                  "additionalProperties": false,
		//	                  "description": "Credential Map",
		//	                  "patternProperties": {
		//	                    "": {
		//	                      "maxLength": 2048,
		//	                      "minLength": 1,
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "KmsKeyArn": {
		//	                  "pattern": "^$|arn:aws[a-z0-9-]*:kms:.*$",
		//	                  "type": "string"
		//	                },
		//	                "OAuth2Properties": {
		//	                  "additionalProperties": false,
		//	                  "description": "OAuth2 Properties",
		//	                  "properties": {
		//	                    "AuthorizationCodeProperties": {
		//	                      "additionalProperties": false,
		//	                      "description": "Authorization Code Properties",
		//	                      "properties": {
		//	                        "AuthorizationCode": {
		//	                          "maxLength": 4096,
		//	                          "minLength": 1,
		//	                          "type": "string"
		//	                        },
		//	                        "RedirectUri": {
		//	                          "maxLength": 512,
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "OAuth2ClientApplication": {
		//	                      "additionalProperties": false,
		//	                      "description": "OAuth2 Client Application",
		//	                      "properties": {
		//	                        "AWSManagedClientApplicationReference": {
		//	                          "maxLength": 2048,
		//	                          "pattern": "^\\S+$",
		//	                          "type": "string"
		//	                        },
		//	                        "UserManagedClientApplicationClientId": {
		//	                          "maxLength": 2048,
		//	                          "pattern": "^\\S+$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "OAuth2Credentials": {
		//	                      "additionalProperties": false,
		//	                      "description": "Glue OAuth2 Credentials",
		//	                      "properties": {
		//	                        "AccessToken": {
		//	                          "maxLength": 4096,
		//	                          "pattern": "^[\\x20-\\x7E]*$",
		//	                          "type": "string"
		//	                        },
		//	                        "JwtToken": {
		//	                          "maxLength": 8000,
		//	                          "pattern": "^([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_=]+)\\.([a-zA-Z0-9_\\-\\+\\/=]*)$",
		//	                          "type": "string"
		//	                        },
		//	                        "RefreshToken": {
		//	                          "maxLength": 4096,
		//	                          "pattern": "^[\\x20-\\x7E]*$",
		//	                          "type": "string"
		//	                        },
		//	                        "UserManagedClientApplicationClientSecret": {
		//	                          "maxLength": 512,
		//	                          "pattern": "^[\\x20-\\x7E]*$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "OAuth2GrantType": {
		//	                      "description": "OAuth2 Grant Type",
		//	                      "enum": [
		//	                        "AUTHORIZATION_CODE",
		//	                        "CLIENT_CREDENTIALS",
		//	                        "JWT_BEARER"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "TokenUrl": {
		//	                      "maxLength": 256,
		//	                      "pattern": "^(https?)://[-a-zA-Z0-9+\u0026@#/%?=~_|!:,.;]*[-a-zA-Z0-9+\u0026@#/%=~_|]$",
		//	                      "type": "string"
		//	                    },
		//	                    "TokenUrlParametersMap": {
		//	                      "additionalProperties": false,
		//	                      "description": "The token URL parameters.",
		//	                      "patternProperties": {
		//	                        "": {
		//	                          "maxLength": 512,
		//	                          "minLength": 1,
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "SecretArn": {
		//	                  "pattern": "^arn:aws(-(cn|us-gov|iso(-[bef])?))?:secretsmanager:.*$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "ConnectionProperties": {
		//	              "additionalProperties": false,
		//	              "description": "Connection Properties",
		//	              "patternProperties": {
		//	                "": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 1,
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "ConnectionType": {
		//	              "description": "Glue Connection Type",
		//	              "type": "string"
		//	            },
		//	            "Description": {
		//	              "maxLength": 2048,
		//	              "pattern": "",
		//	              "type": "string"
		//	            },
		//	            "MatchCriteria": {
		//	              "maxLength": 10,
		//	              "minLength": 0,
		//	              "type": "string"
		//	            },
		//	            "Name": {
		//	              "maxLength": 255,
		//	              "minLength": 1,
		//	              "pattern": "",
		//	              "type": "string"
		//	            },
		//	            "PhysicalConnectionRequirements": {
		//	              "additionalProperties": false,
		//	              "description": "Physical Connection Requirements",
		//	              "properties": {
		//	                "AvailabilityZone": {
		//	                  "maxLength": 255,
		//	                  "minLength": 1,
		//	                  "type": "string"
		//	                },
		//	                "SecurityGroupIdList": {
		//	                  "insertionOrder": false,
		//	                  "items": {
		//	                    "maxLength": 255,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 50,
		//	                  "minItems": 0,
		//	                  "type": "array"
		//	                },
		//	                "SubnetId": {
		//	                  "maxLength": 32,
		//	                  "pattern": "^subnet-[a-z0-9]+$",
		//	                  "type": "string"
		//	                },
		//	                "SubnetIdList": {
		//	                  "insertionOrder": false,
		//	                  "items": {
		//	                    "maxLength": 32,
		//	                    "pattern": "^subnet-[a-z0-9]+$",
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 50,
		//	                  "minItems": 1,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "PythonProperties": {
		//	              "additionalProperties": false,
		//	              "description": "Property Map",
		//	              "patternProperties": {
		//	                "": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 1,
		//	                  "pattern": "",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "SparkProperties": {
		//	              "additionalProperties": false,
		//	              "description": "Property Map",
		//	              "patternProperties": {
		//	                "": {
		//	                  "maxLength": 2048,
		//	                  "minLength": 1,
		//	                  "pattern": "",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "ValidateCredentials": {
		//	              "type": "boolean"
		//	            },
		//	            "ValidateForComputeEnvironments": {
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "description": "Compute Environments",
		//	                "type": "string"
		//	              },
		//	              "maxItems": 50,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "HyperPodProperties": {
		//	      "additionalProperties": false,
		//	      "description": "HyperPod Properties Input",
		//	      "properties": {
		//	        "ClusterName": {
		//	          "maxLength": 63,
		//	          "minLength": 1,
		//	          "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "ClusterName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "IamProperties": {
		//	      "additionalProperties": false,
		//	      "description": "IAM Properties Input",
		//	      "properties": {
		//	        "GlueLineageSyncEnabled": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RedshiftProperties": {
		//	      "additionalProperties": false,
		//	      "description": "Redshift Properties Input",
		//	      "properties": {
		//	        "Credentials": {
		//	          "properties": {
		//	            "SecretArn": {
		//	              "maxLength": 2048,
		//	              "pattern": "^arn:aws[^:]*:secretsmanager:[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]:\\d{12}:secret:.*$",
		//	              "type": "string"
		//	            },
		//	            "UsernamePassword": {
		//	              "additionalProperties": false,
		//	              "description": "The username and password to be used for authentication.",
		//	              "properties": {
		//	                "Password": {
		//	                  "maxLength": 64,
		//	                  "pattern": "^[\\S]*$",
		//	                  "type": "string"
		//	                },
		//	                "Username": {
		//	                  "maxLength": 127,
		//	                  "minLength": 1,
		//	                  "pattern": "^[\\S]*$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Password",
		//	                "Username"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "DatabaseName": {
		//	          "maxLength": 64,
		//	          "minLength": 1,
		//	          "pattern": "^[a-z0-9_]+$",
		//	          "type": "string"
		//	        },
		//	        "Host": {
		//	          "maxLength": 256,
		//	          "pattern": "^[\\S]*$",
		//	          "type": "string"
		//	        },
		//	        "LineageSync": {
		//	          "additionalProperties": false,
		//	          "description": "Redshift Lineage Sync Configuration Input",
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "Schedule": {
		//	              "additionalProperties": false,
		//	              "description": "Lineage Sync Schedule",
		//	              "properties": {
		//	                "Schedule": {
		//	                  "pattern": "^cron\\((\\b[0-5]?[0-9]\\b) (\\b2[0-3]\\b|\\b[0-1]?[0-9]\\b) ([-?*,/\\dLW]){1,83} ([-*,/\\d]|[a-zA-Z]{3}){1,23} ([-?#*,/\\dL]|[a-zA-Z]{3}){1,13} ([^\\)]+)\\)$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Port": {
		//	          "maximum": 65535,
		//	          "minimum": 0,
		//	          "type": "number"
		//	        },
		//	        "Storage": {
		//	          "properties": {
		//	            "ClusterName": {
		//	              "maxLength": 63,
		//	              "minLength": 0,
		//	              "pattern": "^[a-z0-9-]+$",
		//	              "type": "string"
		//	            },
		//	            "WorkgroupName": {
		//	              "maxLength": 64,
		//	              "minLength": 3,
		//	              "pattern": "^[a-z0-9-]+$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "SparkEmrProperties": {
		//	      "additionalProperties": false,
		//	      "description": "Spark EMR Properties Input.",
		//	      "properties": {
		//	        "ComputeArn": {
		//	          "maxLength": 2048,
		//	          "pattern": "^arn:aws(-(cn|us-gov|iso(-[bef])?))?:(elasticmapreduce|emr-serverless):.*",
		//	          "type": "string"
		//	        },
		//	        "InstanceProfileArn": {
		//	          "maxLength": 2048,
		//	          "pattern": "^arn:aws[^:]*:iam::\\d{12}:(role|role/service-role)/[\\w+=,.@-]*$",
		//	          "type": "string"
		//	        },
		//	        "JavaVirtualEnv": {
		//	          "maxLength": 256,
		//	          "pattern": "^[\\S]*$",
		//	          "type": "string"
		//	        },
		//	        "LogUri": {
		//	          "maxLength": 2048,
		//	          "pattern": "^s3://.+$",
		//	          "type": "string"
		//	        },
		//	        "PythonVirtualEnv": {
		//	          "maxLength": 256,
		//	          "pattern": "^[\\S]*$",
		//	          "type": "string"
		//	        },
		//	        "RuntimeRole": {
		//	          "maxLength": 2048,
		//	          "pattern": "^arn:aws[^:]*:iam::\\d{12}:(role|role/service-role)/[\\w+=,.@-]*$",
		//	          "type": "string"
		//	        },
		//	        "TrustedCertificatesS3Uri": {
		//	          "maxLength": 2048,
		//	          "pattern": "^s3://.+$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "SparkGlueProperties": {
		//	      "additionalProperties": false,
		//	      "description": "Spark Glue Properties Input.",
		//	      "properties": {
		//	        "AdditionalArgs": {
		//	          "additionalProperties": false,
		//	          "description": "Spark Glue Args.",
		//	          "properties": {
		//	            "Connection": {
		//	              "maxLength": 128,
		//	              "pattern": "^[a-zA-Z0-9]+$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "GlueConnectionName": {
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "pattern": "^[\\S]*$",
		//	          "type": "string"
		//	        },
		//	        "GlueVersion": {
		//	          "maxLength": 256,
		//	          "pattern": "^\\w+\\.\\w+$",
		//	          "type": "string"
		//	        },
		//	        "IdleTimeout": {
		//	          "maximum": 3000,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        },
		//	        "JavaVirtualEnv": {
		//	          "maxLength": 256,
		//	          "pattern": "^[\\S]*$",
		//	          "type": "string"
		//	        },
		//	        "NumberOfWorkers": {
		//	          "maximum": 1000,
		//	          "minimum": 1,
		//	          "type": "number"
		//	        },
		//	        "PythonVirtualEnv": {
		//	          "maxLength": 256,
		//	          "pattern": "^[\\S]*$",
		//	          "type": "string"
		//	        },
		//	        "WorkerType": {
		//	          "maxLength": 256,
		//	          "pattern": "^[G|Z].*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"props": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AthenaProperties
				"athena_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: WorkgroupName
						"workgroup_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Athena Properties Input",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: GlueProperties
				"glue_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: GlueConnectionInput
						"glue_connection_input": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AthenaProperties
								"athena_properties": // Pattern: ""
								schema.MapAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "Property Map",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: AuthenticationConfiguration
								"authentication_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AuthenticationType
										"authentication_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Authentication Type",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: BasicAuthenticationCredentials
										"basic_authentication_credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Password
												"password": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: UserName
												"user_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Description: "Basic Authentication Credentials",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: CustomAuthenticationCredentials
										"custom_authentication_credentials": // Pattern: ""
										schema.MapAttribute{                 /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Description: "Credential Map",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: KmsKeyArn
										"kms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: OAuth2Properties
										"o_auth_2_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AuthorizationCodeProperties
												"authorization_code_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: AuthorizationCode
														"authorization_code": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: RedirectUri
														"redirect_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Authorization Code Properties",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: OAuth2ClientApplication
												"o_auth_2_client_application": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: AWSManagedClientApplicationReference
														"aws_managed_client_application_reference": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: UserManagedClientApplicationClientId
														"user_managed_client_application_client_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "OAuth2 Client Application",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: OAuth2Credentials
												"o_auth_2_credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: AccessToken
														"access_token": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: JwtToken
														"jwt_token": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: RefreshToken
														"refresh_token": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: UserManagedClientApplicationClientSecret
														"user_managed_client_application_client_secret": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Glue OAuth2 Credentials",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: OAuth2GrantType
												"o_auth_2_grant_type": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "OAuth2 Grant Type",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: TokenUrl
												"token_url": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: TokenUrlParametersMap
												"token_url_parameters_map": // Pattern: ""
												schema.MapAttribute{        /*START ATTRIBUTE*/
													ElementType: types.StringType,
													Description: "The token URL parameters.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Description: "OAuth2 Properties",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: SecretArn
										"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "Authentication Configuration Input",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ConnectionProperties
								"connection_properties": // Pattern: ""
								schema.MapAttribute{     /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "Connection Properties",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ConnectionType
								"connection_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Glue Connection Type",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Description
								"description": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: MatchCriteria
								"match_criteria": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Name
								"name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: PhysicalConnectionRequirements
								"physical_connection_requirements": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AvailabilityZone
										"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: SecurityGroupIdList
										"security_group_id_list": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: SubnetId
										"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: SubnetIdList
										"subnet_id_list": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "Physical Connection Requirements",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: PythonProperties
								"python_properties": // Pattern: ""
								schema.MapAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "Property Map",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SparkProperties
								"spark_properties":  // Pattern: ""
								schema.MapAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "Property Map",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ValidateCredentials
								"validate_credentials": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ValidateForComputeEnvironments
								"validate_for_compute_environments": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Glue Connection Input",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Glue Properties Input",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: HyperPodProperties
				"hyper_pod_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ClusterName
						"cluster_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "HyperPod Properties Input",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IamProperties
				"iam_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: GlueLineageSyncEnabled
						"glue_lineage_sync_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "IAM Properties Input",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RedshiftProperties
				"redshift_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Credentials
						"credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: SecretArn
								"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: UsernamePassword
								"username_password": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Password
										"password": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Username
										"username": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The username and password to be used for authentication.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Host
						"host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LineageSync
						"lineage_sync": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Schedule
								"schedule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Schedule
										"schedule": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "Lineage Sync Schedule",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Redshift Lineage Sync Configuration Input",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Port
						"port": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Storage
						"storage": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ClusterName
								"cluster_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: WorkgroupName
								"workgroup_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Redshift Properties Input",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SparkEmrProperties
				"spark_emr_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ComputeArn
						"compute_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: InstanceProfileArn
						"instance_profile_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: JavaVirtualEnv
						"java_virtual_env": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogUri
						"log_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PythonVirtualEnv
						"python_virtual_env": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RuntimeRole
						"runtime_role": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TrustedCertificatesS3Uri
						"trusted_certificates_s3_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Spark EMR Properties Input.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SparkGlueProperties
				"spark_glue_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AdditionalArgs
						"additional_args": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Connection
								"connection": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Spark Glue Args.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: GlueConnectionName
						"glue_connection_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GlueVersion
						"glue_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: IdleTimeout
						"idle_timeout": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: JavaVirtualEnv
						"java_virtual_env": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: NumberOfWorkers
						"number_of_workers": schema.Float64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PythonVirtualEnv
						"python_virtual_env": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: WorkerType
						"worker_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Spark Glue Properties Input.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Connection Type",
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Connection Type",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::DataZone::Connection",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataZone::Connection").WithTerraformTypeName("awscc_datazone_connection")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_role":                              "AccessRole",
		"access_token":                             "AccessToken",
		"additional_args":                          "AdditionalArgs",
		"athena_properties":                        "AthenaProperties",
		"authentication_configuration":             "AuthenticationConfiguration",
		"authentication_type":                      "AuthenticationType",
		"authorization_code":                       "AuthorizationCode",
		"authorization_code_properties":            "AuthorizationCodeProperties",
		"availability_zone":                        "AvailabilityZone",
		"aws_account_id":                           "AwsAccountId",
		"aws_location":                             "AwsLocation",
		"aws_managed_client_application_reference": "AWSManagedClientApplicationReference",
		"aws_region":                               "AwsRegion",
		"basic_authentication_credentials":         "BasicAuthenticationCredentials",
		"cluster_name":                             "ClusterName",
		"compute_arn":                              "ComputeArn",
		"connection":                               "Connection",
		"connection_id":                            "ConnectionId",
		"connection_properties":                    "ConnectionProperties",
		"connection_type":                          "ConnectionType",
		"credentials":                              "Credentials",
		"custom_authentication_credentials":        "CustomAuthenticationCredentials",
		"database_name":                            "DatabaseName",
		"description":                              "Description",
		"domain_id":                                "DomainId",
		"domain_identifier":                        "DomainIdentifier",
		"domain_unit_id":                           "DomainUnitId",
		"enabled":                                  "Enabled",
		"environment_id":                           "EnvironmentId",
		"environment_identifier":                   "EnvironmentIdentifier",
		"environment_user_role":                    "EnvironmentUserRole",
		"glue_connection_input":                    "GlueConnectionInput",
		"glue_connection_name":                     "GlueConnectionName",
		"glue_lineage_sync_enabled":                "GlueLineageSyncEnabled",
		"glue_properties":                          "GlueProperties",
		"glue_version":                             "GlueVersion",
		"host":                                     "Host",
		"hyper_pod_properties":                     "HyperPodProperties",
		"iam_connection_id":                        "IamConnectionId",
		"iam_properties":                           "IamProperties",
		"idle_timeout":                             "IdleTimeout",
		"instance_profile_arn":                     "InstanceProfileArn",
		"java_virtual_env":                         "JavaVirtualEnv",
		"jwt_token":                                "JwtToken",
		"kms_key_arn":                              "KmsKeyArn",
		"lineage_sync":                             "LineageSync",
		"log_uri":                                  "LogUri",
		"match_criteria":                           "MatchCriteria",
		"name":                                     "Name",
		"number_of_workers":                        "NumberOfWorkers",
		"o_auth_2_client_application":              "OAuth2ClientApplication",
		"o_auth_2_credentials":                     "OAuth2Credentials",
		"o_auth_2_grant_type":                      "OAuth2GrantType",
		"o_auth_2_properties":                      "OAuth2Properties",
		"password":                                 "Password",
		"physical_connection_requirements":         "PhysicalConnectionRequirements",
		"port":                                     "Port",
		"project_id":                               "ProjectId",
		"props":                                    "Props",
		"python_properties":                        "PythonProperties",
		"python_virtual_env":                       "PythonVirtualEnv",
		"redirect_uri":                             "RedirectUri",
		"redshift_properties":                      "RedshiftProperties",
		"refresh_token":                            "RefreshToken",
		"runtime_role":                             "RuntimeRole",
		"schedule":                                 "Schedule",
		"secret_arn":                               "SecretArn",
		"security_group_id_list":                   "SecurityGroupIdList",
		"spark_emr_properties":                     "SparkEmrProperties",
		"spark_glue_properties":                    "SparkGlueProperties",
		"spark_properties":                         "SparkProperties",
		"storage":                                  "Storage",
		"subnet_id":                                "SubnetId",
		"subnet_id_list":                           "SubnetIdList",
		"token_url":                                "TokenUrl",
		"token_url_parameters_map":                 "TokenUrlParametersMap",
		"trusted_certificates_s3_uri":              "TrustedCertificatesS3Uri",
		"type":                                     "Type",
		"user_managed_client_application_client_id":     "UserManagedClientApplicationClientId",
		"user_managed_client_application_client_secret": "UserManagedClientApplicationClientSecret",
		"user_name":                         "UserName",
		"username":                          "Username",
		"username_password":                 "UsernamePassword",
		"validate_credentials":              "ValidateCredentials",
		"validate_for_compute_environments": "ValidateForComputeEnvironments",
		"worker_type":                       "WorkerType",
		"workgroup_name":                    "WorkgroupName",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
