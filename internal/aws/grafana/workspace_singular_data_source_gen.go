// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package grafana

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_grafana_workspace", workspaceDataSource)
}

// workspaceDataSource returns the Terraform awscc_grafana_workspace data source.
// This Terraform data source corresponds to the CloudFormation AWS::Grafana::Workspace resource.
func workspaceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccountAccessType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "These enums represent valid account access types. Specifically these enums determine whether the workspace can access AWS resources in the AWS account only, or whether it can also access resources in other accounts in the same organization. If the value CURRENT_ACCOUNT is used, a workspace role ARN must be provided. If the value is ORGANIZATION, a list of organizational units must be provided.",
		//	  "enum": [
		//	    "CURRENT_ACCOUNT",
		//	    "ORGANIZATION"
		//	  ],
		//	  "type": "string"
		//	}
		"account_access_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "These enums represent valid account access types. Specifically these enums determine whether the workspace can access AWS resources in the AWS account only, or whether it can also access resources in other accounts in the same organization. If the value CURRENT_ACCOUNT is used, a workspace role ARN must be provided. If the value is ORGANIZATION, a list of organizational units must be provided.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AuthenticationProviders
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of authentication providers to enable.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "Valid workspace authentication providers.",
		//	    "enum": [
		//	      "AWS_SSO",
		//	      "SAML"
		//	    ],
		//	    "type": "string"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"authentication_providers": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "List of authentication providers to enable.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ClientToken
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.",
		//	  "pattern": "^[!-~]{1,64}$",
		//	  "type": "string"
		//	}
		"client_token": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreationTimestamp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Timestamp when the workspace was created.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"creation_timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Timestamp when the workspace was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DataSources
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of data sources on the service managed IAM role.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "These enums represent valid AWS data sources that can be queried via the Grafana workspace. These data sources are primarily used to help customers visualize which data sources have been added to a service managed workspace IAM role.",
		//	    "enum": [
		//	      "AMAZON_OPENSEARCH_SERVICE",
		//	      "CLOUDWATCH",
		//	      "PROMETHEUS",
		//	      "XRAY",
		//	      "TIMESTREAM",
		//	      "SITEWISE",
		//	      "ATHENA",
		//	      "REDSHIFT"
		//	    ],
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"data_sources": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "List of data sources on the service managed IAM role.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of a workspace.",
		//	  "maxLength": 2048,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of a workspace.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Endpoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Endpoint for the Grafana workspace.",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Endpoint for the Grafana workspace.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GrafanaVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The version of Grafana to support in your workspace.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"grafana_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The version of Grafana to support in your workspace.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The id that uniquely identifies a Grafana workspace.",
		//	  "pattern": "^g-[0-9a-f]{10}$",
		//	  "type": "string"
		//	}
		"workspace_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The id that uniquely identifies a Grafana workspace.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ModificationTimestamp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Timestamp when the workspace was last modified",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"modification_timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Timestamp when the workspace was last modified",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The user friendly name of a workspace.",
		//	  "pattern": "^[a-zA-Z0-9-._~]{1,255}$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The user friendly name of a workspace.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkAccessControl
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The configuration settings for Network Access Control.",
		//	  "properties": {
		//	    "PrefixListIds": {
		//	      "description": "The list of prefix list IDs. A prefix list is a list of CIDR ranges of IP addresses. The IP addresses specified are allowed to access your workspace. If the list is not included in the configuration then no IP addresses will be allowed to access the workspace.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "Prefix List Ids",
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "maxItems": 5,
		//	      "minItems": 0,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "VpceIds": {
		//	      "description": "The list of Amazon VPC endpoint IDs for the workspace. If a NetworkAccessConfiguration is specified then only VPC endpoints specified here will be allowed to access the workspace.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "VPCE Ids",
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "maxItems": 5,
		//	      "minItems": 0,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"network_access_control": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: PrefixListIds
				"prefix_list_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The list of prefix list IDs. A prefix list is a list of CIDR ranges of IP addresses. The IP addresses specified are allowed to access your workspace. If the list is not included in the configuration then no IP addresses will be allowed to access the workspace.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: VpceIds
				"vpce_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The list of Amazon VPC endpoint IDs for the workspace. If a NetworkAccessConfiguration is specified then only VPC endpoints specified here will be allowed to access the workspace.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The configuration settings for Network Access Control.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NotificationDestinations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "These enums represent valid AWS notification destinations that the Grafana workspace has permission to use. These notification destinations are primarily used to help customers visualize which destinations have been added to a service managed IAM role.",
		//	    "enum": [
		//	      "SNS"
		//	    ],
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"notification_destinations": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "List of notification destinations on the customers service managed IAM role that the Grafana workspace can query.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OrganizationRoleName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"organization_role_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of an IAM role that already exists to use with AWS Organizations to access AWS data sources and notification channels in other accounts in an organization.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OrganizationalUnits
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "Id of an organizational unit.",
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"organizational_units": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "List of Organizational Units containing AWS accounts the Grafana workspace can pull data from.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PermissionType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "These enums represent valid permission types to use when creating or configuring a Grafana workspace. The SERVICE_MANAGED permission type means the Managed Grafana service will create a workspace IAM role on your behalf. The CUSTOMER_MANAGED permission type means that the customer is expected to provide an IAM role that the Grafana workspace can use to query data sources.",
		//	  "enum": [
		//	    "CUSTOMER_MANAGED",
		//	    "SERVICE_MANAGED"
		//	  ],
		//	  "type": "string"
		//	}
		"permission_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "These enums represent valid permission types to use when creating or configuring a Grafana workspace. The SERVICE_MANAGED permission type means the Managed Grafana service will create a workspace IAM role on your behalf. The CUSTOMER_MANAGED permission type means that the customer is expected to provide an IAM role that the Grafana workspace can use to query data sources.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PluginAdminEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Allow workspace admins to install plugins",
		//	  "type": "boolean"
		//	}
		"plugin_admin_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Allow workspace admins to install plugins",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "IAM Role that will be used to grant the Grafana workspace access to a customers AWS resources.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SamlConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "SAML configuration data associated with an AMG workspace.",
		//	  "properties": {
		//	    "AllowedOrganizations": {
		//	      "description": "List of SAML organizations allowed to access Grafana.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "A single SAML organization.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "AssertionAttributes": {
		//	      "additionalProperties": false,
		//	      "description": "Maps Grafana friendly names to the IdPs SAML attributes.",
		//	      "properties": {
		//	        "Email": {
		//	          "description": "Name of the attribute within the SAML assert to use as the users email in Grafana.",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Groups": {
		//	          "description": "Name of the attribute within the SAML assert to use as the users groups in Grafana.",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Login": {
		//	          "description": "Name of the attribute within the SAML assert to use as the users login handle in Grafana.",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Name": {
		//	          "description": "Name of the attribute within the SAML assert to use as the users name in Grafana.",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Org": {
		//	          "description": "Name of the attribute within the SAML assert to use as the users organizations in Grafana.",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Role": {
		//	          "description": "Name of the attribute within the SAML assert to use as the users roles in Grafana.",
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "IdpMetadata": {
		//	      "additionalProperties": false,
		//	      "description": "IdP Metadata used to configure SAML authentication in Grafana.",
		//	      "properties": {
		//	        "Url": {
		//	          "description": "URL that vends the IdPs metadata.",
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Xml": {
		//	          "description": "XML blob of the IdPs metadata.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "LoginValidityDuration": {
		//	      "description": "The maximum lifetime an authenticated user can be logged in (in minutes) before being required to re-authenticate.",
		//	      "type": "number"
		//	    },
		//	    "RoleValues": {
		//	      "additionalProperties": false,
		//	      "description": "Maps SAML roles to the Grafana Editor and Admin roles.",
		//	      "properties": {
		//	        "Admin": {
		//	          "description": "List of SAML roles which will be mapped into the Grafana Admin role.",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "description": "A single SAML role.",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "Editor": {
		//	          "description": "List of SAML roles which will be mapped into the Grafana Editor role.",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "description": "A single SAML role.",
		//	            "maxLength": 256,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "IdpMetadata"
		//	  ],
		//	  "type": "object"
		//	}
		"saml_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AllowedOrganizations
				"allowed_organizations": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "List of SAML organizations allowed to access Grafana.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AssertionAttributes
				"assertion_attributes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Email
						"email": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of the attribute within the SAML assert to use as the users email in Grafana.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Groups
						"groups": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of the attribute within the SAML assert to use as the users groups in Grafana.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Login
						"login": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of the attribute within the SAML assert to use as the users login handle in Grafana.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Name
						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of the attribute within the SAML assert to use as the users name in Grafana.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Org
						"org": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of the attribute within the SAML assert to use as the users organizations in Grafana.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Role
						"role": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of the attribute within the SAML assert to use as the users roles in Grafana.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Maps Grafana friendly names to the IdPs SAML attributes.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IdpMetadata
				"idp_metadata": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Url
						"url": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "URL that vends the IdPs metadata.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Xml
						"xml": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "XML blob of the IdPs metadata.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "IdP Metadata used to configure SAML authentication in Grafana.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: LoginValidityDuration
				"login_validity_duration": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "The maximum lifetime an authenticated user can be logged in (in minutes) before being required to re-authenticate.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RoleValues
				"role_values": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Admin
						"admin": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "List of SAML roles which will be mapped into the Grafana Admin role.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Editor
						"editor": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "List of SAML roles which will be mapped into the Grafana Editor role.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Maps SAML roles to the Grafana Editor and Admin roles.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "SAML configuration data associated with an AMG workspace.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SamlConfigurationStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Valid SAML configuration statuses.",
		//	  "enum": [
		//	    "CONFIGURED",
		//	    "NOT_CONFIGURED"
		//	  ],
		//	  "type": "string"
		//	}
		"saml_configuration_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Valid SAML configuration statuses.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SsoClientId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The client ID of the AWS SSO Managed Application.",
		//	  "type": "string"
		//	}
		"sso_client_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The client ID of the AWS SSO Managed Application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StackSetName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.",
		//	  "type": "string"
		//	}
		"stack_set_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the AWS CloudFormation stack set to use to generate IAM roles to be used for this workspace.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "These enums represent the status of a workspace.",
		//	  "enum": [
		//	    "ACTIVE",
		//	    "CREATING",
		//	    "DELETING",
		//	    "FAILED",
		//	    "UPDATING",
		//	    "UPGRADING",
		//	    "VERSION_UPDATING",
		//	    "DELETION_FAILED",
		//	    "CREATION_FAILED",
		//	    "UPDATE_FAILED",
		//	    "UPGRADE_FAILED",
		//	    "LICENSE_REMOVAL_FAILED",
		//	    "VERSION_UPDATE_FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "These enums represent the status of a workspace.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.",
		//	  "properties": {
		//	    "SecurityGroupIds": {
		//	      "description": "The list of Amazon EC2 security group IDs attached to the Amazon VPC for your Grafana workspace to connect.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "VPC Security Group Id",
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "maxItems": 5,
		//	      "minItems": 1,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "SubnetIds": {
		//	      "description": "The list of Amazon EC2 subnet IDs created in the Amazon VPC for your Grafana workspace to connect.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "VPC Subnet Id",
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "maxItems": 6,
		//	      "minItems": 2,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "required": [
		//	    "SecurityGroupIds",
		//	    "SubnetIds"
		//	  ],
		//	  "type": "object"
		//	}
		"vpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: SecurityGroupIds
				"security_group_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The list of Amazon EC2 security group IDs attached to the Amazon VPC for your Grafana workspace to connect.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SubnetIds
				"subnet_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The list of Amazon EC2 subnet IDs created in the Amazon VPC for your Grafana workspace to connect.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Grafana::Workspace",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Grafana::Workspace").WithTerraformTypeName("awscc_grafana_workspace")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_access_type":       "AccountAccessType",
		"admin":                     "Admin",
		"allowed_organizations":     "AllowedOrganizations",
		"assertion_attributes":      "AssertionAttributes",
		"authentication_providers":  "AuthenticationProviders",
		"client_token":              "ClientToken",
		"creation_timestamp":        "CreationTimestamp",
		"data_sources":              "DataSources",
		"description":               "Description",
		"editor":                    "Editor",
		"email":                     "Email",
		"endpoint":                  "Endpoint",
		"grafana_version":           "GrafanaVersion",
		"groups":                    "Groups",
		"idp_metadata":              "IdpMetadata",
		"login":                     "Login",
		"login_validity_duration":   "LoginValidityDuration",
		"modification_timestamp":    "ModificationTimestamp",
		"name":                      "Name",
		"network_access_control":    "NetworkAccessControl",
		"notification_destinations": "NotificationDestinations",
		"org":                       "Org",
		"organization_role_name":    "OrganizationRoleName",
		"organizational_units":      "OrganizationalUnits",
		"permission_type":           "PermissionType",
		"plugin_admin_enabled":      "PluginAdminEnabled",
		"prefix_list_ids":           "PrefixListIds",
		"role":                      "Role",
		"role_arn":                  "RoleArn",
		"role_values":               "RoleValues",
		"saml_configuration":        "SamlConfiguration",
		"saml_configuration_status": "SamlConfigurationStatus",
		"security_group_ids":        "SecurityGroupIds",
		"sso_client_id":             "SsoClientId",
		"stack_set_name":            "StackSetName",
		"status":                    "Status",
		"subnet_ids":                "SubnetIds",
		"url":                       "Url",
		"vpc_configuration":         "VpcConfiguration",
		"vpce_ids":                  "VpceIds",
		"workspace_id":              "Id",
		"xml":                       "Xml",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
