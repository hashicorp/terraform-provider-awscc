// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package globalaccelerator

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_globalaccelerator_endpoint_group", endpointGroupDataSource)
}

// endpointGroupDataSource returns the Terraform awscc_globalaccelerator_endpoint_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::GlobalAccelerator::EndpointGroup resource.
func endpointGroupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: EndpointConfigurations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The list of endpoint objects.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The configuration for a given endpoint",
		//	    "properties": {
		//	      "AttachmentArn": {
		//	        "description": "Attachment ARN that provides access control to the cross account endpoint. Not required for resources hosted in the same account as the endpoint group.",
		//	        "type": "string"
		//	      },
		//	      "ClientIPPreservationEnabled": {
		//	        "default": true,
		//	        "description": "true if client ip should be preserved",
		//	        "type": "boolean"
		//	      },
		//	      "EndpointId": {
		//	        "description": "Id of the endpoint. For Network/Application Load Balancer this value is the ARN.  For EIP, this value is the allocation ID.  For EC2 instances, this is the EC2 instance ID",
		//	        "type": "string"
		//	      },
		//	      "Weight": {
		//	        "default": 100,
		//	        "description": "The weight for the endpoint.",
		//	        "maximum": 255,
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      }
		//	    },
		//	    "required": [
		//	      "EndpointId"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"endpoint_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AttachmentArn
					"attachment_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Attachment ARN that provides access control to the cross account endpoint. Not required for resources hosted in the same account as the endpoint group.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ClientIPPreservationEnabled
					"client_ip_preservation_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Description: "true if client ip should be preserved",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: EndpointId
					"endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Id of the endpoint. For Network/Application Load Balancer this value is the ARN.  For EIP, this value is the allocation ID.  For EC2 instances, this is the EC2 instance ID",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Weight
					"weight": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The weight for the endpoint.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The list of endpoint objects.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointGroupArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the endpoint group",
		//	  "type": "string"
		//	}
		"endpoint_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the endpoint group",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointGroupRegion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the AWS Region where the endpoint group is located",
		//	  "type": "string"
		//	}
		"endpoint_group_region": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the AWS Region where the endpoint group is located",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckIntervalSeconds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": 30,
		//	  "description": "The time in seconds between each health check for an endpoint. Must be a value of 10 or 30",
		//	  "type": "integer"
		//	}
		"health_check_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The time in seconds between each health check for an endpoint. Must be a value of 10 or 30",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckPath
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "/",
		//	  "description": "",
		//	  "type": "string"
		//	}
		"health_check_path": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckPort
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": -1,
		//	  "description": "The port that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.",
		//	  "maximum": 65535,
		//	  "minimum": -1,
		//	  "type": "integer"
		//	}
		"health_check_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The port that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthCheckProtocol
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "TCP",
		//	  "description": "The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.",
		//	  "enum": [
		//	    "TCP",
		//	    "HTTP",
		//	    "HTTPS"
		//	  ],
		//	  "type": "string"
		//	}
		"health_check_protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The protocol that AWS Global Accelerator uses to check the health of endpoints in this endpoint group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ListenerArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the listener",
		//	  "type": "string"
		//	}
		"listener_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the listener",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PortOverrides
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "listener to endpoint port mapping.",
		//	    "properties": {
		//	      "EndpointPort": {
		//	        "description": "A network port number",
		//	        "maximum": 65535,
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      },
		//	      "ListenerPort": {
		//	        "description": "A network port number",
		//	        "maximum": 65535,
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      }
		//	    },
		//	    "required": [
		//	      "ListenerPort",
		//	      "EndpointPort"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"port_overrides": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: EndpointPort
					"endpoint_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "A network port number",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ListenerPort
					"listener_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "A network port number",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ThresholdCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": 3,
		//	  "description": "The number of consecutive health checks required to set the state of the endpoint to unhealthy.",
		//	  "type": "integer"
		//	}
		"threshold_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of consecutive health checks required to set the state of the endpoint to unhealthy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TrafficDialPercentage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": 100,
		//	  "description": "The percentage of traffic to sent to an AWS Region",
		//	  "maximum": 100,
		//	  "minimum": 0,
		//	  "type": "number"
		//	}
		"traffic_dial_percentage": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "The percentage of traffic to sent to an AWS Region",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::GlobalAccelerator::EndpointGroup",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::GlobalAccelerator::EndpointGroup").WithTerraformTypeName("awscc_globalaccelerator_endpoint_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"attachment_arn":                 "AttachmentArn",
		"client_ip_preservation_enabled": "ClientIPPreservationEnabled",
		"endpoint_configurations":        "EndpointConfigurations",
		"endpoint_group_arn":             "EndpointGroupArn",
		"endpoint_group_region":          "EndpointGroupRegion",
		"endpoint_id":                    "EndpointId",
		"endpoint_port":                  "EndpointPort",
		"health_check_interval_seconds":  "HealthCheckIntervalSeconds",
		"health_check_path":              "HealthCheckPath",
		"health_check_port":              "HealthCheckPort",
		"health_check_protocol":          "HealthCheckProtocol",
		"listener_arn":                   "ListenerArn",
		"listener_port":                  "ListenerPort",
		"port_overrides":                 "PortOverrides",
		"threshold_count":                "ThresholdCount",
		"traffic_dial_percentage":        "TrafficDialPercentage",
		"weight":                         "Weight",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
