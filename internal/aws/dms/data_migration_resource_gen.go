// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package dms

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_dms_data_migration", dataMigrationResource)
}

// dataMigrationResource returns the Terraform awscc_dms_data_migration resource.
// This Terraform resource corresponds to the CloudFormation AWS::DMS::DataMigration resource.
func dataMigrationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DataMigrationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The property describes an ARN of the data migration.",
		//	  "maxLength": 300,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"data_migration_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The property describes an ARN of the data migration.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DataMigrationCreateTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The property describes the create time of the data migration.",
		//	  "maxLength": 40,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"data_migration_create_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The property describes the create time of the data migration.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DataMigrationIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The property describes an ARN of the data migration.",
		//	  "maxLength": 300,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"data_migration_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The property describes an ARN of the data migration.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 300),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// DataMigrationIdentifier is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: DataMigrationName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The property describes a name to identify the data migration.",
		//	  "maxLength": 300,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"data_migration_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The property describes a name to identify the data migration.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 300),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DataMigrationSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The property describes the settings for the data migration.",
		//	  "properties": {
		//	    "CloudwatchLogsEnabled": {
		//	      "description": "The property specifies whether to enable the CloudWatch log.",
		//	      "type": "boolean"
		//	    },
		//	    "NumberOfJobs": {
		//	      "description": "The number of parallel jobs that trigger parallel threads to unload the tables from the source, and then load them to the target.",
		//	      "maximum": 50,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "SelectionRules": {
		//	      "description": "The property specifies the rules of selecting objects for data migration.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"data_migration_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CloudwatchLogsEnabled
				"cloudwatch_logs_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "The property specifies whether to enable the CloudWatch log.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: NumberOfJobs
				"number_of_jobs": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The number of parallel jobs that trigger parallel threads to unload the tables from the source, and then load them to the target.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.Between(1, 50),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SelectionRules
				"selection_rules": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The property specifies the rules of selecting objects for data migration.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The property describes the settings for the data migration.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DataMigrationType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The property describes the type of migration.",
		//	  "enum": [
		//	    "full-load",
		//	    "cdc",
		//	    "full-load-and-cdc"
		//	  ],
		//	  "type": "string"
		//	}
		"data_migration_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The property describes the type of migration.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"full-load",
					"cdc",
					"full-load-and-cdc",
				),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: MigrationProjectIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The property describes an identifier for the migration project. It is used for describing/deleting/modifying can be name/arn",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"migration_project_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The property describes an identifier for the migration project. It is used for describing/deleting/modifying can be name/arn",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: ServiceAccessRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The property describes Amazon Resource Name (ARN) of the service access role.",
		//	  "maxLength": 300,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"service_access_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The property describes Amazon Resource Name (ARN) of the service access role.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 300),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: SourceDataSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The property describes the settings for the data migration.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "CDCStartPosition": {
		//	        "description": "The property is a point in the database engine's log that defines a time where you can begin CDC.",
		//	        "maxLength": 40,
		//	        "type": "string"
		//	      },
		//	      "CDCStartTime": {
		//	        "description": "The property indicates the start time for a change data capture (CDC) operation. The value is server time in UTC format.",
		//	        "maxLength": 40,
		//	        "type": "string"
		//	      },
		//	      "CDCStopTime": {
		//	        "description": "The property indicates the stop time for a change data capture (CDC) operation. The value is server time in UTC format.",
		//	        "maxLength": 40,
		//	        "type": "string"
		//	      },
		//	      "SlotName": {
		//	        "description": "The property sets the name of a previously created logical replication slot for a change data capture (CDC) load of the source instance.",
		//	        "maxLength": 255,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"source_data_settings": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: CDCStartPosition
					"cdc_start_position": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The property is a point in the database engine's log that defines a time where you can begin CDC.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthAtMost(40),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: CDCStartTime
					"cdc_start_time": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The property indicates the start time for a change data capture (CDC) operation. The value is server time in UTC format.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthAtMost(40),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: CDCStopTime
					"cdc_stop_time": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The property indicates the stop time for a change data capture (CDC) operation. The value is server time in UTC format.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthAtMost(40),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: SlotName
					"slot_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The property sets the name of a previously created logical replication slot for a change data capture (CDC) load of the source instance.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthAtMost(255),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The property describes the settings for the data migration.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 256),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource schema for AWS::DMS::DataMigration.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DMS::DataMigration").WithTerraformTypeName("awscc_dms_data_migration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"cdc_start_position":           "CDCStartPosition",
		"cdc_start_time":               "CDCStartTime",
		"cdc_stop_time":                "CDCStopTime",
		"cloudwatch_logs_enabled":      "CloudwatchLogsEnabled",
		"data_migration_arn":           "DataMigrationArn",
		"data_migration_create_time":   "DataMigrationCreateTime",
		"data_migration_identifier":    "DataMigrationIdentifier",
		"data_migration_name":          "DataMigrationName",
		"data_migration_settings":      "DataMigrationSettings",
		"data_migration_type":          "DataMigrationType",
		"key":                          "Key",
		"migration_project_identifier": "MigrationProjectIdentifier",
		"number_of_jobs":               "NumberOfJobs",
		"selection_rules":              "SelectionRules",
		"service_access_role_arn":      "ServiceAccessRoleArn",
		"slot_name":                    "SlotName",
		"source_data_settings":         "SourceDataSettings",
		"tags":                         "Tags",
		"value":                        "Value",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/DataMigrationIdentifier",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
