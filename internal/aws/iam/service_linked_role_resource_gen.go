// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package iam

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_iam_service_linked_role", serviceLinkedRoleResource)
}

// serviceLinkedRoleResource returns the Terraform awscc_iam_service_linked_role resource.
// This Terraform resource corresponds to the CloudFormation AWS::IAM::ServiceLinkedRole resource.
func serviceLinkedRoleResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AWSServiceName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The service principal for the AWS service to which this role is attached.",
		//	  "type": "string"
		//	}
		"aws_service_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The service principal for the AWS service to which this role is attached.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// AWSServiceName is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: CustomSuffix
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A string that you provide, which is combined with the service-provided prefix to form the complete role name.",
		//	  "type": "string"
		//	}
		"custom_suffix": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A string that you provide, which is combined with the service-provided prefix to form the complete role name.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// CustomSuffix is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the role.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the role.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RoleName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the role.",
		//	  "type": "string"
		//	}
		"role_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the role.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::IAM::ServiceLinkedRole",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IAM::ServiceLinkedRole").WithTerraformTypeName("awscc_iam_service_linked_role")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "role_name",
			Description:       "The name of the role",
			RequiredForImport: true,
		})

	opts = opts.IsGlobalResourceType(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"aws_service_name": "AWSServiceName",
		"custom_suffix":    "CustomSuffix",
		"description":      "Description",
		"role_name":        "RoleName",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/CustomSuffix",
		"/properties/AWSServiceName",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
