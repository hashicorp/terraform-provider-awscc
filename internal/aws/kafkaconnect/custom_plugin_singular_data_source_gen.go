// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package kafkaconnect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_kafkaconnect_custom_plugin", customPluginDataSource)
}

// customPluginDataSource returns the Terraform awscc_kafkaconnect_custom_plugin data source.
// This Terraform data source corresponds to the CloudFormation AWS::KafkaConnect::CustomPlugin resource.
func customPluginDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ContentType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the plugin file.",
		//	  "enum": [
		//	    "JAR",
		//	    "ZIP"
		//	  ],
		//	  "type": "string"
		//	}
		"content_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the plugin file.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CustomPluginArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the custom plugin to use.",
		//	  "pattern": "arn:(aws|aws-us-gov|aws-cn):kafkaconnect:.*",
		//	  "type": "string"
		//	}
		"custom_plugin_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the custom plugin to use.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A summary description of the custom plugin.",
		//	  "maxLength": 1024,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A summary description of the custom plugin.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FileDescription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Details about the custom plugin file.",
		//	  "properties": {
		//	    "FileMd5": {
		//	      "description": "The hex-encoded MD5 checksum of the custom plugin file. You can use it to validate the file.",
		//	      "type": "string"
		//	    },
		//	    "FileSize": {
		//	      "description": "The size in bytes of the custom plugin file. You can use it to validate the file.",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"file_description": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: FileMd5
				"file_md_5": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The hex-encoded MD5 checksum of the custom plugin file. You can use it to validate the file.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: FileSize
				"file_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The size in bytes of the custom plugin file. You can use it to validate the file.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Details about the custom plugin file.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Location
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Information about the location of a custom plugin.",
		//	  "properties": {
		//	    "S3Location": {
		//	      "additionalProperties": false,
		//	      "description": "The S3 bucket Amazon Resource Name (ARN), file key, and object version of the plugin file stored in Amazon S3.",
		//	      "properties": {
		//	        "BucketArn": {
		//	          "description": "The Amazon Resource Name (ARN) of an S3 bucket.",
		//	          "type": "string"
		//	        },
		//	        "FileKey": {
		//	          "description": "The file key for an object in an S3 bucket.",
		//	          "type": "string"
		//	        },
		//	        "ObjectVersion": {
		//	          "description": "The version of an object in an S3 bucket.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketArn",
		//	        "FileKey"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "S3Location"
		//	  ],
		//	  "type": "object"
		//	}
		"location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: S3Location
				"s3_location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketArn
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) of an S3 bucket.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: FileKey
						"file_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The file key for an object in an S3 bucket.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ObjectVersion
						"object_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The version of an object in an S3 bucket.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The S3 bucket Amazon Resource Name (ARN), file key, and object version of the plugin file stored in Amazon S3.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Information about the location of a custom plugin.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the custom plugin.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the custom plugin.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Revision
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The revision of the custom plugin.",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"revision": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The revision of the custom plugin.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::KafkaConnect::CustomPlugin",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::KafkaConnect::CustomPlugin").WithTerraformTypeName("awscc_kafkaconnect_custom_plugin")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"bucket_arn":        "BucketArn",
		"content_type":      "ContentType",
		"custom_plugin_arn": "CustomPluginArn",
		"description":       "Description",
		"file_description":  "FileDescription",
		"file_key":          "FileKey",
		"file_md_5":         "FileMd5",
		"file_size":         "FileSize",
		"key":               "Key",
		"location":          "Location",
		"name":              "Name",
		"object_version":    "ObjectVersion",
		"revision":          "Revision",
		"s3_location":       "S3Location",
		"tags":              "Tags",
		"value":             "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
