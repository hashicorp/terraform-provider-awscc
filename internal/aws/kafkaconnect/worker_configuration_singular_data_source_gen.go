// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package kafkaconnect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_kafkaconnect_worker_configuration", workerConfigurationDataSource)
}

// workerConfigurationDataSource returns the Terraform awscc_kafkaconnect_worker_configuration data source.
// This Terraform data source corresponds to the CloudFormation AWS::KafkaConnect::WorkerConfiguration resource.
func workerConfigurationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A summary description of the worker configuration.",
		//	  "maxLength": 1024,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A summary description of the worker configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the worker configuration.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the worker configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PropertiesFileContent
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Base64 encoded contents of connect-distributed.properties file.",
		//	  "type": "string"
		//	}
		"properties_file_content": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Base64 encoded contents of connect-distributed.properties file.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Revision
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of a revision of the worker configuration.",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"revision": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The description of a revision of the worker configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A collection of tags associated with a resource",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A collection of tags associated with a resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: WorkerConfigurationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the custom configuration.",
		//	  "pattern": "arn:(aws|aws-us-gov|aws-cn):kafkaconnect:.*",
		//	  "type": "string"
		//	}
		"worker_configuration_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the custom configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::KafkaConnect::WorkerConfiguration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::KafkaConnect::WorkerConfiguration").WithTerraformTypeName("awscc_kafkaconnect_worker_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"description":              "Description",
		"key":                      "Key",
		"name":                     "Name",
		"properties_file_content":  "PropertiesFileContent",
		"revision":                 "Revision",
		"tags":                     "Tags",
		"value":                    "Value",
		"worker_configuration_arn": "WorkerConfigurationArn",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
