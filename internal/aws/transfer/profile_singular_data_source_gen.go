// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package transfer

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_transfer_profile", profileDataSource)
}

// profileDataSource returns the Terraform awscc_transfer_profile data source.
// This Terraform data source corresponds to the CloudFormation AWS::Transfer::Profile resource.
func profileDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the unique Amazon Resource Name (ARN) for the profile.",
		//	  "maxLength": 1600,
		//	  "minLength": 20,
		//	  "pattern": "arn:.*",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the unique Amazon Resource Name (ARN) for the profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: As2Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "AS2 identifier agreed with a trading partner.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"as_2_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "AS2 identifier agreed with a trading partner.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CertificateIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of the certificate IDs associated with this profile to be used for encryption and signing of AS2 messages.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "A unique identifier for the certificate.",
		//	    "maxLength": 22,
		//	    "minLength": 22,
		//	    "pattern": "^cert-([0-9a-f]{17})$",
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"certificate_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "List of the certificate IDs associated with this profile to be used for encryption and signing of AS2 messages.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProfileId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique identifier for the profile",
		//	  "maxLength": 19,
		//	  "minLength": 19,
		//	  "pattern": "^p-([0-9a-f]{17})$",
		//	  "type": "string"
		//	}
		"profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique identifier for the profile",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProfileType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Enum specifying whether the profile is local or associated with a trading partner.",
		//	  "enum": [
		//	    "LOCAL",
		//	    "PARTNER"
		//	  ],
		//	  "type": "string"
		//	}
		"profile_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Enum specifying whether the profile is local or associated with a trading partner.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Creates a key-value pair for a specific resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The name assigned to the tag that you create.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "Contains one or more values that you assigned to the key name you create.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name assigned to the tag that you create.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Contains one or more values that you assigned to the key name you create.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Transfer::Profile",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Transfer::Profile").WithTerraformTypeName("awscc_transfer_profile")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":             "Arn",
		"as_2_id":         "As2Id",
		"certificate_ids": "CertificateIds",
		"key":             "Key",
		"profile_id":      "ProfileId",
		"profile_type":    "ProfileType",
		"tags":            "Tags",
		"value":           "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
