// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package transfer

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_transfer_agreement", agreementResource)
}

// agreementResource returns the Terraform awscc_transfer_agreement resource.
// This Terraform resource corresponds to the CloudFormation AWS::Transfer::Agreement resource.
func agreementResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccessRole
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the access role for the agreement.",
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "pattern": "arn:.*role/.*",
		//	  "type": "string"
		//	}
		"access_role": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the access role for the agreement.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(20, 2048),
				stringvalidator.RegexMatches(regexp.MustCompile("arn:.*role/.*"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: AgreementId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique identifier for the agreement.",
		//	  "maxLength": 19,
		//	  "minLength": 19,
		//	  "pattern": "^a-([0-9a-f]{17})$",
		//	  "type": "string"
		//	}
		"agreement_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique identifier for the agreement.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the unique Amazon Resource Name (ARN) for the agreement.",
		//	  "maxLength": 1600,
		//	  "minLength": 20,
		//	  "pattern": "arn:.*",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the unique Amazon Resource Name (ARN) for the agreement.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: BaseDirectory
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the base directory for the agreement.",
		//	  "maxLength": 1024,
		//	  "pattern": "^(|/.*)$",
		//	  "type": "string"
		//	}
		"base_directory": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the base directory for the agreement.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(1024),
				stringvalidator.RegexMatches(regexp.MustCompile("^(|/.*)$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CustomDirectories
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Specifies a separate directory for each type of file to store for an AS2 message.",
		//	  "properties": {
		//	    "FailedFilesDirectory": {
		//	      "description": "Specifies a location to store the failed files for an AS2 message.",
		//	      "pattern": "(|/.*)",
		//	      "type": "string"
		//	    },
		//	    "MdnFilesDirectory": {
		//	      "description": "Specifies a location to store the MDN file for an AS2 message.",
		//	      "pattern": "(|/.*)",
		//	      "type": "string"
		//	    },
		//	    "PayloadFilesDirectory": {
		//	      "description": "Specifies a location to store the payload file for an AS2 message.",
		//	      "pattern": "(|/.*)",
		//	      "type": "string"
		//	    },
		//	    "StatusFilesDirectory": {
		//	      "description": "Specifies a location to store the status file for an AS2 message.",
		//	      "pattern": "(|/.*)",
		//	      "type": "string"
		//	    },
		//	    "TemporaryFilesDirectory": {
		//	      "description": "Specifies a location to store the temporary processing file for an AS2 message.",
		//	      "pattern": "(|/.*)",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "FailedFilesDirectory",
		//	    "MdnFilesDirectory",
		//	    "PayloadFilesDirectory",
		//	    "StatusFilesDirectory",
		//	    "TemporaryFilesDirectory"
		//	  ],
		//	  "type": "object"
		//	}
		"custom_directories": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: FailedFilesDirectory
				"failed_files_directory": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies a location to store the failed files for an AS2 message.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.RegexMatches(regexp.MustCompile("(|/.*)"), ""),
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: MdnFilesDirectory
				"mdn_files_directory": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies a location to store the MDN file for an AS2 message.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.RegexMatches(regexp.MustCompile("(|/.*)"), ""),
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: PayloadFilesDirectory
				"payload_files_directory": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies a location to store the payload file for an AS2 message.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.RegexMatches(regexp.MustCompile("(|/.*)"), ""),
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: StatusFilesDirectory
				"status_files_directory": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies a location to store the status file for an AS2 message.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.RegexMatches(regexp.MustCompile("(|/.*)"), ""),
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TemporaryFilesDirectory
				"temporary_files_directory": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies a location to store the temporary processing file for an AS2 message.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.RegexMatches(regexp.MustCompile("(|/.*)"), ""),
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Specifies a separate directory for each type of file to store for an AS2 message.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A textual description for the agreement.",
		//	  "maxLength": 200,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A textual description for the agreement.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 200),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EnforceMessageSigning
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies whether to enforce an AS2 message is signed for this agreement.",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"enforce_message_signing": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies whether to enforce an AS2 message is signed for this agreement.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"ENABLED",
					"DISABLED",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LocalProfileId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique identifier for the local profile.",
		//	  "maxLength": 19,
		//	  "minLength": 19,
		//	  "pattern": "^p-([0-9a-f]{17})$",
		//	  "type": "string"
		//	}
		"local_profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique identifier for the local profile.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(19, 19),
				stringvalidator.RegexMatches(regexp.MustCompile("^p-([0-9a-f]{17})$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: PartnerProfileId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique identifier for the partner profile.",
		//	  "maxLength": 19,
		//	  "minLength": 19,
		//	  "pattern": "^p-([0-9a-f]{17})$",
		//	  "type": "string"
		//	}
		"partner_profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique identifier for the partner profile.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(19, 19),
				stringvalidator.RegexMatches(regexp.MustCompile("^p-([0-9a-f]{17})$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: PreserveFilename
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies whether to preserve the filename received for this agreement.",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"preserve_filename": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies whether to preserve the filename received for this agreement.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"ENABLED",
					"DISABLED",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServerId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique identifier for the server.",
		//	  "maxLength": 19,
		//	  "minLength": 19,
		//	  "pattern": "^s-([0-9a-f]{17})$",
		//	  "type": "string"
		//	}
		"server_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique identifier for the server.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(19, 19),
				stringvalidator.RegexMatches(regexp.MustCompile("^s-([0-9a-f]{17})$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the status of the agreement.",
		//	  "enum": [
		//	    "ACTIVE",
		//	    "INACTIVE"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the status of the agreement.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"ACTIVE",
					"INACTIVE",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Creates a key-value pair for a specific resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The name assigned to the tag that you create.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "Contains one or more values that you assigned to the key name you create.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name assigned to the tag that you create.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Contains one or more values that you assigned to the key name you create.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 256),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Key-value pairs that can be used to group and search for agreements. Tags are metadata attached to agreements for any purpose.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::Transfer::Agreement",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Transfer::Agreement").WithTerraformTypeName("awscc_transfer_agreement")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "agreement_id",
			Description:       "A unique identifier for the agreement",
			RequiredForImport: true,
		},
		identity.Identifier{
			Name:              "server_id",
			Description:       "A unique identifier for the server",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"access_role":               "AccessRole",
		"agreement_id":              "AgreementId",
		"arn":                       "Arn",
		"base_directory":            "BaseDirectory",
		"custom_directories":        "CustomDirectories",
		"description":               "Description",
		"enforce_message_signing":   "EnforceMessageSigning",
		"failed_files_directory":    "FailedFilesDirectory",
		"key":                       "Key",
		"local_profile_id":          "LocalProfileId",
		"mdn_files_directory":       "MdnFilesDirectory",
		"partner_profile_id":        "PartnerProfileId",
		"payload_files_directory":   "PayloadFilesDirectory",
		"preserve_filename":         "PreserveFilename",
		"server_id":                 "ServerId",
		"status":                    "Status",
		"status_files_directory":    "StatusFilesDirectory",
		"tags":                      "Tags",
		"temporary_files_directory": "TemporaryFilesDirectory",
		"value":                     "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
