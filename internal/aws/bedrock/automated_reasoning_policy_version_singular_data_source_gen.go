// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package bedrock

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_bedrock_automated_reasoning_policy_version", automatedReasoningPolicyVersionDataSource)
}

// automatedReasoningPolicyVersionDataSource returns the Terraform awscc_bedrock_automated_reasoning_policy_version data source.
// This Terraform data source corresponds to the CloudFormation AWS::Bedrock::AutomatedReasoningPolicyVersion resource.
func automatedReasoningPolicyVersionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Time this policy version was created",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Time this policy version was created",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DefinitionHash
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The hash for this version",
		//	  "maxLength": 128,
		//	  "minLength": 128,
		//	  "pattern": "^[0-9a-z]{128}$",
		//	  "type": "string"
		//	}
		"definition_hash": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The hash for this version",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description inherited from the policy",
		//	  "maxLength": 1024,
		//	  "pattern": "^[\\s\\S]+$",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description inherited from the policy",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastUpdatedDefinitionHash
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The hash for this version",
		//	  "maxLength": 128,
		//	  "minLength": 128,
		//	  "pattern": "^[0-9a-z]{128}$",
		//	  "type": "string"
		//	}
		"last_updated_definition_hash": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The hash for this version",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name inherited from the policy",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^[0-9a-zA-Z-_ ]+$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name inherited from the policy",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Arn of the policy ",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:automated-reasoning-policy\\/[a-z0-9]{12}$",
		//	  "type": "string"
		//	}
		"policy_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Arn of the policy ",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The id of the associated policy",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "pattern": "^[a-z0-9]{12}$",
		//	  "type": "string"
		//	}
		"policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The id of the associated policy",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Definition of the key/value pair for a tag",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "Tag Key",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "Tag Value",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Tag Key",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Tag Value",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Time this policy was last updated",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Time this policy was last updated",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Version
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The version of the policy",
		//	  "maxLength": 12,
		//	  "pattern": "^([1-9][0-9]{0,11})$",
		//	  "type": "string"
		//	}
		"version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The version of the policy",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Bedrock::AutomatedReasoningPolicyVersion",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Bedrock::AutomatedReasoningPolicyVersion").WithTerraformTypeName("awscc_bedrock_automated_reasoning_policy_version")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"created_at":                   "CreatedAt",
		"definition_hash":              "DefinitionHash",
		"description":                  "Description",
		"key":                          "Key",
		"last_updated_definition_hash": "LastUpdatedDefinitionHash",
		"name":                         "Name",
		"policy_arn":                   "PolicyArn",
		"policy_id":                    "PolicyId",
		"tags":                         "Tags",
		"updated_at":                   "UpdatedAt",
		"value":                        "Value",
		"version":                      "Version",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
