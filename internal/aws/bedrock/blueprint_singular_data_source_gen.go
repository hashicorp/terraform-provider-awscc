// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package bedrock

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_bedrock_blueprint", blueprintDataSource)
}

// blueprintDataSource returns the Terraform awscc_bedrock_blueprint data source.
// This Terraform data source corresponds to the CloudFormation AWS::Bedrock::Blueprint resource.
func blueprintDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: BlueprintArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN of a Blueprint",
		//	  "maxLength": 128,
		//	  "pattern": "^arn:aws(|-cn|-us-gov):bedrock:[a-zA-Z0-9-]*:(aws|[0-9]{12}):blueprint/(bedrock-data-automation-public-[a-zA-Z0-9-_]{1,30}|[a-zA-Z0-9-]{12,36})$",
		//	  "type": "string"
		//	}
		"blueprint_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN of a Blueprint",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: BlueprintName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of the Blueprint",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9-_]+$",
		//	  "type": "string"
		//	}
		"blueprint_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of the Blueprint",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: BlueprintStage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Stage of the Blueprint",
		//	  "enum": [
		//	    "DEVELOPMENT",
		//	    "LIVE"
		//	  ],
		//	  "type": "string"
		//	}
		"blueprint_stage": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Stage of the Blueprint",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Creation timestamp",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Creation timestamp",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KmsEncryptionContext
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "KMS encryption context",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"kms_encryption_context": // Pattern: ""
		schema.MapAttribute{      /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "KMS encryption context",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KmsKeyId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "KMS key identifier",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "KMS key identifier",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastModifiedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Last modified timestamp",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"last_modified_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Last modified timestamp",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Schema
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Schema of the blueprint",
		//	  "type": "object"
		//	}
		"schema": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  jsontypes.NormalizedType{},
			Description: "Schema of the blueprint",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of Tags",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Definition of the key/value pair for a tag",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "Key for the tag",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "Value for the tag",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Key for the tag",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Value for the tag",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of Tags",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Modality Type",
		//	  "enum": [
		//	    "DOCUMENT",
		//	    "IMAGE",
		//	    "AUDIO",
		//	    "VIDEO"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Modality Type",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Bedrock::Blueprint",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Bedrock::Blueprint").WithTerraformTypeName("awscc_bedrock_blueprint")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"blueprint_arn":          "BlueprintArn",
		"blueprint_name":         "BlueprintName",
		"blueprint_stage":        "BlueprintStage",
		"creation_time":          "CreationTime",
		"key":                    "Key",
		"kms_encryption_context": "KmsEncryptionContext",
		"kms_key_id":             "KmsKeyId",
		"last_modified_time":     "LastModifiedTime",
		"schema":                 "Schema",
		"tags":                   "Tags",
		"type":                   "Type",
		"value":                  "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
