// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package bedrock

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_bedrock_agent_alias", agentAliasDataSource)
}

// agentAliasDataSource returns the Terraform awscc_bedrock_agent_alias data source.
// This Terraform data source corresponds to the CloudFormation AWS::Bedrock::AgentAlias resource.
func agentAliasDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AgentAliasArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Arn representation of the Agent Alias.",
		//	  "maxLength": 2048,
		//	  "pattern": "^arn:aws(|-cn|-us-gov):bedrock:[a-z0-9-]{1,20}:[0-9]{12}:agent-alias/[0-9a-zA-Z]{10}/[0-9a-zA-Z]{10}$",
		//	  "type": "string"
		//	}
		"agent_alias_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Arn representation of the Agent Alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AgentAliasHistoryEvents
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The list of history events for an alias for an Agent.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "History event for an alias for an Agent.",
		//	    "properties": {
		//	      "EndDate": {
		//	        "description": "Time Stamp.",
		//	        "type": "string"
		//	      },
		//	      "RoutingConfiguration": {
		//	        "description": "Routing configuration for an Agent alias.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Details about the routing configuration for an Agent alias.",
		//	          "properties": {
		//	            "AgentVersion": {
		//	              "description": "Agent Version.",
		//	              "maxLength": 5,
		//	              "minLength": 1,
		//	              "pattern": "^(DRAFT|[0-9]{0,4}[1-9][0-9]{0,4})$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "AgentVersion"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "maxItems": 1,
		//	        "type": "array"
		//	      },
		//	      "StartDate": {
		//	        "description": "Time Stamp.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 10,
		//	  "type": "array"
		//	}
		"agent_alias_history_events": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: EndDate
					"end_date": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Time Stamp.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: RoutingConfiguration
					"routing_configuration": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AgentVersion
								"agent_version": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Agent Version.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "Routing configuration for an Agent alias.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: StartDate
					"start_date": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Time Stamp.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The list of history events for an alias for an Agent.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AgentAliasId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Id for an Agent Alias generated at the server side.",
		//	  "maxLength": 10,
		//	  "minLength": 10,
		//	  "pattern": "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$",
		//	  "type": "string"
		//	}
		"agent_alias_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Id for an Agent Alias generated at the server side.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AgentAliasName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name for a resource.",
		//	  "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
		//	  "type": "string"
		//	}
		"agent_alias_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name for a resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AgentAliasStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The statuses an Agent Alias can be in.",
		//	  "enum": [
		//	    "CREATING",
		//	    "PREPARED",
		//	    "FAILED",
		//	    "UPDATING",
		//	    "DELETING"
		//	  ],
		//	  "type": "string"
		//	}
		"agent_alias_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The statuses an Agent Alias can be in.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AgentId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Identifier for a resource.",
		//	  "pattern": "^[0-9a-zA-Z]{10}$",
		//	  "type": "string"
		//	}
		"agent_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Identifier for a resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Time Stamp.",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Time Stamp.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of the Resource.",
		//	  "maxLength": 200,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of the Resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoutingConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Routing configuration for an Agent alias.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Details about the routing configuration for an Agent alias.",
		//	    "properties": {
		//	      "AgentVersion": {
		//	        "description": "Agent Version.",
		//	        "maxLength": 5,
		//	        "minLength": 1,
		//	        "pattern": "^(DRAFT|[0-9]{0,4}[1-9][0-9]{0,4})$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "AgentVersion"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 1,
		//	  "type": "array"
		//	}
		"routing_configuration": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AgentVersion
					"agent_version": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Agent Version.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Routing configuration for an Agent alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A map of tag keys and values",
		//	  "patternProperties": {
		//	    "": {
		//	      "description": "Value of a tag",
		//	      "maxLength": 256,
		//	      "minLength": 0,
		//	      "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A map of tag keys and values",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Time Stamp.",
		//	  "type": "string"
		//	}
		"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Time Stamp.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Bedrock::AgentAlias",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Bedrock::AgentAlias").WithTerraformTypeName("awscc_bedrock_agent_alias")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"agent_alias_arn":            "AgentAliasArn",
		"agent_alias_history_events": "AgentAliasHistoryEvents",
		"agent_alias_id":             "AgentAliasId",
		"agent_alias_name":           "AgentAliasName",
		"agent_alias_status":         "AgentAliasStatus",
		"agent_id":                   "AgentId",
		"agent_version":              "AgentVersion",
		"created_at":                 "CreatedAt",
		"description":                "Description",
		"end_date":                   "EndDate",
		"routing_configuration":      "RoutingConfiguration",
		"start_date":                 "StartDate",
		"tags":                       "Tags",
		"updated_at":                 "UpdatedAt",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
