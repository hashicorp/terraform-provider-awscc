// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package bedrock

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_bedrock_flow_version", flowVersionResource)
}

// flowVersionResource returns the Terraform awscc_bedrock_flow_version resource.
// This Terraform resource corresponds to the CloudFormation AWS::Bedrock::FlowVersion resource.
func flowVersionResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Time Stamp.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Time Stamp.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CustomerEncryptionKeyArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A KMS key ARN",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$",
		//	  "type": "string"
		//	}
		"customer_encryption_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A KMS key ARN",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Definition
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Flow definition",
		//	  "properties": {
		//	    "Connections": {
		//	      "description": "List of connections",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Flow connection",
		//	        "properties": {
		//	          "Configuration": {
		//	            "description": "Connection configuration",
		//	            "properties": {
		//	              "Conditional": {
		//	                "additionalProperties": false,
		//	                "description": "Conditional connection configuration",
		//	                "properties": {
		//	                  "Condition": {
		//	                    "description": "Name of a condition in a flow",
		//	                    "pattern": "^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Condition"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Data": {
		//	                "additionalProperties": false,
		//	                "description": "Data connection configuration",
		//	                "properties": {
		//	                  "SourceOutput": {
		//	                    "description": "Name of a node output in a flow",
		//	                    "pattern": "^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$",
		//	                    "type": "string"
		//	                  },
		//	                  "TargetInput": {
		//	                    "description": "Name of a node input in a flow",
		//	                    "pattern": "^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "SourceOutput",
		//	                  "TargetInput"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Name": {
		//	            "description": "Name of a connection in a flow",
		//	            "pattern": "^[a-zA-Z]([_]?[0-9a-zA-Z]){1,100}$",
		//	            "type": "string"
		//	          },
		//	          "Source": {
		//	            "description": "Name of a node in a flow",
		//	            "pattern": "^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$",
		//	            "type": "string"
		//	          },
		//	          "Target": {
		//	            "description": "Name of a node in a flow",
		//	            "pattern": "^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$",
		//	            "type": "string"
		//	          },
		//	          "Type": {
		//	            "description": "Connection type",
		//	            "enum": [
		//	              "Data",
		//	              "Conditional"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name",
		//	          "Source",
		//	          "Target",
		//	          "Type"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 20,
		//	      "type": "array"
		//	    },
		//	    "Nodes": {
		//	      "description": "List of nodes in a flow",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Internal mixin for flow node",
		//	        "properties": {
		//	          "Configuration": {
		//	            "description": "Node configuration in a flow",
		//	            "properties": {
		//	              "Agent": {
		//	                "additionalProperties": false,
		//	                "description": "Agent flow node configuration",
		//	                "properties": {
		//	                  "AgentAliasArn": {
		//	                    "description": "Arn representation of the Agent Alias.",
		//	                    "maxLength": 2048,
		//	                    "pattern": "^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:agent-alias/[0-9a-zA-Z]{10}/[0-9a-zA-Z]{10}$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "AgentAliasArn"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Collector": {
		//	                "additionalProperties": false,
		//	                "description": "Collector flow node configuration",
		//	                "type": "object"
		//	              },
		//	              "Condition": {
		//	                "additionalProperties": false,
		//	                "description": "Condition flow node configuration",
		//	                "properties": {
		//	                  "Conditions": {
		//	                    "description": "List of conditions in a condition node",
		//	                    "insertionOrder": true,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "description": "Condition branch for a condition node",
		//	                      "properties": {
		//	                        "Expression": {
		//	                          "description": "Expression for a condition in a flow",
		//	                          "maxLength": 64,
		//	                          "minLength": 1,
		//	                          "type": "string"
		//	                        },
		//	                        "Name": {
		//	                          "description": "Name of a condition in a flow",
		//	                          "pattern": "^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Name"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "maxItems": 5,
		//	                    "minItems": 1,
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Conditions"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Input": {
		//	                "additionalProperties": false,
		//	                "description": "Input flow node configuration",
		//	                "type": "object"
		//	              },
		//	              "Iterator": {
		//	                "additionalProperties": false,
		//	                "description": "Iterator flow node configuration",
		//	                "type": "object"
		//	              },
		//	              "KnowledgeBase": {
		//	                "additionalProperties": false,
		//	                "description": "Knowledge base flow node configuration",
		//	                "properties": {
		//	                  "GuardrailConfiguration": {
		//	                    "additionalProperties": false,
		//	                    "description": "Configuration for a guardrail",
		//	                    "properties": {
		//	                      "GuardrailIdentifier": {
		//	                        "description": "Identifier for the guardrail, could be the id or the arn",
		//	                        "maxLength": 2048,
		//	                        "pattern": "^(([a-z0-9]+)|(arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:guardrail/[a-z0-9]+))$",
		//	                        "type": "string"
		//	                      },
		//	                      "GuardrailVersion": {
		//	                        "description": "Version of the guardrail",
		//	                        "pattern": "^(([0-9]{1,8})|(DRAFT))$",
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "KnowledgeBaseId": {
		//	                    "description": "Identifier of the KnowledgeBase",
		//	                    "maxLength": 10,
		//	                    "pattern": "^[0-9a-zA-Z]+$",
		//	                    "type": "string"
		//	                  },
		//	                  "ModelId": {
		//	                    "description": "ARN or Id of a Bedrock Foundational Model or Inference Profile, or the ARN of a imported model, or a provisioned throughput ARN for custom models.",
		//	                    "maxLength": 2048,
		//	                    "minLength": 1,
		//	                    "pattern": "^(arn:aws(-[^:]{1,12})?:(bedrock|sagemaker):[a-z0-9-]{1,20}:([0-9]{12})?:([a-z-]+/)?)?([a-zA-Z0-9.-]{1,63}){0,2}(([:][a-z0-9-]{1,63}){0,2})?(/[a-z0-9]{1,12})?$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "KnowledgeBaseId"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "LambdaFunction": {
		//	                "additionalProperties": false,
		//	                "description": "Lambda function flow node configuration",
		//	                "properties": {
		//	                  "LambdaArn": {
		//	                    "description": "ARN of a Lambda.",
		//	                    "maxLength": 2048,
		//	                    "pattern": "^arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-_\\.]+(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "LambdaArn"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Lex": {
		//	                "additionalProperties": false,
		//	                "description": "Lex flow node configuration",
		//	                "properties": {
		//	                  "BotAliasArn": {
		//	                    "description": "ARN of a Lex bot alias",
		//	                    "maxLength": 78,
		//	                    "pattern": "^arn:aws(|-us-gov):lex:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:bot-alias/[0-9a-zA-Z]+/[0-9a-zA-Z]+$",
		//	                    "type": "string"
		//	                  },
		//	                  "LocaleId": {
		//	                    "description": "Lex bot locale id",
		//	                    "maxLength": 10,
		//	                    "minLength": 1,
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "BotAliasArn",
		//	                  "LocaleId"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Output": {
		//	                "additionalProperties": false,
		//	                "description": "Output flow node configuration",
		//	                "type": "object"
		//	              },
		//	              "Prompt": {
		//	                "additionalProperties": false,
		//	                "description": "Prompt flow node configuration",
		//	                "properties": {
		//	                  "GuardrailConfiguration": {
		//	                    "additionalProperties": false,
		//	                    "description": "Configuration for a guardrail",
		//	                    "properties": {
		//	                      "GuardrailIdentifier": {
		//	                        "description": "Identifier for the guardrail, could be the id or the arn",
		//	                        "maxLength": 2048,
		//	                        "pattern": "^(([a-z0-9]+)|(arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:guardrail/[a-z0-9]+))$",
		//	                        "type": "string"
		//	                      },
		//	                      "GuardrailVersion": {
		//	                        "description": "Version of the guardrail",
		//	                        "pattern": "^(([0-9]{1,8})|(DRAFT))$",
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "SourceConfiguration": {
		//	                    "description": "Prompt source configuration for prompt node",
		//	                    "properties": {
		//	                      "Inline": {
		//	                        "additionalProperties": false,
		//	                        "description": "Inline prompt configuration for prompt node",
		//	                        "properties": {
		//	                          "InferenceConfiguration": {
		//	                            "description": "Model inference configuration",
		//	                            "properties": {
		//	                              "Text": {
		//	                                "additionalProperties": false,
		//	                                "description": "Prompt model inference configuration",
		//	                                "properties": {
		//	                                  "MaxTokens": {
		//	                                    "description": "Maximum length of output",
		//	                                    "maximum": 4096,
		//	                                    "minimum": 0,
		//	                                    "type": "number"
		//	                                  },
		//	                                  "StopSequences": {
		//	                                    "description": "List of stop sequences",
		//	                                    "insertionOrder": true,
		//	                                    "items": {
		//	                                      "type": "string"
		//	                                    },
		//	                                    "maxItems": 4,
		//	                                    "minItems": 0,
		//	                                    "type": "array"
		//	                                  },
		//	                                  "Temperature": {
		//	                                    "description": "Controls randomness, higher values increase diversity",
		//	                                    "maximum": 1,
		//	                                    "minimum": 0,
		//	                                    "type": "number"
		//	                                  },
		//	                                  "TopP": {
		//	                                    "description": "Cumulative probability cutoff for token selection",
		//	                                    "maximum": 1,
		//	                                    "minimum": 0,
		//	                                    "type": "number"
		//	                                  }
		//	                                },
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "type": "object"
		//	                          },
		//	                          "ModelId": {
		//	                            "description": "ARN or Id of a Bedrock Foundational Model or Inference Profile, or the ARN of a imported model, or a provisioned throughput ARN for custom models.",
		//	                            "maxLength": 2048,
		//	                            "minLength": 1,
		//	                            "pattern": "^(arn:aws(-[^:]{1,12})?:(bedrock|sagemaker):[a-z0-9-]{1,20}:([0-9]{12})?:([a-z-]+/)?)?([a-zA-Z0-9.-]{1,63}){0,2}(([:][a-z0-9-]{1,63}){0,2})?(/[a-z0-9]{1,12})?$",
		//	                            "type": "string"
		//	                          },
		//	                          "TemplateConfiguration": {
		//	                            "description": "Prompt template configuration",
		//	                            "properties": {
		//	                              "Text": {
		//	                                "additionalProperties": false,
		//	                                "description": "Configuration for text prompt template",
		//	                                "properties": {
		//	                                  "InputVariables": {
		//	                                    "description": "List of input variables",
		//	                                    "insertionOrder": true,
		//	                                    "items": {
		//	                                      "additionalProperties": false,
		//	                                      "description": "Input variable",
		//	                                      "properties": {
		//	                                        "Name": {
		//	                                          "description": "Name for an input variable",
		//	                                          "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
		//	                                          "type": "string"
		//	                                        }
		//	                                      },
		//	                                      "type": "object"
		//	                                    },
		//	                                    "maxItems": 5,
		//	                                    "minItems": 0,
		//	                                    "type": "array"
		//	                                  },
		//	                                  "Text": {
		//	                                    "description": "Prompt content for String prompt template",
		//	                                    "maxLength": 200000,
		//	                                    "minLength": 1,
		//	                                    "type": "string"
		//	                                  }
		//	                                },
		//	                                "required": [
		//	                                  "Text"
		//	                                ],
		//	                                "type": "object"
		//	                              }
		//	                            },
		//	                            "type": "object"
		//	                          },
		//	                          "TemplateType": {
		//	                            "description": "Prompt template type",
		//	                            "enum": [
		//	                              "TEXT"
		//	                            ],
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "ModelId",
		//	                          "TemplateConfiguration",
		//	                          "TemplateType"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "Resource": {
		//	                        "additionalProperties": false,
		//	                        "description": "Resource prompt configuration for prompt node",
		//	                        "properties": {
		//	                          "PromptArn": {
		//	                            "description": "ARN of a prompt resource possibly with a version",
		//	                            "pattern": "^(arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:prompt/[0-9a-zA-Z]{10}(?::[0-9]{1,5})?)$",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "PromptArn"
		//	                        ],
		//	                        "type": "object"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "SourceConfiguration"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Retrieval": {
		//	                "additionalProperties": false,
		//	                "description": "Retrieval flow node configuration",
		//	                "properties": {
		//	                  "ServiceConfiguration": {
		//	                    "description": "Retrieval service configuration for Retrieval node",
		//	                    "properties": {
		//	                      "S3": {
		//	                        "additionalProperties": false,
		//	                        "description": "s3 Retrieval configuration for Retrieval node",
		//	                        "properties": {
		//	                          "BucketName": {
		//	                            "description": "bucket name of an s3 that will be used for Retrieval flow node configuration",
		//	                            "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "BucketName"
		//	                        ],
		//	                        "type": "object"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "ServiceConfiguration"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Storage": {
		//	                "additionalProperties": false,
		//	                "description": "Storage flow node configuration",
		//	                "properties": {
		//	                  "ServiceConfiguration": {
		//	                    "description": "storage service configuration for storage node",
		//	                    "properties": {
		//	                      "S3": {
		//	                        "additionalProperties": false,
		//	                        "description": "s3 storage configuration for storage node",
		//	                        "properties": {
		//	                          "BucketName": {
		//	                            "description": "bucket name of an s3 that will be used for storage flow node configuration",
		//	                            "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "BucketName"
		//	                        ],
		//	                        "type": "object"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "ServiceConfiguration"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Inputs": {
		//	            "description": "List of node inputs in a flow",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "Input to a node in a flow",
		//	              "properties": {
		//	                "Expression": {
		//	                  "description": "Expression for a node input in a flow",
		//	                  "maxLength": 64,
		//	                  "minLength": 1,
		//	                  "type": "string"
		//	                },
		//	                "Name": {
		//	                  "description": "Name of a node input in a flow",
		//	                  "pattern": "^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$",
		//	                  "type": "string"
		//	                },
		//	                "Type": {
		//	                  "description": "Type of input/output for a node in a flow",
		//	                  "enum": [
		//	                    "String",
		//	                    "Number",
		//	                    "Boolean",
		//	                    "Object",
		//	                    "Array"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Expression",
		//	                "Name",
		//	                "Type"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "maxItems": 5,
		//	            "type": "array"
		//	          },
		//	          "Name": {
		//	            "description": "Name of a node in a flow",
		//	            "pattern": "^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$",
		//	            "type": "string"
		//	          },
		//	          "Outputs": {
		//	            "description": "List of node outputs in a flow",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "Output of a node in a flow",
		//	              "properties": {
		//	                "Name": {
		//	                  "description": "Name of a node output in a flow",
		//	                  "pattern": "^[a-zA-Z]([_]?[0-9a-zA-Z]){1,50}$",
		//	                  "type": "string"
		//	                },
		//	                "Type": {
		//	                  "description": "Type of input/output for a node in a flow",
		//	                  "enum": [
		//	                    "String",
		//	                    "Number",
		//	                    "Boolean",
		//	                    "Object",
		//	                    "Array"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Name",
		//	                "Type"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "maxItems": 5,
		//	            "type": "array"
		//	          },
		//	          "Type": {
		//	            "description": "Flow node types",
		//	            "enum": [
		//	              "Input",
		//	              "Output",
		//	              "KnowledgeBase",
		//	              "Condition",
		//	              "Lex",
		//	              "Prompt",
		//	              "LambdaFunction",
		//	              "Agent",
		//	              "Iterator",
		//	              "Collector",
		//	              "Storage",
		//	              "Retrieval"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name",
		//	          "Type"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 20,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"definition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Connections
				"connections": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Configuration
							"configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Conditional
									"conditional": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Condition
											"condition": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Name of a condition in a flow",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Conditional connection configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Data
									"data": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: SourceOutput
											"source_output": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Name of a node output in a flow",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: TargetInput
											"target_input": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Name of a node input in a flow",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Data connection configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Connection configuration",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Name of a connection in a flow",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Source
							"source": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Name of a node in a flow",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Target
							"target": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Name of a node in a flow",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Connection type",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "List of connections",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Nodes
				"nodes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Configuration
							"configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Agent
									"agent": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AgentAliasArn
											"agent_alias_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Arn representation of the Agent Alias.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Agent flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Collector
									"collector": schema.StringAttribute{ /*START ATTRIBUTE*/
										CustomType:  jsontypes.NormalizedType{},
										Description: "Collector flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Condition
									"condition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Conditions
											"conditions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Expression
														"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Expression for a condition in a flow",
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Name
														"name": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Name of a condition in a flow",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Description: "List of conditions in a condition node",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Condition flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Input
									"input": schema.StringAttribute{ /*START ATTRIBUTE*/
										CustomType:  jsontypes.NormalizedType{},
										Description: "Input flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Iterator
									"iterator": schema.StringAttribute{ /*START ATTRIBUTE*/
										CustomType:  jsontypes.NormalizedType{},
										Description: "Iterator flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: KnowledgeBase
									"knowledge_base": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: GuardrailConfiguration
											"guardrail_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: GuardrailIdentifier
													"guardrail_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "Identifier for the guardrail, could be the id or the arn",
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: GuardrailVersion
													"guardrail_version": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "Version of the guardrail",
														Computed:    true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "Configuration for a guardrail",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: KnowledgeBaseId
											"knowledge_base_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Identifier of the KnowledgeBase",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: ModelId
											"model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "ARN or Id of a Bedrock Foundational Model or Inference Profile, or the ARN of a imported model, or a provisioned throughput ARN for custom models.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Knowledge base flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: LambdaFunction
									"lambda_function": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: LambdaArn
											"lambda_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "ARN of a Lambda.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Lambda function flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Lex
									"lex": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BotAliasArn
											"bot_alias_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "ARN of a Lex bot alias",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: LocaleId
											"locale_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Lex bot locale id",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Lex flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Output
									"output": schema.StringAttribute{ /*START ATTRIBUTE*/
										CustomType:  jsontypes.NormalizedType{},
										Description: "Output flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Prompt
									"prompt": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: GuardrailConfiguration
											"guardrail_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: GuardrailIdentifier
													"guardrail_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "Identifier for the guardrail, could be the id or the arn",
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: GuardrailVersion
													"guardrail_version": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "Version of the guardrail",
														Computed:    true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "Configuration for a guardrail",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: SourceConfiguration
											"source_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Inline
													"inline": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: InferenceConfiguration
															"inference_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Text
																	"text": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: MaxTokens
																			"max_tokens": schema.Float64Attribute{ /*START ATTRIBUTE*/
																				Description: "Maximum length of output",
																				Computed:    true,
																			}, /*END ATTRIBUTE*/
																			// Property: StopSequences
																			"stop_sequences": schema.ListAttribute{ /*START ATTRIBUTE*/
																				ElementType: types.StringType,
																				Description: "List of stop sequences",
																				Computed:    true,
																			}, /*END ATTRIBUTE*/
																			// Property: Temperature
																			"temperature": schema.Float64Attribute{ /*START ATTRIBUTE*/
																				Description: "Controls randomness, higher values increase diversity",
																				Computed:    true,
																			}, /*END ATTRIBUTE*/
																			// Property: TopP
																			"top_p": schema.Float64Attribute{ /*START ATTRIBUTE*/
																				Description: "Cumulative probability cutoff for token selection",
																				Computed:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Prompt model inference configuration",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Model inference configuration",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: ModelId
															"model_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "ARN or Id of a Bedrock Foundational Model or Inference Profile, or the ARN of a imported model, or a provisioned throughput ARN for custom models.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: TemplateConfiguration
															"template_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: Text
																	"text": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																		Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																			// Property: InputVariables
																			"input_variables": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																				NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																						// Property: Name
																						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																							Description: "Name for an input variable",
																							Computed:    true,
																						}, /*END ATTRIBUTE*/
																					}, /*END SCHEMA*/
																				}, /*END NESTED OBJECT*/
																				Description: "List of input variables",
																				Computed:    true,
																			}, /*END ATTRIBUTE*/
																			// Property: Text
																			"text": schema.StringAttribute{ /*START ATTRIBUTE*/
																				Description: "Prompt content for String prompt template",
																				Computed:    true,
																			}, /*END ATTRIBUTE*/
																		}, /*END SCHEMA*/
																		Description: "Configuration for text prompt template",
																		Computed:    true,
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Prompt template configuration",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: TemplateType
															"template_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "Prompt template type",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
														Description: "Inline prompt configuration for prompt node",
														Computed:    true,
													}, /*END ATTRIBUTE*/
													// Property: Resource
													"resource": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: PromptArn
															"prompt_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "ARN of a prompt resource possibly with a version",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
														Description: "Resource prompt configuration for prompt node",
														Computed:    true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "Prompt source configuration for prompt node",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Prompt flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Retrieval
									"retrieval": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: ServiceConfiguration
											"service_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: S3
													"s3": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: BucketName
															"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "bucket name of an s3 that will be used for Retrieval flow node configuration",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
														Description: "s3 Retrieval configuration for Retrieval node",
														Computed:    true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "Retrieval service configuration for Retrieval node",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Retrieval flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Storage
									"storage": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: ServiceConfiguration
											"service_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: S3
													"s3": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: BucketName
															"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "bucket name of an s3 that will be used for storage flow node configuration",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
														Description: "s3 storage configuration for storage node",
														Computed:    true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "storage service configuration for storage node",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Storage flow node configuration",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Node configuration in a flow",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Inputs
							"inputs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Expression
										"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Expression for a node input in a flow",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: Name
										"name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Name of a node input in a flow",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: Type
										"type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Type of input/output for a node in a flow",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "List of node inputs in a flow",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Name of a node in a flow",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Outputs
							"outputs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Name
										"name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Name of a node output in a flow",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: Type
										"type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Type of input/output for a node in a flow",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "List of node outputs in a flow",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Flow node types",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "List of nodes in a flow",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Flow definition",
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of the flow version",
		//	  "maxLength": 200,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of the flow version",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 200),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ExecutionRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN of a IAM role",
		//	  "maxLength": 2048,
		//	  "pattern": "^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/(service-role/)?.+$",
		//	  "type": "string"
		//	}
		"execution_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN of a IAM role",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: FlowArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Arn representation of the Flow",
		//	  "pattern": "^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:flow/[0-9a-zA-Z]{10}$",
		//	  "type": "string"
		//	}
		"flow_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Arn representation of the Flow",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:flow/[0-9a-zA-Z]{10}$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: FlowId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Identifier for a Flow",
		//	  "pattern": "^[0-9a-zA-Z]{10}$",
		//	  "type": "string"
		//	}
		"flow_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Identifier for a Flow",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name for the flow",
		//	  "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name for the flow",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Schema Type for Flow APIs",
		//	  "enum": [
		//	    "Failed",
		//	    "Prepared",
		//	    "Preparing",
		//	    "NotPrepared"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Schema Type for Flow APIs",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Version
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Numerical Version.",
		//	  "pattern": "^[0-9]{1,5}$",
		//	  "type": "string"
		//	}
		"version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Numerical Version.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Definition of AWS::Bedrock::FlowVersion Resource Type",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Bedrock::FlowVersion").WithTerraformTypeName("awscc_bedrock_flow_version")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"agent":                       "Agent",
		"agent_alias_arn":             "AgentAliasArn",
		"bot_alias_arn":               "BotAliasArn",
		"bucket_name":                 "BucketName",
		"collector":                   "Collector",
		"condition":                   "Condition",
		"conditional":                 "Conditional",
		"conditions":                  "Conditions",
		"configuration":               "Configuration",
		"connections":                 "Connections",
		"created_at":                  "CreatedAt",
		"customer_encryption_key_arn": "CustomerEncryptionKeyArn",
		"data":                        "Data",
		"definition":                  "Definition",
		"description":                 "Description",
		"execution_role_arn":          "ExecutionRoleArn",
		"expression":                  "Expression",
		"flow_arn":                    "FlowArn",
		"flow_id":                     "FlowId",
		"guardrail_configuration":     "GuardrailConfiguration",
		"guardrail_identifier":        "GuardrailIdentifier",
		"guardrail_version":           "GuardrailVersion",
		"inference_configuration":     "InferenceConfiguration",
		"inline":                      "Inline",
		"input":                       "Input",
		"input_variables":             "InputVariables",
		"inputs":                      "Inputs",
		"iterator":                    "Iterator",
		"knowledge_base":              "KnowledgeBase",
		"knowledge_base_id":           "KnowledgeBaseId",
		"lambda_arn":                  "LambdaArn",
		"lambda_function":             "LambdaFunction",
		"lex":                         "Lex",
		"locale_id":                   "LocaleId",
		"max_tokens":                  "MaxTokens",
		"model_id":                    "ModelId",
		"name":                        "Name",
		"nodes":                       "Nodes",
		"output":                      "Output",
		"outputs":                     "Outputs",
		"prompt":                      "Prompt",
		"prompt_arn":                  "PromptArn",
		"resource":                    "Resource",
		"retrieval":                   "Retrieval",
		"s3":                          "S3",
		"service_configuration":       "ServiceConfiguration",
		"source":                      "Source",
		"source_configuration":        "SourceConfiguration",
		"source_output":               "SourceOutput",
		"status":                      "Status",
		"stop_sequences":              "StopSequences",
		"storage":                     "Storage",
		"target":                      "Target",
		"target_input":                "TargetInput",
		"temperature":                 "Temperature",
		"template_configuration":      "TemplateConfiguration",
		"template_type":               "TemplateType",
		"text":                        "Text",
		"top_p":                       "TopP",
		"type":                        "Type",
		"version":                     "Version",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
