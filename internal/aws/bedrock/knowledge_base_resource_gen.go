// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package bedrock

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_bedrock_knowledge_base", knowledgeBaseResource)
}

// knowledgeBaseResource returns the Terraform awscc_bedrock_knowledge_base resource.
// This Terraform resource corresponds to the CloudFormation AWS::Bedrock::KnowledgeBase resource.
func knowledgeBaseResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The time at which the knowledge base was created.",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The time at which the knowledge base was created.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of the Resource.",
		//	  "maxLength": 200,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of the Resource.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 200),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: FailureReasons
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of reasons that the API operation on the knowledge base failed.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "Failure Reason for Error.",
		//	    "maxLength": 2048,
		//	    "type": "string"
		//	  },
		//	  "maxItems": 2048,
		//	  "type": "array"
		//	}
		"failure_reasons": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of reasons that the API operation on the knowledge base failed.",
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: KnowledgeBaseArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the knowledge base.",
		//	  "maxLength": 128,
		//	  "minLength": 0,
		//	  "pattern": "^arn:aws(|-cn|-us-gov):bedrock:[a-zA-Z0-9-]*:[0-9]{12}:knowledge-base/[0-9a-zA-Z]+$",
		//	  "type": "string"
		//	}
		"knowledge_base_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the knowledge base.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: KnowledgeBaseConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Contains details about the embeddings model used for the knowledge base.",
		//	  "properties": {
		//	    "KendraKnowledgeBaseConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Configurations for a Kendra knowledge base",
		//	      "properties": {
		//	        "KendraIndexArn": {
		//	          "description": "Arn of a Kendra index",
		//	          "pattern": "^arn:aws(|-cn|-us-gov):kendra:[a-z0-9-]{1,20}:([0-9]{12}|):index/([a-zA-Z0-9][a-zA-Z0-9-]{35}|[a-zA-Z0-9][a-zA-Z0-9-]{35}-[a-zA-Z0-9][a-zA-Z0-9-]{35})$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "KendraIndexArn"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SqlKnowledgeBaseConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Configurations for a SQL knowledge base",
		//	      "properties": {
		//	        "RedshiftConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "Configurations for a Redshift knowledge base",
		//	          "properties": {
		//	            "QueryEngineConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "Configurations for Redshift query engine",
		//	              "properties": {
		//	                "ProvisionedConfiguration": {
		//	                  "additionalProperties": false,
		//	                  "description": "Configurations for provisioned Redshift query engine",
		//	                  "properties": {
		//	                    "AuthConfiguration": {
		//	                      "additionalProperties": false,
		//	                      "description": "Configurations for Redshift query engine provisioned auth setup",
		//	                      "properties": {
		//	                        "DatabaseUser": {
		//	                          "description": "Redshift database user",
		//	                          "type": "string"
		//	                        },
		//	                        "Type": {
		//	                          "description": "Provisioned Redshift auth type",
		//	                          "enum": [
		//	                            "IAM",
		//	                            "USERNAME_PASSWORD",
		//	                            "USERNAME"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "UsernamePasswordSecretArn": {
		//	                          "description": "Arn of a SecretsManager Secret",
		//	                          "pattern": "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Type"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "ClusterIdentifier": {
		//	                      "description": "Redshift cluster identifier",
		//	                      "maxLength": 63,
		//	                      "minLength": 1,
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ClusterIdentifier",
		//	                    "AuthConfiguration"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "ServerlessConfiguration": {
		//	                  "additionalProperties": false,
		//	                  "description": "Configurations for serverless Redshift query engine",
		//	                  "properties": {
		//	                    "AuthConfiguration": {
		//	                      "additionalProperties": false,
		//	                      "description": "Configurations for Redshift query engine serverless auth setup",
		//	                      "properties": {
		//	                        "Type": {
		//	                          "description": "Serverless Redshift auth type",
		//	                          "enum": [
		//	                            "IAM",
		//	                            "USERNAME_PASSWORD"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "UsernamePasswordSecretArn": {
		//	                          "description": "Arn of a SecretsManager Secret",
		//	                          "pattern": "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Type"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "WorkgroupArn": {
		//	                      "description": "Workgroup arn",
		//	                      "pattern": "^(arn:(aws(-[a-z]+)*):redshift-serverless:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:workgroup/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "WorkgroupArn",
		//	                    "AuthConfiguration"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "Type": {
		//	                  "description": "Redshift query engine type",
		//	                  "enum": [
		//	                    "SERVERLESS",
		//	                    "PROVISIONED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Type"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "QueryGenerationConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "Configurations for generating Redshift engine queries",
		//	              "properties": {
		//	                "ExecutionTimeoutSeconds": {
		//	                  "description": "Max query execution timeout",
		//	                  "maximum": 200,
		//	                  "minimum": 1,
		//	                  "type": "integer"
		//	                },
		//	                "GenerationContext": {
		//	                  "additionalProperties": false,
		//	                  "description": "Context used to improve query generation",
		//	                  "properties": {
		//	                    "CuratedQueries": {
		//	                      "description": "List of example queries and results",
		//	                      "insertionOrder": false,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "Curated query or question and answer pair",
		//	                        "properties": {
		//	                          "NaturalLanguage": {
		//	                            "description": "Question for the curated query",
		//	                            "maxLength": 1000,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "Sql": {
		//	                            "description": "Answer for the curated query",
		//	                            "maxLength": 1000,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "NaturalLanguage",
		//	                          "Sql"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "maxItems": 10,
		//	                      "type": "array"
		//	                    },
		//	                    "Tables": {
		//	                      "description": "List of tables used for Redshift query generation context",
		//	                      "insertionOrder": false,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "Tables used for Redshift query generation context",
		//	                        "properties": {
		//	                          "Columns": {
		//	                            "description": "List of Redshift query generation columns",
		//	                            "insertionOrder": false,
		//	                            "items": {
		//	                              "additionalProperties": false,
		//	                              "description": "Redshift query generation column",
		//	                              "properties": {
		//	                                "Description": {
		//	                                  "description": "Description for the attached entity",
		//	                                  "maxLength": 200,
		//	                                  "minLength": 1,
		//	                                  "type": "string"
		//	                                },
		//	                                "Inclusion": {
		//	                                  "description": "Include or Exclude status for an entity",
		//	                                  "enum": [
		//	                                    "INCLUDE",
		//	                                    "EXCLUDE"
		//	                                  ],
		//	                                  "type": "string"
		//	                                },
		//	                                "Name": {
		//	                                  "description": "Query generation column name",
		//	                                  "maxLength": 127,
		//	                                  "minLength": 1,
		//	                                  "type": "string"
		//	                                }
		//	                              },
		//	                              "type": "object"
		//	                            },
		//	                            "type": "array"
		//	                          },
		//	                          "Description": {
		//	                            "description": "Description for the attached entity",
		//	                            "maxLength": 200,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "Inclusion": {
		//	                            "description": "Include or Exclude status for an entity",
		//	                            "enum": [
		//	                              "INCLUDE",
		//	                              "EXCLUDE"
		//	                            ],
		//	                            "type": "string"
		//	                          },
		//	                          "Name": {
		//	                            "description": "Query generation table name. Must follow three-part notation",
		//	                            "pattern": "^.*\\..*\\..*$",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "Name"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "maxItems": 50,
		//	                      "type": "array"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "StorageConfigurations": {
		//	              "description": "List of configurations for available Redshift query engine storage types",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "description": "Configurations for available Redshift query engine storage types",
		//	                "properties": {
		//	                  "AwsDataCatalogConfiguration": {
		//	                    "additionalProperties": false,
		//	                    "description": "Configurations for Redshift query engine AWS Data Catalog backed storage",
		//	                    "properties": {
		//	                      "TableNames": {
		//	                        "description": "List of table names in AWS Data Catalog. Must follow two part notation",
		//	                        "insertionOrder": false,
		//	                        "items": {
		//	                          "description": "AWS Data Catalog table name",
		//	                          "maxLength": 200,
		//	                          "minLength": 1,
		//	                          "pattern": "^.*\\.*$",
		//	                          "type": "string"
		//	                        },
		//	                        "maxItems": 1000,
		//	                        "minItems": 1,
		//	                        "type": "array"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "TableNames"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "RedshiftConfiguration": {
		//	                    "additionalProperties": false,
		//	                    "description": "Configurations for Redshift query engine Redshift backed storage",
		//	                    "properties": {
		//	                      "DatabaseName": {
		//	                        "description": "Redshift database name",
		//	                        "maxLength": 200,
		//	                        "minLength": 1,
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "DatabaseName"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "Type": {
		//	                    "description": "Redshift query engine storage type",
		//	                    "enum": [
		//	                      "REDSHIFT",
		//	                      "AWS_DATA_CATALOG"
		//	                    ],
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Type"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "maxItems": 1,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            }
		//	          },
		//	          "required": [
		//	            "StorageConfigurations",
		//	            "QueryEngineConfiguration"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Type": {
		//	          "description": "SQL query engine type",
		//	          "enum": [
		//	            "REDSHIFT"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Type"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Type": {
		//	      "description": "The type of a knowledge base.",
		//	      "enum": [
		//	        "VECTOR",
		//	        "KENDRA",
		//	        "SQL"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "VectorKnowledgeBaseConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Contains details about the model used to create vector embeddings for the knowledge base.",
		//	      "properties": {
		//	        "EmbeddingModelArn": {
		//	          "description": "The ARN of the model used to create vector embeddings for the knowledge base.",
		//	          "maxLength": 2048,
		//	          "minLength": 20,
		//	          "pattern": "^(arn:aws(-[^:]+)?:[a-z0-9-]+:[a-z0-9-]{1,20}:[0-9]{0,12}:[a-zA-Z0-9-:/._+]+)$",
		//	          "type": "string"
		//	        },
		//	        "EmbeddingModelConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "The embeddings model configuration details for the vector model used in Knowledge Base.",
		//	          "properties": {
		//	            "BedrockEmbeddingModelConfiguration": {
		//	              "additionalProperties": false,
		//	              "description": "The vector configuration details for the Bedrock embeddings model.",
		//	              "properties": {
		//	                "Dimensions": {
		//	                  "description": "The dimensions details for the vector configuration used on the Bedrock embeddings model.",
		//	                  "maximum": 4096,
		//	                  "minimum": 0,
		//	                  "type": "integer"
		//	                },
		//	                "EmbeddingDataType": {
		//	                  "description": "The data type for the vectors when using a model to convert text into vector embeddings.",
		//	                  "enum": [
		//	                    "FLOAT32",
		//	                    "BINARY"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "SupplementalDataStorageConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "Configurations for supplemental data storage.",
		//	          "properties": {
		//	            "SupplementalDataStorageLocations": {
		//	              "description": "List of supplemental data storage locations.",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "description": "Supplemental data storage location.",
		//	                "properties": {
		//	                  "S3Location": {
		//	                    "additionalProperties": false,
		//	                    "description": "An Amazon S3 location.",
		//	                    "properties": {
		//	                      "URI": {
		//	                        "description": "The location's URI",
		//	                        "maxLength": 2048,
		//	                        "minLength": 1,
		//	                        "pattern": "^s3://.{1,128}$",
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "URI"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "SupplementalDataStorageLocationType": {
		//	                    "description": "Supplemental data storage location type.",
		//	                    "enum": [
		//	                      "S3"
		//	                    ],
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "SupplementalDataStorageLocationType"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "maxItems": 1,
		//	              "minItems": 1,
		//	              "type": "array"
		//	            }
		//	          },
		//	          "required": [
		//	            "SupplementalDataStorageLocations"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "EmbeddingModelArn"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "Type"
		//	  ],
		//	  "type": "object"
		//	}
		"knowledge_base_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: KendraKnowledgeBaseConfiguration
				"kendra_knowledge_base_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: KendraIndexArn
						"kendra_index_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Arn of a Kendra index",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(|-cn|-us-gov):kendra:[a-z0-9-]{1,20}:([0-9]{12}|):index/([a-zA-Z0-9][a-zA-Z0-9-]{35}|[a-zA-Z0-9][a-zA-Z0-9-]{35}-[a-zA-Z0-9][a-zA-Z0-9-]{35})$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Configurations for a Kendra knowledge base",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
						objectplanmodifier.RequiresReplaceIfConfigured(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SqlKnowledgeBaseConfiguration
				"sql_knowledge_base_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: RedshiftConfiguration
						"redshift_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: QueryEngineConfiguration
								"query_engine_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ProvisionedConfiguration
										"provisioned_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AuthConfiguration
												"auth_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DatabaseUser
														"database_user": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Redshift database user",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Type
														"type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Provisioned Redshift auth type",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"IAM",
																	"USERNAME_PASSWORD",
																	"USERNAME",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: UsernamePasswordSecretArn
														"username_password_secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Arn of a SecretsManager Secret",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"), ""),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Configurations for Redshift query engine provisioned auth setup",
													Optional:    true,
													Computed:    true,
													Validators: []validator.Object{ /*START VALIDATORS*/
														fwvalidators.NotNullObject(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: ClusterIdentifier
												"cluster_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "Redshift cluster identifier",
													Optional:    true,
													Computed:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.LengthBetween(1, 63),
														fwvalidators.NotNullString(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Description: "Configurations for provisioned Redshift query engine",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
												objectplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: ServerlessConfiguration
										"serverless_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AuthConfiguration
												"auth_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Type
														"type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Serverless Redshift auth type",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"IAM",
																	"USERNAME_PASSWORD",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: UsernamePasswordSecretArn
														"username_password_secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Arn of a SecretsManager Secret",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"), ""),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Configurations for Redshift query engine serverless auth setup",
													Optional:    true,
													Computed:    true,
													Validators: []validator.Object{ /*START VALIDATORS*/
														fwvalidators.NotNullObject(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: WorkgroupArn
												"workgroup_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "Workgroup arn",
													Optional:    true,
													Computed:    true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.RegexMatches(regexp.MustCompile("^(arn:(aws(-[a-z]+)*):redshift-serverless:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:workgroup/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$"), ""),
														fwvalidators.NotNullString(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Description: "Configurations for serverless Redshift query engine",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
												objectplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: Type
										"type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Redshift query engine type",
											Optional:    true,
											Computed:    true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.OneOf(
													"SERVERLESS",
													"PROVISIONED",
												),
												fwvalidators.NotNullString(),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "Configurations for Redshift query engine",
									Optional:    true,
									Computed:    true,
									Validators: []validator.Object{ /*START VALIDATORS*/
										fwvalidators.NotNullObject(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
										objectplanmodifier.RequiresReplaceIfConfigured(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: QueryGenerationConfiguration
								"query_generation_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: ExecutionTimeoutSeconds
										"execution_timeout_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Description: "Max query execution timeout",
											Optional:    true,
											Computed:    true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(1, 200),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: GenerationContext
										"generation_context": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: CuratedQueries
												"curated_queries": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: NaturalLanguage
															"natural_language": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "Question for the curated query",
																Optional:    true,
																Computed:    true,
																Validators: []validator.String{ /*START VALIDATORS*/
																	stringvalidator.LengthBetween(1, 1000),
																	fwvalidators.NotNullString(),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																	stringplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Sql
															"sql": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "Answer for the curated query",
																Optional:    true,
																Computed:    true,
																Validators: []validator.String{ /*START VALIDATORS*/
																	stringvalidator.LengthBetween(1, 1000),
																	fwvalidators.NotNullString(),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																	stringplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "List of example queries and results",
													Optional:    true,
													Computed:    true,
													Validators: []validator.List{ /*START VALIDATORS*/
														listvalidator.SizeAtMost(10),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
														generic.Multiset(),
														listplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Tables
												"tables": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: Columns
															"columns": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																	Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																		// Property: Description
																		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Description: "Description for the attached entity",
																			Optional:    true,
																			Computed:    true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.LengthBetween(1, 200),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: Inclusion
																		"inclusion": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Description: "Include or Exclude status for an entity",
																			Optional:    true,
																			Computed:    true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.OneOf(
																					"INCLUDE",
																					"EXCLUDE",
																				),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																		// Property: Name
																		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Description: "Query generation column name",
																			Optional:    true,
																			Computed:    true,
																			Validators: []validator.String{ /*START VALIDATORS*/
																				stringvalidator.LengthBetween(1, 127),
																			}, /*END VALIDATORS*/
																			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																				stringplanmodifier.UseStateForUnknown(),
																			}, /*END PLAN MODIFIERS*/
																		}, /*END ATTRIBUTE*/
																	}, /*END SCHEMA*/
																}, /*END NESTED OBJECT*/
																Description: "List of Redshift query generation columns",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																	generic.Multiset(),
																	listplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Description
															"description": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "Description for the attached entity",
																Optional:    true,
																Computed:    true,
																Validators: []validator.String{ /*START VALIDATORS*/
																	stringvalidator.LengthBetween(1, 200),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																	stringplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Inclusion
															"inclusion": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "Include or Exclude status for an entity",
																Optional:    true,
																Computed:    true,
																Validators: []validator.String{ /*START VALIDATORS*/
																	stringvalidator.OneOf(
																		"INCLUDE",
																		"EXCLUDE",
																	),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																	stringplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Name
															"name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "Query generation table name. Must follow three-part notation",
																Optional:    true,
																Computed:    true,
																Validators: []validator.String{ /*START VALIDATORS*/
																	stringvalidator.RegexMatches(regexp.MustCompile("^.*\\..*\\..*$"), ""),
																	fwvalidators.NotNullString(),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																	stringplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "List of tables used for Redshift query generation context",
													Optional:    true,
													Computed:    true,
													Validators: []validator.List{ /*START VALIDATORS*/
														listvalidator.SizeAtMost(50),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
														generic.Multiset(),
														listplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Description: "Context used to improve query generation",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
												objectplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "Configurations for generating Redshift engine queries",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: StorageConfigurations
								"storage_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AwsDataCatalogConfiguration
											"aws_data_catalog_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: TableNames
													"table_names": schema.ListAttribute{ /*START ATTRIBUTE*/
														ElementType: types.StringType,
														Description: "List of table names in AWS Data Catalog. Must follow two part notation",
														Optional:    true,
														Computed:    true,
														Validators: []validator.List{ /*START VALIDATORS*/
															listvalidator.SizeBetween(1, 1000),
															listvalidator.ValueStringsAre(
																stringvalidator.LengthBetween(1, 200),
																stringvalidator.RegexMatches(regexp.MustCompile("^.*\\.*$"), ""),
															),
															fwvalidators.NotNullList(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
															generic.Multiset(),
															listplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "Configurations for Redshift query engine AWS Data Catalog backed storage",
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: RedshiftConfiguration
											"redshift_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: DatabaseName
													"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "Redshift database name",
														Optional:    true,
														Computed:    true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.LengthBetween(1, 200),
															fwvalidators.NotNullString(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "Configurations for Redshift query engine Redshift backed storage",
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Type
											"type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Redshift query engine storage type",
												Optional:    true,
												Computed:    true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"REDSHIFT",
														"AWS_DATA_CATALOG",
													),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Description: "List of configurations for available Redshift query engine storage types",
									Optional:    true,
									Computed:    true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.SizeBetween(1, 1),
										fwvalidators.NotNullList(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										generic.Multiset(),
										listplanmodifier.UseStateForUnknown(),
										listplanmodifier.RequiresReplaceIfConfigured(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Configurations for a Redshift knowledge base",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Type
						"type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "SQL query engine type",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.OneOf(
									"REDSHIFT",
								),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
								stringplanmodifier.RequiresReplaceIfConfigured(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Configurations for a SQL knowledge base",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The type of a knowledge base.",
					Required:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"VECTOR",
							"KENDRA",
							"SQL",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.RequiresReplace(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: VectorKnowledgeBaseConfiguration
				"vector_knowledge_base_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: EmbeddingModelArn
						"embedding_model_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN of the model used to create vector embeddings for the knowledge base.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(20, 2048),
								stringvalidator.RegexMatches(regexp.MustCompile("^(arn:aws(-[^:]+)?:[a-z0-9-]+:[a-z0-9-]{1,20}:[0-9]{0,12}:[a-zA-Z0-9-:/._+]+)$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: EmbeddingModelConfiguration
						"embedding_model_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BedrockEmbeddingModelConfiguration
								"bedrock_embedding_model_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Dimensions
										"dimensions": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Description: "The dimensions details for the vector configuration used on the Bedrock embeddings model.",
											Optional:    true,
											Computed:    true,
											Validators: []validator.Int64{ /*START VALIDATORS*/
												int64validator.Between(0, 4096),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: EmbeddingDataType
										"embedding_data_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The data type for the vectors when using a model to convert text into vector embeddings.",
											Optional:    true,
											Computed:    true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.OneOf(
													"FLOAT32",
													"BINARY",
												),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Description: "The vector configuration details for the Bedrock embeddings model.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
										objectplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The embeddings model configuration details for the vector model used in Knowledge Base.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SupplementalDataStorageConfiguration
						"supplemental_data_storage_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: SupplementalDataStorageLocations
								"supplemental_data_storage_locations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: S3Location
											"s3_location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: URI
													"uri": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "The location's URI",
														Optional:    true,
														Computed:    true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.LengthBetween(1, 2048),
															stringvalidator.RegexMatches(regexp.MustCompile("^s3://.{1,128}$"), ""),
															fwvalidators.NotNullString(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "An Amazon S3 location.",
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: SupplementalDataStorageLocationType
											"supplemental_data_storage_location_type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Supplemental data storage location type.",
												Optional:    true,
												Computed:    true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"S3",
													),
													fwvalidators.NotNullString(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Description: "List of supplemental data storage locations.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.List{ /*START VALIDATORS*/
										listvalidator.SizeBetween(1, 1),
										fwvalidators.NotNullList(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										generic.Multiset(),
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Configurations for supplemental data storage.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Contains details about the model used to create vector embeddings for the knowledge base.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
						objectplanmodifier.RequiresReplaceIfConfigured(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Contains details about the embeddings model used for the knowledge base.",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: KnowledgeBaseId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier of the knowledge base.",
		//	  "pattern": "^[0-9a-zA-Z]{10}$",
		//	  "type": "string"
		//	}
		"knowledge_base_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier of the knowledge base.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the knowledge base.",
		//	  "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the knowledge base.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^([0-9a-zA-Z][_-]?){1,100}$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the IAM role with permissions to invoke API operations on the knowledge base. The ARN must begin with AmazonBedrockExecutionRoleForKnowledgeBase_",
		//	  "maxLength": 2048,
		//	  "pattern": "^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+$",
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the IAM role with permissions to invoke API operations on the knowledge base. The ARN must begin with AmazonBedrockExecutionRoleForKnowledgeBase_",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(2048),
				stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of a knowledge base.",
		//	  "enum": [
		//	    "CREATING",
		//	    "ACTIVE",
		//	    "DELETING",
		//	    "UPDATING",
		//	    "FAILED",
		//	    "DELETE_UNSUCCESSFUL"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of a knowledge base.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: StorageConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The vector store service in which the knowledge base is stored.",
		//	  "oneOf": [
		//	    {
		//	      "required": [
		//	        "OpensearchServerlessConfiguration"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "PineconeConfiguration"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "RdsConfiguration"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "NeptuneAnalyticsConfiguration"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "MongoDbAtlasConfiguration"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "OpensearchManagedClusterConfiguration"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "MongoDbAtlasConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Contains the storage configuration of the knowledge base in MongoDb Atlas Cloud.",
		//	      "properties": {
		//	        "CollectionName": {
		//	          "description": "Name of the collection within MongoDB Atlas.",
		//	          "maxLength": 63,
		//	          "pattern": "^.*$",
		//	          "type": "string"
		//	        },
		//	        "CredentialsSecretArn": {
		//	          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon Mongo database.",
		//	          "pattern": "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$",
		//	          "type": "string"
		//	        },
		//	        "DatabaseName": {
		//	          "description": "Name of the database within MongoDB Atlas.",
		//	          "maxLength": 63,
		//	          "pattern": "^.*$",
		//	          "type": "string"
		//	        },
		//	        "Endpoint": {
		//	          "description": "MongoDB Atlas endpoint.",
		//	          "maxLength": 2048,
		//	          "pattern": "^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]+\\.mongodb\\.net$",
		//	          "type": "string"
		//	        },
		//	        "EndpointServiceName": {
		//	          "description": "MongoDB Atlas endpoint service name.",
		//	          "maxLength": 255,
		//	          "pattern": "^(?:arn:aws(?:-us-gov|-cn|-iso|-iso-[a-z])*:.+:.*:\\d+:.+/.+$|[a-zA-Z0-9*]+[a-zA-Z0-9._-]*)$",
		//	          "type": "string"
		//	        },
		//	        "FieldMapping": {
		//	          "additionalProperties": false,
		//	          "description": "Contains the names of the fields to which to map information about the vector store.",
		//	          "properties": {
		//	            "MetadataField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            },
		//	            "TextField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            },
		//	            "VectorField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "VectorField",
		//	            "MetadataField",
		//	            "TextField"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "TextIndexName": {
		//	          "description": "Name of a MongoDB Atlas text index.",
		//	          "maxLength": 2048,
		//	          "pattern": "^.*$",
		//	          "type": "string"
		//	        },
		//	        "VectorIndexName": {
		//	          "description": "Name of a MongoDB Atlas index.",
		//	          "maxLength": 2048,
		//	          "pattern": "^.*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Endpoint",
		//	        "CredentialsSecretArn",
		//	        "DatabaseName",
		//	        "CollectionName",
		//	        "VectorIndexName",
		//	        "FieldMapping"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "NeptuneAnalyticsConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Contains the configurations to use Neptune Analytics as Vector Store.",
		//	      "properties": {
		//	        "FieldMapping": {
		//	          "additionalProperties": false,
		//	          "description": "A mapping of Bedrock Knowledge Base fields to Neptune Analytics fields.",
		//	          "properties": {
		//	            "MetadataField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            },
		//	            "TextField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "TextField",
		//	            "MetadataField"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "GraphArn": {
		//	          "description": "ARN for Neptune Analytics graph database.",
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "pattern": "^arn:aws(|-cn|-us-gov):neptune-graph:[a-zA-Z0-9-]*:[0-9]{12}:graph\\/g-[a-zA-Z0-9]{10}$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "GraphArn",
		//	        "FieldMapping"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "OpensearchManagedClusterConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.",
		//	      "properties": {
		//	        "DomainArn": {
		//	          "description": "The Amazon Resource Name (ARN) of the OpenSearch domain.",
		//	          "maxLength": 2048,
		//	          "pattern": "^arn:aws(|-cn|-us-gov|-iso):es:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:domain/[a-z][a-z0-9-]{3,28}$",
		//	          "type": "string"
		//	        },
		//	        "DomainEndpoint": {
		//	          "description": "The endpoint URL the OpenSearch domain.",
		//	          "maxLength": 2048,
		//	          "pattern": "^https://.*$",
		//	          "type": "string"
		//	        },
		//	        "FieldMapping": {
		//	          "additionalProperties": false,
		//	          "description": "A mapping of Bedrock Knowledge Base fields to OpenSearch Managed Cluster field names",
		//	          "properties": {
		//	            "MetadataField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            },
		//	            "TextField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            },
		//	            "VectorField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "MetadataField",
		//	            "TextField",
		//	            "VectorField"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "VectorIndexName": {
		//	          "description": "The name of the vector store.",
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "DomainArn",
		//	        "DomainEndpoint",
		//	        "VectorIndexName",
		//	        "FieldMapping"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "OpensearchServerlessConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.",
		//	      "properties": {
		//	        "CollectionArn": {
		//	          "description": "The ARN of the OpenSearch Service vector store.",
		//	          "maxLength": 2048,
		//	          "pattern": "^arn:aws(|-cn|-us-gov|-iso):aoss:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:collection/[a-z0-9-]{3,32}$",
		//	          "type": "string"
		//	        },
		//	        "FieldMapping": {
		//	          "additionalProperties": false,
		//	          "description": "A mapping of Bedrock Knowledge Base fields to OpenSearch Serverless field names",
		//	          "properties": {
		//	            "MetadataField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            },
		//	            "TextField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            },
		//	            "VectorField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "MetadataField",
		//	            "TextField",
		//	            "VectorField"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "VectorIndexName": {
		//	          "description": "The name of the vector store.",
		//	          "maxLength": 2048,
		//	          "pattern": "^.*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "CollectionArn",
		//	        "FieldMapping",
		//	        "VectorIndexName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "PineconeConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Contains the storage configuration of the knowledge base in Pinecone.",
		//	      "properties": {
		//	        "ConnectionString": {
		//	          "description": "The endpoint URL for your index management page.",
		//	          "maxLength": 2048,
		//	          "pattern": "^.*$",
		//	          "type": "string"
		//	        },
		//	        "CredentialsSecretArn": {
		//	          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Pinecone API key.",
		//	          "pattern": "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$",
		//	          "type": "string"
		//	        },
		//	        "FieldMapping": {
		//	          "additionalProperties": false,
		//	          "description": "Contains the names of the fields to which to map information about the vector store.",
		//	          "properties": {
		//	            "MetadataField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            },
		//	            "TextField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
		//	              "maxLength": 2048,
		//	              "pattern": "^.*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "MetadataField",
		//	            "TextField"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "Namespace": {
		//	          "description": "The namespace to be used to write new data to your database.",
		//	          "maxLength": 2048,
		//	          "pattern": "^.*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "ConnectionString",
		//	        "CredentialsSecretArn",
		//	        "FieldMapping"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "RdsConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Contains details about the storage configuration of the knowledge base in Amazon RDS. For more information, see Create a vector index in Amazon RDS.",
		//	      "properties": {
		//	        "CredentialsSecretArn": {
		//	          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon RDS database.",
		//	          "pattern": "^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$",
		//	          "type": "string"
		//	        },
		//	        "DatabaseName": {
		//	          "description": "The name of your Amazon RDS database.",
		//	          "maxLength": 63,
		//	          "pattern": "^[a-zA-Z0-9_\\-]+$",
		//	          "type": "string"
		//	        },
		//	        "FieldMapping": {
		//	          "additionalProperties": false,
		//	          "description": "Contains the names of the fields to which to map information about the vector store.",
		//	          "properties": {
		//	            "CustomMetadataField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores custom metadata about the vector store.",
		//	              "maxLength": 63,
		//	              "pattern": "^[a-zA-Z0-9_\\-]+$",
		//	              "type": "string"
		//	            },
		//	            "MetadataField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
		//	              "maxLength": 63,
		//	              "pattern": "^[a-zA-Z0-9_\\-]+$",
		//	              "type": "string"
		//	            },
		//	            "PrimaryKeyField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the ID for each entry.",
		//	              "maxLength": 63,
		//	              "pattern": "^[a-zA-Z0-9_\\-]+$",
		//	              "type": "string"
		//	            },
		//	            "TextField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
		//	              "maxLength": 63,
		//	              "pattern": "^[a-zA-Z0-9_\\-]+$",
		//	              "type": "string"
		//	            },
		//	            "VectorField": {
		//	              "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
		//	              "maxLength": 63,
		//	              "pattern": "^[a-zA-Z0-9_\\-]+$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "MetadataField",
		//	            "PrimaryKeyField",
		//	            "TextField",
		//	            "VectorField"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "ResourceArn": {
		//	          "description": "The ARN of the vector store.",
		//	          "pattern": "^arn:aws(|-cn|-us-gov):rds:[a-zA-Z0-9-]*:[0-9]{12}:cluster:[a-zA-Z0-9-]{1,63}$",
		//	          "type": "string"
		//	        },
		//	        "TableName": {
		//	          "description": "The name of the table in the database.",
		//	          "maxLength": 63,
		//	          "pattern": "^[a-zA-Z0-9_\\.\\-]+$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "CredentialsSecretArn",
		//	        "DatabaseName",
		//	        "FieldMapping",
		//	        "ResourceArn",
		//	        "TableName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Type": {
		//	      "description": "The storage type of a knowledge base.",
		//	      "enum": [
		//	        "OPENSEARCH_SERVERLESS",
		//	        "PINECONE",
		//	        "RDS",
		//	        "MONGO_DB_ATLAS",
		//	        "NEPTUNE_ANALYTICS",
		//	        "OPENSEARCH_MANAGED_CLUSTER"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Type"
		//	  ],
		//	  "type": "object"
		//	}
		"storage_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MongoDbAtlasConfiguration
				"mongo_db_atlas_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CollectionName
						"collection_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of the collection within MongoDB Atlas.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(63),
								stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: CredentialsSecretArn
						"credentials_secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon Mongo database.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of the database within MongoDB Atlas.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(63),
								stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Endpoint
						"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "MongoDB Atlas endpoint.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(2048),
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]+\\.mongodb\\.net$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: EndpointServiceName
						"endpoint_service_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "MongoDB Atlas endpoint service name.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(255),
								stringvalidator.RegexMatches(regexp.MustCompile("^(?:arn:aws(?:-us-gov|-cn|-iso|-iso-[a-z])*:.+:.*:\\d+:.+/.+$|[a-zA-Z0-9*]+[a-zA-Z0-9._-]*)$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: FieldMapping
						"field_mapping": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: MetadataField
								"metadata_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TextField
								"text_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: VectorField
								"vector_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Contains the names of the fields to which to map information about the vector store.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: TextIndexName
						"text_index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of a MongoDB Atlas text index.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(2048),
								stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: VectorIndexName
						"vector_index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of a MongoDB Atlas index.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(2048),
								stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Contains the storage configuration of the knowledge base in MongoDb Atlas Cloud.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: NeptuneAnalyticsConfiguration
				"neptune_analytics_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: FieldMapping
						"field_mapping": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: MetadataField
								"metadata_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TextField
								"text_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A mapping of Bedrock Knowledge Base fields to Neptune Analytics fields.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: GraphArn
						"graph_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "ARN for Neptune Analytics graph database.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(1, 255),
								stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(|-cn|-us-gov):neptune-graph:[a-zA-Z0-9-]*:[0-9]{12}:graph\\/g-[a-zA-Z0-9]{10}$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Contains the configurations to use Neptune Analytics as Vector Store.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: OpensearchManagedClusterConfiguration
				"opensearch_managed_cluster_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DomainArn
						"domain_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) of the OpenSearch domain.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(2048),
								stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(|-cn|-us-gov|-iso):es:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:domain/[a-z][a-z0-9-]{3,28}$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DomainEndpoint
						"domain_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The endpoint URL the OpenSearch domain.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(2048),
								stringvalidator.RegexMatches(regexp.MustCompile("^https://.*$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: FieldMapping
						"field_mapping": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: MetadataField
								"metadata_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TextField
								"text_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: VectorField
								"vector_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A mapping of Bedrock Knowledge Base fields to OpenSearch Managed Cluster field names",
							Optional:    true,
							Computed:    true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: VectorIndexName
						"vector_index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the vector store.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(1, 2048),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: OpensearchServerlessConfiguration
				"opensearch_serverless_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CollectionArn
						"collection_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN of the OpenSearch Service vector store.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(2048),
								stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(|-cn|-us-gov|-iso):aoss:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:collection/[a-z0-9-]{3,32}$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: FieldMapping
						"field_mapping": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: MetadataField
								"metadata_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TextField
								"text_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: VectorField
								"vector_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A mapping of Bedrock Knowledge Base fields to OpenSearch Serverless field names",
							Optional:    true,
							Computed:    true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: VectorIndexName
						"vector_index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the vector store.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(2048),
								stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: PineconeConfiguration
				"pinecone_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ConnectionString
						"connection_string": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The endpoint URL for your index management page.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(2048),
								stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: CredentialsSecretArn
						"credentials_secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Pinecone API key.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: FieldMapping
						"field_mapping": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: MetadataField
								"metadata_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TextField
								"text_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Contains the names of the fields to which to map information about the vector store.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Namespace
						"namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The namespace to be used to write new data to your database.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(2048),
								stringvalidator.RegexMatches(regexp.MustCompile("^.*$"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Contains the storage configuration of the knowledge base in Pinecone.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: RdsConfiguration
				"rds_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CredentialsSecretArn
						"credentials_secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon RDS database.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of your Amazon RDS database.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(63),
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\-]+$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: FieldMapping
						"field_mapping": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CustomMetadataField
								"custom_metadata_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores custom metadata about the vector store.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(63),
										stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\-]+$"), ""),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: MetadataField
								"metadata_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(63),
										stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\-]+$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: PrimaryKeyField
								"primary_key_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the ID for each entry.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(63),
										stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\-]+$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TextField
								"text_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(63),
										stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\-]+$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: VectorField
								"vector_field": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(63),
										stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\-]+$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Contains the names of the fields to which to map information about the vector store.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: ResourceArn
						"resource_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN of the vector store.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.RegexMatches(regexp.MustCompile("^arn:aws(|-cn|-us-gov):rds:[a-zA-Z0-9-]*:[0-9]{12}:cluster:[a-zA-Z0-9-]{1,63}$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: TableName
						"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the table in the database.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthAtMost(63),
								stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\.\\-]+$"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Contains details about the storage configuration of the knowledge base in Amazon RDS. For more information, see Create a vector index in Amazon RDS.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The storage type of a knowledge base.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"OPENSEARCH_SERVERLESS",
							"PINECONE",
							"RDS",
							"MONGO_DB_ATLAS",
							"NEPTUNE_ANALYTICS",
							"OPENSEARCH_MANAGED_CLUSTER",
						),
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The vector store service in which the knowledge base is stored.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
				objectplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A map of tag keys and values",
		//	  "patternProperties": {
		//	    "": {
		//	      "description": "Value of a tag",
		//	      "maxLength": 256,
		//	      "minLength": 0,
		//	      "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A map of tag keys and values",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Map{ /*START PLAN MODIFIERS*/
				mapplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The time at which the knowledge base was last updated.",
		//	  "type": "string"
		//	}
		"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The time at which the knowledge base was last updated.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Definition of AWS::Bedrock::KnowledgeBase Resource Type",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Bedrock::KnowledgeBase").WithTerraformTypeName("awscc_bedrock_knowledge_base")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "knowledge_base_id",
			Description:       "The unique identifier of the knowledge base",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"auth_configuration":                       "AuthConfiguration",
		"aws_data_catalog_configuration":           "AwsDataCatalogConfiguration",
		"bedrock_embedding_model_configuration":    "BedrockEmbeddingModelConfiguration",
		"cluster_identifier":                       "ClusterIdentifier",
		"collection_arn":                           "CollectionArn",
		"collection_name":                          "CollectionName",
		"columns":                                  "Columns",
		"connection_string":                        "ConnectionString",
		"created_at":                               "CreatedAt",
		"credentials_secret_arn":                   "CredentialsSecretArn",
		"curated_queries":                          "CuratedQueries",
		"custom_metadata_field":                    "CustomMetadataField",
		"database_name":                            "DatabaseName",
		"database_user":                            "DatabaseUser",
		"description":                              "Description",
		"dimensions":                               "Dimensions",
		"domain_arn":                               "DomainArn",
		"domain_endpoint":                          "DomainEndpoint",
		"embedding_data_type":                      "EmbeddingDataType",
		"embedding_model_arn":                      "EmbeddingModelArn",
		"embedding_model_configuration":            "EmbeddingModelConfiguration",
		"endpoint":                                 "Endpoint",
		"endpoint_service_name":                    "EndpointServiceName",
		"execution_timeout_seconds":                "ExecutionTimeoutSeconds",
		"failure_reasons":                          "FailureReasons",
		"field_mapping":                            "FieldMapping",
		"generation_context":                       "GenerationContext",
		"graph_arn":                                "GraphArn",
		"inclusion":                                "Inclusion",
		"kendra_index_arn":                         "KendraIndexArn",
		"kendra_knowledge_base_configuration":      "KendraKnowledgeBaseConfiguration",
		"knowledge_base_arn":                       "KnowledgeBaseArn",
		"knowledge_base_configuration":             "KnowledgeBaseConfiguration",
		"knowledge_base_id":                        "KnowledgeBaseId",
		"metadata_field":                           "MetadataField",
		"mongo_db_atlas_configuration":             "MongoDbAtlasConfiguration",
		"name":                                     "Name",
		"namespace":                                "Namespace",
		"natural_language":                         "NaturalLanguage",
		"neptune_analytics_configuration":          "NeptuneAnalyticsConfiguration",
		"opensearch_managed_cluster_configuration": "OpensearchManagedClusterConfiguration",
		"opensearch_serverless_configuration":      "OpensearchServerlessConfiguration",
		"pinecone_configuration":                   "PineconeConfiguration",
		"primary_key_field":                        "PrimaryKeyField",
		"provisioned_configuration":                "ProvisionedConfiguration",
		"query_engine_configuration":               "QueryEngineConfiguration",
		"query_generation_configuration":           "QueryGenerationConfiguration",
		"rds_configuration":                        "RdsConfiguration",
		"redshift_configuration":                   "RedshiftConfiguration",
		"resource_arn":                             "ResourceArn",
		"role_arn":                                 "RoleArn",
		"s3_location":                              "S3Location",
		"serverless_configuration":                 "ServerlessConfiguration",
		"sql":                                      "Sql",
		"sql_knowledge_base_configuration":         "SqlKnowledgeBaseConfiguration",
		"status":                                   "Status",
		"storage_configuration":                    "StorageConfiguration",
		"storage_configurations":                   "StorageConfigurations",
		"supplemental_data_storage_configuration":  "SupplementalDataStorageConfiguration",
		"supplemental_data_storage_location_type":  "SupplementalDataStorageLocationType",
		"supplemental_data_storage_locations":      "SupplementalDataStorageLocations",
		"table_name":                               "TableName",
		"table_names":                              "TableNames",
		"tables":                                   "Tables",
		"tags":                                     "Tags",
		"text_field":                               "TextField",
		"text_index_name":                          "TextIndexName",
		"type":                                     "Type",
		"updated_at":                               "UpdatedAt",
		"uri":                                      "URI",
		"username_password_secret_arn":             "UsernamePasswordSecretArn",
		"vector_field":                             "VectorField",
		"vector_index_name":                        "VectorIndexName",
		"vector_knowledge_base_configuration":      "VectorKnowledgeBaseConfiguration",
		"workgroup_arn":                            "WorkgroupArn",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
