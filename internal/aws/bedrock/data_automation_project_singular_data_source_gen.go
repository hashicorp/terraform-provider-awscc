// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package bedrock

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_bedrock_data_automation_project", dataAutomationProjectDataSource)
}

// dataAutomationProjectDataSource returns the Terraform awscc_bedrock_data_automation_project data source.
// This Terraform data source corresponds to the CloudFormation AWS::Bedrock::DataAutomationProject resource.
func dataAutomationProjectDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Time Stamp",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Time Stamp",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CustomOutputConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Custom output configuration",
		//	  "properties": {
		//	    "Blueprints": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "BlueprintArn": {
		//	            "description": "ARN of a Blueprint",
		//	            "maxLength": 128,
		//	            "pattern": "^arn:aws(|-cn|-us-gov):bedrock:[a-zA-Z0-9-]*:(aws|[0-9]{12}):blueprint/(bedrock-data-automation-public-[a-zA-Z0-9-_]{1,30}|[a-zA-Z0-9-]{12,36})$",
		//	            "type": "string"
		//	          },
		//	          "BlueprintStage": {
		//	            "description": "Stage of the Blueprint",
		//	            "enum": [
		//	              "DEVELOPMENT",
		//	              "LIVE"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "BlueprintVersion": {
		//	            "description": "Blueprint Version",
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "pattern": "^[0-9]*$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "BlueprintArn"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"custom_output_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Blueprints
				"blueprints": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: BlueprintArn
							"blueprint_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "ARN of a Blueprint",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: BlueprintStage
							"blueprint_stage": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Stage of the Blueprint",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: BlueprintVersion
							"blueprint_version": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Blueprint Version",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Custom output configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KmsEncryptionContext
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "KMS encryption context",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"kms_encryption_context": // Pattern: ""
		schema.MapAttribute{      /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "KMS encryption context",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KmsKeyId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "KMS key identifier",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "KMS key identifier",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastModifiedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Time Stamp",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"last_modified_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Time Stamp",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OverrideConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Override configuration",
		//	  "properties": {
		//	    "Audio": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "ModalityProcessing": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "State": {
		//	              "enum": [
		//	                "ENABLED",
		//	                "DISABLED"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Document": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "ModalityProcessing": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "State": {
		//	              "enum": [
		//	                "ENABLED",
		//	                "DISABLED"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Splitter": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "State": {
		//	              "enum": [
		//	                "ENABLED",
		//	                "DISABLED"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Image": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "ModalityProcessing": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "State": {
		//	              "enum": [
		//	                "ENABLED",
		//	                "DISABLED"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ModalityRouting": {
		//	      "additionalProperties": false,
		//	      "description": "Modality routing configuration",
		//	      "properties": {
		//	        "jpeg": {
		//	          "enum": [
		//	            "DOCUMENT",
		//	            "IMAGE",
		//	            "VIDEO",
		//	            "AUDIO"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "mov": {
		//	          "enum": [
		//	            "DOCUMENT",
		//	            "IMAGE",
		//	            "VIDEO",
		//	            "AUDIO"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "mp4": {
		//	          "enum": [
		//	            "DOCUMENT",
		//	            "IMAGE",
		//	            "VIDEO",
		//	            "AUDIO"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "png": {
		//	          "enum": [
		//	            "DOCUMENT",
		//	            "IMAGE",
		//	            "VIDEO",
		//	            "AUDIO"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Video": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "ModalityProcessing": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "State": {
		//	              "enum": [
		//	                "ENABLED",
		//	                "DISABLED"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"override_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Audio
				"audio": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ModalityProcessing
						"modality_processing": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: State
								"state": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Document
				"document": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ModalityProcessing
						"modality_processing": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: State
								"state": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Splitter
						"splitter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: State
								"state": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Image
				"image": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ModalityProcessing
						"modality_processing": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: State
								"state": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ModalityRouting
				"modality_routing": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: jpeg
						"jpeg": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: mov
						"mov": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: mp4
						"mp_4": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: png
						"png": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Modality routing configuration",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Video
				"video": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ModalityProcessing
						"modality_processing": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: State
								"state": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Override configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN of a DataAutomationProject",
		//	  "maxLength": 128,
		//	  "pattern": "^arn:aws(|-cn|-us-gov):bedrock:[a-zA-Z0-9-]*:(aws|[0-9]{12}):data-automation-project/[a-zA-Z0-9-]{12,36}$",
		//	  "type": "string"
		//	}
		"project_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN of a DataAutomationProject",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectDescription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of the DataAutomationProject",
		//	  "type": "string"
		//	}
		"project_description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of the DataAutomationProject",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of the DataAutomationProject",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9-_]+$",
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of the DataAutomationProject",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectStage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Stage of the Project",
		//	  "enum": [
		//	    "DEVELOPMENT",
		//	    "LIVE"
		//	  ],
		//	  "type": "string"
		//	}
		"project_stage": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Stage of the Project",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StandardOutputConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Standard output configuration",
		//	  "properties": {
		//	    "Audio": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Extraction": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Category": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "State": {
		//	                  "enum": [
		//	                    "ENABLED",
		//	                    "DISABLED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Types": {
		//	                  "items": {
		//	                    "enum": [
		//	                      "AUDIO_CONTENT_MODERATION",
		//	                      "TRANSCRIPT",
		//	                      "TOPIC_CONTENT_MODERATION"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "type": "array",
		//	                  "uniqueItems": true
		//	                }
		//	              },
		//	              "required": [
		//	                "State"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "Category"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "GenerativeField": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "State": {
		//	              "enum": [
		//	                "ENABLED",
		//	                "DISABLED"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "Types": {
		//	              "items": {
		//	                "enum": [
		//	                  "AUDIO_SUMMARY",
		//	                  "IAB",
		//	                  "TOPIC_SUMMARY"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            }
		//	          },
		//	          "required": [
		//	            "State"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Document": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Extraction": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "BoundingBox": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "State": {
		//	                  "enum": [
		//	                    "ENABLED",
		//	                    "DISABLED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "State"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "Granularity": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Types": {
		//	                  "items": {
		//	                    "enum": [
		//	                      "DOCUMENT",
		//	                      "PAGE",
		//	                      "ELEMENT",
		//	                      "WORD",
		//	                      "LINE"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "type": "array",
		//	                  "uniqueItems": true
		//	                }
		//	              },
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "BoundingBox",
		//	            "Granularity"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "GenerativeField": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "State": {
		//	              "enum": [
		//	                "ENABLED",
		//	                "DISABLED"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "State"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "OutputFormat": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AdditionalFileFormat": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "State": {
		//	                  "enum": [
		//	                    "ENABLED",
		//	                    "DISABLED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "State"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "TextFormat": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Types": {
		//	                  "items": {
		//	                    "enum": [
		//	                      "PLAIN_TEXT",
		//	                      "MARKDOWN",
		//	                      "HTML",
		//	                      "CSV"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "type": "array",
		//	                  "uniqueItems": true
		//	                }
		//	              },
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "AdditionalFileFormat",
		//	            "TextFormat"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Image": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Extraction": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "BoundingBox": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "State": {
		//	                  "enum": [
		//	                    "ENABLED",
		//	                    "DISABLED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "State"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "Category": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "State": {
		//	                  "enum": [
		//	                    "ENABLED",
		//	                    "DISABLED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Types": {
		//	                  "items": {
		//	                    "enum": [
		//	                      "CONTENT_MODERATION",
		//	                      "TEXT_DETECTION",
		//	                      "LOGOS"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "type": "array",
		//	                  "uniqueItems": true
		//	                }
		//	              },
		//	              "required": [
		//	                "State"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "BoundingBox",
		//	            "Category"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "GenerativeField": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "State": {
		//	              "enum": [
		//	                "ENABLED",
		//	                "DISABLED"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "Types": {
		//	              "items": {
		//	                "enum": [
		//	                  "IMAGE_SUMMARY",
		//	                  "IAB"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            }
		//	          },
		//	          "required": [
		//	            "State"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Video": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Extraction": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "BoundingBox": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "State": {
		//	                  "enum": [
		//	                    "ENABLED",
		//	                    "DISABLED"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "State"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "Category": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "State": {
		//	                  "enum": [
		//	                    "ENABLED",
		//	                    "DISABLED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "Types": {
		//	                  "items": {
		//	                    "enum": [
		//	                      "CONTENT_MODERATION",
		//	                      "TEXT_DETECTION",
		//	                      "TRANSCRIPT",
		//	                      "LOGOS"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "type": "array",
		//	                  "uniqueItems": true
		//	                }
		//	              },
		//	              "required": [
		//	                "State"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "BoundingBox",
		//	            "Category"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "GenerativeField": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "State": {
		//	              "enum": [
		//	                "ENABLED",
		//	                "DISABLED"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "Types": {
		//	              "items": {
		//	                "enum": [
		//	                  "VIDEO_SUMMARY",
		//	                  "IAB",
		//	                  "CHAPTER_SUMMARY"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            }
		//	          },
		//	          "required": [
		//	            "State"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"standard_output_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Audio
				"audio": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Extraction
						"extraction": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Category
								"category": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: State
										"state": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Types
										"types": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GenerativeField
						"generative_field": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: State
								"state": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Types
								"types": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Document
				"document": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Extraction
						"extraction": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BoundingBox
								"bounding_box": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: State
										"state": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Granularity
								"granularity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Types
										"types": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GenerativeField
						"generative_field": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: State
								"state": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OutputFormat
						"output_format": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AdditionalFileFormat
								"additional_file_format": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: State
										"state": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: TextFormat
								"text_format": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Types
										"types": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Image
				"image": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Extraction
						"extraction": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BoundingBox
								"bounding_box": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: State
										"state": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Category
								"category": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: State
										"state": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Types
										"types": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GenerativeField
						"generative_field": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: State
								"state": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Types
								"types": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Video
				"video": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Extraction
						"extraction": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BoundingBox
								"bounding_box": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: State
										"state": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Category
								"category": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: State
										"state": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Types
										"types": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GenerativeField
						"generative_field": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: State
								"state": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Types
								"types": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Standard output configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "COMPLETED",
		//	    "IN_PROGRESS",
		//	    "FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of Tags",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Definition of the key/value pair for a tag",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "Key for the tag",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "Value for the tag",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Key for the tag",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Value for the tag",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of Tags",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Bedrock::DataAutomationProject",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Bedrock::DataAutomationProject").WithTerraformTypeName("awscc_bedrock_data_automation_project")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"additional_file_format":        "AdditionalFileFormat",
		"audio":                         "Audio",
		"blueprint_arn":                 "BlueprintArn",
		"blueprint_stage":               "BlueprintStage",
		"blueprint_version":             "BlueprintVersion",
		"blueprints":                    "Blueprints",
		"bounding_box":                  "BoundingBox",
		"category":                      "Category",
		"creation_time":                 "CreationTime",
		"custom_output_configuration":   "CustomOutputConfiguration",
		"document":                      "Document",
		"extraction":                    "Extraction",
		"generative_field":              "GenerativeField",
		"granularity":                   "Granularity",
		"image":                         "Image",
		"jpeg":                          "jpeg",
		"key":                           "Key",
		"kms_encryption_context":        "KmsEncryptionContext",
		"kms_key_id":                    "KmsKeyId",
		"last_modified_time":            "LastModifiedTime",
		"modality_processing":           "ModalityProcessing",
		"modality_routing":              "ModalityRouting",
		"mov":                           "mov",
		"mp_4":                          "mp4",
		"output_format":                 "OutputFormat",
		"override_configuration":        "OverrideConfiguration",
		"png":                           "png",
		"project_arn":                   "ProjectArn",
		"project_description":           "ProjectDescription",
		"project_name":                  "ProjectName",
		"project_stage":                 "ProjectStage",
		"splitter":                      "Splitter",
		"standard_output_configuration": "StandardOutputConfiguration",
		"state":                         "State",
		"status":                        "Status",
		"tags":                          "Tags",
		"text_format":                   "TextFormat",
		"types":                         "Types",
		"value":                         "Value",
		"video":                         "Video",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
