// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package bedrock

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_bedrock_automated_reasoning_policy", automatedReasoningPolicyDataSource)
}

// automatedReasoningPolicyDataSource returns the Terraform awscc_bedrock_automated_reasoning_policy data source.
// This Terraform data source corresponds to the CloudFormation AWS::Bedrock::AutomatedReasoningPolicy resource.
func automatedReasoningPolicyDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Time this policy was created",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Time this policy was created",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DefinitionHash
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The hash for this version",
		//	  "maxLength": 128,
		//	  "minLength": 128,
		//	  "pattern": "^[0-9a-z]{128}$",
		//	  "type": "string"
		//	}
		"definition_hash": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The hash for this version",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 1024,
		//	  "pattern": "^[\\s\\S]+$",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^[0-9a-zA-Z-_ ]+$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws(-[^:]+)?:bedrock:[a-z0-9-]{1,20}:[0-9]{12}:automated-reasoning-policy\\/[a-z0-9]{12}$",
		//	  "type": "string"
		//	}
		"policy_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyDefinition
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Rules": {
		//	      "description": "The rules definition block of an AutomatedReasoningPolicyDefinition.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AlternateExpression": {
		//	            "description": "An alternate expression for this rule",
		//	            "maxLength": 2048,
		//	            "pattern": "^[\\s\\S]+$",
		//	            "type": "string"
		//	          },
		//	          "Expression": {
		//	            "description": "The SMT expression for this rule",
		//	            "maxLength": 2048,
		//	            "pattern": "^[\\s\\S]+$",
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "description": "A unique id within the PolicyDefinition",
		//	            "maxLength": 12,
		//	            "minLength": 12,
		//	            "pattern": "^[A-Z][0-9A-Z]{11}$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Id",
		//	          "Expression"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 500,
		//	      "type": "array"
		//	    },
		//	    "Types": {
		//	      "description": "The types definition block of an AutomatedReasoningPolicyDefinition.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Description": {
		//	            "description": "A natural language description of this type.",
		//	            "maxLength": 1024,
		//	            "pattern": "^[\\s\\S]+$",
		//	            "type": "string"
		//	          },
		//	          "Name": {
		//	            "description": "A name for this type.",
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "pattern": "^[A-Za-z][A-Za-z0-9_]+$",
		//	            "type": "string"
		//	          },
		//	          "Values": {
		//	            "description": "A list of valid values for this type.",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Description": {
		//	                  "description": "A natural language description of the type's value.",
		//	                  "maxLength": 1024,
		//	                  "pattern": "^[\\s\\S]+$",
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "description": "The value of the type value.",
		//	                  "maxLength": 64,
		//	                  "minLength": 1,
		//	                  "pattern": "^[A-Za-z][A-Za-z0-9_]+$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Value"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "maxItems": 50,
		//	            "minItems": 1,
		//	            "type": "array"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name",
		//	          "Values"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 50,
		//	      "type": "array"
		//	    },
		//	    "Variables": {
		//	      "description": "The variables definition block of an AutomatedReasoningPolicyDefinition.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Description": {
		//	            "description": "A natural language description of this variable.",
		//	            "maxLength": 1024,
		//	            "pattern": "^[\\s\\S]+$",
		//	            "type": "string"
		//	          },
		//	          "Name": {
		//	            "description": "A name from this variable.",
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "pattern": "^[A-Za-z][A-Za-z0-9_]+$",
		//	            "type": "string"
		//	          },
		//	          "Type": {
		//	            "description": "A type for this variable.",
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "pattern": "^[A-Za-z][A-Za-z0-9_]+$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Name",
		//	          "Type",
		//	          "Description"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 200,
		//	      "type": "array"
		//	    },
		//	    "Version": {
		//	      "description": "The policy format version.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"policy_definition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Rules
				"rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AlternateExpression
							"alternate_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "An alternate expression for this rule",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Expression
							"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The SMT expression for this rule",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A unique id within the PolicyDefinition",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The rules definition block of an AutomatedReasoningPolicyDefinition.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Types
				"types": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Description
							"description": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A natural language description of this type.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A name for this type.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Values
							"values": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Description
										"description": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "A natural language description of the type's value.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The value of the type value.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "A list of valid values for this type.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The types definition block of an AutomatedReasoningPolicyDefinition.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Variables
				"variables": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Description
							"description": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A natural language description of this variable.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A name from this variable.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A type for this variable.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The variables definition block of an AutomatedReasoningPolicyDefinition.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Version
				"version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The policy format version.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The id of the policy",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "pattern": "^[a-z0-9]{12}$",
		//	  "type": "string"
		//	}
		"policy_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The id of the policy",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Definition of the key/value pair for a tag",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "Tag Key",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "Tag Value",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "pattern": "^[a-zA-Z0-9\\s._:/=+@-]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Tag Key",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Tag Value",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Time this policy was last updated",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Time this policy was last updated",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Version
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Version of the policy that was created. This will always be `DRAFT`",
		//	  "pattern": "^(([1-9][0-9]{0,11})|(DRAFT))$",
		//	  "type": "string"
		//	}
		"version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Version of the policy that was created. This will always be `DRAFT`",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Bedrock::AutomatedReasoningPolicy",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Bedrock::AutomatedReasoningPolicy").WithTerraformTypeName("awscc_bedrock_automated_reasoning_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"alternate_expression": "AlternateExpression",
		"created_at":           "CreatedAt",
		"definition_hash":      "DefinitionHash",
		"description":          "Description",
		"expression":           "Expression",
		"id":                   "Id",
		"key":                  "Key",
		"name":                 "Name",
		"policy_arn":           "PolicyArn",
		"policy_definition":    "PolicyDefinition",
		"policy_id":            "PolicyId",
		"rules":                "Rules",
		"tags":                 "Tags",
		"type":                 "Type",
		"types":                "Types",
		"updated_at":           "UpdatedAt",
		"value":                "Value",
		"values":               "Values",
		"variables":            "Variables",
		"version":              "Version",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
