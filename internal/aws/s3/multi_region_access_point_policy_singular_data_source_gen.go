// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package s3

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_s3_multi_region_access_point_policy", multiRegionAccessPointPolicyDataSource)
}

// multiRegionAccessPointPolicyDataSource returns the Terraform awscc_s3_multi_region_access_point_policy data source.
// This Terraform data source corresponds to the CloudFormation AWS::S3::MultiRegionAccessPointPolicy resource.
func multiRegionAccessPointPolicyDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: MrapName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the Multi Region Access Point to apply policy",
		//	  "maxLength": 50,
		//	  "minLength": 3,
		//	  "pattern": "^[a-z0-9][-a-z0-9]{1,48}[a-z0-9]$",
		//	  "type": "string"
		//	}
		"mrap_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the Multi Region Access Point to apply policy",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Policy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Policy document to apply to a Multi Region Access Point",
		//	  "type": "object"
		//	}
		"policy": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  jsontypes.NormalizedType{},
			Description: "Policy document to apply to a Multi Region Access Point",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The Policy Status associated with this Multi Region Access Point",
		//	  "properties": {
		//	    "IsPublic": {
		//	      "description": "Specifies whether the policy is public or not.",
		//	      "enum": [
		//	        "true",
		//	        "false"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "IsPublic"
		//	  ],
		//	  "type": "object"
		//	}
		"policy_status": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: IsPublic
				"is_public": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies whether the policy is public or not.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The Policy Status associated with this Multi Region Access Point",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::S3::MultiRegionAccessPointPolicy",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::S3::MultiRegionAccessPointPolicy").WithTerraformTypeName("awscc_s3_multi_region_access_point_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"is_public":     "IsPublic",
		"mrap_name":     "MrapName",
		"policy":        "Policy",
		"policy_status": "PolicyStatus",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
