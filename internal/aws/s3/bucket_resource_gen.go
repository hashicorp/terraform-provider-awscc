// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package s3

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"regexp"
)

func init() {
	registry.AddResourceFactory("awscc_s3_bucket", bucketResource)
}

// bucketResource returns the Terraform awscc_s3_bucket resource.
// This Terraform resource corresponds to the CloudFormation AWS::S3::Bucket resource.
func bucketResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccelerateConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3 Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon S3 User Guide*.",
		//	  "properties": {
		//	    "AccelerationStatus": {
		//	      "description": "Specifies the transfer acceleration status of the bucket.",
		//	      "enum": [
		//	        "Enabled",
		//	        "Suspended"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "AccelerationStatus"
		//	  ],
		//	  "type": "object"
		//	}
		"accelerate_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AccelerationStatus
				"acceleration_status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies the transfer acceleration status of the bucket.",
					Required:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"Enabled",
							"Suspended",
						),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see [Amazon S3 Transfer Acceleration](https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html) in the *Amazon S3 User Guide*.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AccessControl
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "This is a legacy property, and it is not recommended for most use cases. A majority of modern use cases in Amazon S3 no longer require the use of ACLs, and we recommend that you keep ACLs disabled. For more information, see [Controlling object ownership](https://docs.aws.amazon.com//AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.\n  A canned access control list (ACL) that grants predefined permissions to the bucket. For more information about canned ACLs, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) in the *Amazon S3 User Guide*.\n  S3 buckets are created with ACLs disabled by default. Therefore, unless you explicitly set the [AWS::S3::OwnershipControls](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-ownershipcontrols.html) property to enable ACLs, your resource will fail to deploy with any value other than Private. Use cases requiring ACLs are uncommon.\n  The majority of access control configurations can be successfully and more easily achieved with bucket policies. For more information, see [AWS::S3::BucketPolicy](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html). For examples of common policy configurations, including S3 Server Access Logs buckets and more, see [Bucket policy examples](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html) in the *Amazon S3 User Guide*.",
		//	  "enum": [
		//	    "AuthenticatedRead",
		//	    "AwsExecRead",
		//	    "BucketOwnerFullControl",
		//	    "BucketOwnerRead",
		//	    "LogDeliveryWrite",
		//	    "Private",
		//	    "PublicRead",
		//	    "PublicReadWrite"
		//	  ],
		//	  "type": "string"
		//	}
		"access_control": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "This is a legacy property, and it is not recommended for most use cases. A majority of modern use cases in Amazon S3 no longer require the use of ACLs, and we recommend that you keep ACLs disabled. For more information, see [Controlling object ownership](https://docs.aws.amazon.com//AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.\n  A canned access control list (ACL) that grants predefined permissions to the bucket. For more information about canned ACLs, see [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl) in the *Amazon S3 User Guide*.\n  S3 buckets are created with ACLs disabled by default. Therefore, unless you explicitly set the [AWS::S3::OwnershipControls](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-ownershipcontrols.html) property to enable ACLs, your resource will fail to deploy with any value other than Private. Use cases requiring ACLs are uncommon.\n  The majority of access control configurations can be successfully and more easily achieved with bucket policies. For more information, see [AWS::S3::BucketPolicy](https://docs.aws.amazon.com//AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html). For examples of common policy configurations, including S3 Server Access Logs buckets and more, see [Bucket policy examples](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html) in the *Amazon S3 User Guide*.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"AuthenticatedRead",
					"AwsExecRead",
					"BucketOwnerFullControl",
					"BucketOwnerRead",
					"LogDeliveryWrite",
					"Private",
					"PublicRead",
					"PublicReadWrite",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// AccessControl is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: AnalyticsConfigurations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.",
		//	    "properties": {
		//	      "Id": {
		//	        "description": "The ID that identifies the analytics configuration.",
		//	        "type": "string"
		//	      },
		//	      "Prefix": {
		//	        "description": "The prefix that an object must have to be included in the analytics results.",
		//	        "type": "string"
		//	      },
		//	      "StorageClassAnalysis": {
		//	        "additionalProperties": false,
		//	        "description": "Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes.",
		//	        "properties": {
		//	          "DataExport": {
		//	            "additionalProperties": false,
		//	            "description": "Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.",
		//	            "properties": {
		//	              "Destination": {
		//	                "additionalProperties": false,
		//	                "description": "The place to store the data for an analysis.",
		//	                "properties": {
		//	                  "BucketAccountId": {
		//	                    "description": "The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data.\n   Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.",
		//	                    "type": "string"
		//	                  },
		//	                  "BucketArn": {
		//	                    "description": "The Amazon Resource Name (ARN) of the bucket to which data is exported.",
		//	                    "type": "string"
		//	                  },
		//	                  "Format": {
		//	                    "description": "Specifies the file format used when exporting data to Amazon S3.\n *Allowed values*: ``CSV`` | ``ORC`` | ``Parquet``",
		//	                    "enum": [
		//	                      "CSV",
		//	                      "ORC",
		//	                      "Parquet"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "Prefix": {
		//	                    "description": "The prefix to use when exporting data. The prefix is prepended to all results.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "BucketArn",
		//	                  "Format"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "OutputSchemaVersion": {
		//	                "description": "The version of the output schema to use when exporting data. Must be ``V_1``.",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Destination",
		//	              "OutputSchemaVersion"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "TagFilters": {
		//	        "description": "The tags to use when evaluating an analytics filter.\n The analytics only includes objects that meet the filter's criteria. If no filter is specified, all of the contents of the bucket are included in the analysis.",
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.",
		//	          "properties": {
		//	            "Key": {
		//	              "description": "The tag key.",
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "description": "The tag value.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Value",
		//	            "Key"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      }
		//	    },
		//	    "required": [
		//	      "StorageClassAnalysis",
		//	      "Id"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"analytics_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Id
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID that identifies the analytics configuration.",
						Required:    true,
					}, /*END ATTRIBUTE*/
					// Property: Prefix
					"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The prefix that an object must have to be included in the analytics results.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: StorageClassAnalysis
					"storage_class_analysis": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DataExport
							"data_export": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Destination
									"destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: BucketAccountId
											"bucket_account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data.\n   Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.",
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: BucketArn
											"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The Amazon Resource Name (ARN) of the bucket to which data is exported.",
												Required:    true,
											}, /*END ATTRIBUTE*/
											// Property: Format
											"format": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Specifies the file format used when exporting data to Amazon S3.\n *Allowed values*: ``CSV`` | ``ORC`` | ``Parquet``",
												Required:    true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"CSV",
														"ORC",
														"Parquet",
													),
												}, /*END VALIDATORS*/
											}, /*END ATTRIBUTE*/
											// Property: Prefix
											"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The prefix to use when exporting data. The prefix is prepended to all results.",
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The place to store the data for an analysis.",
										Required:    true,
									}, /*END ATTRIBUTE*/
									// Property: OutputSchemaVersion
									"output_schema_version": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The version of the output schema to use when exporting data. Must be ``V_1``.",
										Required:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Contains data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes.",
						Required:    true,
					}, /*END ATTRIBUTE*/
					// Property: TagFilters
					"tag_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The tag key.",
									Required:    true,
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The tag value.",
									Required:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "The tags to use when evaluating an analytics filter.\n The analytics only includes objects that meet the filter's criteria. If no filter is specified, all of the contents of the bucket are included in the analysis.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.List{ /*START VALIDATORS*/
							listvalidator.UniqueValues(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.UniqueValues(),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the specified bucket.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the specified bucket.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: BucketEncryption
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3 Default Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon S3 User Guide*.",
		//	  "properties": {
		//	    "ServerSideEncryptionConfiguration": {
		//	      "description": "Specifies the default server-side-encryption configuration.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies the default server-side encryption configuration.",
		//	        "properties": {
		//	          "BucketKeyEnabled": {
		//	            "description": "Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the ``BucketKeyEnabled`` element to ``true`` causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled.\n For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the *Amazon S3 User Guide*.",
		//	            "type": "boolean"
		//	          },
		//	          "ServerSideEncryptionByDefault": {
		//	            "additionalProperties": false,
		//	            "description": "Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.",
		//	            "properties": {
		//	              "KMSMasterKeyID": {
		//	                "description": "AWS Key Management Service (KMS) customer AWS KMS key ID to use for the default encryption. This parameter is allowed if and only if ``SSEAlgorithm`` is set to ``aws:kms`` or ``aws:kms:dsse``.\n You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of the KMS key.\n  +  Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` \n  +  Key ARN: ``arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` \n  +  Key Alias: ``alias/alias-name`` \n  \n If you use a key ID, you can run into a LogDestination undeliverable error when creating a VPC flow log. \n If you are using encryption with cross-account or AWS service operations you must use a fully qualified KMS key ARN. For more information, see [Using encryption for cross-account operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy).\n  Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.",
		//	                "type": "string"
		//	              },
		//	              "SSEAlgorithm": {
		//	                "description": "Server-side encryption algorithm to use for the default encryption.",
		//	                "enum": [
		//	                  "aws:kms",
		//	                  "AES256",
		//	                  "aws:kms:dsse"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "SSEAlgorithm"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "required": [
		//	    "ServerSideEncryptionConfiguration"
		//	  ],
		//	  "type": "object"
		//	}
		"bucket_encryption": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ServerSideEncryptionConfiguration
				"server_side_encryption_configuration": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: BucketKeyEnabled
							"bucket_key_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies whether Amazon S3 should use an S3 Bucket Key with server-side encryption using KMS (SSE-KMS) for new objects in the bucket. Existing objects are not affected. Setting the ``BucketKeyEnabled`` element to ``true`` causes Amazon S3 to use an S3 Bucket Key. By default, S3 Bucket Key is not enabled.\n For more information, see [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) in the *Amazon S3 User Guide*.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ServerSideEncryptionByDefault
							"server_side_encryption_by_default": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: KMSMasterKeyID
									"kms_master_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "AWS Key Management Service (KMS) customer AWS KMS key ID to use for the default encryption. This parameter is allowed if and only if ``SSEAlgorithm`` is set to ``aws:kms`` or ``aws:kms:dsse``.\n You can specify the key ID, key alias, or the Amazon Resource Name (ARN) of the KMS key.\n  +  Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` \n  +  Key ARN: ``arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` \n  +  Key Alias: ``alias/alias-name`` \n  \n If you use a key ID, you can run into a LogDestination undeliverable error when creating a VPC flow log. \n If you are using encryption with cross-account or AWS service operations you must use a fully qualified KMS key ARN. For more information, see [Using encryption for cross-account operations](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html#bucket-encryption-update-bucket-policy).\n  Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: SSEAlgorithm
									"sse_algorithm": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Server-side encryption algorithm to use for the default encryption.",
										Required:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"aws:kms",
												"AES256",
												"aws:kms:dsse",
											),
										}, /*END VALIDATORS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Specifies the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Specifies the default server-side-encryption configuration.",
					Required:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.UniqueValues(),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3), AWS KMS-managed keys (SSE-KMS), or dual-layer server-side encryption with KMS-managed keys (DSSE-KMS). For information about the Amazon S3 default encryption feature, see [Amazon S3 Default Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html) in the *Amazon S3 User Guide*.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: BucketName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique ID and uses that ID for the bucket name. The bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-) and must follow [Amazon S3 bucket restrictions and limitations](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html). For more information, see [Rules for naming Amazon S3 buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules) in the *Amazon S3 User Guide*. \n  If you specify a name, you can't perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you need to replace the resource, specify a new name.",
		//	  "maxLength": 63,
		//	  "minLength": 3,
		//	  "pattern": "^[a-z0-9][a-z0-9//.//-]*[a-z0-9]$",
		//	  "type": "string"
		//	}
		"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique ID and uses that ID for the bucket name. The bucket name must contain only lowercase letters, numbers, periods (.), and dashes (-) and must follow [Amazon S3 bucket restrictions and limitations](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html). For more information, see [Rules for naming Amazon S3 buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules) in the *Amazon S3 User Guide*. \n  If you specify a name, you can't perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you need to replace the resource, specify a new name.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(3, 63),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9][a-z0-9//.//-]*[a-z0-9]$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CorsConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User Guide*.",
		//	  "properties": {
		//	    "CorsRules": {
		//	      "description": "A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies a cross-origin access rule for an Amazon S3 bucket.",
		//	        "properties": {
		//	          "AllowedHeaders": {
		//	            "description": "Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "AllowedMethods": {
		//	            "description": "An HTTP method that you allow the origin to run.\n *Allowed values*: ``GET`` | ``PUT`` | ``HEAD`` | ``POST`` | ``DELETE``",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "enum": [
		//	                "GET",
		//	                "PUT",
		//	                "HEAD",
		//	                "POST",
		//	                "DELETE"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "AllowedOrigins": {
		//	            "description": "One or more origins you want customers to be able to access the bucket from.",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "ExposedHeaders": {
		//	            "description": "One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "Id": {
		//	            "description": "A unique identifier for this rule. The value must be no more than 255 characters.",
		//	            "maxLength": 255,
		//	            "type": "string"
		//	          },
		//	          "MaxAge": {
		//	            "description": "The time in seconds that your browser is to cache the preflight response for the specified resource.",
		//	            "minimum": 0,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "required": [
		//	          "AllowedMethods",
		//	          "AllowedOrigins"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "required": [
		//	    "CorsRules"
		//	  ],
		//	  "type": "object"
		//	}
		"cors_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CorsRules
				"cors_rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AllowedHeaders
							"allowed_headers": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "Headers that are specified in the ``Access-Control-Request-Headers`` header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.List{ /*START VALIDATORS*/
									listvalidator.UniqueValues(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: AllowedMethods
							"allowed_methods": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "An HTTP method that you allow the origin to run.\n *Allowed values*: ``GET`` | ``PUT`` | ``HEAD`` | ``POST`` | ``DELETE``",
								Required:    true,
								Validators: []validator.List{ /*START VALIDATORS*/
									listvalidator.UniqueValues(),
									listvalidator.ValueStringsAre(
										stringvalidator.OneOf(
											"GET",
											"PUT",
											"HEAD",
											"POST",
											"DELETE",
										),
									),
								}, /*END VALIDATORS*/
							}, /*END ATTRIBUTE*/
							// Property: AllowedOrigins
							"allowed_origins": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "One or more origins you want customers to be able to access the bucket from.",
								Required:    true,
								Validators: []validator.List{ /*START VALIDATORS*/
									listvalidator.UniqueValues(),
								}, /*END VALIDATORS*/
							}, /*END ATTRIBUTE*/
							// Property: ExposedHeaders
							"exposed_headers": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "One or more headers in the response that you want customers to be able to access from their applications (for example, from a JavaScript ``XMLHttpRequest`` object).",
								Optional:    true,
								Computed:    true,
								Validators: []validator.List{ /*START VALIDATORS*/
									listvalidator.UniqueValues(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A unique identifier for this rule. The value must be no more than 255 characters.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.LengthAtMost(255),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: MaxAge
							"max_age": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The time in seconds that your browser is to cache the preflight response for the specified resource.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.Int64{ /*START VALIDATORS*/
									int64validator.AtLeast(0),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A set of origins and methods (cross-origin access that you want to allow). You can add up to 100 rules to the configuration.",
					Required:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.UniqueValues(),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html) in the *Amazon S3 User Guide*.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv4 DNS name of the specified bucket.",
		//	  "examples": [
		//	    "mystack-mybucket-kdwwxmddtr2g.s3.amazonaws.com"
		//	  ],
		//	  "type": "string"
		//	}
		"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IPv4 DNS name of the specified bucket.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DualStackDomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv6 DNS name of the specified bucket. For more information about dual-stack endpoints, see [Using Amazon S3 Dual-Stack Endpoints](https://docs.aws.amazon.com/AmazonS3/latest/dev/dual-stack-endpoints.html).",
		//	  "examples": [
		//	    "mystack-mybucket-kdwwxmddtr2g.s3.dualstack.us-east-2.amazonaws.com"
		//	  ],
		//	  "type": "string"
		//	}
		"dual_stack_domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IPv6 DNS name of the specified bucket. For more information about dual-stack endpoints, see [Using Amazon S3 Dual-Stack Endpoints](https://docs.aws.amazon.com/AmazonS3/latest/dev/dual-stack-endpoints.html).",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IntelligentTieringConfigurations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Defines how Amazon S3 handles Intelligent-Tiering storage.",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Specifies the S3 Intelligent-Tiering configuration for an Amazon S3 bucket.\n For information about the S3 Intelligent-Tiering storage class, see [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access).",
		//	    "properties": {
		//	      "Id": {
		//	        "description": "The ID used to identify the S3 Intelligent-Tiering configuration.",
		//	        "type": "string"
		//	      },
		//	      "Prefix": {
		//	        "description": "An object key name prefix that identifies the subset of objects to which the rule applies.",
		//	        "type": "string"
		//	      },
		//	      "Status": {
		//	        "description": "Specifies the status of the configuration.",
		//	        "enum": [
		//	          "Disabled",
		//	          "Enabled"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "TagFilters": {
		//	        "description": "A container for a key-value pair.",
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.",
		//	          "properties": {
		//	            "Key": {
		//	              "description": "The tag key.",
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "description": "The tag value.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Value",
		//	            "Key"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "Tierings": {
		//	        "description": "Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ``ARCHIVE_ACCESS`` and ``DEEP_ARCHIVE_ACCESS``.\n  You only need Intelligent Tiering Configuration enabled on a bucket if you want to automatically move objects stored in the Intelligent-Tiering storage class to Archive Access or Deep Archive Access tiers.",
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "The S3 Intelligent-Tiering storage class is designed to optimize storage costs by automatically moving data to the most cost-effective storage access tier, without additional operational overhead.",
		//	          "properties": {
		//	            "AccessTier": {
		//	              "description": "S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a list of access tiers in the S3 Intelligent-Tiering storage class.",
		//	              "enum": [
		//	                "ARCHIVE_ACCESS",
		//	                "DEEP_ARCHIVE_ACCESS"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "Days": {
		//	              "description": "The number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730 days).",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "required": [
		//	            "AccessTier",
		//	            "Days"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      }
		//	    },
		//	    "required": [
		//	      "Id",
		//	      "Status",
		//	      "Tierings"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"intelligent_tiering_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Id
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID used to identify the S3 Intelligent-Tiering configuration.",
						Required:    true,
					}, /*END ATTRIBUTE*/
					// Property: Prefix
					"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "An object key name prefix that identifies the subset of objects to which the rule applies.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Status
					"status": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Specifies the status of the configuration.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"Disabled",
								"Enabled",
							),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
					// Property: TagFilters
					"tag_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The tag key.",
									Required:    true,
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The tag value.",
									Required:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "A container for a key-value pair.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.List{ /*START VALIDATORS*/
							listvalidator.UniqueValues(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Tierings
					"tierings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AccessTier
								"access_tier": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "S3 Intelligent-Tiering access tier. See [Storage class for automatically optimizing frequently and infrequently accessed objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html#sc-dynamic-data-access) for a list of access tiers in the S3 Intelligent-Tiering storage class.",
									Required:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"ARCHIVE_ACCESS",
											"DEEP_ARCHIVE_ACCESS",
										),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
								// Property: Days
								"days": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The number of consecutive days of no access after which an object will be eligible to be transitioned to the corresponding tier. The minimum number of days specified for Archive Access tier must be at least 90 days and Deep Archive Access tier must be at least 180 days. The maximum can be up to 2 years (730 days).",
									Required:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least one tier must be defined in the list. At most, you can specify two tiers in the list, one for each available AccessTier: ``ARCHIVE_ACCESS`` and ``DEEP_ARCHIVE_ACCESS``.\n  You only need Intelligent Tiering Configuration enabled on a bucket if you want to automatically move objects stored in the Intelligent-Tiering storage class to Archive Access or Deep Archive Access tiers.",
						Required:    true,
						Validators: []validator.List{ /*START VALIDATORS*/
							listvalidator.UniqueValues(),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Defines how Amazon S3 handles Intelligent-Tiering storage.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.UniqueValues(),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InventoryConfigurations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3 API Reference*.",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3 API Reference*.",
		//	    "properties": {
		//	      "Destination": {
		//	        "additionalProperties": false,
		//	        "description": "Contains information about where to publish the inventory results.",
		//	        "properties": {
		//	          "BucketAccountId": {
		//	            "description": "The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data.\n   Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.",
		//	            "type": "string"
		//	          },
		//	          "BucketArn": {
		//	            "description": "The Amazon Resource Name (ARN) of the bucket to which data is exported.",
		//	            "type": "string"
		//	          },
		//	          "Format": {
		//	            "description": "Specifies the file format used when exporting data to Amazon S3.\n *Allowed values*: ``CSV`` | ``ORC`` | ``Parquet``",
		//	            "enum": [
		//	              "CSV",
		//	              "ORC",
		//	              "Parquet"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Prefix": {
		//	            "description": "The prefix to use when exporting data. The prefix is prepended to all results.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "BucketArn",
		//	          "Format"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "Enabled": {
		//	        "description": "Specifies whether the inventory is enabled or disabled. If set to ``True``, an inventory list is generated. If set to ``False``, no inventory list is generated.",
		//	        "type": "boolean"
		//	      },
		//	      "Id": {
		//	        "description": "The ID used to identify the inventory configuration.",
		//	        "type": "string"
		//	      },
		//	      "IncludedObjectVersions": {
		//	        "description": "Object versions to include in the inventory list. If set to ``All``, the list includes all the object versions, which adds the version-related fields ``VersionId``, ``IsLatest``, and ``DeleteMarker`` to the list. If set to ``Current``, the list does not contain these version-related fields.",
		//	        "enum": [
		//	          "All",
		//	          "Current"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "OptionalFields": {
		//	        "description": "Contains the optional fields that are included in the inventory results.",
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "enum": [
		//	            "Size",
		//	            "LastModifiedDate",
		//	            "StorageClass",
		//	            "ETag",
		//	            "IsMultipartUploaded",
		//	            "ReplicationStatus",
		//	            "EncryptionStatus",
		//	            "ObjectLockRetainUntilDate",
		//	            "ObjectLockMode",
		//	            "ObjectLockLegalHoldStatus",
		//	            "IntelligentTieringAccessTier",
		//	            "BucketKeyStatus",
		//	            "ChecksumAlgorithm",
		//	            "ObjectAccessControlList",
		//	            "ObjectOwner"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "Prefix": {
		//	        "description": "Specifies the inventory filter prefix.",
		//	        "type": "string"
		//	      },
		//	      "ScheduleFrequency": {
		//	        "description": "Specifies the schedule for generating inventory results.",
		//	        "enum": [
		//	          "Daily",
		//	          "Weekly"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Destination",
		//	      "Enabled",
		//	      "Id",
		//	      "IncludedObjectVersions",
		//	      "ScheduleFrequency"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"inventory_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Destination
					"destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: BucketAccountId
							"bucket_account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The account ID that owns the destination S3 bucket. If no account ID is provided, the owner is not validated before exporting data.\n   Although this value is optional, we strongly recommend that you set it to help prevent problems if the destination bucket ownership changes.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: BucketArn
							"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of the bucket to which data is exported.",
								Required:    true,
							}, /*END ATTRIBUTE*/
							// Property: Format
							"format": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies the file format used when exporting data to Amazon S3.\n *Allowed values*: ``CSV`` | ``ORC`` | ``Parquet``",
								Required:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"CSV",
										"ORC",
										"Parquet",
									),
								}, /*END VALIDATORS*/
							}, /*END ATTRIBUTE*/
							// Property: Prefix
							"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The prefix to use when exporting data. The prefix is prepended to all results.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Contains information about where to publish the inventory results.",
						Required:    true,
					}, /*END ATTRIBUTE*/
					// Property: Enabled
					"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Description: "Specifies whether the inventory is enabled or disabled. If set to ``True``, an inventory list is generated. If set to ``False``, no inventory list is generated.",
						Required:    true,
					}, /*END ATTRIBUTE*/
					// Property: Id
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID used to identify the inventory configuration.",
						Required:    true,
					}, /*END ATTRIBUTE*/
					// Property: IncludedObjectVersions
					"included_object_versions": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Object versions to include in the inventory list. If set to ``All``, the list includes all the object versions, which adds the version-related fields ``VersionId``, ``IsLatest``, and ``DeleteMarker`` to the list. If set to ``Current``, the list does not contain these version-related fields.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"All",
								"Current",
							),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
					// Property: OptionalFields
					"optional_fields": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "Contains the optional fields that are included in the inventory results.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.List{ /*START VALIDATORS*/
							listvalidator.UniqueValues(),
							listvalidator.ValueStringsAre(
								stringvalidator.OneOf(
									"Size",
									"LastModifiedDate",
									"StorageClass",
									"ETag",
									"IsMultipartUploaded",
									"ReplicationStatus",
									"EncryptionStatus",
									"ObjectLockRetainUntilDate",
									"ObjectLockMode",
									"ObjectLockLegalHoldStatus",
									"IntelligentTieringAccessTier",
									"BucketKeyStatus",
									"ChecksumAlgorithm",
									"ObjectAccessControlList",
									"ObjectOwner",
								),
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Prefix
					"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Specifies the inventory filter prefix.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ScheduleFrequency
					"schedule_frequency": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Specifies the schedule for generating inventory results.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.OneOf(
								"Daily",
								"Weekly",
							),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Specifies the inventory configuration for an Amazon S3 bucket. For more information, see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html) in the *Amazon S3 API Reference*.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.UniqueValues(),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LifecycleConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the *Amazon S3 User Guide*.",
		//	  "properties": {
		//	    "Rules": {
		//	      "description": "A lifecycle rule for individual objects in an Amazon S3 bucket.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies lifecycle rules for an Amazon S3 bucket. For more information, see [Put Bucket Lifecycle Configuration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlifecycle.html) in the *Amazon S3 API Reference*.\n You must specify at least one of the following properties: ``AbortIncompleteMultipartUpload``, ``ExpirationDate``, ``ExpirationInDays``, ``NoncurrentVersionExpirationInDays``, ``NoncurrentVersionTransition``, ``NoncurrentVersionTransitions``, ``Transition``, or ``Transitions``.",
		//	        "properties": {
		//	          "AbortIncompleteMultipartUpload": {
		//	            "additionalProperties": false,
		//	            "description": "Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3 bucket.",
		//	            "properties": {
		//	              "DaysAfterInitiation": {
		//	                "description": "Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.",
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "required": [
		//	              "DaysAfterInitiation"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "ExpirationDate": {
		//	            "description": "Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601 format. The time is always midnight UTC. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.",
		//	            "pattern": "^([0-2]\\d{3})-(0[0-9]|1[0-2])-([0-2]\\d|3[01])T([01]\\d|2[0-4]):([0-5]\\d):([0-6]\\d)((\\.\\d{3})?)Z$",
		//	            "type": "string"
		//	          },
		//	          "ExpirationInDays": {
		//	            "description": "Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.",
		//	            "type": "integer"
		//	          },
		//	          "ExpiredObjectDeleteMarker": {
		//	            "description": "Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the delete marker will be removed if there are no noncurrent versions. This cannot be specified with ``ExpirationInDays``, ``ExpirationDate``, or ``TagFilters``.",
		//	            "type": "boolean"
		//	          },
		//	          "Id": {
		//	            "description": "Unique identifier for the rule. The value can't be longer than 255 characters.",
		//	            "maxLength": 255,
		//	            "type": "string"
		//	          },
		//	          "NoncurrentVersionExpiration": {
		//	            "additionalProperties": false,
		//	            "description": "Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period in the object's lifetime.",
		//	            "properties": {
		//	              "NewerNoncurrentVersions": {
		//	                "description": "Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.",
		//	                "type": "integer"
		//	              },
		//	              "NoncurrentDays": {
		//	                "description": "Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.",
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "required": [
		//	              "NoncurrentDays"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "NoncurrentVersionExpirationInDays": {
		//	            "description": "(Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and when old versions of the object expire. When object versions expire, Amazon S3 permanently deletes them. If you specify a transition and expiration time, the expiration time must be later than the transition time.",
		//	            "type": "integer"
		//	          },
		//	          "NoncurrentVersionTransition": {
		//	            "additionalProperties": false,
		//	            "description": "(Deprecated.) For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.",
		//	            "properties": {
		//	              "NewerNoncurrentVersions": {
		//	                "description": "Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.",
		//	                "type": "integer"
		//	              },
		//	              "StorageClass": {
		//	                "description": "The class of storage used to store the object.",
		//	                "enum": [
		//	                  "DEEP_ARCHIVE",
		//	                  "GLACIER",
		//	                  "Glacier",
		//	                  "GLACIER_IR",
		//	                  "INTELLIGENT_TIERING",
		//	                  "ONEZONE_IA",
		//	                  "STANDARD_IA"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "TransitionInDays": {
		//	                "description": "Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.",
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "required": [
		//	              "StorageClass",
		//	              "TransitionInDays"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "NoncurrentVersionTransitions": {
		//	            "description": "For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransition`` property.",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "Container for the transition rule that describes when noncurrent objects transition to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the ``STANDARD_IA``, ``ONEZONE_IA``, ``INTELLIGENT_TIERING``, ``GLACIER_IR``, ``GLACIER``, or ``DEEP_ARCHIVE`` storage class at a specific period in the object's lifetime. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.",
		//	              "properties": {
		//	                "NewerNoncurrentVersions": {
		//	                  "description": "Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.",
		//	                  "type": "integer"
		//	                },
		//	                "StorageClass": {
		//	                  "description": "The class of storage used to store the object.",
		//	                  "enum": [
		//	                    "DEEP_ARCHIVE",
		//	                    "GLACIER",
		//	                    "Glacier",
		//	                    "GLACIER_IR",
		//	                    "INTELLIGENT_TIERING",
		//	                    "ONEZONE_IA",
		//	                    "STANDARD_IA"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "TransitionInDays": {
		//	                  "description": "Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.",
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "StorageClass",
		//	                "TransitionInDays"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "ObjectSizeGreaterThan": {
		//	            "description": "Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in bytes. For more information about size based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.",
		//	            "maxLength": 20,
		//	            "pattern": "[0-9]+",
		//	            "type": "string"
		//	          },
		//	          "ObjectSizeLessThan": {
		//	            "description": "Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in bytes. For more information about sized based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.",
		//	            "maxLength": 20,
		//	            "pattern": "[0-9]+",
		//	            "type": "string"
		//	          },
		//	          "Prefix": {
		//	            "description": "Object key prefix that identifies one or more objects to which this rule applies.\n  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
		//	            "type": "string"
		//	          },
		//	          "Status": {
		//	            "description": "If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.",
		//	            "enum": [
		//	              "Enabled",
		//	              "Disabled"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "TagFilters": {
		//	            "description": "Tags to use to identify a subset of objects to which the lifecycle rule applies.",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.",
		//	              "properties": {
		//	                "Key": {
		//	                  "description": "The tag key.",
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "description": "The tag value.",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Value",
		//	                "Key"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "Transition": {
		//	            "additionalProperties": false,
		//	            "description": "(Deprecated.) Specifies when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transitions`` property.",
		//	            "properties": {
		//	              "StorageClass": {
		//	                "description": "The storage class to which you want the object to transition.",
		//	                "enum": [
		//	                  "DEEP_ARCHIVE",
		//	                  "GLACIER",
		//	                  "Glacier",
		//	                  "GLACIER_IR",
		//	                  "INTELLIGENT_TIERING",
		//	                  "ONEZONE_IA",
		//	                  "STANDARD_IA"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "TransitionDate": {
		//	                "description": "Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.",
		//	                "pattern": "^([0-2]\\d{3})-(0[0-9]|1[0-2])-([0-2]\\d|3[01])T([01]\\d|2[0-4]):([0-5]\\d):([0-6]\\d)((\\.\\d{3})?)Z$",
		//	                "type": "string"
		//	              },
		//	              "TransitionInDays": {
		//	                "description": "Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.",
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "required": [
		//	              "StorageClass"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Transitions": {
		//	            "description": "One or more transition rules that specify when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transition`` property.",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "Specifies when an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules, see [Transitioning Objects Using Amazon S3 Lifecycle](https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html) in the *Amazon S3 User Guide*.",
		//	              "properties": {
		//	                "StorageClass": {
		//	                  "description": "The storage class to which you want the object to transition.",
		//	                  "enum": [
		//	                    "DEEP_ARCHIVE",
		//	                    "GLACIER",
		//	                    "Glacier",
		//	                    "GLACIER_IR",
		//	                    "INTELLIGENT_TIERING",
		//	                    "ONEZONE_IA",
		//	                    "STANDARD_IA"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "TransitionDate": {
		//	                  "description": "Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.",
		//	                  "pattern": "^([0-2]\\d{3})-(0[0-9]|1[0-2])-([0-2]\\d|3[01])T([01]\\d|2[0-4]):([0-5]\\d):([0-6]\\d)((\\.\\d{3})?)Z$",
		//	                  "type": "string"
		//	                },
		//	                "TransitionInDays": {
		//	                  "description": "Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.",
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "StorageClass"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          }
		//	        },
		//	        "required": [
		//	          "Status"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "required": [
		//	    "Rules"
		//	  ],
		//	  "type": "object"
		//	}
		"lifecycle_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Rules
				"rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AbortIncompleteMultipartUpload
							"abort_incomplete_multipart_upload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DaysAfterInitiation
									"days_after_initiation": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Specifies the number of days after which Amazon S3 stops an incomplete multipart upload.",
										Required:    true,
										Validators: []validator.Int64{ /*START VALIDATORS*/
											int64validator.AtLeast(0),
										}, /*END VALIDATORS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Specifies a lifecycle rule that stops incomplete multipart uploads to an Amazon S3 bucket.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ExpirationDate
							"expiration_date": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Indicates when objects are deleted from Amazon S3 and Amazon S3 Glacier. The date value must be in ISO 8601 format. The time is always midnight UTC. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.RegexMatches(regexp.MustCompile("^([0-2]\\d{3})-(0[0-9]|1[0-2])-([0-2]\\d|3[01])T([01]\\d|2[0-4]):([0-5]\\d):([0-6]\\d)((\\.\\d{3})?)Z$"), ""),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ExpirationInDays
							"expiration_in_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon S3 Glacier. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ExpiredObjectDeleteMarker
							"expired_object_delete_marker": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Indicates whether Amazon S3 will remove a delete marker without any noncurrent versions. If set to true, the delete marker will be removed if there are no noncurrent versions. This cannot be specified with ``ExpirationInDays``, ``ExpirationDate``, or ``TagFilters``.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Unique identifier for the rule. The value can't be longer than 255 characters.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.LengthAtMost(255),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: NoncurrentVersionExpiration
							"noncurrent_version_expiration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: NewerNoncurrentVersions
									"newer_noncurrent_versions": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: NoncurrentDays
									"noncurrent_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Specifies the number of days an object is noncurrent before S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates When an Object Became Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.",
										Required:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Specifies when noncurrent object versions expire. Upon expiration, S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that S3 delete noncurrent object versions at a specific period in the object's lifetime.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: NoncurrentVersionExpirationInDays
							"noncurrent_version_expiration_in_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "(Deprecated.) For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and when old versions of the object expire. When object versions expire, Amazon S3 permanently deletes them. If you specify a transition and expiration time, the expiration time must be later than the transition time.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: NoncurrentVersionTransition
							"noncurrent_version_transition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: NewerNoncurrentVersions
									"newer_noncurrent_versions": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: StorageClass
									"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The class of storage used to store the object.",
										Required:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"DEEP_ARCHIVE",
												"GLACIER",
												"Glacier",
												"GLACIER_IR",
												"INTELLIGENT_TIERING",
												"ONEZONE_IA",
												"STANDARD_IA",
											),
										}, /*END VALIDATORS*/
									}, /*END ATTRIBUTE*/
									// Property: TransitionInDays
									"transition_in_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.",
										Required:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "(Deprecated.) For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransitions`` property.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: NoncurrentVersionTransitions
							"noncurrent_version_transitions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: NewerNoncurrentVersions
										"newer_noncurrent_versions": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Description: "Specifies how many noncurrent versions S3 will retain. If there are this many more recent noncurrent versions, S3 will take the associated action. For more information about noncurrent versions, see [Lifecycle configuration elements](https://docs.aws.amazon.com/AmazonS3/latest/userguide/intro-lifecycle-rules.html) in the *Amazon S3 User Guide*.",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: StorageClass
										"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The class of storage used to store the object.",
											Required:    true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.OneOf(
													"DEEP_ARCHIVE",
													"GLACIER",
													"Glacier",
													"GLACIER_IR",
													"INTELLIGENT_TIERING",
													"ONEZONE_IA",
													"STANDARD_IA",
												),
											}, /*END VALIDATORS*/
										}, /*END ATTRIBUTE*/
										// Property: TransitionInDays
										"transition_in_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Description: "Specifies the number of days an object is noncurrent before Amazon S3 can perform the associated action. For information about the noncurrent days calculations, see [How Amazon S3 Calculates How Long an Object Has Been Noncurrent](https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#non-current-days-calculations) in the *Amazon S3 User Guide*.",
											Required:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "For buckets with versioning enabled (or suspended), one or more transition rules that specify when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time. If you specify this property, don't specify the ``NoncurrentVersionTransition`` property.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.List{ /*START VALIDATORS*/
									listvalidator.UniqueValues(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ObjectSizeGreaterThan
							"object_size_greater_than": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies the minimum object size in bytes for this rule to apply to. Objects must be larger than this value in bytes. For more information about size based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.LengthAtMost(20),
									stringvalidator.RegexMatches(regexp.MustCompile("[0-9]+"), ""),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ObjectSizeLessThan
							"object_size_less_than": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies the maximum object size in bytes for this rule to apply to. Objects must be smaller than this value in bytes. For more information about sized based rules, see [Lifecycle configuration using size-based rules](https://docs.aws.amazon.com/AmazonS3/latest/userguide/lifecycle-configuration-examples.html#lc-size-rules) in the *Amazon S3 User Guide*.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.LengthAtMost(20),
									stringvalidator.RegexMatches(regexp.MustCompile("[0-9]+"), ""),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Prefix
							"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Object key prefix that identifies one or more objects to which this rule applies.\n  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Status
							"status": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "If ``Enabled``, the rule is currently being applied. If ``Disabled``, the rule is not currently being applied.",
								Required:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"Enabled",
										"Disabled",
									),
								}, /*END VALIDATORS*/
							}, /*END ATTRIBUTE*/
							// Property: TagFilters
							"tag_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Key
										"key": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The tag key.",
											Required:    true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The tag value.",
											Required:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "Tags to use to identify a subset of objects to which the lifecycle rule applies.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.List{ /*START VALIDATORS*/
									listvalidator.UniqueValues(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Transition
							"transition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: StorageClass
									"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The storage class to which you want the object to transition.",
										Required:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"DEEP_ARCHIVE",
												"GLACIER",
												"Glacier",
												"GLACIER_IR",
												"INTELLIGENT_TIERING",
												"ONEZONE_IA",
												"STANDARD_IA",
											),
										}, /*END VALIDATORS*/
									}, /*END ATTRIBUTE*/
									// Property: TransitionDate
									"transition_date": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.",
										Optional:    true,
										Computed:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.RegexMatches(regexp.MustCompile("^([0-2]\\d{3})-(0[0-9]|1[0-2])-([0-2]\\d|3[01])T([01]\\d|2[0-4]):([0-5]\\d):([0-6]\\d)((\\.\\d{3})?)Z$"), ""),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: TransitionInDays
									"transition_in_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "(Deprecated.) Specifies when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transitions`` property.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Transitions
							"transitions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: StorageClass
										"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The storage class to which you want the object to transition.",
											Required:    true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.OneOf(
													"DEEP_ARCHIVE",
													"GLACIER",
													"Glacier",
													"GLACIER_IR",
													"INTELLIGENT_TIERING",
													"ONEZONE_IA",
													"STANDARD_IA",
												),
											}, /*END VALIDATORS*/
										}, /*END ATTRIBUTE*/
										// Property: TransitionDate
										"transition_date": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC.",
											Optional:    true,
											Computed:    true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.RegexMatches(regexp.MustCompile("^([0-2]\\d{3})-(0[0-9]|1[0-2])-([0-2]\\d|3[01])T([01]\\d|2[0-4]):([0-5]\\d):([0-6]\\d)((\\.\\d{3})?)Z$"), ""),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: TransitionInDays
										"transition_in_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Description: "Indicates the number of days after creation when objects are transitioned to the specified storage class. The value must be a positive integer.",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
												int64planmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "One or more transition rules that specify when an object transitions to a specified storage class. If you specify an expiration and transition time, you must use the same time unit for both properties (either in days or by date). The expiration time must also be later than the transition time. If you specify this property, don't specify the ``Transition`` property.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.List{ /*START VALIDATORS*/
									listvalidator.UniqueValues(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A lifecycle rule for individual objects in an Amazon S3 bucket.",
					Required:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.UniqueValues(),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html) in the *Amazon S3 User Guide*.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LoggingConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Settings that define where logs are stored.",
		//	  "properties": {
		//	    "DestinationBucketName": {
		//	      "description": "The name of the bucket where Amazon S3 should store server access log files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the ``LoggingConfiguration`` property is defined.",
		//	      "type": "string"
		//	    },
		//	    "LogFilePrefix": {
		//	      "description": "A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.",
		//	      "type": "string"
		//	    },
		//	    "TargetObjectKeyFormat": {
		//	      "description": "Amazon S3 key format for log objects. Only one format, either PartitionedPrefix or SimplePrefix, is allowed.",
		//	      "properties": {
		//	        "PartitionedPrefix": {
		//	          "additionalProperties": false,
		//	          "description": "Amazon S3 keys for log objects are partitioned in the following format:\n  ``[DestinationPrefix][SourceAccountId]/[SourceRegion]/[SourceBucket]/[YYYY]/[MM]/[DD]/[YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString]`` \n PartitionedPrefix defaults to EventTime delivery when server access logs are delivered.",
		//	          "properties": {
		//	            "PartitionDateSource": {
		//	              "description": "Specifies the partition date source for the partitioned prefix. PartitionDateSource can be EventTime or DeliveryTime.",
		//	              "enum": [
		//	                "EventTime",
		//	                "DeliveryTime"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "SimplePrefix": {
		//	          "additionalProperties": false,
		//	          "description": "This format defaults the prefix to the given log file prefix for delivering server access log file.",
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"logging_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DestinationBucketName
				"destination_bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The name of the bucket where Amazon S3 should store server access log files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the ``LoggingConfiguration`` property is defined.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LogFilePrefix
				"log_file_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TargetObjectKeyFormat
				"target_object_key_format": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: PartitionedPrefix
						"partitioned_prefix": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: PartitionDateSource
								"partition_date_source": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies the partition date source for the partitioned prefix. PartitionDateSource can be EventTime or DeliveryTime.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"EventTime",
											"DeliveryTime",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Amazon S3 keys for log objects are partitioned in the following format:\n  ``[DestinationPrefix][SourceAccountId]/[SourceRegion]/[SourceBucket]/[YYYY]/[MM]/[DD]/[YYYY]-[MM]-[DD]-[hh]-[mm]-[ss]-[UniqueString]`` \n PartitionedPrefix defaults to EventTime delivery when server access logs are delivered.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: SimplePrefix
						"simple_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							CustomType:  jsontypes.NormalizedType{},
							Description: "This format defaults the prefix to the given log file prefix for delivering server access log file.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Amazon S3 key format for log objects. Only one format, either PartitionedPrefix or SimplePrefix, is allowed.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Settings that define where logs are stored.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MetricsConfigurations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html).",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For examples, see [AWS::S3::Bucket](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html#aws-properties-s3-bucket--examples). For more information, see [PUT Bucket metrics](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html) in the *Amazon S3 API Reference*.",
		//	    "properties": {
		//	      "AccessPointArn": {
		//	        "description": "The access point that was used while performing operations on the object. The metrics configuration only includes objects that meet the filter's criteria.",
		//	        "type": "string"
		//	      },
		//	      "Id": {
		//	        "description": "The ID used to identify the metrics configuration. This can be any value you choose that helps you identify your metrics configuration.",
		//	        "type": "string"
		//	      },
		//	      "Prefix": {
		//	        "description": "The prefix that an object must have to be included in the metrics results.",
		//	        "type": "string"
		//	      },
		//	      "TagFilters": {
		//	        "description": "Specifies a list of tag filters to use as a metrics configuration filter. The metrics configuration includes only objects that meet the filter's criteria.",
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.",
		//	          "properties": {
		//	            "Key": {
		//	              "description": "The tag key.",
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "description": "The tag value.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Value",
		//	            "Key"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      }
		//	    },
		//	    "required": [
		//	      "Id"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"metrics_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AccessPointArn
					"access_point_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The access point that was used while performing operations on the object. The metrics configuration only includes objects that meet the filter's criteria.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Id
					"id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID used to identify the metrics configuration. This can be any value you choose that helps you identify your metrics configuration.",
						Required:    true,
					}, /*END ATTRIBUTE*/
					// Property: Prefix
					"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The prefix that an object must have to be included in the metrics results.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: TagFilters
					"tag_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The tag key.",
									Required:    true,
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The tag value.",
									Required:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "Specifies a list of tag filters to use as a metrics configuration filter. The metrics configuration includes only objects that meet the filter's criteria.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.List{ /*START VALIDATORS*/
							listvalidator.UniqueValues(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html).",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.UniqueValues(),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NotificationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration that defines how Amazon S3 handles bucket notifications.",
		//	  "properties": {
		//	    "EventBridgeConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Enables delivery of events to Amazon EventBridge.",
		//	      "properties": {
		//	        "EventBridgeEnabled": {
		//	          "default": "true",
		//	          "description": "Enables delivery of events to Amazon EventBridge.",
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "required": [
		//	        "EventBridgeEnabled"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "LambdaConfigurations": {
		//	      "description": "Describes the LAMlong functions to invoke and the events for which to invoke them.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Describes the LAMlong functions to invoke and the events for which to invoke them.",
		//	        "properties": {
		//	          "Event": {
		//	            "description": "The Amazon S3 bucket event for which to invoke the LAMlong function. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
		//	            "type": "string"
		//	          },
		//	          "Filter": {
		//	            "additionalProperties": false,
		//	            "description": "The filtering rules that determine which objects invoke the AWS Lambda function. For example, you can create a filter so that only image files with a ``.jpg`` extension invoke the function when they are added to the Amazon S3 bucket.",
		//	            "properties": {
		//	              "S3Key": {
		//	                "additionalProperties": false,
		//	                "description": "A container for object key name prefix and suffix filtering rules.",
		//	                "properties": {
		//	                  "Rules": {
		//	                    "description": "A list of containers for the key-value pair that defines the criteria for the filter rule.",
		//	                    "insertionOrder": true,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies the Amazon S3 object key name to filter on. An object key name is the name assigned to an object in your Amazon S3 bucket. You specify whether to filter on the suffix or prefix of the object key name. A prefix is a specific string of characters at the beginning of an object key name, which you can use to organize objects. For example, you can start the key names of related objects with a prefix, such as ``2023-`` or ``engineering/``. Then, you can use ``FilterRule`` to find objects in a bucket with key names that have the same prefix. A suffix is similar to a prefix, but it is at the end of the object key name instead of at the beginning.",
		//	                      "properties": {
		//	                        "Name": {
		//	                          "description": "The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
		//	                          "maxLength": 1024,
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "description": "The value that the filter searches for in object key names.",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Value",
		//	                        "Name"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Rules"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "S3Key"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Function": {
		//	            "description": "The Amazon Resource Name (ARN) of the LAMlong function that Amazon S3 invokes when the specified event type occurs.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Function",
		//	          "Event"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "QueueConfigurations": {
		//	      "description": "The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.",
		//	        "properties": {
		//	          "Event": {
		//	            "description": "The Amazon S3 bucket event about which you want to publish messages to Amazon SQS. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
		//	            "type": "string"
		//	          },
		//	          "Filter": {
		//	            "additionalProperties": false,
		//	            "description": "The filtering rules that determine which objects trigger notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket. For more information, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.",
		//	            "properties": {
		//	              "S3Key": {
		//	                "additionalProperties": false,
		//	                "description": "A container for object key name prefix and suffix filtering rules.",
		//	                "properties": {
		//	                  "Rules": {
		//	                    "description": "A list of containers for the key-value pair that defines the criteria for the filter rule.",
		//	                    "insertionOrder": true,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies the Amazon S3 object key name to filter on. An object key name is the name assigned to an object in your Amazon S3 bucket. You specify whether to filter on the suffix or prefix of the object key name. A prefix is a specific string of characters at the beginning of an object key name, which you can use to organize objects. For example, you can start the key names of related objects with a prefix, such as ``2023-`` or ``engineering/``. Then, you can use ``FilterRule`` to find objects in a bucket with key names that have the same prefix. A suffix is similar to a prefix, but it is at the end of the object key name instead of at the beginning.",
		//	                      "properties": {
		//	                        "Name": {
		//	                          "description": "The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
		//	                          "maxLength": 1024,
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "description": "The value that the filter searches for in object key names.",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Value",
		//	                        "Name"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Rules"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "S3Key"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Queue": {
		//	            "description": "The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects events of the specified type. FIFO queues are not allowed when enabling an SQS queue as the event notification destination.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Event",
		//	          "Queue"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "TopicConfigurations": {
		//	      "description": "The topic to which notifications are sent and the events for which notifications are generated.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.",
		//	        "properties": {
		//	          "Event": {
		//	            "description": "The Amazon S3 bucket event about which to send notifications. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
		//	            "type": "string"
		//	          },
		//	          "Filter": {
		//	            "additionalProperties": false,
		//	            "description": "The filtering rules that determine for which objects to send notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket.",
		//	            "properties": {
		//	              "S3Key": {
		//	                "additionalProperties": false,
		//	                "description": "A container for object key name prefix and suffix filtering rules.",
		//	                "properties": {
		//	                  "Rules": {
		//	                    "description": "A list of containers for the key-value pair that defines the criteria for the filter rule.",
		//	                    "insertionOrder": true,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies the Amazon S3 object key name to filter on. An object key name is the name assigned to an object in your Amazon S3 bucket. You specify whether to filter on the suffix or prefix of the object key name. A prefix is a specific string of characters at the beginning of an object key name, which you can use to organize objects. For example, you can start the key names of related objects with a prefix, such as ``2023-`` or ``engineering/``. Then, you can use ``FilterRule`` to find objects in a bucket with key names that have the same prefix. A suffix is similar to a prefix, but it is at the end of the object key name instead of at the beginning.",
		//	                      "properties": {
		//	                        "Name": {
		//	                          "description": "The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
		//	                          "maxLength": 1024,
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "description": "The value that the filter searches for in object key names.",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Value",
		//	                        "Name"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Rules"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "S3Key"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Topic": {
		//	            "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Event",
		//	          "Topic"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"notification_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EventBridgeConfiguration
				"event_bridge_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: EventBridgeEnabled
						"event_bridge_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Description: "Enables delivery of events to Amazon EventBridge.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
								generic.BoolDefaultValue(true),
								boolplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Enables delivery of events to Amazon EventBridge.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LambdaConfigurations
				"lambda_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Event
							"event": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon S3 bucket event for which to invoke the LAMlong function. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
								Required:    true,
							}, /*END ATTRIBUTE*/
							// Property: Filter
							"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: S3Key
									"s3_key": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Rules
											"rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Name
														"name": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
															Required:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.LengthAtMost(1024),
															}, /*END VALIDATORS*/
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The value that the filter searches for in object key names.",
															Required:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Description: "A list of containers for the key-value pair that defines the criteria for the filter rule.",
												Required:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.UniqueValues(),
												}, /*END VALIDATORS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "A container for object key name prefix and suffix filtering rules.",
										Required:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "The filtering rules that determine which objects invoke the AWS Lambda function. For example, you can create a filter so that only image files with a ``.jpg`` extension invoke the function when they are added to the Amazon S3 bucket.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Function
							"function": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of the LAMlong function that Amazon S3 invokes when the specified event type occurs.",
								Required:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Describes the LAMlong functions to invoke and the events for which to invoke them.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.UniqueValues(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: QueueConfigurations
				"queue_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Event
							"event": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon S3 bucket event about which you want to publish messages to Amazon SQS. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
								Required:    true,
							}, /*END ATTRIBUTE*/
							// Property: Filter
							"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: S3Key
									"s3_key": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Rules
											"rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Name
														"name": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
															Required:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.LengthAtMost(1024),
															}, /*END VALIDATORS*/
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The value that the filter searches for in object key names.",
															Required:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Description: "A list of containers for the key-value pair that defines the criteria for the filter rule.",
												Required:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.UniqueValues(),
												}, /*END VALIDATORS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "A container for object key name prefix and suffix filtering rules.",
										Required:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "The filtering rules that determine which objects trigger notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket. For more information, see [Configuring event notifications using object key name filtering](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/notification-how-to-filtering.html) in the *Amazon S3 User Guide*.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Queue
							"queue": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of the Amazon SQS queue to which Amazon S3 publishes a message when it detects events of the specified type. FIFO queues are not allowed when enabling an SQS queue as the event notification destination.",
								Required:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.UniqueValues(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TopicConfigurations
				"topic_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Event
							"event": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon S3 bucket event about which to send notifications. For more information, see [Supported Event Types](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
								Required:    true,
							}, /*END ATTRIBUTE*/
							// Property: Filter
							"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: S3Key
									"s3_key": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Rules
											"rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Name
														"name": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The object key name prefix or suffix identifying one or more objects to which the filtering rule applies. The maximum length is 1,024 characters. Overlapping prefixes and suffixes are not supported. For more information, see [Configuring Event Notifications](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html) in the *Amazon S3 User Guide*.",
															Required:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.LengthAtMost(1024),
															}, /*END VALIDATORS*/
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The value that the filter searches for in object key names.",
															Required:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Description: "A list of containers for the key-value pair that defines the criteria for the filter rule.",
												Required:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.UniqueValues(),
												}, /*END VALIDATORS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "A container for object key name prefix and suffix filtering rules.",
										Required:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "The filtering rules that determine for which objects to send notifications. For example, you can create a filter so that Amazon S3 sends notifications only when image files with a ``.jpg`` extension are added to the bucket.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Topic
							"topic": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when it detects events of the specified type.",
								Required:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The topic to which notifications are sent and the events for which notifications are generated.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.UniqueValues(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration that defines how Amazon S3 handles bucket notifications.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ObjectLockConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "This operation is not supported by directory buckets.\n  Places an Object Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket. For more information, see [Locking Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). \n   +  The ``DefaultRetention`` settings require both a mode and a period.\n  +  The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you must select one. You cannot specify ``Days`` and ``Years`` at the same time.\n  +  You can enable Object Lock for new or existing buckets. For more information, see [Configuring Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-configure.html).",
		//	  "properties": {
		//	    "ObjectLockEnabled": {
		//	      "description": "Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.",
		//	      "type": "string"
		//	    },
		//	    "Rule": {
		//	      "additionalProperties": false,
		//	      "description": "Specifies the Object Lock rule for the specified object. Enable this rule when you apply ``ObjectLockConfiguration`` to a bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information, see [ObjectLockRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-objectlockrule.html) and [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).",
		//	      "properties": {
		//	        "DefaultRetention": {
		//	          "additionalProperties": false,
		//	          "description": "The default Object Lock retention mode and period that you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information about allowable values for mode and period, see [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).",
		//	          "properties": {
		//	            "Days": {
		//	              "description": "The number of days that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.",
		//	              "type": "integer"
		//	            },
		//	            "Mode": {
		//	              "description": "The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.",
		//	              "enum": [
		//	                "COMPLIANCE",
		//	                "GOVERNANCE"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "Years": {
		//	              "description": "The number of years that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"object_lock_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ObjectLockEnabled
				"object_lock_enabled": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Rule
				"rule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DefaultRetention
						"default_retention": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Days
								"days": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The number of days that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Mode
								"mode": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The default Object Lock retention mode you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"COMPLIANCE",
											"GOVERNANCE",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Years
								"years": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The number of years that you want to specify for the default retention period. If Object Lock is turned on, you must specify ``Mode`` and specify either ``Days`` or ``Years``.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The default Object Lock retention mode and period that you want to apply to new objects placed in the specified bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information about allowable values for mode and period, see [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Specifies the Object Lock rule for the specified object. Enable this rule when you apply ``ObjectLockConfiguration`` to a bucket. If Object Lock is turned on, bucket settings require both ``Mode`` and a period of either ``Days`` or ``Years``. You cannot specify ``Days`` and ``Years`` at the same time. For more information, see [ObjectLockRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-objectlockrule.html) and [DefaultRetention](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html).",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "This operation is not supported by directory buckets.\n  Places an Object Lock configuration on the specified bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket. For more information, see [Locking Objects](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html). \n   +  The ``DefaultRetention`` settings require both a mode and a period.\n  +  The ``DefaultRetention`` period can be either ``Days`` or ``Years`` but you must select one. You cannot specify ``Days`` and ``Years`` at the same time.\n  +  You can enable Object Lock for new or existing buckets. For more information, see [Configuring Object Lock](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-configure.html).",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ObjectLockEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.",
		//	  "type": "boolean"
		//	}
		"object_lock_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether this bucket has an Object Lock configuration enabled. Enable ``ObjectLockEnabled`` when you apply ``ObjectLockConfiguration`` to a bucket.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
				boolplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OwnershipControls
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration that defines how Amazon S3 handles Object Ownership rules.",
		//	  "properties": {
		//	    "Rules": {
		//	      "description": "Specifies the container element for Object Ownership rules.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies an Object Ownership rule.\n S3 Object Ownership is an Amazon S3 bucket-level setting that you can use to disable access control lists (ACLs) and take ownership of every object in your bucket, simplifying access management for data stored in Amazon S3. For more information, see [Controlling ownership of objects and disabling ACLs](https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html) in the *Amazon S3 User Guide*.",
		//	        "properties": {
		//	          "ObjectOwnership": {
		//	            "description": "Specifies an object ownership rule.",
		//	            "enum": [
		//	              "ObjectWriter",
		//	              "BucketOwnerPreferred",
		//	              "BucketOwnerEnforced"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "required": [
		//	    "Rules"
		//	  ],
		//	  "type": "object"
		//	}
		"ownership_controls": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Rules
				"rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ObjectOwnership
							"object_ownership": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies an object ownership rule.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"ObjectWriter",
										"BucketOwnerPreferred",
										"BucketOwnerEnforced",
									),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Specifies the container element for Object Ownership rules.",
					Required:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.UniqueValues(),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration that defines how Amazon S3 handles Object Ownership rules.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PublicAccessBlockConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration that defines how Amazon S3 handles public access.",
		//	  "properties": {
		//	    "BlockPublicAcls": {
		//	      "description": "Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to ``TRUE`` causes the following behavior:\n  +  PUT Bucket ACL and PUT Object ACL calls fail if the specified ACL is public.\n  +  PUT Object calls fail if the request includes a public ACL.\n  +  PUT Bucket calls fail if the request includes a public ACL.\n  \n Enabling this setting doesn't affect existing policies or ACLs.",
		//	      "type": "boolean"
		//	    },
		//	    "BlockPublicPolicy": {
		//	      "description": "Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to ``TRUE`` causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. \n Enabling this setting doesn't affect existing bucket policies.",
		//	      "type": "boolean"
		//	    },
		//	    "IgnorePublicAcls": {
		//	      "description": "Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to ``TRUE`` causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket.\n Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.",
		//	      "type": "boolean"
		//	    },
		//	    "RestrictPublicBuckets": {
		//	      "description": "Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to ``TRUE`` restricts access to this bucket to only AWS-service principals and authorized users within this account if the bucket has a public policy.\n Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.",
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"public_access_block_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BlockPublicAcls
				"block_public_acls": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket. Setting this element to ``TRUE`` causes the following behavior:\n  +  PUT Bucket ACL and PUT Object ACL calls fail if the specified ACL is public.\n  +  PUT Object calls fail if the request includes a public ACL.\n  +  PUT Bucket calls fail if the request includes a public ACL.\n  \n Enabling this setting doesn't affect existing policies or ACLs.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: BlockPublicPolicy
				"block_public_policy": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to ``TRUE`` causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access. \n Enabling this setting doesn't affect existing bucket policies.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: IgnorePublicAcls
				"ignore_public_acls": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to ``TRUE`` causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket.\n Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: RestrictPublicBuckets
				"restrict_public_buckets": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to ``TRUE`` restricts access to this bucket to only AWS-service principals and authorized users within this account if the bucket has a public policy.\n Enabling this setting doesn't affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration that defines how Amazon S3 handles public access.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RegionalDomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Returns the regional domain name of the specified bucket.",
		//	  "examples": [
		//	    "mystack-mybucket-kdwwxmddtr2g.s3.us-east-2.amazonaws.com"
		//	  ],
		//	  "type": "string"
		//	}
		"regional_domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Returns the regional domain name of the specified bucket.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ReplicationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration for replicating objects in an S3 bucket. To enable replication, you must also enable versioning by using the ``VersioningConfiguration`` property.\n Amazon S3 can store replicated objects in a single destination bucket or multiple destination buckets. The destination bucket or buckets must already exist.",
		//	  "properties": {
		//	    "Role": {
		//	      "description": "The Amazon Resource Name (ARN) of the IAMlong (IAM) role that Amazon S3 assumes when replicating objects. For more information, see [How to Set Up Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the *Amazon S3 User Guide*.",
		//	      "type": "string"
		//	    },
		//	    "Rules": {
		//	      "description": "A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies which Amazon S3 objects to replicate and where to store the replicas.",
		//	        "properties": {
		//	          "DeleteMarkerReplication": {
		//	            "additionalProperties": false,
		//	            "description": "Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). \n For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). \n  If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).",
		//	            "properties": {
		//	              "Status": {
		//	                "description": "Indicates whether to replicate delete markers. Disabled by default.",
		//	                "enum": [
		//	                  "Disabled",
		//	                  "Enabled"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Destination": {
		//	            "additionalProperties": false,
		//	            "description": "A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).",
		//	            "properties": {
		//	              "AccessControlTranslation": {
		//	                "additionalProperties": false,
		//	                "description": "Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS-account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS-account that owns the source object.",
		//	                "properties": {
		//	                  "Owner": {
		//	                    "description": "Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the *Amazon S3 API Reference*.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Owner"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Account": {
		//	                "description": "Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to change replica ownership to the AWS-account that owns the destination bucket by specifying the ``AccessControlTranslation`` property, this is the account ID of the destination bucket owner. For more information, see [Cross-Region Replication Additional Configuration: Change Replica Owner](https://docs.aws.amazon.com/AmazonS3/latest/dev/crr-change-owner.html) in the *Amazon S3 User Guide*.\n If you specify the ``AccessControlTranslation`` property, the ``Account`` property is required.",
		//	                "type": "string"
		//	              },
		//	              "Bucket": {
		//	                "description": "The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.",
		//	                "type": "string"
		//	              },
		//	              "EncryptionConfiguration": {
		//	                "additionalProperties": false,
		//	                "description": "Specifies encryption-related information.",
		//	                "properties": {
		//	                  "ReplicaKmsKeyID": {
		//	                    "description": "Specifies the ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket. Amazon S3 uses this key to encrypt replica objects. Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "ReplicaKmsKeyID"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Metrics": {
		//	                "additionalProperties": false,
		//	                "description": "A container specifying replication metrics-related settings enabling replication metrics and events.",
		//	                "properties": {
		//	                  "EventThreshold": {
		//	                    "additionalProperties": false,
		//	                    "description": "A container specifying the time threshold for emitting the ``s3:Replication:OperationMissedThreshold`` event.",
		//	                    "properties": {
		//	                      "Minutes": {
		//	                        "description": "Contains an integer specifying time in minutes. \n  Valid value: 15",
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "Minutes"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "Status": {
		//	                    "description": "Specifies whether the replication metrics are enabled.",
		//	                    "enum": [
		//	                      "Disabled",
		//	                      "Enabled"
		//	                    ],
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Status"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "ReplicationTime": {
		//	                "additionalProperties": false,
		//	                "description": "A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a ``Metrics`` block.",
		//	                "properties": {
		//	                  "Status": {
		//	                    "description": "Specifies whether the replication time is enabled.",
		//	                    "enum": [
		//	                      "Disabled",
		//	                      "Enabled"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "Time": {
		//	                    "additionalProperties": false,
		//	                    "description": "A container specifying the time by which replication should be complete for all objects and operations on objects.",
		//	                    "properties": {
		//	                      "Minutes": {
		//	                        "description": "Contains an integer specifying time in minutes. \n  Valid value: 15",
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "Minutes"
		//	                    ],
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Status",
		//	                  "Time"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "StorageClass": {
		//	                "description": "The storage class to use when replicating objects, such as S3 Standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. \n For valid values, see the ``StorageClass`` element of the [PUT Bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) action in the *Amazon S3 API Reference*.",
		//	                "enum": [
		//	                  "DEEP_ARCHIVE",
		//	                  "GLACIER",
		//	                  "GLACIER_IR",
		//	                  "INTELLIGENT_TIERING",
		//	                  "ONEZONE_IA",
		//	                  "REDUCED_REDUNDANCY",
		//	                  "STANDARD",
		//	                  "STANDARD_IA"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Bucket"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Filter": {
		//	            "additionalProperties": false,
		//	            "description": "A filter that identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element. The use of the filter field indicates that this is a V2 replication configuration. This field isn't supported in a V1 replication configuration.\n  V1 replication configuration only supports filtering by key prefix. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.",
		//	            "properties": {
		//	              "And": {
		//	                "additionalProperties": false,
		//	                "description": "A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example: \n  +  If you specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag.\n  +  If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag.",
		//	                "properties": {
		//	                  "Prefix": {
		//	                    "description": "An object key name prefix that identifies the subset of objects to which the rule applies.",
		//	                    "type": "string"
		//	                  },
		//	                  "TagFilters": {
		//	                    "description": "An array of tags containing key and value pairs.",
		//	                    "insertionOrder": true,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies tags to use to identify a subset of objects for an Amazon S3 bucket.",
		//	                      "properties": {
		//	                        "Key": {
		//	                          "description": "The tag key.",
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "description": "The tag value.",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Value",
		//	                        "Key"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": true
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Prefix": {
		//	                "description": "An object key name prefix that identifies the subset of objects to which the rule applies.\n  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
		//	                "type": "string"
		//	              },
		//	              "TagFilter": {
		//	                "additionalProperties": false,
		//	                "description": "A container for specifying a tag key and value. \n The rule applies only to objects that have the tag in their tag set.",
		//	                "properties": {
		//	                  "Key": {
		//	                    "description": "The tag key.",
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "description": "The tag value.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Value",
		//	                  "Key"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Id": {
		//	            "description": "A unique identifier for the rule. The maximum value is 255 characters. If you don't specify a value, AWS CloudFormation generates a random ID. When using a V2 replication configuration this property is capitalized as \"ID\".",
		//	            "maxLength": 255,
		//	            "type": "string"
		//	          },
		//	          "Prefix": {
		//	            "description": "An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty string. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.\n  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
		//	            "maxLength": 1024,
		//	            "type": "string"
		//	          },
		//	          "Priority": {
		//	            "description": "The priority indicates which rule has precedence whenever two or more replication rules conflict. Amazon S3 will attempt to replicate objects according to all replication rules. However, if there are two or more rules with the same destination bucket, then objects will be replicated according to the rule with the highest priority. The higher the number, the higher the priority. \n For more information, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the *Amazon S3 User Guide*.",
		//	            "type": "integer"
		//	          },
		//	          "SourceSelectionCriteria": {
		//	            "additionalProperties": false,
		//	            "description": "A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects.",
		//	            "properties": {
		//	              "ReplicaModifications": {
		//	                "additionalProperties": false,
		//	                "description": "A filter that you can specify for selection for modifications on replicas.",
		//	                "properties": {
		//	                  "Status": {
		//	                    "description": "Specifies whether Amazon S3 replicates modifications on replicas.\n *Allowed values*: ``Enabled`` | ``Disabled``",
		//	                    "enum": [
		//	                      "Enabled",
		//	                      "Disabled"
		//	                    ],
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Status"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "SseKmsEncryptedObjects": {
		//	                "additionalProperties": false,
		//	                "description": "A container for filter information for the selection of Amazon S3 objects encrypted with AWS KMS.",
		//	                "properties": {
		//	                  "Status": {
		//	                    "description": "Specifies whether Amazon S3 replicates objects created with server-side encryption using an AWS KMS key stored in AWS Key Management Service.",
		//	                    "enum": [
		//	                      "Disabled",
		//	                      "Enabled"
		//	                    ],
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Status"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Status": {
		//	            "description": "Specifies whether the rule is enabled.",
		//	            "enum": [
		//	              "Disabled",
		//	              "Enabled"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Destination",
		//	          "Status"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "required": [
		//	    "Role",
		//	    "Rules"
		//	  ],
		//	  "type": "object"
		//	}
		"replication_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Role
				"role": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Amazon Resource Name (ARN) of the IAMlong (IAM) role that Amazon S3 assumes when replicating objects. For more information, see [How to Set Up Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-how-setup.html) in the *Amazon S3 User Guide*.",
					Required:    true,
				}, /*END ATTRIBUTE*/
				// Property: Rules
				"rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DeleteMarkerReplication
							"delete_marker_replication": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Status
									"status": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Indicates whether to replicate delete markers. Disabled by default.",
										Optional:    true,
										Computed:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"Disabled",
												"Enabled",
											),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Specifies whether Amazon S3 replicates delete markers. If you specify a ``Filter`` in your replication configuration, you must also include a ``DeleteMarkerReplication`` element. If your ``Filter`` includes a ``Tag`` element, the ``DeleteMarkerReplication`` ``Status`` must be set to Disabled, because Amazon S3 does not support replicating delete markers for tag-based rules. For an example configuration, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config). \n For more information about delete marker replication, see [Basic Rule Configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-marker-replication.html). \n  If you are using an earlier version of the replication configuration, Amazon S3 handles replication of delete markers differently. For more information, see [Backward Compatibility](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations).",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Destination
							"destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AccessControlTranslation
									"access_control_translation": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Owner
											"owner": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Specifies the replica ownership. For default and valid values, see [PUT bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) in the *Amazon S3 API Reference*.",
												Required:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Specify this only in a cross-account scenario (where source and destination bucket owners are not the same), and you want to change replica ownership to the AWS-account that owns the destination bucket. If this is not specified in the replication configuration, the replicas are owned by same AWS-account that owns the source object.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Account
									"account": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Destination bucket owner account ID. In a cross-account scenario, if you direct Amazon S3 to change replica ownership to the AWS-account that owns the destination bucket by specifying the ``AccessControlTranslation`` property, this is the account ID of the destination bucket owner. For more information, see [Cross-Region Replication Additional Configuration: Change Replica Owner](https://docs.aws.amazon.com/AmazonS3/latest/dev/crr-change-owner.html) in the *Amazon S3 User Guide*.\n If you specify the ``AccessControlTranslation`` property, the ``Account`` property is required.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Bucket
									"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The Amazon Resource Name (ARN) of the bucket where you want Amazon S3 to store the results.",
										Required:    true,
									}, /*END ATTRIBUTE*/
									// Property: EncryptionConfiguration
									"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: ReplicaKmsKeyID
											"replica_kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Specifies the ID (Key ARN or Alias ARN) of the customer managed AWS KMS key stored in AWS Key Management Service (KMS) for the destination bucket. Amazon S3 uses this key to encrypt replica objects. Amazon S3 only supports symmetric encryption KMS keys. For more information, see [Asymmetric keys in KMS](https://docs.aws.amazon.com//kms/latest/developerguide/symmetric-asymmetric.html) in the *Key Management Service Developer Guide*.",
												Required:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "Specifies encryption-related information.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Metrics
									"metrics": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: EventThreshold
											"event_threshold": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Minutes
													"minutes": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Description: "Contains an integer specifying time in minutes. \n  Valid value: 15",
														Required:    true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "A container specifying the time threshold for emitting the ``s3:Replication:OperationMissedThreshold`` event.",
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: Status
											"status": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Specifies whether the replication metrics are enabled.",
												Required:    true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"Disabled",
														"Enabled",
													),
												}, /*END VALIDATORS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "A container specifying replication metrics-related settings enabling replication metrics and events.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ReplicationTime
									"replication_time": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Status
											"status": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Specifies whether the replication time is enabled.",
												Required:    true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"Disabled",
														"Enabled",
													),
												}, /*END VALIDATORS*/
											}, /*END ATTRIBUTE*/
											// Property: Time
											"time": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Minutes
													"minutes": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Description: "Contains an integer specifying time in minutes. \n  Valid value: 15",
														Required:    true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Description: "A container specifying the time by which replication should be complete for all objects and operations on objects.",
												Required:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "A container specifying S3 Replication Time Control (S3 RTC), including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a ``Metrics`` block.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: StorageClass
									"storage_class": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The storage class to use when replicating objects, such as S3 Standard or reduced redundancy. By default, Amazon S3 uses the storage class of the source object to create the object replica. \n For valid values, see the ``StorageClass`` element of the [PUT Bucket replication](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTreplication.html) action in the *Amazon S3 API Reference*.",
										Optional:    true,
										Computed:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"DEEP_ARCHIVE",
												"GLACIER",
												"GLACIER_IR",
												"INTELLIGENT_TIERING",
												"ONEZONE_IA",
												"REDUCED_REDUNDANCY",
												"STANDARD",
												"STANDARD_IA",
											),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "A container for information about the replication destination and its configurations including enabling the S3 Replication Time Control (S3 RTC).",
								Required:    true,
							}, /*END ATTRIBUTE*/
							// Property: Filter
							"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: And
									"and": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Prefix
											"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "An object key name prefix that identifies the subset of objects to which the rule applies.",
												Optional:    true,
												Computed:    true,
												PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
													stringplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: TagFilters
											"tag_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Key
														"key": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The tag key.",
															Required:    true,
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The tag value.",
															Required:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Description: "An array of tags containing key and value pairs.",
												Optional:    true,
												Computed:    true,
												Validators: []validator.List{ /*START VALIDATORS*/
													listvalidator.UniqueValues(),
												}, /*END VALIDATORS*/
												PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
													listplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. For example: \n  +  If you specify both a ``Prefix`` and a ``TagFilter``, wrap these filters in an ``And`` tag.\n  +  If you specify a filter based on multiple tags, wrap the ``TagFilter`` elements in an ``And`` tag.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Prefix
									"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "An object key name prefix that identifies the subset of objects to which the rule applies.\n  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: TagFilter
									"tag_filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Key
											"key": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The tag key.",
												Required:    true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The tag value.",
												Required:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "A container for specifying a tag key and value. \n The rule applies only to objects that have the tag in their tag set.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "A filter that identifies the subset of objects to which the replication rule applies. A ``Filter`` must specify exactly one ``Prefix``, ``TagFilter``, or an ``And`` child element. The use of the filter field indicates that this is a V2 replication configuration. This field isn't supported in a V1 replication configuration.\n  V1 replication configuration only supports filtering by key prefix. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A unique identifier for the rule. The maximum value is 255 characters. If you don't specify a value, AWS CloudFormation generates a random ID. When using a V2 replication configuration this property is capitalized as \"ID\".",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.LengthAtMost(255),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Prefix
							"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "An object key name prefix that identifies the object or objects to which the rule applies. The maximum prefix length is 1,024 characters. To include all objects in a bucket, specify an empty string. To filter using a V1 replication configuration, add the ``Prefix`` directly as a child element of the ``Rule`` element.\n  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.LengthAtMost(1024),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Priority
							"priority": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The priority indicates which rule has precedence whenever two or more replication rules conflict. Amazon S3 will attempt to replicate objects according to all replication rules. However, if there are two or more rules with the same destination bucket, then objects will be replicated according to the rule with the highest priority. The higher the number, the higher the priority. \n For more information, see [Replication](https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html) in the *Amazon S3 User Guide*.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: SourceSelectionCriteria
							"source_selection_criteria": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ReplicaModifications
									"replica_modifications": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Status
											"status": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Specifies whether Amazon S3 replicates modifications on replicas.\n *Allowed values*: ``Enabled`` | ``Disabled``",
												Required:    true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"Enabled",
														"Disabled",
													),
												}, /*END VALIDATORS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "A filter that you can specify for selection for modifications on replicas.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: SseKmsEncryptedObjects
									"sse_kms_encrypted_objects": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Status
											"status": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Specifies whether Amazon S3 replicates objects created with server-side encryption using an AWS KMS key stored in AWS Key Management Service.",
												Required:    true,
												Validators: []validator.String{ /*START VALIDATORS*/
													stringvalidator.OneOf(
														"Disabled",
														"Enabled",
													),
												}, /*END VALIDATORS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "A container for filter information for the selection of Amazon S3 objects encrypted with AWS KMS.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Status
							"status": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies whether the rule is enabled.",
								Required:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"Disabled",
										"Enabled",
									),
								}, /*END VALIDATORS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A container for one or more replication rules. A replication configuration must have at least one rule and can contain a maximum of 1,000 rules.",
					Required:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.UniqueValues(),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration for replicating objects in an S3 bucket. To enable replication, you must also enable versioning by using the ``VersioningConfiguration`` property.\n Amazon S3 can store replicated objects in a single destination bucket or multiple destination buckets. The destination bucket or buckets must already exist.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An arbitrary set of tags (key-value pairs) for this S3 bucket.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A container of a key value name pair.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "Name of the object key.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "Value of the tag.",
		//	        "maxLength": 256,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Name of the object key.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Value of the tag.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthAtMost(256),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An arbitrary set of tags (key-value pairs) for this S3 bucket.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VersioningConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Enables multiple versions of all objects in this bucket. You might enable versioning to prevent objects from being deleted or overwritten by mistake or to archive objects so that you can retrieve previous versions of them.",
		//	  "properties": {
		//	    "Status": {
		//	      "default": "Suspended",
		//	      "description": "The versioning state of the bucket.",
		//	      "enum": [
		//	        "Enabled",
		//	        "Suspended"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Status"
		//	  ],
		//	  "type": "object"
		//	}
		"versioning_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Status
				"status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The versioning state of the bucket.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"Enabled",
							"Suspended",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						generic.StringDefaultValue("Suspended"),
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Enables multiple versions of all objects in this bucket. You might enable versioning to prevent objects from being deleted or overwritten by mistake or to archive objects so that you can retrieve previous versions of them.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: WebsiteConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Information used to configure the bucket as a static website. For more information, see [Hosting Websites on Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).",
		//	  "properties": {
		//	    "ErrorDocument": {
		//	      "description": "The name of the error document for the website.",
		//	      "type": "string"
		//	    },
		//	    "IndexDocument": {
		//	      "description": "The name of the index document for the website.",
		//	      "type": "string"
		//	    },
		//	    "RedirectAllRequestsTo": {
		//	      "additionalProperties": false,
		//	      "description": "The redirect behavior for every request to this bucket's website endpoint.\n  If you specify this property, you can't specify any other property.",
		//	      "properties": {
		//	        "HostName": {
		//	          "description": "Name of the host where requests are redirected.",
		//	          "type": "string"
		//	        },
		//	        "Protocol": {
		//	          "description": "Protocol to use when redirecting requests. The default is the protocol that is used in the original request.",
		//	          "enum": [
		//	            "http",
		//	            "https"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "HostName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "RoutingRules": {
		//	      "description": "Rules that define when a redirect is applied and the redirect behavior.",
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies the redirect behavior and when a redirect is applied. For more information about routing rules, see [Configuring advanced conditional redirects](https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html#advanced-conditional-redirects) in the *Amazon S3 User Guide*.",
		//	        "properties": {
		//	          "RedirectRule": {
		//	            "additionalProperties": false,
		//	            "description": "Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.",
		//	            "properties": {
		//	              "HostName": {
		//	                "description": "The host name to use in the redirect request.",
		//	                "type": "string"
		//	              },
		//	              "HttpRedirectCode": {
		//	                "description": "The HTTP redirect code to use on the response. Not required if one of the siblings is present.",
		//	                "type": "string"
		//	              },
		//	              "Protocol": {
		//	                "description": "Protocol to use when redirecting requests. The default is the protocol that is used in the original request.",
		//	                "enum": [
		//	                  "http",
		//	                  "https"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "ReplaceKeyPrefixWith": {
		//	                "description": "The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/``, you can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.\n  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
		//	                "type": "string"
		//	              },
		//	              "ReplaceKeyWith": {
		//	                "description": "The specific object key to use in the redirect request. For example, redirect request to ``error.html``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.\n  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "RoutingRuleCondition": {
		//	            "additionalProperties": false,
		//	            "description": "A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.",
		//	            "properties": {
		//	              "HttpErrorCodeReturnedEquals": {
		//	                "description": "The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.\n Required when parent element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be applied.",
		//	                "type": "string"
		//	              },
		//	              "KeyPrefixEquals": {
		//	                "description": "The object key name prefix when the redirect is applied. For example, to redirect requests for ``ExamplePage.html``, the key prefix will be ``ExamplePage.html``. To redirect request for all pages with the prefix ``docs/``, the key prefix will be ``/docs``, which identifies all objects in the docs/ folder.\n Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified. If both conditions are specified, both must be true for the redirect to be applied.",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "RedirectRule"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"website_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ErrorDocument
				"error_document": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The name of the error document for the website.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: IndexDocument
				"index_document": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The name of the index document for the website.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: RedirectAllRequestsTo
				"redirect_all_requests_to": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: HostName
						"host_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Name of the host where requests are redirected.",
							Required:    true,
						}, /*END ATTRIBUTE*/
						// Property: Protocol
						"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Protocol to use when redirecting requests. The default is the protocol that is used in the original request.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.OneOf(
									"http",
									"https",
								),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The redirect behavior for every request to this bucket's website endpoint.\n  If you specify this property, you can't specify any other property.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: RoutingRules
				"routing_rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: RedirectRule
							"redirect_rule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: HostName
									"host_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The host name to use in the redirect request.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: HttpRedirectCode
									"http_redirect_code": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The HTTP redirect code to use on the response. Not required if one of the siblings is present.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Protocol
									"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Protocol to use when redirecting requests. The default is the protocol that is used in the original request.",
										Optional:    true,
										Computed:    true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"http",
												"https",
											),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ReplaceKeyPrefixWith
									"replace_key_prefix_with": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The object key prefix to use in the redirect request. For example, to redirect requests for all pages with prefix ``docs/`` (objects in the ``docs/`` folder) to ``documents/``, you can set a condition block with ``KeyPrefixEquals`` set to ``docs/`` and in the Redirect set ``ReplaceKeyPrefixWith`` to ``/documents``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyWith`` is not provided.\n  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ReplaceKeyWith
									"replace_key_with": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The specific object key to use in the redirect request. For example, redirect request to ``error.html``. Not required if one of the siblings is present. Can be present only if ``ReplaceKeyPrefixWith`` is not provided.\n  Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see [XML related object key constraints](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints).",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Container for redirect information. You can redirect requests to another host, to another page, or with another protocol. In the event of an error, you can specify a different error code to return.",
								Required:    true,
							}, /*END ATTRIBUTE*/
							// Property: RoutingRuleCondition
							"routing_rule_condition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: HttpErrorCodeReturnedEquals
									"http_error_code_returned_equals": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The HTTP error code when the redirect is applied. In the event of an error, if the error code equals this value, then the specified redirect is applied.\n Required when parent element ``Condition`` is specified and sibling ``KeyPrefixEquals`` is not specified. If both are specified, then both must be true for the redirect to be applied.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: KeyPrefixEquals
									"key_prefix_equals": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The object key name prefix when the redirect is applied. For example, to redirect requests for ``ExamplePage.html``, the key prefix will be ``ExamplePage.html``. To redirect request for all pages with the prefix ``docs/``, the key prefix will be ``/docs``, which identifies all objects in the docs/ folder.\n Required when the parent element ``Condition`` is specified and sibling ``HttpErrorCodeReturnedEquals`` is not specified. If both conditions are specified, both must be true for the redirect to be applied.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the ``/docs`` folder, redirect to the ``/documents`` folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Rules that define when a redirect is applied and the redirect behavior.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Information used to configure the bucket as a static website. For more information, see [Hosting Websites on Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: WebsiteURL
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon S3 website endpoint for the specified bucket.",
		//	  "examples": [
		//	    "Example (IPv4): http://mystack-mybucket-kdwwxmddtr2g.s3-website-us-east-2.amazonaws.com/",
		//	    "Example (IPv6): http://mystack-mybucket-kdwwxmddtr2g.s3.dualstack.us-east-2.amazonaws.com/"
		//	  ],
		//	  "format": "uri",
		//	  "type": "string"
		//	}
		"website_url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon S3 website endpoint for the specified bucket.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "The ``AWS::S3::Bucket`` resource creates an Amazon S3 bucket in the same AWS Region where you create the AWS CloudFormation stack.\n To control how AWS CloudFormation handles the bucket when the stack is deleted, you can set a deletion policy for your bucket. You can choose to *retain* the bucket or to *delete* the bucket. For more information, see [DeletionPolicy Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html).\n  You can only delete empty buckets. Deletion fails for buckets that have contents.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::S3::Bucket").WithTerraformTypeName("awscc_s3_bucket")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(true)
	opts = opts.WithAttributeNameMap(map[string]string{
		"abort_incomplete_multipart_upload":     "AbortIncompleteMultipartUpload",
		"accelerate_configuration":              "AccelerateConfiguration",
		"acceleration_status":                   "AccelerationStatus",
		"access_control":                        "AccessControl",
		"access_control_translation":            "AccessControlTranslation",
		"access_point_arn":                      "AccessPointArn",
		"access_tier":                           "AccessTier",
		"account":                               "Account",
		"allowed_headers":                       "AllowedHeaders",
		"allowed_methods":                       "AllowedMethods",
		"allowed_origins":                       "AllowedOrigins",
		"analytics_configurations":              "AnalyticsConfigurations",
		"and":                                   "And",
		"arn":                                   "Arn",
		"block_public_acls":                     "BlockPublicAcls",
		"block_public_policy":                   "BlockPublicPolicy",
		"bucket":                                "Bucket",
		"bucket_account_id":                     "BucketAccountId",
		"bucket_arn":                            "BucketArn",
		"bucket_encryption":                     "BucketEncryption",
		"bucket_key_enabled":                    "BucketKeyEnabled",
		"bucket_name":                           "BucketName",
		"cors_configuration":                    "CorsConfiguration",
		"cors_rules":                            "CorsRules",
		"data_export":                           "DataExport",
		"days":                                  "Days",
		"days_after_initiation":                 "DaysAfterInitiation",
		"default_retention":                     "DefaultRetention",
		"delete_marker_replication":             "DeleteMarkerReplication",
		"destination":                           "Destination",
		"destination_bucket_name":               "DestinationBucketName",
		"domain_name":                           "DomainName",
		"dual_stack_domain_name":                "DualStackDomainName",
		"enabled":                               "Enabled",
		"encryption_configuration":              "EncryptionConfiguration",
		"error_document":                        "ErrorDocument",
		"event":                                 "Event",
		"event_bridge_configuration":            "EventBridgeConfiguration",
		"event_bridge_enabled":                  "EventBridgeEnabled",
		"event_threshold":                       "EventThreshold",
		"expiration_date":                       "ExpirationDate",
		"expiration_in_days":                    "ExpirationInDays",
		"expired_object_delete_marker":          "ExpiredObjectDeleteMarker",
		"exposed_headers":                       "ExposedHeaders",
		"filter":                                "Filter",
		"format":                                "Format",
		"function":                              "Function",
		"host_name":                             "HostName",
		"http_error_code_returned_equals":       "HttpErrorCodeReturnedEquals",
		"http_redirect_code":                    "HttpRedirectCode",
		"id":                                    "Id",
		"ignore_public_acls":                    "IgnorePublicAcls",
		"included_object_versions":              "IncludedObjectVersions",
		"index_document":                        "IndexDocument",
		"intelligent_tiering_configurations":    "IntelligentTieringConfigurations",
		"inventory_configurations":              "InventoryConfigurations",
		"key":                                   "Key",
		"key_prefix_equals":                     "KeyPrefixEquals",
		"kms_master_key_id":                     "KMSMasterKeyID",
		"lambda_configurations":                 "LambdaConfigurations",
		"lifecycle_configuration":               "LifecycleConfiguration",
		"log_file_prefix":                       "LogFilePrefix",
		"logging_configuration":                 "LoggingConfiguration",
		"max_age":                               "MaxAge",
		"metrics":                               "Metrics",
		"metrics_configurations":                "MetricsConfigurations",
		"minutes":                               "Minutes",
		"mode":                                  "Mode",
		"name":                                  "Name",
		"newer_noncurrent_versions":             "NewerNoncurrentVersions",
		"noncurrent_days":                       "NoncurrentDays",
		"noncurrent_version_expiration":         "NoncurrentVersionExpiration",
		"noncurrent_version_expiration_in_days": "NoncurrentVersionExpirationInDays",
		"noncurrent_version_transition":         "NoncurrentVersionTransition",
		"noncurrent_version_transitions":        "NoncurrentVersionTransitions",
		"notification_configuration":            "NotificationConfiguration",
		"object_lock_configuration":             "ObjectLockConfiguration",
		"object_lock_enabled":                   "ObjectLockEnabled",
		"object_ownership":                      "ObjectOwnership",
		"object_size_greater_than":              "ObjectSizeGreaterThan",
		"object_size_less_than":                 "ObjectSizeLessThan",
		"optional_fields":                       "OptionalFields",
		"output_schema_version":                 "OutputSchemaVersion",
		"owner":                                 "Owner",
		"ownership_controls":                    "OwnershipControls",
		"partition_date_source":                 "PartitionDateSource",
		"partitioned_prefix":                    "PartitionedPrefix",
		"prefix":                                "Prefix",
		"priority":                              "Priority",
		"protocol":                              "Protocol",
		"public_access_block_configuration":     "PublicAccessBlockConfiguration",
		"queue":                                 "Queue",
		"queue_configurations":                  "QueueConfigurations",
		"redirect_all_requests_to":              "RedirectAllRequestsTo",
		"redirect_rule":                         "RedirectRule",
		"regional_domain_name":                  "RegionalDomainName",
		"replace_key_prefix_with":               "ReplaceKeyPrefixWith",
		"replace_key_with":                      "ReplaceKeyWith",
		"replica_kms_key_id":                    "ReplicaKmsKeyID",
		"replica_modifications":                 "ReplicaModifications",
		"replication_configuration":             "ReplicationConfiguration",
		"replication_time":                      "ReplicationTime",
		"restrict_public_buckets":               "RestrictPublicBuckets",
		"role":                                  "Role",
		"routing_rule_condition":                "RoutingRuleCondition",
		"routing_rules":                         "RoutingRules",
		"rule":                                  "Rule",
		"rules":                                 "Rules",
		"s3_key":                                "S3Key",
		"schedule_frequency":                    "ScheduleFrequency",
		"server_side_encryption_by_default":     "ServerSideEncryptionByDefault",
		"server_side_encryption_configuration":  "ServerSideEncryptionConfiguration",
		"simple_prefix":                         "SimplePrefix",
		"source_selection_criteria":             "SourceSelectionCriteria",
		"sse_algorithm":                         "SSEAlgorithm",
		"sse_kms_encrypted_objects":             "SseKmsEncryptedObjects",
		"status":                                "Status",
		"storage_class":                         "StorageClass",
		"storage_class_analysis":                "StorageClassAnalysis",
		"tag_filter":                            "TagFilter",
		"tag_filters":                           "TagFilters",
		"tags":                                  "Tags",
		"target_object_key_format":              "TargetObjectKeyFormat",
		"tierings":                              "Tierings",
		"time":                                  "Time",
		"topic":                                 "Topic",
		"topic_configurations":                  "TopicConfigurations",
		"transition":                            "Transition",
		"transition_date":                       "TransitionDate",
		"transition_in_days":                    "TransitionInDays",
		"transitions":                           "Transitions",
		"value":                                 "Value",
		"versioning_configuration":              "VersioningConfiguration",
		"website_configuration":                 "WebsiteConfiguration",
		"website_url":                           "WebsiteURL",
		"years":                                 "Years",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/AccessControl",
		"/properties/LifecycleConfiguration/Rules/*/NoncurrentVersionExpirationInDays",
		"/properties/LifecycleConfiguration/Rules/*/NoncurrentVersionTransition",
		"/properties/LifecycleConfiguration/Rules/*/Transition",
		"/properties/ReplicationConfiguration/Rules/*/Prefix",
		"/properties/LifecycleConfiguration/Rules/*/ExpiredObjectDeleteMarker",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
