// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package detective

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_detective_member_invitation", memberInvitationDataSource)
}

// memberInvitationDataSource returns the Terraform awscc_detective_member_invitation data source.
// This Terraform data source corresponds to the CloudFormation AWS::Detective::MemberInvitation resource.
func memberInvitationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DisableEmailNotification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "When set to true, invitation emails are not sent to the member accounts. Member accounts must still accept the invitation before they are added to the behavior graph. Updating this field has no effect.",
		//	  "type": "boolean"
		//	}
		"disable_email_notification": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "When set to true, invitation emails are not sent to the member accounts. Member accounts must still accept the invitation before they are added to the behavior graph. Updating this field has no effect.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GraphArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the graph to which the member account will be invited",
		//	  "pattern": "arn:aws(-[\\w]+)*:detective:(([a-z]+-)+[0-9]+):[0-9]{12}:graph:[0-9a-f]{32}",
		//	  "type": "string"
		//	}
		"graph_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the graph to which the member account will be invited",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MemberEmailAddress
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The root email address for the account to be invited, for validation. Updating this field has no effect.",
		//	  "pattern": ".*@.*",
		//	  "type": "string"
		//	}
		"member_email_address": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The root email address for the account to be invited, for validation. Updating this field has no effect.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MemberId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS account ID to be invited to join the graph as a member",
		//	  "pattern": "[0-9]{12}",
		//	  "type": "string"
		//	}
		"member_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS account ID to be invited to join the graph as a member",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Message
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A message to be included in the email invitation sent to the invited account. Updating this field has no effect.",
		//	  "maxLength": 1000,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"message": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A message to be included in the email invitation sent to the invited account. Updating this field has no effect.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Detective::MemberInvitation",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Detective::MemberInvitation").WithTerraformTypeName("awscc_detective_member_invitation")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"disable_email_notification": "DisableEmailNotification",
		"graph_arn":                  "GraphArn",
		"member_email_address":       "MemberEmailAddress",
		"member_id":                  "MemberId",
		"message":                    "Message",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
