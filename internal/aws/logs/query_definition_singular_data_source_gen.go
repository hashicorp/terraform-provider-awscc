// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package logs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_logs_query_definition", queryDefinitionDataSource)
}

// queryDefinitionDataSource returns the Terraform awscc_logs_query_definition data source.
// This Terraform data source corresponds to the CloudFormation AWS::Logs::QueryDefinition resource.
func queryDefinitionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: LogGroupNames
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Optionally define specific log groups as part of your query definition",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "LogGroup name",
		//	    "maxLength": 512,
		//	    "minLength": 1,
		//	    "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"log_group_names": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "Optionally define specific log groups as part of your query definition",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A name for the saved query definition",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A name for the saved query definition",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: QueryDefinitionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Unique identifier of a query definition",
		//	  "maxLength": 256,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"query_definition_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Unique identifier of a query definition",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: QueryLanguage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "CWLI",
		//	  "description": "Query language of the query string. Possible values are CWLI, SQL, PPL, with CWLI being the default.",
		//	  "enum": [
		//	    "CWLI",
		//	    "SQL",
		//	    "PPL"
		//	  ],
		//	  "type": "string"
		//	}
		"query_language": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Query language of the query string. Possible values are CWLI, SQL, PPL, with CWLI being the default.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: QueryString
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The query string to use for this definition",
		//	  "maxLength": 10000,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"query_string": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The query string to use for this definition",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Logs::QueryDefinition",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Logs::QueryDefinition").WithTerraformTypeName("awscc_logs_query_definition")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"log_group_names":     "LogGroupNames",
		"name":                "Name",
		"query_definition_id": "QueryDefinitionId",
		"query_language":      "QueryLanguage",
		"query_string":        "QueryString",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
