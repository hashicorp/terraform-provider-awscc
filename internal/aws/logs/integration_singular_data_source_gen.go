// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package logs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_logs_integration", integrationDataSource)
}

// integrationDataSource returns the Terraform awscc_logs_integration data source.
// This Terraform data source corresponds to the CloudFormation AWS::Logs::Integration resource.
func integrationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: IntegrationName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "User provided identifier for integration, unique to the user account.",
		//	  "maxLength": 50,
		//	  "minLength": 1,
		//	  "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	  "type": "string"
		//	}
		"integration_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "User provided identifier for integration, unique to the user account.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IntegrationStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Status of creation for the Integration and its resources",
		//	  "enum": [
		//	    "PROVISIONING",
		//	    "ACTIVE",
		//	    "FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"integration_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Status of creation for the Integration and its resources",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IntegrationType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the Integration.",
		//	  "enum": [
		//	    "OPENSEARCH"
		//	  ],
		//	  "type": "string"
		//	}
		"integration_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the Integration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "OpenSearchResourceConfig for the given Integration",
		//	  "properties": {
		//	    "OpenSearchResourceConfig": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "ApplicationARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 20,
		//	          "pattern": "[\\w#+=/:,.@-]*\\*?",
		//	          "type": "string"
		//	        },
		//	        "DashboardViewerPrincipals": {
		//	          "items": {
		//	            "maxLength": 2048,
		//	            "minLength": 20,
		//	            "pattern": "[\\w#+=/:,.@-]*\\*?",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "DataSourceRoleArn": {
		//	          "maxLength": 2048,
		//	          "minLength": 20,
		//	          "pattern": "[\\w#+=/:,.@-]*\\*?",
		//	          "type": "string"
		//	        },
		//	        "KmsKeyArn": {
		//	          "maxLength": 2048,
		//	          "minLength": 20,
		//	          "pattern": "[\\w#+=/:,.@-]*\\*?",
		//	          "type": "string"
		//	        },
		//	        "RetentionDays": {
		//	          "maximum": 3650,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "required": [
		//	        "DataSourceRoleArn",
		//	        "DashboardViewerPrincipals"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"resource_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: OpenSearchResourceConfig
				"open_search_resource_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ApplicationARN
						"application_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DashboardViewerPrincipals
						"dashboard_viewer_principals": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DataSourceRoleArn
						"data_source_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: KmsKeyArn
						"kms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RetentionDays
						"retention_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "OpenSearchResourceConfig for the given Integration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Logs::Integration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Logs::Integration").WithTerraformTypeName("awscc_logs_integration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"application_arn":             "ApplicationARN",
		"dashboard_viewer_principals": "DashboardViewerPrincipals",
		"data_source_role_arn":        "DataSourceRoleArn",
		"integration_name":            "IntegrationName",
		"integration_status":          "IntegrationStatus",
		"integration_type":            "IntegrationType",
		"kms_key_arn":                 "KmsKeyArn",
		"open_search_resource_config": "OpenSearchResourceConfig",
		"resource_config":             "ResourceConfig",
		"retention_days":              "RetentionDays",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
