// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package logs

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_logs_integration", integrationResource)
}

// integrationResource returns the Terraform awscc_logs_integration resource.
// This Terraform resource corresponds to the CloudFormation AWS::Logs::Integration resource.
func integrationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: IntegrationName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "User provided identifier for integration, unique to the user account.",
		//	  "maxLength": 50,
		//	  "minLength": 1,
		//	  "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	  "type": "string"
		//	}
		"integration_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "User provided identifier for integration, unique to the user account.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 50),
				stringvalidator.RegexMatches(regexp.MustCompile("[\\.\\-_/#A-Za-z0-9]+"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IntegrationStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Status of creation for the Integration and its resources",
		//	  "enum": [
		//	    "PROVISIONING",
		//	    "ACTIVE",
		//	    "FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"integration_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Status of creation for the Integration and its resources",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IntegrationType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the Integration.",
		//	  "enum": [
		//	    "OPENSEARCH"
		//	  ],
		//	  "type": "string"
		//	}
		"integration_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the Integration.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"OPENSEARCH",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ResourceConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "OpenSearchResourceConfig for the given Integration",
		//	  "properties": {
		//	    "OpenSearchResourceConfig": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "ApplicationARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 20,
		//	          "pattern": "[\\w#+=/:,.@-]*\\*?",
		//	          "type": "string"
		//	        },
		//	        "DashboardViewerPrincipals": {
		//	          "items": {
		//	            "maxLength": 2048,
		//	            "minLength": 20,
		//	            "pattern": "[\\w#+=/:,.@-]*\\*?",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "DataSourceRoleArn": {
		//	          "maxLength": 2048,
		//	          "minLength": 20,
		//	          "pattern": "[\\w#+=/:,.@-]*\\*?",
		//	          "type": "string"
		//	        },
		//	        "KmsKeyArn": {
		//	          "maxLength": 2048,
		//	          "minLength": 20,
		//	          "pattern": "[\\w#+=/:,.@-]*\\*?",
		//	          "type": "string"
		//	        },
		//	        "RetentionDays": {
		//	          "maximum": 3650,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "required": [
		//	        "DataSourceRoleArn",
		//	        "DashboardViewerPrincipals"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"resource_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: OpenSearchResourceConfig
				"open_search_resource_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ApplicationARN
						"application_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(20, 2048),
								stringvalidator.RegexMatches(regexp.MustCompile("[\\w#+=/:,.@-]*\\*?"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DashboardViewerPrincipals
						"dashboard_viewer_principals": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Optional:    true,
							Computed:    true,
							Validators: []validator.List{ /*START VALIDATORS*/
								listvalidator.ValueStringsAre(
									stringvalidator.LengthBetween(20, 2048),
									stringvalidator.RegexMatches(regexp.MustCompile("[\\w#+=/:,.@-]*\\*?"), ""),
								),
								fwvalidators.NotNullList(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DataSourceRoleArn
						"data_source_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(20, 2048),
								stringvalidator.RegexMatches(regexp.MustCompile("[\\w#+=/:,.@-]*\\*?"), ""),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: KmsKeyArn
						"kms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.LengthBetween(20, 2048),
								stringvalidator.RegexMatches(regexp.MustCompile("[\\w#+=/:,.@-]*\\*?"), ""),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: RetentionDays
						"retention_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.Int64{ /*START VALIDATORS*/
								int64validator.Between(1, 3650),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
								int64planmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "OpenSearchResourceConfig for the given Integration",
			Required:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
			// ResourceConfig is a write-only property.
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Schema for Logs Integration Resource",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Logs::Integration").WithTerraformTypeName("awscc_logs_integration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"application_arn":             "ApplicationARN",
		"dashboard_viewer_principals": "DashboardViewerPrincipals",
		"data_source_role_arn":        "DataSourceRoleArn",
		"integration_name":            "IntegrationName",
		"integration_status":          "IntegrationStatus",
		"integration_type":            "IntegrationType",
		"kms_key_arn":                 "KmsKeyArn",
		"open_search_resource_config": "OpenSearchResourceConfig",
		"resource_config":             "ResourceConfig",
		"retention_days":              "RetentionDays",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/ResourceConfig",
	})
	opts = opts.WithCreateTimeoutInMinutes(30).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
