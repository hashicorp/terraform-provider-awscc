// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package inspectorv2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_inspectorv2_code_security_scan_configuration", codeSecurityScanConfigurationDataSource)
}

// codeSecurityScanConfigurationDataSource returns the Terraform awscc_inspectorv2_code_security_scan_configuration data source.
// This Terraform data source corresponds to the CloudFormation AWS::InspectorV2::CodeSecurityScanConfiguration resource.
func codeSecurityScanConfigurationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Code Security Scan Configuration ARN",
		//	  "pattern": "^arn:(aws[a-zA-Z-]*)?:inspector2:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:owner/(\\d{12}|o-[a-z0-9]{10,32})/codesecurity-configuration/[a-f0-9-]{36}$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Code Security Scan Configuration ARN",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Configuration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Code Security Scan Configuration",
		//	  "properties": {
		//	    "continuousIntegrationScanConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "supportedEvents": {
		//	          "items": {
		//	            "enum": [
		//	              "PULL_REQUEST",
		//	              "PUSH"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "maxItems": 2,
		//	          "minItems": 1,
		//	          "type": "array"
		//	        }
		//	      },
		//	      "required": [
		//	        "supportedEvents"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "periodicScanConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "frequency": {
		//	          "enum": [
		//	            "WEEKLY",
		//	            "MONTHLY",
		//	            "NEVER"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "frequencyExpression": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ruleSetCategories": {
		//	      "items": {
		//	        "enum": [
		//	          "SAST",
		//	          "IAC",
		//	          "SCA"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "maxItems": 3,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "required": [
		//	    "ruleSetCategories"
		//	  ],
		//	  "type": "object"
		//	}
		"configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: continuousIntegrationScanConfiguration
				"continuous_integration_scan_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: supportedEvents
						"supported_events": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: periodicScanConfiguration
				"periodic_scan_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: frequency
						"frequency": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: frequencyExpression
						"frequency_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ruleSetCategories
				"rule_set_categories": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Code Security Scan Configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Level
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Configuration Level",
		//	  "enum": [
		//	    "ORGANIZATION",
		//	    "ACCOUNT"
		//	  ],
		//	  "type": "string"
		//	}
		"level": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Configuration Level",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Code Security Scan Configuration name",
		//	  "maxLength": 60,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9-_$:.]*$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Code Security Scan Configuration name",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ScopeSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Scope Settings",
		//	  "properties": {
		//	    "projectSelectionScope": {
		//	      "enum": [
		//	        "ALL"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"scope_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: projectSelectionScope
				"project_selection_scope": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Scope Settings",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "pattern": "^.{1,255}$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::InspectorV2::CodeSecurityScanConfiguration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::InspectorV2::CodeSecurityScanConfiguration").WithTerraformTypeName("awscc_inspectorv2_code_security_scan_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":           "Arn",
		"configuration": "Configuration",
		"continuous_integration_scan_configuration": "continuousIntegrationScanConfiguration",
		"frequency":                   "frequency",
		"frequency_expression":        "frequencyExpression",
		"level":                       "Level",
		"name":                        "Name",
		"periodic_scan_configuration": "periodicScanConfiguration",
		"project_selection_scope":     "projectSelectionScope",
		"rule_set_categories":         "ruleSetCategories",
		"scope_settings":              "ScopeSettings",
		"supported_events":            "supportedEvents",
		"tags":                        "Tags",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
