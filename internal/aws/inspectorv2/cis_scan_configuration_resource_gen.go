// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package inspectorv2

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_inspectorv2_cis_scan_configuration", cisScanConfigurationResource)
}

// cisScanConfigurationResource returns the Terraform awscc_inspectorv2_cis_scan_configuration resource.
// This Terraform resource corresponds to the CloudFormation AWS::InspectorV2::CisScanConfiguration resource.
func cisScanConfigurationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "CIS Scan configuration unique identifier",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "CIS Scan configuration unique identifier",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ScanName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of the scan",
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"scan_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of the scan",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtLeast(1),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: Schedule
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Choose a Schedule cadence",
		//	  "properties": {
		//	    "Daily": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "StartTime": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "TimeOfDay": {
		//	              "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
		//	              "type": "string"
		//	            },
		//	            "TimeZone": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "TimeOfDay",
		//	            "TimeZone"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "StartTime"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Monthly": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Day": {
		//	          "enum": [
		//	            "MON",
		//	            "TUE",
		//	            "WED",
		//	            "THU",
		//	            "FRI",
		//	            "SAT",
		//	            "SUN"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "StartTime": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "TimeOfDay": {
		//	              "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
		//	              "type": "string"
		//	            },
		//	            "TimeZone": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "TimeOfDay",
		//	            "TimeZone"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "StartTime",
		//	        "Day"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "OneTime": {
		//	      "type": "object"
		//	    },
		//	    "Weekly": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Days": {
		//	          "items": {
		//	            "enum": [
		//	              "MON",
		//	              "TUE",
		//	              "WED",
		//	              "THU",
		//	              "FRI",
		//	              "SAT",
		//	              "SUN"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "maxItems": 7,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        },
		//	        "StartTime": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "TimeOfDay": {
		//	              "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
		//	              "type": "string"
		//	            },
		//	            "TimeZone": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "TimeOfDay",
		//	            "TimeZone"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "StartTime",
		//	        "Days"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  }
		//	}
		"schedule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Daily
				"daily": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: StartTime
						"start_time": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: TimeOfDay
								"time_of_day": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.RegexMatches(regexp.MustCompile("^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TimeZone
								"time_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Monthly
				"monthly": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Day
						"day": schema.StringAttribute{ /*START ATTRIBUTE*/
							Optional: true,
							Computed: true,
							Validators: []validator.String{ /*START VALIDATORS*/
								stringvalidator.OneOf(
									"MON",
									"TUE",
									"WED",
									"THU",
									"FRI",
									"SAT",
									"SUN",
								),
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: StartTime
						"start_time": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: TimeOfDay
								"time_of_day": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.RegexMatches(regexp.MustCompile("^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TimeZone
								"time_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: OneTime
				"one_time": schema.StringAttribute{ /*START ATTRIBUTE*/
					CustomType: jsontypes.NormalizedType{},
					Optional:   true,
					Computed:   true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Weekly
				"weekly": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Days
						"days": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Optional:    true,
							Computed:    true,
							Validators: []validator.List{ /*START VALIDATORS*/
								listvalidator.SizeBetween(1, 7),
								listvalidator.UniqueValues(),
								listvalidator.ValueStringsAre(
									stringvalidator.OneOf(
										"MON",
										"TUE",
										"WED",
										"THU",
										"FRI",
										"SAT",
										"SUN",
									),
								),
								fwvalidators.NotNullList(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
								listplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: StartTime
						"start_time": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: TimeOfDay
								"time_of_day": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.RegexMatches(regexp.MustCompile("^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"), ""),
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TimeZone
								"time_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
									Optional: true,
									Computed: true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Optional: true,
							Computed: true,
							Validators: []validator.Object{ /*START VALIDATORS*/
								fwvalidators.NotNullObject(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Choose a Schedule cadence",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: SecurityLevel
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "LEVEL_1",
		//	    "LEVEL_2"
		//	  ],
		//	  "type": "string"
		//	}
		"security_level": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"LEVEL_1",
					"LEVEL_2",
				),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "pattern": "^.{1,255}$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Map{ /*START PLAN MODIFIERS*/
				mapplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Targets
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AccountIds": {
		//	      "items": {
		//	        "pattern": "^\\d{12}|ALL_ACCOUNTS|SELF$",
		//	        "type": "string"
		//	      },
		//	      "maxItems": 10000,
		//	      "minItems": 1,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "TargetResourceTags": {
		//	      "additionalProperties": false,
		//	      "patternProperties": {
		//	        "": {
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "maxItems": 5,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      }
		//	    }
		//	  },
		//	  "required": [
		//	    "AccountIds",
		//	    "TargetResourceTags"
		//	  ]
		//	}
		"targets": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AccountIds
				"account_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Required:    true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.SizeBetween(1, 10000),
						listvalidator.UniqueValues(),
						listvalidator.ValueStringsAre(
							stringvalidator.RegexMatches(regexp.MustCompile("^\\d{12}|ALL_ACCOUNTS|SELF$"), ""),
						),
					}, /*END VALIDATORS*/
				}, /*END ATTRIBUTE*/
				// Property: TargetResourceTags
				"target_resource_tags": // Pattern: ""
				schema.MapAttribute{    /*START ATTRIBUTE*/
					ElementType: types.ListType{ElemType: types.StringType},
					Required:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Required: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "CIS Scan Configuration resource schema",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::InspectorV2::CisScanConfiguration").WithTerraformTypeName("awscc_inspectorv2_cis_scan_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_ids":          "AccountIds",
		"arn":                  "Arn",
		"daily":                "Daily",
		"day":                  "Day",
		"days":                 "Days",
		"monthly":              "Monthly",
		"one_time":             "OneTime",
		"scan_name":            "ScanName",
		"schedule":             "Schedule",
		"security_level":       "SecurityLevel",
		"start_time":           "StartTime",
		"tags":                 "Tags",
		"target_resource_tags": "TargetResourceTags",
		"targets":              "Targets",
		"time_of_day":          "TimeOfDay",
		"time_zone":            "TimeZone",
		"weekly":               "Weekly",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
