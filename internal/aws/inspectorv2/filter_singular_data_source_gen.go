// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package inspectorv2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_inspectorv2_filter", filterDataSource)
}

// filterDataSource returns the Terraform awscc_inspectorv2_filter data source.
// This Terraform data source corresponds to the CloudFormation AWS::InspectorV2::Filter resource.
func filterDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Findings filter ARN.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Findings filter ARN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Findings filter description.",
		//	  "maxLength": 512,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Findings filter description.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FilterAction
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Findings filter action.",
		//	  "enum": [
		//	    "NONE",
		//	    "SUPPRESS"
		//	  ],
		//	  "type": "string"
		//	}
		"filter_action": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Findings filter action.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FilterCriteria
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Findings filter criteria.",
		//	  "properties": {
		//	    "AwsAccountId": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "CodeVulnerabilityDetectorName": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "CodeVulnerabilityDetectorTags": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "CodeVulnerabilityFilePath": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "ComponentId": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "ComponentType": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "Ec2InstanceImageId": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "Ec2InstanceSubnetId": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "Ec2InstanceVpcId": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "EcrImageArchitecture": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "EcrImageHash": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "EcrImagePushedAt": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "EndInclusive": {
		//	            "format": "int64",
		//	            "type": "integer"
		//	          },
		//	          "StartInclusive": {
		//	            "format": "int64",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "EcrImageRegistry": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "EcrImageRepositoryName": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "EcrImageTags": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "EpssScore": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "LowerInclusive": {
		//	            "type": "number"
		//	          },
		//	          "UpperInclusive": {
		//	            "type": "number"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "ExploitAvailable": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "FindingArn": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "FindingStatus": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "FindingType": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "FirstObservedAt": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "EndInclusive": {
		//	            "format": "int64",
		//	            "type": "integer"
		//	          },
		//	          "StartInclusive": {
		//	            "format": "int64",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "FixAvailable": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "InspectorScore": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "LowerInclusive": {
		//	            "type": "number"
		//	          },
		//	          "UpperInclusive": {
		//	            "type": "number"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "LambdaFunctionExecutionRoleArn": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "LambdaFunctionLastModifiedAt": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "EndInclusive": {
		//	            "format": "int64",
		//	            "type": "integer"
		//	          },
		//	          "StartInclusive": {
		//	            "format": "int64",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "LambdaFunctionLayers": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "LambdaFunctionName": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "LambdaFunctionRuntime": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "LastObservedAt": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "EndInclusive": {
		//	            "format": "int64",
		//	            "type": "integer"
		//	          },
		//	          "StartInclusive": {
		//	            "format": "int64",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "NetworkProtocol": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "PortRange": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "BeginInclusive": {
		//	            "maximum": 65535,
		//	            "minimum": 0,
		//	            "type": "integer"
		//	          },
		//	          "EndInclusive": {
		//	            "maximum": 65535,
		//	            "minimum": 0,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "RelatedVulnerabilities": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "ResourceId": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "ResourceTags": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Key": {
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 256,
		//	            "minLength": 0,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "ResourceType": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "Severity": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "Title": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "UpdatedAt": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "EndInclusive": {
		//	            "format": "int64",
		//	            "type": "integer"
		//	          },
		//	          "StartInclusive": {
		//	            "format": "int64",
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "VendorSeverity": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "VulnerabilityId": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "VulnerabilitySource": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Comparison": {
		//	            "enum": [
		//	              "EQUALS",
		//	              "PREFIX",
		//	              "NOT_EQUALS"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Comparison",
		//	          "Value"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "VulnerablePackages": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Architecture": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Comparison": {
		//	                "enum": [
		//	                  "EQUALS",
		//	                  "PREFIX",
		//	                  "NOT_EQUALS"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Comparison",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Epoch": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "LowerInclusive": {
		//	                "type": "number"
		//	              },
		//	              "UpperInclusive": {
		//	                "type": "number"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "FilePath": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Comparison": {
		//	                "enum": [
		//	                  "EQUALS",
		//	                  "PREFIX",
		//	                  "NOT_EQUALS"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Comparison",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Name": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Comparison": {
		//	                "enum": [
		//	                  "EQUALS",
		//	                  "PREFIX",
		//	                  "NOT_EQUALS"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Comparison",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Release": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Comparison": {
		//	                "enum": [
		//	                  "EQUALS",
		//	                  "PREFIX",
		//	                  "NOT_EQUALS"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Comparison",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "SourceLambdaLayerArn": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Comparison": {
		//	                "enum": [
		//	                  "EQUALS",
		//	                  "PREFIX",
		//	                  "NOT_EQUALS"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Comparison",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "SourceLayerHash": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Comparison": {
		//	                "enum": [
		//	                  "EQUALS",
		//	                  "PREFIX",
		//	                  "NOT_EQUALS"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Comparison",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Version": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Comparison": {
		//	                "enum": [
		//	                  "EQUALS",
		//	                  "PREFIX",
		//	                  "NOT_EQUALS"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Comparison",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"filter_criteria": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AwsAccountId
				"aws_account_id": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CodeVulnerabilityDetectorName
				"code_vulnerability_detector_name": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CodeVulnerabilityDetectorTags
				"code_vulnerability_detector_tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CodeVulnerabilityFilePath
				"code_vulnerability_file_path": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ComponentId
				"component_id": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ComponentType
				"component_type": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Ec2InstanceImageId
				"ec_2_instance_image_id": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Ec2InstanceSubnetId
				"ec_2_instance_subnet_id": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Ec2InstanceVpcId
				"ec_2_instance_vpc_id": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EcrImageArchitecture
				"ecr_image_architecture": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EcrImageHash
				"ecr_image_hash": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EcrImagePushedAt
				"ecr_image_pushed_at": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: EndInclusive
							"end_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: StartInclusive
							"start_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EcrImageRegistry
				"ecr_image_registry": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EcrImageRepositoryName
				"ecr_image_repository_name": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EcrImageTags
				"ecr_image_tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EpssScore
				"epss_score": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: LowerInclusive
							"lower_inclusive": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: UpperInclusive
							"upper_inclusive": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ExploitAvailable
				"exploit_available": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: FindingArn
				"finding_arn": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: FindingStatus
				"finding_status": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: FindingType
				"finding_type": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: FirstObservedAt
				"first_observed_at": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: EndInclusive
							"end_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: StartInclusive
							"start_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: FixAvailable
				"fix_available": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InspectorScore
				"inspector_score": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: LowerInclusive
							"lower_inclusive": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: UpperInclusive
							"upper_inclusive": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LambdaFunctionExecutionRoleArn
				"lambda_function_execution_role_arn": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LambdaFunctionLastModifiedAt
				"lambda_function_last_modified_at": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: EndInclusive
							"end_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: StartInclusive
							"start_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LambdaFunctionLayers
				"lambda_function_layers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LambdaFunctionName
				"lambda_function_name": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LambdaFunctionRuntime
				"lambda_function_runtime": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LastObservedAt
				"last_observed_at": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: EndInclusive
							"end_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: StartInclusive
							"start_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: NetworkProtocol
				"network_protocol": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: PortRange
				"port_range": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: BeginInclusive
							"begin_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: EndInclusive
							"end_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RelatedVulnerabilities
				"related_vulnerabilities": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ResourceId
				"resource_id": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ResourceTags
				"resource_tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Key
							"key": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ResourceType
				"resource_type": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Severity
				"severity": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Title
				"title": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: UpdatedAt
				"updated_at": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: EndInclusive
							"end_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: StartInclusive
							"start_inclusive": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VendorSeverity
				"vendor_severity": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VulnerabilityId
				"vulnerability_id": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VulnerabilitySource
				"vulnerability_source": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Comparison
							"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VulnerablePackages
				"vulnerable_packages": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Architecture
							"architecture": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Comparison
									"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Epoch
							"epoch": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: LowerInclusive
									"lower_inclusive": schema.Float64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: UpperInclusive
									"upper_inclusive": schema.Float64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: FilePath
							"file_path": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Comparison
									"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Comparison
									"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Release
							"release": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Comparison
									"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SourceLambdaLayerArn
							"source_lambda_layer_arn": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Comparison
									"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SourceLayerHash
							"source_layer_hash": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Comparison
									"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Version
							"version": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Comparison
									"comparison": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Findings filter criteria.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Findings filter name.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Findings filter name.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "pattern": "^.{1,255}$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::InspectorV2::Filter",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::InspectorV2::Filter").WithTerraformTypeName("awscc_inspectorv2_filter")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"architecture":                       "Architecture",
		"arn":                                "Arn",
		"aws_account_id":                     "AwsAccountId",
		"begin_inclusive":                    "BeginInclusive",
		"code_vulnerability_detector_name":   "CodeVulnerabilityDetectorName",
		"code_vulnerability_detector_tags":   "CodeVulnerabilityDetectorTags",
		"code_vulnerability_file_path":       "CodeVulnerabilityFilePath",
		"comparison":                         "Comparison",
		"component_id":                       "ComponentId",
		"component_type":                     "ComponentType",
		"description":                        "Description",
		"ec_2_instance_image_id":             "Ec2InstanceImageId",
		"ec_2_instance_subnet_id":            "Ec2InstanceSubnetId",
		"ec_2_instance_vpc_id":               "Ec2InstanceVpcId",
		"ecr_image_architecture":             "EcrImageArchitecture",
		"ecr_image_hash":                     "EcrImageHash",
		"ecr_image_pushed_at":                "EcrImagePushedAt",
		"ecr_image_registry":                 "EcrImageRegistry",
		"ecr_image_repository_name":          "EcrImageRepositoryName",
		"ecr_image_tags":                     "EcrImageTags",
		"end_inclusive":                      "EndInclusive",
		"epoch":                              "Epoch",
		"epss_score":                         "EpssScore",
		"exploit_available":                  "ExploitAvailable",
		"file_path":                          "FilePath",
		"filter_action":                      "FilterAction",
		"filter_criteria":                    "FilterCriteria",
		"finding_arn":                        "FindingArn",
		"finding_status":                     "FindingStatus",
		"finding_type":                       "FindingType",
		"first_observed_at":                  "FirstObservedAt",
		"fix_available":                      "FixAvailable",
		"inspector_score":                    "InspectorScore",
		"key":                                "Key",
		"lambda_function_execution_role_arn": "LambdaFunctionExecutionRoleArn",
		"lambda_function_last_modified_at":   "LambdaFunctionLastModifiedAt",
		"lambda_function_layers":             "LambdaFunctionLayers",
		"lambda_function_name":               "LambdaFunctionName",
		"lambda_function_runtime":            "LambdaFunctionRuntime",
		"last_observed_at":                   "LastObservedAt",
		"lower_inclusive":                    "LowerInclusive",
		"name":                               "Name",
		"network_protocol":                   "NetworkProtocol",
		"port_range":                         "PortRange",
		"related_vulnerabilities":            "RelatedVulnerabilities",
		"release":                            "Release",
		"resource_id":                        "ResourceId",
		"resource_tags":                      "ResourceTags",
		"resource_type":                      "ResourceType",
		"severity":                           "Severity",
		"source_lambda_layer_arn":            "SourceLambdaLayerArn",
		"source_layer_hash":                  "SourceLayerHash",
		"start_inclusive":                    "StartInclusive",
		"tags":                               "Tags",
		"title":                              "Title",
		"updated_at":                         "UpdatedAt",
		"upper_inclusive":                    "UpperInclusive",
		"value":                              "Value",
		"vendor_severity":                    "VendorSeverity",
		"version":                            "Version",
		"vulnerability_id":                   "VulnerabilityId",
		"vulnerability_source":               "VulnerabilitySource",
		"vulnerable_packages":                "VulnerablePackages",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
