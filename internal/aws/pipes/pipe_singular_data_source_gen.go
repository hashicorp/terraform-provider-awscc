// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package pipes

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_pipes_pipe", pipeDataSource)
}

// pipeDataSource returns the Terraform awscc_pipes_pipe data source.
// This Terraform data source corresponds to the CloudFormation AWS::Pipes::Pipe resource.
func pipeDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 1600,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws([a-z]|\\-)*:([a-zA-Z0-9\\-]+):([a-z]|\\d|\\-)*:([0-9]{12})?:(.+)$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType: timetypes.RFC3339Type{},
			Computed:   true,
		}, /*END ATTRIBUTE*/
		// Property: CurrentState
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "RUNNING",
		//	    "STOPPED",
		//	    "CREATING",
		//	    "UPDATING",
		//	    "DELETING",
		//	    "STARTING",
		//	    "STOPPING",
		//	    "CREATE_FAILED",
		//	    "UPDATE_FAILED",
		//	    "START_FAILED",
		//	    "STOP_FAILED",
		//	    "DELETE_FAILED",
		//	    "CREATE_ROLLBACK_FAILED",
		//	    "DELETE_ROLLBACK_FAILED",
		//	    "UPDATE_ROLLBACK_FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"current_state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 512,
		//	  "minLength": 0,
		//	  "pattern": "^.*$",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DesiredState
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "RUNNING",
		//	    "STOPPED"
		//	  ],
		//	  "type": "string"
		//	}
		"desired_state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Enrichment
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 1600,
		//	  "minLength": 0,
		//	  "pattern": "^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-]+):([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1})?:(\\d{12})?:(.+)$",
		//	  "type": "string"
		//	}
		"enrichment": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: EnrichmentParameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "HttpParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "HeaderParameters": {
		//	          "additionalProperties": false,
		//	          "patternProperties": {
		//	            "": {
		//	              "maxLength": 512,
		//	              "minLength": 0,
		//	              "pattern": "^[ \\t]*[\\x20-\\x7E]+([ \\t]+[\\x20-\\x7E]+)*[ \\t]*|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "PathParameterValues": {
		//	          "items": {
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "QueryStringParameters": {
		//	          "additionalProperties": false,
		//	          "patternProperties": {
		//	            "": {
		//	              "maxLength": 512,
		//	              "minLength": 0,
		//	              "pattern": "^[^\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F]+|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "InputTemplate": {
		//	      "maxLength": 8192,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"enrichment_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: HttpParameters
				"http_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: HeaderParameters
						"header_parameters": // Pattern: ""
						schema.MapAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: PathParameterValues
						"path_parameter_values": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: QueryStringParameters
						"query_string_parameters": // Pattern: ""
						schema.MapAttribute{       /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InputTemplate
				"input_template": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: KmsKeyIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 2048,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"kms_key_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LastModifiedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"last_modified_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType: timetypes.RFC3339Type{},
			Computed:   true,
		}, /*END ATTRIBUTE*/
		// Property: LogConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "CloudwatchLogsLogDestination": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "LogGroupArn": {
		//	          "maxLength": 1600,
		//	          "minLength": 1,
		//	          "pattern": "^(^arn:aws([a-z]|\\-)*:logs:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):log-group:.+)$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "FirehoseLogDestination": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DeliveryStreamArn": {
		//	          "maxLength": 1600,
		//	          "minLength": 1,
		//	          "pattern": "^(^arn:aws([a-z]|\\-)*:firehose:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):deliverystream/.+)$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "IncludeExecutionData": {
		//	      "items": {
		//	        "enum": [
		//	          "ALL"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "Level": {
		//	      "enum": [
		//	        "OFF",
		//	        "ERROR",
		//	        "INFO",
		//	        "TRACE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "S3LogDestination": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketName": {
		//	          "type": "string"
		//	        },
		//	        "BucketOwner": {
		//	          "type": "string"
		//	        },
		//	        "OutputFormat": {
		//	          "enum": [
		//	            "json",
		//	            "plain",
		//	            "w3c"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"log_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CloudwatchLogsLogDestination
				"cloudwatch_logs_log_destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: LogGroupArn
						"log_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: FirehoseLogDestination
				"firehose_log_destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DeliveryStreamArn
						"delivery_stream_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IncludeExecutionData
				"include_execution_data": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Level
				"level": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3LogDestination
				"s3_log_destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketName
						"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BucketOwner
						"bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OutputFormat
						"output_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "^[\\.\\-_A-Za-z0-9]+$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 1600,
		//	  "minLength": 1,
		//	  "pattern": "^arn:(aws[a-zA-Z-]*)?:iam::\\d{12}:role/?[a-zA-Z0-9+=,.@\\-_/]+$",
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Source
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 1600,
		//	  "minLength": 1,
		//	  "pattern": "^smk://(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):[0-9]{1,5}|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-]+):([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1})?:(\\d{12})?:(.+)$",
		//	  "type": "string"
		//	}
		"source": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SourceParameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "ActiveMQBrokerParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BatchSize": {
		//	          "maximum": 10000,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "Credentials": {
		//	          "properties": {
		//	            "BasicAuth": {
		//	              "description": "Optional SecretManager ARN which stores the database credentials",
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^(^arn:aws([a-z]|\\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):secret:.+)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "MaximumBatchingWindowInSeconds": {
		//	          "maximum": 300,
		//	          "minimum": 0,
		//	          "type": "integer"
		//	        },
		//	        "QueueName": {
		//	          "maxLength": 1000,
		//	          "minLength": 1,
		//	          "pattern": "^[\\s\\S]*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Credentials",
		//	        "QueueName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "DynamoDBStreamParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BatchSize": {
		//	          "maximum": 10000,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "DeadLetterConfig": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Arn": {
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-]+):([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1})?:(\\d{12})?:(.+)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "MaximumBatchingWindowInSeconds": {
		//	          "maximum": 300,
		//	          "minimum": 0,
		//	          "type": "integer"
		//	        },
		//	        "MaximumRecordAgeInSeconds": {
		//	          "maximum": 604800,
		//	          "minimum": -1,
		//	          "type": "integer"
		//	        },
		//	        "MaximumRetryAttempts": {
		//	          "maximum": 10000,
		//	          "minimum": -1,
		//	          "type": "integer"
		//	        },
		//	        "OnPartialBatchItemFailure": {
		//	          "enum": [
		//	            "AUTOMATIC_BISECT"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "ParallelizationFactor": {
		//	          "maximum": 10,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "StartingPosition": {
		//	          "enum": [
		//	            "TRIM_HORIZON",
		//	            "LATEST"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "StartingPosition"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "FilterCriteria": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Filters": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Pattern": {
		//	                "maxLength": 4096,
		//	                "minLength": 0,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "maxItems": 5,
		//	          "minItems": 0,
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "KinesisStreamParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BatchSize": {
		//	          "maximum": 10000,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "DeadLetterConfig": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Arn": {
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-]+):([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1})?:(\\d{12})?:(.+)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "MaximumBatchingWindowInSeconds": {
		//	          "maximum": 300,
		//	          "minimum": 0,
		//	          "type": "integer"
		//	        },
		//	        "MaximumRecordAgeInSeconds": {
		//	          "maximum": 604800,
		//	          "minimum": -1,
		//	          "type": "integer"
		//	        },
		//	        "MaximumRetryAttempts": {
		//	          "maximum": 10000,
		//	          "minimum": -1,
		//	          "type": "integer"
		//	        },
		//	        "OnPartialBatchItemFailure": {
		//	          "enum": [
		//	            "AUTOMATIC_BISECT"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "ParallelizationFactor": {
		//	          "maximum": 10,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "StartingPosition": {
		//	          "enum": [
		//	            "TRIM_HORIZON",
		//	            "LATEST",
		//	            "AT_TIMESTAMP"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "StartingPositionTimestamp": {
		//	          "format": "date-time",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "StartingPosition"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "ManagedStreamingKafkaParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BatchSize": {
		//	          "maximum": 10000,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "ConsumerGroupID": {
		//	          "maxLength": 200,
		//	          "minLength": 1,
		//	          "pattern": "^[a-zA-Z0-9-\\/*:_+=.@-]*$",
		//	          "type": "string"
		//	        },
		//	        "Credentials": {
		//	          "properties": {
		//	            "ClientCertificateTlsAuth": {
		//	              "description": "Optional SecretManager ARN which stores the database credentials",
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^(^arn:aws([a-z]|\\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):secret:.+)$",
		//	              "type": "string"
		//	            },
		//	            "SaslScram512Auth": {
		//	              "description": "Optional SecretManager ARN which stores the database credentials",
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^(^arn:aws([a-z]|\\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):secret:.+)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "MaximumBatchingWindowInSeconds": {
		//	          "maximum": 300,
		//	          "minimum": 0,
		//	          "type": "integer"
		//	        },
		//	        "StartingPosition": {
		//	          "enum": [
		//	            "TRIM_HORIZON",
		//	            "LATEST"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "TopicName": {
		//	          "maxLength": 249,
		//	          "minLength": 1,
		//	          "pattern": "^[^.]([a-zA-Z0-9\\-_.]+)$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "TopicName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "RabbitMQBrokerParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BatchSize": {
		//	          "maximum": 10000,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "Credentials": {
		//	          "properties": {
		//	            "BasicAuth": {
		//	              "description": "Optional SecretManager ARN which stores the database credentials",
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^(^arn:aws([a-z]|\\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):secret:.+)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "MaximumBatchingWindowInSeconds": {
		//	          "maximum": 300,
		//	          "minimum": 0,
		//	          "type": "integer"
		//	        },
		//	        "QueueName": {
		//	          "maxLength": 1000,
		//	          "minLength": 1,
		//	          "pattern": "^[\\s\\S]*$",
		//	          "type": "string"
		//	        },
		//	        "VirtualHost": {
		//	          "maxLength": 200,
		//	          "minLength": 1,
		//	          "pattern": "^[a-zA-Z0-9-\\/*:_+=.@-]*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Credentials",
		//	        "QueueName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SelfManagedKafkaParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AdditionalBootstrapServers": {
		//	          "items": {
		//	            "maxLength": 300,
		//	            "minLength": 1,
		//	            "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):[0-9]{1,5}$",
		//	            "type": "string"
		//	          },
		//	          "maxItems": 2,
		//	          "minItems": 0,
		//	          "type": "array"
		//	        },
		//	        "BatchSize": {
		//	          "maximum": 10000,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "ConsumerGroupID": {
		//	          "maxLength": 200,
		//	          "minLength": 1,
		//	          "pattern": "^[a-zA-Z0-9-\\/*:_+=.@-]*$",
		//	          "type": "string"
		//	        },
		//	        "Credentials": {
		//	          "properties": {
		//	            "BasicAuth": {
		//	              "description": "Optional SecretManager ARN which stores the database credentials",
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^(^arn:aws([a-z]|\\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):secret:.+)$",
		//	              "type": "string"
		//	            },
		//	            "ClientCertificateTlsAuth": {
		//	              "description": "Optional SecretManager ARN which stores the database credentials",
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^(^arn:aws([a-z]|\\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):secret:.+)$",
		//	              "type": "string"
		//	            },
		//	            "SaslScram256Auth": {
		//	              "description": "Optional SecretManager ARN which stores the database credentials",
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^(^arn:aws([a-z]|\\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):secret:.+)$",
		//	              "type": "string"
		//	            },
		//	            "SaslScram512Auth": {
		//	              "description": "Optional SecretManager ARN which stores the database credentials",
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^(^arn:aws([a-z]|\\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):secret:.+)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "MaximumBatchingWindowInSeconds": {
		//	          "maximum": 300,
		//	          "minimum": 0,
		//	          "type": "integer"
		//	        },
		//	        "ServerRootCaCertificate": {
		//	          "description": "Optional SecretManager ARN which stores the database credentials",
		//	          "maxLength": 1600,
		//	          "minLength": 1,
		//	          "pattern": "^(^arn:aws([a-z]|\\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):secret:.+)$",
		//	          "type": "string"
		//	        },
		//	        "StartingPosition": {
		//	          "enum": [
		//	            "TRIM_HORIZON",
		//	            "LATEST"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "TopicName": {
		//	          "maxLength": 249,
		//	          "minLength": 1,
		//	          "pattern": "^[^.]([a-zA-Z0-9\\-_.]+)$",
		//	          "type": "string"
		//	        },
		//	        "Vpc": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "SecurityGroup": {
		//	              "description": "List of SecurityGroupId.",
		//	              "items": {
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "pattern": "^sg-[0-9a-zA-Z]*$",
		//	                "type": "string"
		//	              },
		//	              "maxItems": 5,
		//	              "minItems": 0,
		//	              "type": "array"
		//	            },
		//	            "Subnets": {
		//	              "description": "List of SubnetId.",
		//	              "items": {
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "pattern": "^subnet-[0-9a-z]*$",
		//	                "type": "string"
		//	              },
		//	              "maxItems": 16,
		//	              "minItems": 0,
		//	              "type": "array"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "TopicName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SqsQueueParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BatchSize": {
		//	          "maximum": 10000,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "MaximumBatchingWindowInSeconds": {
		//	          "maximum": 300,
		//	          "minimum": 0,
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"source_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ActiveMQBrokerParameters
				"active_mq_broker_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BatchSize
						"batch_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Credentials
						"credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BasicAuth
								"basic_auth": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Optional SecretManager ARN which stores the database credentials",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumBatchingWindowInSeconds
						"maximum_batching_window_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: QueueName
						"queue_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DynamoDBStreamParameters
				"dynamo_db_stream_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BatchSize
						"batch_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DeadLetterConfig
						"dead_letter_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Arn
								"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumBatchingWindowInSeconds
						"maximum_batching_window_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumRecordAgeInSeconds
						"maximum_record_age_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumRetryAttempts
						"maximum_retry_attempts": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OnPartialBatchItemFailure
						"on_partial_batch_item_failure": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ParallelizationFactor
						"parallelization_factor": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: StartingPosition
						"starting_position": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: FilterCriteria
				"filter_criteria": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Filters
						"filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Pattern
									"pattern": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: KinesisStreamParameters
				"kinesis_stream_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BatchSize
						"batch_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DeadLetterConfig
						"dead_letter_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Arn
								"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumBatchingWindowInSeconds
						"maximum_batching_window_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumRecordAgeInSeconds
						"maximum_record_age_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumRetryAttempts
						"maximum_retry_attempts": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OnPartialBatchItemFailure
						"on_partial_batch_item_failure": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ParallelizationFactor
						"parallelization_factor": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: StartingPosition
						"starting_position": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: StartingPositionTimestamp
						"starting_position_timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
							CustomType: timetypes.RFC3339Type{},
							Computed:   true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ManagedStreamingKafkaParameters
				"managed_streaming_kafka_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BatchSize
						"batch_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ConsumerGroupID
						"consumer_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Credentials
						"credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ClientCertificateTlsAuth
								"client_certificate_tls_auth": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Optional SecretManager ARN which stores the database credentials",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SaslScram512Auth
								"sasl_scram_512_auth": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Optional SecretManager ARN which stores the database credentials",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumBatchingWindowInSeconds
						"maximum_batching_window_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: StartingPosition
						"starting_position": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TopicName
						"topic_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RabbitMQBrokerParameters
				"rabbit_mq_broker_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BatchSize
						"batch_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Credentials
						"credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BasicAuth
								"basic_auth": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Optional SecretManager ARN which stores the database credentials",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumBatchingWindowInSeconds
						"maximum_batching_window_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: QueueName
						"queue_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: VirtualHost
						"virtual_host": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SelfManagedKafkaParameters
				"self_managed_kafka_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AdditionalBootstrapServers
						"additional_bootstrap_servers": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: BatchSize
						"batch_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ConsumerGroupID
						"consumer_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Credentials
						"credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BasicAuth
								"basic_auth": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Optional SecretManager ARN which stores the database credentials",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: ClientCertificateTlsAuth
								"client_certificate_tls_auth": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Optional SecretManager ARN which stores the database credentials",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SaslScram256Auth
								"sasl_scram_256_auth": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Optional SecretManager ARN which stores the database credentials",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: SaslScram512Auth
								"sasl_scram_512_auth": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Optional SecretManager ARN which stores the database credentials",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumBatchingWindowInSeconds
						"maximum_batching_window_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ServerRootCaCertificate
						"server_root_ca_certificate": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Optional SecretManager ARN which stores the database credentials",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: StartingPosition
						"starting_position": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TopicName
						"topic_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Vpc
						"vpc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: SecurityGroup
								"security_group": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "List of SecurityGroupId.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Subnets
								"subnets": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "List of SubnetId.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SqsQueueParameters
				"sqs_queue_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BatchSize
						"batch_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaximumBatchingWindowInSeconds
						"maximum_batching_window_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: StateReason
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 512,
		//	  "minLength": 0,
		//	  "pattern": "^.*$",
		//	  "type": "string"
		//	}
		"state_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "maxLength": 256,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Target
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 1600,
		//	  "minLength": 1,
		//	  "pattern": "^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-]+):([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1})?:(\\d{12})?:(.+)$",
		//	  "type": "string"
		//	}
		"target": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TargetParameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BatchJobParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "ArrayProperties": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Size": {
		//	              "default": 0,
		//	              "maximum": 10000,
		//	              "minimum": 2,
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ContainerOverrides": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Command": {
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Environment": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Name": {
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "InstanceType": {
		//	              "type": "string"
		//	            },
		//	            "ResourceRequirements": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Type": {
		//	                    "enum": [
		//	                      "GPU",
		//	                      "MEMORY",
		//	                      "VCPU"
		//	                    ],
		//	                    "type": "string"
		//	                  },
		//	                  "Value": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Type",
		//	                  "Value"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "type": "array"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "DependsOn": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "JobId": {
		//	                "type": "string"
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "N_TO_N",
		//	                  "SEQUENTIAL"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "maxItems": 20,
		//	          "minItems": 0,
		//	          "type": "array"
		//	        },
		//	        "JobDefinition": {
		//	          "type": "string"
		//	        },
		//	        "JobName": {
		//	          "type": "string"
		//	        },
		//	        "Parameters": {
		//	          "additionalProperties": false,
		//	          "patternProperties": {
		//	            "": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "RetryStrategy": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Attempts": {
		//	              "default": 0,
		//	              "maximum": 10,
		//	              "minimum": 1,
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "JobDefinition",
		//	        "JobName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "CloudWatchLogsParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "LogStreamName": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Timestamp": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "pattern": "^\\$(\\.[\\w_-]+(\\[(\\d+|\\*)\\])*)*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "EcsTaskParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CapacityProviderStrategy": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Base": {
		//	                "default": 0,
		//	                "maximum": 100000,
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              },
		//	              "CapacityProvider": {
		//	                "maxLength": 255,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "Weight": {
		//	                "default": 0,
		//	                "maximum": 1000,
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "required": [
		//	              "CapacityProvider"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "maxItems": 6,
		//	          "minItems": 0,
		//	          "type": "array"
		//	        },
		//	        "EnableECSManagedTags": {
		//	          "default": false,
		//	          "type": "boolean"
		//	        },
		//	        "EnableExecuteCommand": {
		//	          "default": false,
		//	          "type": "boolean"
		//	        },
		//	        "Group": {
		//	          "type": "string"
		//	        },
		//	        "LaunchType": {
		//	          "enum": [
		//	            "EC2",
		//	            "FARGATE",
		//	            "EXTERNAL"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "NetworkConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AwsvpcConfiguration": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AssignPublicIp": {
		//	                  "enum": [
		//	                    "ENABLED",
		//	                    "DISABLED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "SecurityGroups": {
		//	                  "items": {
		//	                    "maxLength": 1024,
		//	                    "minLength": 1,
		//	                    "pattern": "^sg-[0-9a-zA-Z]*|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 5,
		//	                  "minItems": 0,
		//	                  "type": "array"
		//	                },
		//	                "Subnets": {
		//	                  "items": {
		//	                    "maxLength": 1024,
		//	                    "minLength": 1,
		//	                    "pattern": "^subnet-[0-9a-z]*|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	                    "type": "string"
		//	                  },
		//	                  "maxItems": 16,
		//	                  "minItems": 0,
		//	                  "type": "array"
		//	                }
		//	              },
		//	              "required": [
		//	                "Subnets"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Overrides": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ContainerOverrides": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Command": {
		//	                    "items": {
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  },
		//	                  "Cpu": {
		//	                    "type": "integer"
		//	                  },
		//	                  "Environment": {
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Name": {
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array"
		//	                  },
		//	                  "EnvironmentFiles": {
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Type": {
		//	                          "enum": [
		//	                            "s3"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Type",
		//	                        "Value"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array"
		//	                  },
		//	                  "Memory": {
		//	                    "type": "integer"
		//	                  },
		//	                  "MemoryReservation": {
		//	                    "type": "integer"
		//	                  },
		//	                  "Name": {
		//	                    "type": "string"
		//	                  },
		//	                  "ResourceRequirements": {
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Type": {
		//	                          "enum": [
		//	                            "GPU",
		//	                            "InferenceAccelerator"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Value": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Type",
		//	                        "Value"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Cpu": {
		//	              "type": "string"
		//	            },
		//	            "EphemeralStorage": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "SizeInGiB": {
		//	                  "default": 0,
		//	                  "maximum": 200,
		//	                  "minimum": 21,
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "required": [
		//	                "SizeInGiB"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ExecutionRoleArn": {
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-]+):([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1})?:(\\d{12})?:(.+)|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	              "type": "string"
		//	            },
		//	            "InferenceAcceleratorOverrides": {
		//	              "items": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "DeviceName": {
		//	                    "type": "string"
		//	                  },
		//	                  "DeviceType": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "Memory": {
		//	              "type": "string"
		//	            },
		//	            "TaskRoleArn": {
		//	              "maxLength": 1600,
		//	              "minLength": 1,
		//	              "pattern": "^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-]+):([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1})?:(\\d{12})?:(.+)|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "PlacementConstraints": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Expression": {
		//	                "maxLength": 2000,
		//	                "minLength": 0,
		//	                "type": "string"
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "distinctInstance",
		//	                  "memberOf"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "maxItems": 10,
		//	          "minItems": 0,
		//	          "type": "array"
		//	        },
		//	        "PlacementStrategy": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Field": {
		//	                "maxLength": 255,
		//	                "minLength": 0,
		//	                "type": "string"
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "random",
		//	                  "spread",
		//	                  "binpack"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "maxItems": 5,
		//	          "minItems": 0,
		//	          "type": "array"
		//	        },
		//	        "PlatformVersion": {
		//	          "type": "string"
		//	        },
		//	        "PropagateTags": {
		//	          "enum": [
		//	            "TASK_DEFINITION"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "ReferenceId": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Tags": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Key": {
		//	                "maxLength": 128,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "maxLength": 256,
		//	                "minLength": 0,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Key",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "TaskCount": {
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "TaskDefinitionArn": {
		//	          "maxLength": 1600,
		//	          "minLength": 1,
		//	          "pattern": "^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-]+):([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1})?:(\\d{12})?:(.+)|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "TaskDefinitionArn"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "EventBridgeEventBusParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DetailType": {
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "EndpointId": {
		//	          "maxLength": 50,
		//	          "minLength": 1,
		//	          "pattern": "^[A-Za-z0-9\\-]+[\\.][A-Za-z0-9\\-]+$",
		//	          "type": "string"
		//	        },
		//	        "Resources": {
		//	          "items": {
		//	            "maxLength": 1600,
		//	            "minLength": 1,
		//	            "pattern": "^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-]+):([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1})?:(\\d{12})?:(.+)|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	            "type": "string"
		//	          },
		//	          "maxItems": 10,
		//	          "minItems": 0,
		//	          "type": "array"
		//	        },
		//	        "Source": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "pattern": "",
		//	          "type": "string"
		//	        },
		//	        "Time": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "pattern": "^\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "HttpParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "HeaderParameters": {
		//	          "additionalProperties": false,
		//	          "patternProperties": {
		//	            "": {
		//	              "maxLength": 512,
		//	              "minLength": 0,
		//	              "pattern": "^[ \\t]*[\\x20-\\x7E]+([ \\t]+[\\x20-\\x7E]+)*[ \\t]*|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "PathParameterValues": {
		//	          "items": {
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "QueryStringParameters": {
		//	          "additionalProperties": false,
		//	          "patternProperties": {
		//	            "": {
		//	              "maxLength": 512,
		//	              "minLength": 0,
		//	              "pattern": "^[^\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F]+|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "InputTemplate": {
		//	      "maxLength": 8192,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "KinesisStreamParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "PartitionKey": {
		//	          "maxLength": 256,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "PartitionKey"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "LambdaFunctionParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "InvocationType": {
		//	          "enum": [
		//	            "REQUEST_RESPONSE",
		//	            "FIRE_AND_FORGET"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RedshiftDataParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Database": {
		//	          "description": "Redshift Database",
		//	          "maxLength": 64,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "DbUser": {
		//	          "description": "Database user name",
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "SecretManagerArn": {
		//	          "description": "Optional SecretManager ARN which stores the database credentials",
		//	          "maxLength": 1600,
		//	          "minLength": 1,
		//	          "pattern": "^(^arn:aws([a-z]|\\-)*:secretsmanager:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\\d{1}):(\\d{12}):secret:.+)|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	          "type": "string"
		//	        },
		//	        "Sqls": {
		//	          "description": "A list of SQLs.",
		//	          "items": {
		//	            "description": "A single Redshift SQL",
		//	            "maxLength": 100000,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "maxItems": 40,
		//	          "minItems": 1,
		//	          "type": "array"
		//	        },
		//	        "StatementName": {
		//	          "description": "A name for Redshift DataAPI statement which can be used as filter of ListStatement.",
		//	          "maxLength": 500,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "WithEvent": {
		//	          "default": false,
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "required": [
		//	        "Database",
		//	        "Sqls"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SageMakerPipelineParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "PipelineParameterList": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Name": {
		//	                "maxLength": 256,
		//	                "minLength": 1,
		//	                "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*|(\\$(\\.[\\w/_-]+(\\[(\\d+|\\*)\\])*)*)$",
		//	                "type": "string"
		//	              },
		//	              "Value": {
		//	                "maxLength": 1024,
		//	                "minLength": 0,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Name",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "maxItems": 200,
		//	          "minItems": 0,
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "SqsQueueParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "MessageDeduplicationId": {
		//	          "maxLength": 100,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "MessageGroupId": {
		//	          "maxLength": 100,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "StepFunctionStateMachineParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "InvocationType": {
		//	          "enum": [
		//	            "REQUEST_RESPONSE",
		//	            "FIRE_AND_FORGET"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "TimestreamParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DimensionMappings": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "DimensionName": {
		//	                "maxLength": 256,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "DimensionValue": {
		//	                "maxLength": 2048,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "DimensionValueType": {
		//	                "enum": [
		//	                  "VARCHAR"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "DimensionName",
		//	              "DimensionValue",
		//	              "DimensionValueType"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "maxItems": 128,
		//	          "minItems": 1,
		//	          "type": "array"
		//	        },
		//	        "EpochTimeUnit": {
		//	          "enum": [
		//	            "MILLISECONDS",
		//	            "SECONDS",
		//	            "MICROSECONDS",
		//	            "NANOSECONDS"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "MultiMeasureMappings": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MultiMeasureAttributeMappings": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "MeasureValue": {
		//	                      "maxLength": 2048,
		//	                      "minLength": 1,
		//	                      "type": "string"
		//	                    },
		//	                    "MeasureValueType": {
		//	                      "enum": [
		//	                        "DOUBLE",
		//	                        "BIGINT",
		//	                        "VARCHAR",
		//	                        "BOOLEAN",
		//	                        "TIMESTAMP"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "MultiMeasureAttributeName": {
		//	                      "maxLength": 256,
		//	                      "minLength": 1,
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "MeasureValue",
		//	                    "MeasureValueType",
		//	                    "MultiMeasureAttributeName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "maxItems": 256,
		//	                "minItems": 1,
		//	                "type": "array"
		//	              },
		//	              "MultiMeasureName": {
		//	                "maxLength": 256,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "MultiMeasureAttributeMappings",
		//	              "MultiMeasureName"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "maxItems": 1024,
		//	          "minItems": 0,
		//	          "type": "array"
		//	        },
		//	        "SingleMeasureMappings": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "MeasureName": {
		//	                "maxLength": 1024,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "MeasureValue": {
		//	                "maxLength": 2048,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "MeasureValueType": {
		//	                "enum": [
		//	                  "DOUBLE",
		//	                  "BIGINT",
		//	                  "VARCHAR",
		//	                  "BOOLEAN",
		//	                  "TIMESTAMP"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "MeasureName",
		//	              "MeasureValue",
		//	              "MeasureValueType"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "maxItems": 8192,
		//	          "minItems": 0,
		//	          "type": "array"
		//	        },
		//	        "TimeFieldType": {
		//	          "enum": [
		//	            "EPOCH",
		//	            "TIMESTAMP_FORMAT"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "TimeValue": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "TimestampFormat": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "VersionValue": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "DimensionMappings",
		//	        "TimeValue",
		//	        "VersionValue"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"target_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BatchJobParameters
				"batch_job_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ArrayProperties
						"array_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Size
								"size": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ContainerOverrides
						"container_overrides": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Command
								"command": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Environment
								"environment": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Name
											"name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: InstanceType
								"instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ResourceRequirements
								"resource_requirements": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Type
											"type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Value
											"value": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DependsOn
						"depends_on": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: JobId
									"job_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: JobDefinition
						"job_definition": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: JobName
						"job_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Parameters
						"parameters":        // Pattern: ""
						schema.MapAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RetryStrategy
						"retry_strategy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Attempts
								"attempts": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CloudWatchLogsParameters
				"cloudwatch_logs_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Timestamp
						"timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EcsTaskParameters
				"ecs_task_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CapacityProviderStrategy
						"capacity_provider_strategy": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Base
									"base": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: CapacityProvider
									"capacity_provider": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Weight
									"weight": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EnableECSManagedTags
						"enable_ecs_managed_tags": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EnableExecuteCommand
						"enable_execute_command": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Group
						"group": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LaunchType
						"launch_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: NetworkConfiguration
						"network_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AwsvpcConfiguration
								"awsvpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AssignPublicIp
										"assign_public_ip": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: SecurityGroups
										"security_groups": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: Subnets
										"subnets": schema.ListAttribute{ /*START ATTRIBUTE*/
											ElementType: types.StringType,
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Overrides
						"overrides": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ContainerOverrides
								"container_overrides": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Command
											"command": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: Cpu
											"cpu": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Environment
											"environment": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Name
														"name": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: EnvironmentFiles
											"environment_files": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Type
														"type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Memory
											"memory": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: MemoryReservation
											"memory_reservation": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Name
											"name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: ResourceRequirements
											"resource_requirements": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Type
														"type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Cpu
								"cpu": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: EphemeralStorage
								"ephemeral_storage": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: SizeInGiB
										"size_in_gi_b": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ExecutionRoleArn
								"execution_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: InferenceAcceleratorOverrides
								"inference_accelerator_overrides": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
									NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: DeviceName
											"device_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: DeviceType
											"device_type": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
									}, /*END NESTED OBJECT*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Memory
								"memory": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: TaskRoleArn
								"task_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PlacementConstraints
						"placement_constraints": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Expression
									"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PlacementStrategy
						"placement_strategy": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Field
									"field": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PlatformVersion
						"platform_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PropagateTags
						"propagate_tags": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ReferenceId
						"reference_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Tags
						"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Key
									"key": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TaskCount
						"task_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TaskDefinitionArn
						"task_definition_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EventBridgeEventBusParameters
				"event_bridge_event_bus_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DetailType
						"detail_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EndpointId
						"endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Resources
						"resources": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Source
						"source": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Time
						"time": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: HttpParameters
				"http_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: HeaderParameters
						"header_parameters": // Pattern: ""
						schema.MapAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: PathParameterValues
						"path_parameter_values": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: QueryStringParameters
						"query_string_parameters": // Pattern: ""
						schema.MapAttribute{       /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InputTemplate
				"input_template": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: KinesisStreamParameters
				"kinesis_stream_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: PartitionKey
						"partition_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LambdaFunctionParameters
				"lambda_function_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: InvocationType
						"invocation_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RedshiftDataParameters
				"redshift_data_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Database
						"database": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Redshift Database",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DbUser
						"db_user": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Database user name",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SecretManagerArn
						"secret_manager_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Optional SecretManager ARN which stores the database credentials",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Sqls
						"sqls": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "A list of SQLs.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: StatementName
						"statement_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A name for Redshift DataAPI statement which can be used as filter of ListStatement.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: WithEvent
						"with_event": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SageMakerPipelineParameters
				"sage_maker_pipeline_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: PipelineParameterList
						"pipeline_parameter_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Name
									"name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SqsQueueParameters
				"sqs_queue_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MessageDeduplicationId
						"message_deduplication_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MessageGroupId
						"message_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: StepFunctionStateMachineParameters
				"step_function_state_machine_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: InvocationType
						"invocation_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TimestreamParameters
				"timestream_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DimensionMappings
						"dimension_mappings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DimensionName
									"dimension_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: DimensionValue
									"dimension_value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: DimensionValueType
									"dimension_value_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EpochTimeUnit
						"epoch_time_unit": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MultiMeasureMappings
						"multi_measure_mappings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MultiMeasureAttributeMappings
									"multi_measure_attribute_mappings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: MeasureValue
												"measure_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: MeasureValueType
												"measure_value_type": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: MultiMeasureAttributeName
												"multi_measure_attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: MultiMeasureName
									"multi_measure_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SingleMeasureMappings
						"single_measure_mappings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MeasureName
									"measure_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: MeasureValue
									"measure_value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: MeasureValueType
									"measure_value_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TimeFieldType
						"time_field_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TimeValue
						"time_value": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: TimestampFormat
						"timestamp_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: VersionValue
						"version_value": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Pipes::Pipe",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Pipes::Pipe").WithTerraformTypeName("awscc_pipes_pipe")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"active_mq_broker_parameters":            "ActiveMQBrokerParameters",
		"additional_bootstrap_servers":           "AdditionalBootstrapServers",
		"arn":                                    "Arn",
		"array_properties":                       "ArrayProperties",
		"assign_public_ip":                       "AssignPublicIp",
		"attempts":                               "Attempts",
		"awsvpc_configuration":                   "AwsvpcConfiguration",
		"base":                                   "Base",
		"basic_auth":                             "BasicAuth",
		"batch_job_parameters":                   "BatchJobParameters",
		"batch_size":                             "BatchSize",
		"bucket_name":                            "BucketName",
		"bucket_owner":                           "BucketOwner",
		"capacity_provider":                      "CapacityProvider",
		"capacity_provider_strategy":             "CapacityProviderStrategy",
		"client_certificate_tls_auth":            "ClientCertificateTlsAuth",
		"cloudwatch_logs_log_destination":        "CloudwatchLogsLogDestination",
		"cloudwatch_logs_parameters":             "CloudWatchLogsParameters",
		"command":                                "Command",
		"consumer_group_id":                      "ConsumerGroupID",
		"container_overrides":                    "ContainerOverrides",
		"cpu":                                    "Cpu",
		"creation_time":                          "CreationTime",
		"credentials":                            "Credentials",
		"current_state":                          "CurrentState",
		"database":                               "Database",
		"db_user":                                "DbUser",
		"dead_letter_config":                     "DeadLetterConfig",
		"delivery_stream_arn":                    "DeliveryStreamArn",
		"depends_on":                             "DependsOn",
		"description":                            "Description",
		"desired_state":                          "DesiredState",
		"detail_type":                            "DetailType",
		"device_name":                            "DeviceName",
		"device_type":                            "DeviceType",
		"dimension_mappings":                     "DimensionMappings",
		"dimension_name":                         "DimensionName",
		"dimension_value":                        "DimensionValue",
		"dimension_value_type":                   "DimensionValueType",
		"dynamo_db_stream_parameters":            "DynamoDBStreamParameters",
		"ecs_task_parameters":                    "EcsTaskParameters",
		"enable_ecs_managed_tags":                "EnableECSManagedTags",
		"enable_execute_command":                 "EnableExecuteCommand",
		"endpoint_id":                            "EndpointId",
		"enrichment":                             "Enrichment",
		"enrichment_parameters":                  "EnrichmentParameters",
		"environment":                            "Environment",
		"environment_files":                      "EnvironmentFiles",
		"ephemeral_storage":                      "EphemeralStorage",
		"epoch_time_unit":                        "EpochTimeUnit",
		"event_bridge_event_bus_parameters":      "EventBridgeEventBusParameters",
		"execution_role_arn":                     "ExecutionRoleArn",
		"expression":                             "Expression",
		"field":                                  "Field",
		"filter_criteria":                        "FilterCriteria",
		"filters":                                "Filters",
		"firehose_log_destination":               "FirehoseLogDestination",
		"group":                                  "Group",
		"header_parameters":                      "HeaderParameters",
		"http_parameters":                        "HttpParameters",
		"include_execution_data":                 "IncludeExecutionData",
		"inference_accelerator_overrides":        "InferenceAcceleratorOverrides",
		"input_template":                         "InputTemplate",
		"instance_type":                          "InstanceType",
		"invocation_type":                        "InvocationType",
		"job_definition":                         "JobDefinition",
		"job_id":                                 "JobId",
		"job_name":                               "JobName",
		"key":                                    "Key",
		"kinesis_stream_parameters":              "KinesisStreamParameters",
		"kms_key_identifier":                     "KmsKeyIdentifier",
		"lambda_function_parameters":             "LambdaFunctionParameters",
		"last_modified_time":                     "LastModifiedTime",
		"launch_type":                            "LaunchType",
		"level":                                  "Level",
		"log_configuration":                      "LogConfiguration",
		"log_group_arn":                          "LogGroupArn",
		"log_stream_name":                        "LogStreamName",
		"managed_streaming_kafka_parameters":     "ManagedStreamingKafkaParameters",
		"maximum_batching_window_in_seconds":     "MaximumBatchingWindowInSeconds",
		"maximum_record_age_in_seconds":          "MaximumRecordAgeInSeconds",
		"maximum_retry_attempts":                 "MaximumRetryAttempts",
		"measure_name":                           "MeasureName",
		"measure_value":                          "MeasureValue",
		"measure_value_type":                     "MeasureValueType",
		"memory":                                 "Memory",
		"memory_reservation":                     "MemoryReservation",
		"message_deduplication_id":               "MessageDeduplicationId",
		"message_group_id":                       "MessageGroupId",
		"multi_measure_attribute_mappings":       "MultiMeasureAttributeMappings",
		"multi_measure_attribute_name":           "MultiMeasureAttributeName",
		"multi_measure_mappings":                 "MultiMeasureMappings",
		"multi_measure_name":                     "MultiMeasureName",
		"name":                                   "Name",
		"network_configuration":                  "NetworkConfiguration",
		"on_partial_batch_item_failure":          "OnPartialBatchItemFailure",
		"output_format":                          "OutputFormat",
		"overrides":                              "Overrides",
		"parallelization_factor":                 "ParallelizationFactor",
		"parameters":                             "Parameters",
		"partition_key":                          "PartitionKey",
		"path_parameter_values":                  "PathParameterValues",
		"pattern":                                "Pattern",
		"pipeline_parameter_list":                "PipelineParameterList",
		"placement_constraints":                  "PlacementConstraints",
		"placement_strategy":                     "PlacementStrategy",
		"platform_version":                       "PlatformVersion",
		"prefix":                                 "Prefix",
		"propagate_tags":                         "PropagateTags",
		"query_string_parameters":                "QueryStringParameters",
		"queue_name":                             "QueueName",
		"rabbit_mq_broker_parameters":            "RabbitMQBrokerParameters",
		"redshift_data_parameters":               "RedshiftDataParameters",
		"reference_id":                           "ReferenceId",
		"resource_requirements":                  "ResourceRequirements",
		"resources":                              "Resources",
		"retry_strategy":                         "RetryStrategy",
		"role_arn":                               "RoleArn",
		"s3_log_destination":                     "S3LogDestination",
		"sage_maker_pipeline_parameters":         "SageMakerPipelineParameters",
		"sasl_scram_256_auth":                    "SaslScram256Auth",
		"sasl_scram_512_auth":                    "SaslScram512Auth",
		"secret_manager_arn":                     "SecretManagerArn",
		"security_group":                         "SecurityGroup",
		"security_groups":                        "SecurityGroups",
		"self_managed_kafka_parameters":          "SelfManagedKafkaParameters",
		"server_root_ca_certificate":             "ServerRootCaCertificate",
		"single_measure_mappings":                "SingleMeasureMappings",
		"size":                                   "Size",
		"size_in_gi_b":                           "SizeInGiB",
		"source":                                 "Source",
		"source_parameters":                      "SourceParameters",
		"sqls":                                   "Sqls",
		"sqs_queue_parameters":                   "SqsQueueParameters",
		"starting_position":                      "StartingPosition",
		"starting_position_timestamp":            "StartingPositionTimestamp",
		"state_reason":                           "StateReason",
		"statement_name":                         "StatementName",
		"step_function_state_machine_parameters": "StepFunctionStateMachineParameters",
		"subnets":                                "Subnets",
		"tags":                                   "Tags",
		"target":                                 "Target",
		"target_parameters":                      "TargetParameters",
		"task_count":                             "TaskCount",
		"task_definition_arn":                    "TaskDefinitionArn",
		"task_role_arn":                          "TaskRoleArn",
		"time":                                   "Time",
		"time_field_type":                        "TimeFieldType",
		"time_value":                             "TimeValue",
		"timestamp":                              "Timestamp",
		"timestamp_format":                       "TimestampFormat",
		"timestream_parameters":                  "TimestreamParameters",
		"topic_name":                             "TopicName",
		"type":                                   "Type",
		"value":                                  "Value",
		"version_value":                          "VersionValue",
		"virtual_host":                           "VirtualHost",
		"vpc":                                    "Vpc",
		"weight":                                 "Weight",
		"with_event":                             "WithEvent",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
