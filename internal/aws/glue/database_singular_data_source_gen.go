// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package glue

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_glue_database", databaseDataSource)
}

// databaseDataSource returns the Terraform awscc_glue_database data source.
// This Terraform data source corresponds to the CloudFormation AWS::Glue::Database resource.
func databaseDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CatalogId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS account ID for the account in which to create the catalog object.",
		//	  "type": "string"
		//	}
		"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS account ID for the account in which to create the catalog object.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DatabaseInput
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The metadata for the database.",
		//	  "properties": {
		//	    "CreateTableDefaultPermissions": {
		//	      "description": "Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "The permissions granted to a principal.",
		//	        "properties": {
		//	          "Permissions": {
		//	            "description": "The permissions that are granted to the principal.",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          },
		//	          "Principal": {
		//	            "additionalProperties": false,
		//	            "description": "The principal who is granted permissions.",
		//	            "properties": {
		//	              "DataLakePrincipalIdentifier": {
		//	                "description": "An identifier for the AWS Lake Formation principal.",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "Description": {
		//	      "description": "A description of the database.",
		//	      "type": "string"
		//	    },
		//	    "FederatedDatabase": {
		//	      "additionalProperties": false,
		//	      "description": "A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.",
		//	      "properties": {
		//	        "ConnectionName": {
		//	          "description": "The name of the connection to the external metastore.",
		//	          "type": "string"
		//	        },
		//	        "Identifier": {
		//	          "description": "A unique identifier for the federated database.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "LocationUri": {
		//	      "description": "The location of the database (for example, an HDFS path).",
		//	      "type": "string"
		//	    },
		//	    "Name": {
		//	      "description": "The name of the database. For hive compatibility, this is folded to lowercase when it is stored.",
		//	      "type": "string"
		//	    },
		//	    "Parameters": {
		//	      "description": "These key-value pairs define parameters and properties of the database.",
		//	      "type": "object"
		//	    },
		//	    "TargetDatabase": {
		//	      "additionalProperties": false,
		//	      "description": "A DatabaseIdentifier structure that describes a target database for resource linking.",
		//	      "properties": {
		//	        "CatalogId": {
		//	          "description": "The ID of the Data Catalog in which the database resides.",
		//	          "type": "string"
		//	        },
		//	        "DatabaseName": {
		//	          "description": "The name of the catalog database.",
		//	          "type": "string"
		//	        },
		//	        "Region": {
		//	          "description": "Region of the target database.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"database_input": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CreateTableDefaultPermissions
				"create_table_default_permissions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Permissions
							"permissions": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "The permissions that are granted to the principal.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Principal
							"principal": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: DataLakePrincipalIdentifier
									"data_lake_principal_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "An identifier for the AWS Lake Formation principal.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "The principal who is granted permissions.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "Creates a set of default permissions on the table for principals. Used by AWS Lake Formation. Not used in the normal course of AWS Glue operations.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Description
				"description": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A description of the database.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: FederatedDatabase
				"federated_database": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ConnectionName
						"connection_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the connection to the external metastore.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Identifier
						"identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A unique identifier for the federated database.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A FederatedDatabase structure that references an entity outside the AWS Glue Data Catalog.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: LocationUri
				"location_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The location of the database (for example, an HDFS path).",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Name
				"name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The name of the database. For hive compatibility, this is folded to lowercase when it is stored.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Parameters
				"parameters": schema.StringAttribute{ /*START ATTRIBUTE*/
					CustomType:  jsontypes.NormalizedType{},
					Description: "These key-value pairs define parameters and properties of the database.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TargetDatabase
				"target_database": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CatalogId
						"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ID of the Data Catalog in which the database resides.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the catalog database.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Region
						"region": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Region of the target database.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A DatabaseIdentifier structure that describes a target database for resource linking.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The metadata for the database.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DatabaseName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the database. For hive compatibility, this is folded to lowercase when it is store.",
		//	  "type": "string"
		//	}
		"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the database. For hive compatibility, this is folded to lowercase when it is store.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Glue::Database",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Glue::Database").WithTerraformTypeName("awscc_glue_database")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"catalog_id":                       "CatalogId",
		"connection_name":                  "ConnectionName",
		"create_table_default_permissions": "CreateTableDefaultPermissions",
		"data_lake_principal_identifier":   "DataLakePrincipalIdentifier",
		"database_input":                   "DatabaseInput",
		"database_name":                    "DatabaseName",
		"description":                      "Description",
		"federated_database":               "FederatedDatabase",
		"identifier":                       "Identifier",
		"location_uri":                     "LocationUri",
		"name":                             "Name",
		"parameters":                       "Parameters",
		"permissions":                      "Permissions",
		"principal":                        "Principal",
		"region":                           "Region",
		"target_database":                  "TargetDatabase",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
