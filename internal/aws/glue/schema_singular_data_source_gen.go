// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package glue

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_glue_schema", schemaDataSourceType)
}

// schemaDataSourceType returns the Terraform awscc_glue_schema data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::Glue::Schema resource type.
func schemaDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "Amazon Resource Name for the Schema.",
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "Amazon Resource Name for the Schema.",
			Type:        types.StringType,
			Computed:    true,
		},
		"checkpoint_version": {
			// Property: CheckpointVersion
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Specify checkpoint version for update. This is only required to update the Compatibility.",
			//   "properties": {
			//     "IsLatest": {
			//       "description": "Indicates if the latest version needs to be updated.",
			//       "type": "boolean"
			//     },
			//     "VersionNumber": {
			//       "description": "Indicates the version number in the schema to update.",
			//       "maximum": 100000,
			//       "minimum": 1,
			//       "type": "integer"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "Specify checkpoint version for update. This is only required to update the Compatibility.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"is_latest": {
						// Property: IsLatest
						Description: "Indicates if the latest version needs to be updated.",
						Type:        types.BoolType,
						Computed:    true,
					},
					"version_number": {
						// Property: VersionNumber
						Description: "Indicates the version number in the schema to update.",
						Type:        types.NumberType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"compatibility": {
			// Property: Compatibility
			// CloudFormation resource type schema:
			// {
			//   "description": "Compatibility setting for the schema.",
			//   "enum": [
			//     "NONE",
			//     "DISABLED",
			//     "BACKWARD",
			//     "BACKWARD_ALL",
			//     "FORWARD",
			//     "FORWARD_ALL",
			//     "FULL",
			//     "FULL_ALL"
			//   ],
			//   "type": "string"
			// }
			Description: "Compatibility setting for the schema.",
			Type:        types.StringType,
			Computed:    true,
		},
		"data_format": {
			// Property: DataFormat
			// CloudFormation resource type schema:
			// {
			//   "description": "Data format name to use for the schema. Accepted values: 'AVRO', 'JSON'",
			//   "enum": [
			//     "AVRO",
			//     "JSON"
			//   ],
			//   "type": "string"
			// }
			Description: "Data format name to use for the schema. Accepted values: 'AVRO', 'JSON'",
			Type:        types.StringType,
			Computed:    true,
		},
		"description": {
			// Property: Description
			// CloudFormation resource type schema:
			// {
			//   "description": "A description of the schema. If description is not provided, there will not be any default value for this.",
			//   "maxLength": 1000,
			//   "minLength": 0,
			//   "type": "string"
			// }
			Description: "A description of the schema. If description is not provided, there will not be any default value for this.",
			Type:        types.StringType,
			Computed:    true,
		},
		"initial_schema_version_id": {
			// Property: InitialSchemaVersionId
			// CloudFormation resource type schema:
			// {
			//   "description": "Represents the version ID associated with the initial schema version.",
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "Represents the version ID associated with the initial schema version.",
			Type:        types.StringType,
			Computed:    true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "description": "Name of the schema.",
			//   "maxLength": 255,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Name of the schema.",
			Type:        types.StringType,
			Computed:    true,
		},
		"registry": {
			// Property: Registry
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "description": "Identifier for the registry which the schema is part of.",
			//   "properties": {
			//     "Arn": {
			//       "description": "Amazon Resource Name for the Registry.",
			//       "pattern": "",
			//       "type": "string"
			//     },
			//     "Name": {
			//       "description": "Name of the registry in which the schema will be created.",
			//       "maxLength": 255,
			//       "minLength": 1,
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			Description: "Identifier for the registry which the schema is part of.",
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"arn": {
						// Property: Arn
						Description: "Amazon Resource Name for the Registry.",
						Type:        types.StringType,
						Computed:    true,
					},
					"name": {
						// Property: Name
						Description: "Name of the registry in which the schema will be created.",
						Type:        types.StringType,
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"schema_definition": {
			// Property: SchemaDefinition
			// CloudFormation resource type schema:
			// {
			//   "description": "Definition for the initial schema version in plain-text.",
			//   "maxLength": 170000,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "Definition for the initial schema version in plain-text.",
			Type:        types.StringType,
			Computed:    true,
		},
		"tags": {
			// Property: Tags
			// CloudFormation resource type schema:
			// {
			//   "description": "List of tags to tag the schema",
			//   "items": {
			//     "additionalProperties": false,
			//     "properties": {
			//       "Key": {
			//         "description": "A key to identify the tag.",
			//         "maxLength": 128,
			//         "minLength": 1,
			//         "type": "string"
			//       },
			//       "Value": {
			//         "description": "Corresponding tag value for the key.",
			//         "maxLength": 256,
			//         "minLength": 0,
			//         "type": "string"
			//       }
			//     },
			//     "required": [
			//       "Key",
			//       "Value"
			//     ],
			//     "type": "object"
			//   },
			//   "maxItems": 10,
			//   "minItems": 0,
			//   "type": "array"
			// }
			Description: "List of tags to tag the schema",
			Attributes: tfsdk.ListNestedAttributes(
				map[string]tfsdk.Attribute{
					"key": {
						// Property: Key
						Description: "A key to identify the tag.",
						Type:        types.StringType,
						Computed:    true,
					},
					"value": {
						// Property: Value
						Description: "Corresponding tag value for the key.",
						Type:        types.StringType,
						Computed:    true,
					},
				},
				tfsdk.ListNestedAttributesOptions{},
			),
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::Glue::Schema",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Glue::Schema").WithTerraformTypeName("awscc_glue_schema")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                       "Arn",
		"checkpoint_version":        "CheckpointVersion",
		"compatibility":             "Compatibility",
		"data_format":               "DataFormat",
		"description":               "Description",
		"initial_schema_version_id": "InitialSchemaVersionId",
		"is_latest":                 "IsLatest",
		"key":                       "Key",
		"name":                      "Name",
		"registry":                  "Registry",
		"schema_definition":         "SchemaDefinition",
		"tags":                      "Tags",
		"value":                     "Value",
		"version_number":            "VersionNumber",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_glue_schema", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
