// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package iotcoredeviceadvisor

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_iotcoredeviceadvisor_suite_definition", suiteDefinitionDataSource)
}

// suiteDefinitionDataSource returns the Terraform awscc_iotcoredeviceadvisor_suite_definition data source.
// This Terraform data source corresponds to the CloudFormation AWS::IoTCoreDeviceAdvisor::SuiteDefinition resource.
func suiteDefinitionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: SuiteDefinitionArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource name for the suite definition.",
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "type": "string"
		//	}
		"suite_definition_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource name for the suite definition.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SuiteDefinitionConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "DevicePermissionRoleArn": {
		//	      "description": "The device permission role arn of the test suite.",
		//	      "maxLength": 2048,
		//	      "minLength": 20,
		//	      "type": "string"
		//	    },
		//	    "Devices": {
		//	      "description": "The devices being tested in the test suite",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "CertificateArn": {
		//	            "maxLength": 2048,
		//	            "minLength": 20,
		//	            "type": "string"
		//	          },
		//	          "ThingArn": {
		//	            "maxLength": 2048,
		//	            "minLength": 20,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 2,
		//	      "minItems": 0,
		//	      "type": "array"
		//	    },
		//	    "IntendedForQualification": {
		//	      "description": "Whether the tests are intended for qualification in a suite.",
		//	      "type": "boolean"
		//	    },
		//	    "RootGroup": {
		//	      "description": "The root group of the test suite.",
		//	      "maxLength": 2048,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "SuiteDefinitionName": {
		//	      "description": "The Name of the suite definition.",
		//	      "maxLength": 256,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "DevicePermissionRoleArn",
		//	    "RootGroup"
		//	  ],
		//	  "type": "object"
		//	}
		"suite_definition_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DevicePermissionRoleArn
				"device_permission_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The device permission role arn of the test suite.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Devices
				"devices": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CertificateArn
							"certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ThingArn
							"thing_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The devices being tested in the test suite",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IntendedForQualification
				"intended_for_qualification": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Whether the tests are intended for qualification in a suite.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RootGroup
				"root_group": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The root group of the test suite.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SuiteDefinitionName
				"suite_definition_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Name of the suite definition.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SuiteDefinitionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier for the suite definition.",
		//	  "maxLength": 36,
		//	  "minLength": 12,
		//	  "type": "string"
		//	}
		"suite_definition_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier for the suite definition.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SuiteDefinitionVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The suite definition version of a test suite.",
		//	  "maxLength": 255,
		//	  "minLength": 2,
		//	  "type": "string"
		//	}
		"suite_definition_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The suite definition version of a test suite.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::IoTCoreDeviceAdvisor::SuiteDefinition",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IoTCoreDeviceAdvisor::SuiteDefinition").WithTerraformTypeName("awscc_iotcoredeviceadvisor_suite_definition")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"certificate_arn":                "CertificateArn",
		"device_permission_role_arn":     "DevicePermissionRoleArn",
		"devices":                        "Devices",
		"intended_for_qualification":     "IntendedForQualification",
		"key":                            "Key",
		"root_group":                     "RootGroup",
		"suite_definition_arn":           "SuiteDefinitionArn",
		"suite_definition_configuration": "SuiteDefinitionConfiguration",
		"suite_definition_id":            "SuiteDefinitionId",
		"suite_definition_name":          "SuiteDefinitionName",
		"suite_definition_version":       "SuiteDefinitionVersion",
		"tags":                           "Tags",
		"thing_arn":                      "ThingArn",
		"value":                          "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
