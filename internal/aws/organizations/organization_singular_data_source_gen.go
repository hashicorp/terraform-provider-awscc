// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package organizations

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_organizations_organization", organizationDataSource)
}

// organizationDataSource returns the Terraform awscc_organizations_organization data source.
// This Terraform data source corresponds to the CloudFormation AWS::Organizations::Organization resource.
func organizationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of an organization.",
		//	  "pattern": "^arn:aws.*:organizations::\\d{12}:organization\\/o-[a-z0-9]{10,32}",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of an organization.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FeatureSet
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "ALL",
		//	  "description": "Specifies the feature set supported by the new organization. Each feature set supports different levels of functionality.",
		//	  "enum": [
		//	    "ALL",
		//	    "CONSOLIDATED_BILLING"
		//	  ],
		//	  "type": "string"
		//	}
		"feature_set": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the feature set supported by the new organization. Each feature set supports different levels of functionality.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier (ID) of an organization.",
		//	  "pattern": "^o-[a-z0-9]{10,32}$",
		//	  "type": "string"
		//	}
		"organization_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier (ID) of an organization.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ManagementAccountArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization.",
		//	  "pattern": "^arn:aws.*:organizations::\\d{12}:account\\/o-[a-z0-9]{10,32}\\/\\d{12}",
		//	  "type": "string"
		//	}
		"management_account_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the account that is designated as the management account for the organization.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ManagementAccountEmail
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The email address that is associated with the AWS account that is designated as the management account for the organization.",
		//	  "maxLength": 64,
		//	  "minLength": 6,
		//	  "pattern": "[^\\s@]+@[^\\s@]+\\.[^\\s@]+",
		//	  "type": "string"
		//	}
		"management_account_email": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The email address that is associated with the AWS account that is designated as the management account for the organization.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ManagementAccountId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier (ID) of the management account of an organization.",
		//	  "pattern": "^\\d{12}$",
		//	  "type": "string"
		//	}
		"management_account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier (ID) of the management account of an organization.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RootId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier (ID) for the root.",
		//	  "maxLength": 64,
		//	  "pattern": "^r-[0-9a-z]{4,32}$",
		//	  "type": "string"
		//	}
		"root_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier (ID) for the root.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Organizations::Organization",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Organizations::Organization").WithTerraformTypeName("awscc_organizations_organization")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                      "Arn",
		"feature_set":              "FeatureSet",
		"management_account_arn":   "ManagementAccountArn",
		"management_account_email": "ManagementAccountEmail",
		"management_account_id":    "ManagementAccountId",
		"organization_id":          "Id",
		"root_id":                  "RootId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
