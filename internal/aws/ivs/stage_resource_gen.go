// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ivs

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/defaults"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_ivs_stage", stageResource)
}

// stageResource returns the Terraform awscc_ivs_stage resource.
// This Terraform resource corresponds to the CloudFormation AWS::IVS::Stage resource.
func stageResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ActiveSessionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "",
		//	  "description": "ID of the active session within the stage.",
		//	  "maxLength": 128,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"active_session_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ID of the active session within the stage.",
			Computed:    true,
			Default:     stringdefault.StaticString(""),
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Stage ARN is automatically generated on creation and assigned as the unique identifier.",
		//	  "maxLength": 128,
		//	  "minLength": 0,
		//	  "pattern": "^arn:aws[-a-z]*:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Stage ARN is automatically generated on creation and assigned as the unique identifier.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AutoParticipantRecordingConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration object for individual participant recording, to attach to the new stage.",
		//	  "properties": {
		//	    "HlsConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "HLS configuration object for individual participant recording.",
		//	      "properties": {
		//	        "ParticipantRecordingHlsConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "An object representing a configuration of participant HLS recordings for individual participant recording.",
		//	          "properties": {
		//	            "TargetSegmentDurationSeconds": {
		//	              "default": 6,
		//	              "description": "Defines the target duration for recorded segments generated when recording a stage participant. Segments may have durations longer than the specified value when needed to ensure each segment begins with a keyframe. Default: 6.",
		//	              "maximum": 10,
		//	              "minimum": 2,
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "MediaTypes": {
		//	      "default": [
		//	        "AUDIO_VIDEO"
		//	      ],
		//	      "description": "Types of media to be recorded. Default: AUDIO_VIDEO.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "enum": [
		//	          "AUDIO_VIDEO",
		//	          "AUDIO_ONLY"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "maxItems": 1,
		//	      "minItems": 0,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "RecordingReconnectWindowSeconds": {
		//	      "default": 0,
		//	      "description": "If a stage publisher disconnects and then reconnects within the specified interval, the multiple recordings will be considered a single recording and merged together. The default value is 0, which disables merging.",
		//	      "maximum": 300,
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    },
		//	    "StorageConfigurationArn": {
		//	      "description": "ARN of the StorageConfiguration resource to use for individual participant recording.",
		//	      "maxLength": 128,
		//	      "minLength": 0,
		//	      "pattern": "^$|^arn:aws:ivs:[a-z0-9-]+:[0-9]+:storage-configuration/[a-zA-Z0-9-]+$",
		//	      "type": "string"
		//	    },
		//	    "ThumbnailConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "A complex type that allows you to enable/disable the recording of thumbnails for individual participant recording and modify the interval at which thumbnails are generated for the live session.",
		//	      "properties": {
		//	        "ParticipantThumbnailConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "An object representing a configuration of thumbnails for recorded video from an individual participant.",
		//	          "properties": {
		//	            "RecordingMode": {
		//	              "default": "INTERVAL",
		//	              "description": "Thumbnail recording mode. Default: DISABLED.",
		//	              "enum": [
		//	                "INTERVAL",
		//	                "DISABLED"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "Storage": {
		//	              "default": [
		//	                "SEQUENTIAL"
		//	              ],
		//	              "description": "Indicates the format in which thumbnails are recorded. SEQUENTIAL records all generated thumbnails in a serial manner, to the media/thumbnails/high directory. LATEST saves the latest thumbnail in media/latest_thumbnail/high/thumb.jpg and overwrites it at the interval specified by targetIntervalSeconds. You can enable both SEQUENTIAL and LATEST. Default: SEQUENTIAL.",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "enum": [
		//	                  "SEQUENTIAL",
		//	                  "LATEST"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "maxItems": 2,
		//	              "minItems": 0,
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            },
		//	            "TargetIntervalSeconds": {
		//	              "default": 60,
		//	              "description": "The targeted thumbnail-generation interval in seconds. This is configurable only if recordingMode is INTERVAL. Default: 60.",
		//	              "maximum": 86400,
		//	              "minimum": 1,
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "StorageConfigurationArn"
		//	  ],
		//	  "type": "object"
		//	}
		"auto_participant_recording_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: HlsConfiguration
				"hls_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ParticipantRecordingHlsConfiguration
						"participant_recording_hls_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: TargetSegmentDurationSeconds
								"target_segment_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "Defines the target duration for recorded segments generated when recording a stage participant. Segments may have durations longer than the specified value when needed to ensure each segment begins with a keyframe. Default: 6.",
									Optional:    true,
									Computed:    true,
									Default:     int64default.StaticInt64(6),
									Validators: []validator.Int64{ /*START VALIDATORS*/
										int64validator.Between(2, 10),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "An object representing a configuration of participant HLS recordings for individual participant recording.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "HLS configuration object for individual participant recording.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: MediaTypes
				"media_types": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "Types of media to be recorded. Default: AUDIO_VIDEO.",
					Optional:    true,
					Computed:    true,
					Default: defaults.StaticSetOfString(
						"AUDIO_VIDEO",
					),
					Validators: []validator.Set{ /*START VALIDATORS*/
						setvalidator.SizeBetween(0, 1),
						setvalidator.ValueStringsAre(
							stringvalidator.OneOf(
								"AUDIO_VIDEO",
								"AUDIO_ONLY",
							),
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
						setplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: RecordingReconnectWindowSeconds
				"recording_reconnect_window_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "If a stage publisher disconnects and then reconnects within the specified interval, the multiple recordings will be considered a single recording and merged together. The default value is 0, which disables merging.",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(0),
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.Between(0, 300),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: StorageConfigurationArn
				"storage_configuration_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "ARN of the StorageConfiguration resource to use for individual participant recording.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(0, 128),
						stringvalidator.RegexMatches(regexp.MustCompile("^$|^arn:aws:ivs:[a-z0-9-]+:[0-9]+:storage-configuration/[a-zA-Z0-9-]+$"), ""),
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ThumbnailConfiguration
				"thumbnail_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ParticipantThumbnailConfiguration
						"participant_thumbnail_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: RecordingMode
								"recording_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Thumbnail recording mode. Default: DISABLED.",
									Optional:    true,
									Computed:    true,
									Default:     stringdefault.StaticString("INTERVAL"),
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"INTERVAL",
											"DISABLED",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Storage
								"storage": schema.SetAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "Indicates the format in which thumbnails are recorded. SEQUENTIAL records all generated thumbnails in a serial manner, to the media/thumbnails/high directory. LATEST saves the latest thumbnail in media/latest_thumbnail/high/thumb.jpg and overwrites it at the interval specified by targetIntervalSeconds. You can enable both SEQUENTIAL and LATEST. Default: SEQUENTIAL.",
									Optional:    true,
									Computed:    true,
									Default: defaults.StaticSetOfString(
										"SEQUENTIAL",
									),
									Validators: []validator.Set{ /*START VALIDATORS*/
										setvalidator.SizeBetween(0, 2),
										setvalidator.ValueStringsAre(
											stringvalidator.OneOf(
												"SEQUENTIAL",
												"LATEST",
											),
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
										setplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: TargetIntervalSeconds
								"target_interval_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The targeted thumbnail-generation interval in seconds. This is configurable only if recordingMode is INTERVAL. Default: 60.",
									Optional:    true,
									Computed:    true,
									Default:     int64default.StaticInt64(60),
									Validators: []validator.Int64{ /*START VALIDATORS*/
										int64validator.Between(1, 86400),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
										int64planmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "An object representing a configuration of thumbnails for recorded video from an individual participant.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A complex type that allows you to enable/disable the recording of thumbnails for individual participant recording and modify the interval at which thumbnails are generated for the live session.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration object for individual participant recording, to attach to the new stage.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Stage name",
		//	  "maxLength": 128,
		//	  "minLength": 0,
		//	  "pattern": "^[a-zA-Z0-9-_]*$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Stage name",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(0, 128),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9-_]*$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 256),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Definition for type AWS::IVS::Stage.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IVS::Stage").WithTerraformTypeName("awscc_ivs_stage")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"active_session_id": "ActiveSessionId",
		"arn":               "Arn",
		"auto_participant_recording_configuration": "AutoParticipantRecordingConfiguration",
		"hls_configuration":                        "HlsConfiguration",
		"key":                                      "Key",
		"media_types":                              "MediaTypes",
		"name":                                     "Name",
		"participant_recording_hls_configuration": "ParticipantRecordingHlsConfiguration",
		"participant_thumbnail_configuration":     "ParticipantThumbnailConfiguration",
		"recording_mode":                          "RecordingMode",
		"recording_reconnect_window_seconds":      "RecordingReconnectWindowSeconds",
		"storage":                                 "Storage",
		"storage_configuration_arn":               "StorageConfigurationArn",
		"tags":                                    "Tags",
		"target_interval_seconds":                 "TargetIntervalSeconds",
		"target_segment_duration_seconds":         "TargetSegmentDurationSeconds",
		"thumbnail_configuration":                 "ThumbnailConfiguration",
		"value":                                   "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
