// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ivs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ivs_ingest_configuration", ingestConfigurationDataSource)
}

// ingestConfigurationDataSource returns the Terraform awscc_ivs_ingest_configuration data source.
// This Terraform data source corresponds to the CloudFormation AWS::IVS::IngestConfiguration resource.
func ingestConfigurationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "IngestConfiguration ARN is automatically generated on creation and assigned as the unique identifier.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:ingest-configuration/[a-zA-Z0-9-]+$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "IngestConfiguration ARN is automatically generated on creation and assigned as the unique identifier.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IngestProtocol
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "RTMPS",
		//	  "description": "Ingest Protocol.",
		//	  "enum": [
		//	    "RTMP",
		//	    "RTMPS"
		//	  ],
		//	  "type": "string"
		//	}
		"ingest_protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Ingest Protocol.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InsecureIngest
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "Whether ingest configuration allows insecure ingest.",
		//	  "type": "boolean"
		//	}
		"insecure_ingest": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Whether ingest configuration allows insecure ingest.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "-",
		//	  "description": "IngestConfiguration",
		//	  "maxLength": 128,
		//	  "minLength": 0,
		//	  "pattern": "^[a-zA-Z0-9-_]*$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "IngestConfiguration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ParticipantId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Participant Id is automatically generated on creation and assigned.",
		//	  "maxLength": 64,
		//	  "minLength": 0,
		//	  "pattern": "^[a-zA-Z0-9-_]*$",
		//	  "type": "string"
		//	}
		"participant_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Participant Id is automatically generated on creation and assigned.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StageArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "",
		//	  "description": "Stage ARN. A value other than an empty string indicates that stage is linked to IngestConfiguration. Default: \"\" (recording is disabled).",
		//	  "maxLength": 128,
		//	  "minLength": 0,
		//	  "pattern": "^arn:aws:ivs:[a-z0-9-]+:[0-9]+:stage/[a-zA-Z0-9-]+$",
		//	  "type": "string"
		//	}
		"stage_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Stage ARN. A value other than an empty string indicates that stage is linked to IngestConfiguration. Default: \"\" (recording is disabled).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: State
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "INACTIVE",
		//	  "description": "State of IngestConfiguration which determines whether IngestConfiguration is in use or not.",
		//	  "enum": [
		//	    "ACTIVE",
		//	    "INACTIVE"
		//	  ],
		//	  "type": "string"
		//	}
		"state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "State of IngestConfiguration which determines whether IngestConfiguration is in use or not.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StreamKey
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Stream-key value.",
		//	  "type": "string"
		//	}
		"stream_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Stream-key value.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of key-value pairs that contain metadata for the asset model.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of key-value pairs that contain metadata for the asset model.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UserId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "User defined indentifier for participant associated with IngestConfiguration.",
		//	  "type": "string"
		//	}
		"user_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "User defined indentifier for participant associated with IngestConfiguration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::IVS::IngestConfiguration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IVS::IngestConfiguration").WithTerraformTypeName("awscc_ivs_ingest_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":             "Arn",
		"ingest_protocol": "IngestProtocol",
		"insecure_ingest": "InsecureIngest",
		"key":             "Key",
		"name":            "Name",
		"participant_id":  "ParticipantId",
		"stage_arn":       "StageArn",
		"state":           "State",
		"stream_key":      "StreamKey",
		"tags":            "Tags",
		"user_id":         "UserId",
		"value":           "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
