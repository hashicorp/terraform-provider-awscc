// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package simspaceweaver

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_simspaceweaver_simulation", simulationDataSource)
}

// simulationDataSource returns the Terraform awscc_simspaceweaver_simulation data source.
// This Terraform data source corresponds to the CloudFormation AWS::SimSpaceWeaver::Simulation resource.
func simulationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DescribePayload
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Json object with all simulation details",
		//	  "type": "string"
		//	}
		"describe_payload": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Json object with all simulation details",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaximumDuration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum running time of the simulation.",
		//	  "maxLength": 6,
		//	  "minLength": 2,
		//	  "type": "string"
		//	}
		"maximum_duration": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The maximum running time of the simulation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the simulation.",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the simulation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Role ARN.",
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Role ARN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SchemaS3Location
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BucketName": {
		//	      "description": "The Schema S3 bucket name.",
		//	      "maxLength": 63,
		//	      "minLength": 3,
		//	      "pattern": "[a-zA-Z0-9_\\-]{3,63}$",
		//	      "type": "string"
		//	    },
		//	    "ObjectKey": {
		//	      "description": "This is the schema S3 object key, which includes the full path of \"folders\" from the bucket root to the schema.",
		//	      "maxLength": 255,
		//	      "minLength": 3,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "BucketName",
		//	    "ObjectKey"
		//	  ],
		//	  "type": "object"
		//	}
		"schema_s3_location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BucketName
				"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Schema S3 bucket name.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ObjectKey
				"object_key": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "This is the schema S3 object key, which includes the full path of \"folders\" from the bucket root to the schema.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SnapshotS3Location
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BucketName": {
		//	      "description": "The Schema S3 bucket name.",
		//	      "maxLength": 63,
		//	      "minLength": 3,
		//	      "pattern": "[a-zA-Z0-9_\\-]{3,63}$",
		//	      "type": "string"
		//	    },
		//	    "ObjectKey": {
		//	      "description": "This is the schema S3 object key, which includes the full path of \"folders\" from the bucket root to the schema.",
		//	      "maxLength": 255,
		//	      "minLength": 3,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "BucketName",
		//	    "ObjectKey"
		//	  ],
		//	  "type": "object"
		//	}
		"snapshot_s3_location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BucketName
				"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Schema S3 bucket name.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ObjectKey
				"object_key": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "This is the schema S3 object key, which includes the full path of \"folders\" from the bucket root to the schema.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SimSpaceWeaver::Simulation",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SimSpaceWeaver::Simulation").WithTerraformTypeName("awscc_simspaceweaver_simulation")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"bucket_name":          "BucketName",
		"describe_payload":     "DescribePayload",
		"maximum_duration":     "MaximumDuration",
		"name":                 "Name",
		"object_key":           "ObjectKey",
		"role_arn":             "RoleArn",
		"schema_s3_location":   "SchemaS3Location",
		"snapshot_s3_location": "SnapshotS3Location",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
