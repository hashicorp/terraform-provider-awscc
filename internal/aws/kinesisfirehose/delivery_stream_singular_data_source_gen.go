// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package kinesisfirehose

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_kinesisfirehose_delivery_stream", deliveryStreamDataSource)
}

// deliveryStreamDataSource returns the Terraform awscc_kinesisfirehose_delivery_stream data source.
// This Terraform data source corresponds to the CloudFormation AWS::KinesisFirehose::DeliveryStream resource.
func deliveryStreamDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AmazonOpenSearchServerlessDestinationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BufferingHints": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IntervalInSeconds": {
		//	          "type": "integer"
		//	        },
		//	        "SizeInMBs": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CloudWatchLoggingOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "LogGroupName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogGroupName",
		//	            "typeName": "AWS::Logs::LogGroup"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "LogStreamName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogStreamName",
		//	            "typeName": "AWS::Logs::LogStream"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CollectionEndpoint": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "https:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/CollectionEndpoint",
		//	        "typeName": "AWS::OpenSearchServerless::Collection"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "IndexName": {
		//	      "maxLength": 80,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "ProcessingConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "Processors": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Parameters": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "ParameterName": {
		//	                      "type": "string"
		//	                    },
		//	                    "ParameterValue": {
		//	                      "anyOf": [
		//	                        {},
		//	                        {},
		//	                        {}
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ParameterValue",
		//	                    "ParameterName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "RecordDeAggregation",
		//	                  "Decompression",
		//	                  "CloudWatchLogProcessing",
		//	                  "Lambda",
		//	                  "MetadataExtraction",
		//	                  "AppendDelimiterToRecord"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RetryOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DurationInSeconds": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RoleARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::IAM::Role"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "S3BackupMode": {
		//	      "enum": [
		//	        "FailedDocumentsOnly",
		//	        "AllDocuments"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "S3Configuration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::S3::Bucket"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "BufferingHints": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "IntervalInSeconds": {
		//	              "type": "integer"
		//	            },
		//	            "SizeInMBs": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CloudWatchLoggingOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogGroupName",
		//	                "typeName": "AWS::Logs::LogGroup"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "LogStreamName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogStreamName",
		//	                "typeName": "AWS::Logs::LogStream"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CompressionFormat": {
		//	          "enum": [
		//	            "UNCOMPRESSED",
		//	            "GZIP",
		//	            "ZIP",
		//	            "Snappy",
		//	            "HADOOP_SNAPPY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "KMSEncryptionConfig": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AWSKMSKeyARN": {
		//	                  "relationshipRef": {
		//	                    "propertyPath": "/properties/Arn",
		//	                    "typeName": "AWS::KMS::Key"
		//	                  },
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "AWSKMSKeyARN"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NoEncryptionConfig": {
		//	              "enum": [
		//	                "NoEncryption"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ErrorOutputPrefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketARN",
		//	        "RoleARN"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "VpcConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "SecurityGroupIds": {
		//	          "items": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "relationshipRef": {
		//	              "propertyPath": "/properties/GroupId",
		//	              "typeName": "AWS::EC2::SecurityGroup"
		//	            },
		//	            "type": "string"
		//	          },
		//	          "maxItems": 5,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        },
		//	        "SubnetIds": {
		//	          "items": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "relationshipRef": {
		//	              "propertyPath": "/properties/SubnetId",
		//	              "typeName": "AWS::EC2::Subnet"
		//	            },
		//	            "type": "string"
		//	          },
		//	          "maxItems": 16,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "required": [
		//	        "RoleARN",
		//	        "SubnetIds",
		//	        "SecurityGroupIds"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "IndexName",
		//	    "S3Configuration",
		//	    "RoleARN"
		//	  ],
		//	  "type": "object"
		//	}
		"amazon_open_search_serverless_destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BufferingHints
				"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IntervalInSeconds
						"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SizeInMBs
						"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CloudWatchLoggingOptions
				"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogGroupName
						"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CollectionEndpoint
				"collection_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IndexName
				"index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProcessingConfiguration
				"processing_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Processors
						"processors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Parameters
									"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: ParameterName
												"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ParameterValue
												"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RetryOptions
				"retry_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DurationInSeconds
						"duration_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleARN
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3BackupMode
				"s3_backup_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Configuration
				"s3_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketARN
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BufferingHints
						"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: IntervalInSeconds
								"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SizeInMBs
								"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudWatchLoggingOptions
						"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogStreamName
								"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CompressionFormat
						"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KMSEncryptionConfig
								"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AWSKMSKeyARN
										"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoEncryptionConfig
								"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ErrorOutputPrefix
						"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VpcConfiguration
				"vpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SecurityGroupIds
						"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SubnetIds
						"subnet_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: AmazonopensearchserviceDestinationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BufferingHints": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IntervalInSeconds": {
		//	          "type": "integer"
		//	        },
		//	        "SizeInMBs": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CloudWatchLoggingOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "LogGroupName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogGroupName",
		//	            "typeName": "AWS::Logs::LogGroup"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "LogStreamName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogStreamName",
		//	            "typeName": "AWS::Logs::LogStream"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ClusterEndpoint": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "https:.*",
		//	      "type": "string"
		//	    },
		//	    "DocumentIdOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DefaultDocumentIdFormat": {
		//	          "enum": [
		//	            "FIREHOSE_DEFAULT",
		//	            "NO_DOCUMENT_ID"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "DefaultDocumentIdFormat"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "DomainARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "type": "string"
		//	    },
		//	    "IndexName": {
		//	      "maxLength": 80,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "IndexRotationPeriod": {
		//	      "enum": [
		//	        "NoRotation",
		//	        "OneHour",
		//	        "OneDay",
		//	        "OneWeek",
		//	        "OneMonth"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "ProcessingConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "Processors": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Parameters": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "ParameterName": {
		//	                      "type": "string"
		//	                    },
		//	                    "ParameterValue": {
		//	                      "anyOf": [
		//	                        {},
		//	                        {},
		//	                        {}
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ParameterValue",
		//	                    "ParameterName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "RecordDeAggregation",
		//	                  "Decompression",
		//	                  "CloudWatchLogProcessing",
		//	                  "Lambda",
		//	                  "MetadataExtraction",
		//	                  "AppendDelimiterToRecord"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RetryOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DurationInSeconds": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RoleARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::IAM::Role"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "S3BackupMode": {
		//	      "enum": [
		//	        "FailedDocumentsOnly",
		//	        "AllDocuments"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "S3Configuration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::S3::Bucket"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "BufferingHints": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "IntervalInSeconds": {
		//	              "type": "integer"
		//	            },
		//	            "SizeInMBs": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CloudWatchLoggingOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogGroupName",
		//	                "typeName": "AWS::Logs::LogGroup"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "LogStreamName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogStreamName",
		//	                "typeName": "AWS::Logs::LogStream"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CompressionFormat": {
		//	          "enum": [
		//	            "UNCOMPRESSED",
		//	            "GZIP",
		//	            "ZIP",
		//	            "Snappy",
		//	            "HADOOP_SNAPPY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "KMSEncryptionConfig": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AWSKMSKeyARN": {
		//	                  "relationshipRef": {
		//	                    "propertyPath": "/properties/Arn",
		//	                    "typeName": "AWS::KMS::Key"
		//	                  },
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "AWSKMSKeyARN"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NoEncryptionConfig": {
		//	              "enum": [
		//	                "NoEncryption"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ErrorOutputPrefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketARN",
		//	        "RoleARN"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "TypeName": {
		//	      "maxLength": 100,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "VpcConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "SecurityGroupIds": {
		//	          "items": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "relationshipRef": {
		//	              "propertyPath": "/properties/GroupId",
		//	              "typeName": "AWS::EC2::SecurityGroup"
		//	            },
		//	            "type": "string"
		//	          },
		//	          "maxItems": 5,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        },
		//	        "SubnetIds": {
		//	          "items": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "relationshipRef": {
		//	              "propertyPath": "/properties/SubnetId",
		//	              "typeName": "AWS::EC2::Subnet"
		//	            },
		//	            "type": "string"
		//	          },
		//	          "maxItems": 16,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "required": [
		//	        "RoleARN",
		//	        "SubnetIds",
		//	        "SecurityGroupIds"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "IndexName",
		//	    "S3Configuration",
		//	    "RoleARN"
		//	  ],
		//	  "type": "object"
		//	}
		"amazonopensearchservice_destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BufferingHints
				"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IntervalInSeconds
						"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SizeInMBs
						"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CloudWatchLoggingOptions
				"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogGroupName
						"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ClusterEndpoint
				"cluster_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DocumentIdOptions
				"document_id_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DefaultDocumentIdFormat
						"default_document_id_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DomainARN
				"domain_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IndexName
				"index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IndexRotationPeriod
				"index_rotation_period": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProcessingConfiguration
				"processing_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Processors
						"processors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Parameters
									"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: ParameterName
												"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ParameterValue
												"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RetryOptions
				"retry_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DurationInSeconds
						"duration_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleARN
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3BackupMode
				"s3_backup_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Configuration
				"s3_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketARN
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BufferingHints
						"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: IntervalInSeconds
								"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SizeInMBs
								"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudWatchLoggingOptions
						"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogStreamName
								"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CompressionFormat
						"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KMSEncryptionConfig
								"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AWSKMSKeyARN
										"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoEncryptionConfig
								"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ErrorOutputPrefix
						"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TypeName
				"type_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VpcConfiguration
				"vpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SecurityGroupIds
						"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SubnetIds
						"subnet_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DatabaseSourceConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Columns": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Exclude": {
		//	          "items": {
		//	            "maxLength": 194,
		//	            "minLength": 1,
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "Include": {
		//	          "items": {
		//	            "maxLength": 194,
		//	            "minLength": 1,
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "DatabaseSourceAuthenticationConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "SecretsManagerConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "RoleARN": {
		//	              "maxLength": 512,
		//	              "minLength": 1,
		//	              "pattern": "arn:.*:iam::\\d{12}:role/[a-zA-Z_0-9+=,.@\\-_/]+",
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/Arn",
		//	                "typeName": "AWS::IAM::Role"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "SecretARN": {
		//	              "maxLength": 2048,
		//	              "minLength": 1,
		//	              "pattern": "arn:.*:secretsmanager:[a-zA-Z0-9\\-]+:\\d{12}:secret:[a-zA-Z0-9\\-/_+=.@]+",
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/Arn",
		//	                "typeName": "AWS::SecretsManager::Secret"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Enabled"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "SecretsManagerConfiguration"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "DatabaseSourceVPCConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "VpcEndpointServiceName": {
		//	          "maxLength": 255,
		//	          "minLength": 47,
		//	          "pattern": "([a-zA-Z0-9\\-\\_]+\\.){2,3}vpce\\.[a-zA-Z0-9\\-]*\\.vpce-svc\\-[a-zA-Z0-9\\-]{17}$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "VpcEndpointServiceName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Databases": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Exclude": {
		//	          "items": {
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "Include": {
		//	          "items": {
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Digest": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": ".*",
		//	      "type": "string"
		//	    },
		//	    "Endpoint": {
		//	      "maxLength": 255,
		//	      "minLength": 1,
		//	      "pattern": "",
		//	      "type": "string"
		//	    },
		//	    "Port": {
		//	      "maximum": 65535,
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    },
		//	    "PublicCertificate": {
		//	      "maxLength": 4096,
		//	      "minLength": 1,
		//	      "pattern": ".*",
		//	      "type": "string"
		//	    },
		//	    "SSLMode": {
		//	      "enum": [
		//	        "Disabled",
		//	        "Enabled"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "SnapshotWatermarkTable": {
		//	      "maxLength": 129,
		//	      "minLength": 1,
		//	      "pattern": "",
		//	      "type": "string"
		//	    },
		//	    "SurrogateKeys": {
		//	      "items": {
		//	        "maxLength": 1024,
		//	        "minLength": 1,
		//	        "pattern": "^\\S+$",
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "Tables": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Exclude": {
		//	          "items": {
		//	            "maxLength": 129,
		//	            "minLength": 1,
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "Include": {
		//	          "items": {
		//	            "maxLength": 129,
		//	            "minLength": 1,
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Type": {
		//	      "enum": [
		//	        "MySQL",
		//	        "PostgreSQL"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Type",
		//	    "Endpoint",
		//	    "Port",
		//	    "Databases",
		//	    "Tables",
		//	    "SnapshotWatermarkTable",
		//	    "DatabaseSourceAuthenticationConfiguration",
		//	    "DatabaseSourceVPCConfiguration"
		//	  ],
		//	  "type": "object"
		//	}
		"database_source_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Columns
				"columns": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Exclude
						"exclude": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Include
						"include": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DatabaseSourceAuthenticationConfiguration
				"database_source_authentication_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: SecretsManagerConfiguration
						"secrets_manager_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleARN
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SecretARN
								"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DatabaseSourceVPCConfiguration
				"database_source_vpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: VpcEndpointServiceName
						"vpc_endpoint_service_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Databases
				"databases": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Exclude
						"exclude": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Include
						"include": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Digest
				"digest": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Endpoint
				"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Port
				"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: PublicCertificate
				"public_certificate": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SSLMode
				"ssl_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SnapshotWatermarkTable
				"snapshot_watermark_table": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SurrogateKeys
				"surrogate_keys": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Tables
				"tables": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Exclude
						"exclude": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Include
						"include": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DeliveryStreamEncryptionConfigurationInput
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "KeyARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::KMS::Key"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "KeyType": {
		//	      "enum": [
		//	        "AWS_OWNED_CMK",
		//	        "CUSTOMER_MANAGED_CMK"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "KeyType"
		//	  ],
		//	  "type": "object"
		//	}
		"delivery_stream_encryption_configuration_input": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: KeyARN
				"key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: KeyType
				"key_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DeliveryStreamName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "[a-zA-Z0-9._-]+",
		//	  "type": "string"
		//	}
		"delivery_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DeliveryStreamType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "DatabaseAsSource",
		//	    "DirectPut",
		//	    "KinesisStreamAsSource",
		//	    "MSKAsSource"
		//	  ],
		//	  "type": "string"
		//	}
		"delivery_stream_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ElasticsearchDestinationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BufferingHints": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IntervalInSeconds": {
		//	          "type": "integer"
		//	        },
		//	        "SizeInMBs": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CloudWatchLoggingOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "LogGroupName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogGroupName",
		//	            "typeName": "AWS::Logs::LogGroup"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "LogStreamName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogStreamName",
		//	            "typeName": "AWS::Logs::LogStream"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ClusterEndpoint": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "https:.*",
		//	      "type": "string"
		//	    },
		//	    "DocumentIdOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DefaultDocumentIdFormat": {
		//	          "enum": [
		//	            "FIREHOSE_DEFAULT",
		//	            "NO_DOCUMENT_ID"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "DefaultDocumentIdFormat"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "DomainARN": {
		//	      "anyOf": [
		//	        {},
		//	        {}
		//	      ],
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "type": "string"
		//	    },
		//	    "IndexName": {
		//	      "maxLength": 80,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "IndexRotationPeriod": {
		//	      "enum": [
		//	        "NoRotation",
		//	        "OneHour",
		//	        "OneDay",
		//	        "OneWeek",
		//	        "OneMonth"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "ProcessingConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "Processors": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Parameters": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "ParameterName": {
		//	                      "type": "string"
		//	                    },
		//	                    "ParameterValue": {
		//	                      "anyOf": [
		//	                        {},
		//	                        {},
		//	                        {}
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ParameterValue",
		//	                    "ParameterName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "RecordDeAggregation",
		//	                  "Decompression",
		//	                  "CloudWatchLogProcessing",
		//	                  "Lambda",
		//	                  "MetadataExtraction",
		//	                  "AppendDelimiterToRecord"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RetryOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DurationInSeconds": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RoleARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::IAM::Role"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "S3BackupMode": {
		//	      "enum": [
		//	        "FailedDocumentsOnly",
		//	        "AllDocuments"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "S3Configuration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::S3::Bucket"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "BufferingHints": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "IntervalInSeconds": {
		//	              "type": "integer"
		//	            },
		//	            "SizeInMBs": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CloudWatchLoggingOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogGroupName",
		//	                "typeName": "AWS::Logs::LogGroup"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "LogStreamName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogStreamName",
		//	                "typeName": "AWS::Logs::LogStream"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CompressionFormat": {
		//	          "enum": [
		//	            "UNCOMPRESSED",
		//	            "GZIP",
		//	            "ZIP",
		//	            "Snappy",
		//	            "HADOOP_SNAPPY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "KMSEncryptionConfig": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AWSKMSKeyARN": {
		//	                  "relationshipRef": {
		//	                    "propertyPath": "/properties/Arn",
		//	                    "typeName": "AWS::KMS::Key"
		//	                  },
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "AWSKMSKeyARN"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NoEncryptionConfig": {
		//	              "enum": [
		//	                "NoEncryption"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ErrorOutputPrefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketARN",
		//	        "RoleARN"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "TypeName": {
		//	      "maxLength": 100,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "VpcConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "SecurityGroupIds": {
		//	          "items": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "relationshipRef": {
		//	              "propertyPath": "/properties/GroupId",
		//	              "typeName": "AWS::EC2::SecurityGroup"
		//	            },
		//	            "type": "string"
		//	          },
		//	          "maxItems": 5,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        },
		//	        "SubnetIds": {
		//	          "items": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "relationshipRef": {
		//	              "propertyPath": "/properties/SubnetId",
		//	              "typeName": "AWS::EC2::Subnet"
		//	            },
		//	            "type": "string"
		//	          },
		//	          "maxItems": 16,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "required": [
		//	        "RoleARN",
		//	        "SubnetIds",
		//	        "SecurityGroupIds"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "IndexName",
		//	    "S3Configuration",
		//	    "RoleARN"
		//	  ],
		//	  "type": "object"
		//	}
		"elasticsearch_destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BufferingHints
				"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IntervalInSeconds
						"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SizeInMBs
						"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CloudWatchLoggingOptions
				"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogGroupName
						"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ClusterEndpoint
				"cluster_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DocumentIdOptions
				"document_id_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DefaultDocumentIdFormat
						"default_document_id_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DomainARN
				"domain_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IndexName
				"index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IndexRotationPeriod
				"index_rotation_period": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProcessingConfiguration
				"processing_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Processors
						"processors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Parameters
									"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: ParameterName
												"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ParameterValue
												"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RetryOptions
				"retry_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DurationInSeconds
						"duration_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleARN
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3BackupMode
				"s3_backup_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Configuration
				"s3_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketARN
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BufferingHints
						"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: IntervalInSeconds
								"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SizeInMBs
								"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudWatchLoggingOptions
						"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogStreamName
								"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CompressionFormat
						"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KMSEncryptionConfig
								"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AWSKMSKeyARN
										"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoEncryptionConfig
								"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ErrorOutputPrefix
						"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TypeName
				"type_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: VpcConfiguration
				"vpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SecurityGroupIds
						"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SubnetIds
						"subnet_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ExtendedS3DestinationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BucketARN": {
		//	      "maxLength": 2048,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::S3::Bucket"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "BufferingHints": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IntervalInSeconds": {
		//	          "type": "integer"
		//	        },
		//	        "SizeInMBs": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CloudWatchLoggingOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "LogGroupName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogGroupName",
		//	            "typeName": "AWS::Logs::LogGroup"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "LogStreamName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogStreamName",
		//	            "typeName": "AWS::Logs::LogStream"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CompressionFormat": {
		//	      "enum": [
		//	        "UNCOMPRESSED",
		//	        "GZIP",
		//	        "ZIP",
		//	        "Snappy",
		//	        "HADOOP_SNAPPY"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "CustomTimeZone": {
		//	      "maxLength": 50,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "DataFormatConversionConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "InputFormatConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Deserializer": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "HiveJsonSerDe": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "TimestampFormats": {
		//	                      "items": {
		//	                        "type": "string"
		//	                      },
		//	                      "type": "array",
		//	                      "uniqueItems": true
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "OpenXJsonSerDe": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "CaseInsensitive": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "ColumnToJsonKeyMappings": {
		//	                      "additionalProperties": false,
		//	                      "patternProperties": {
		//	                        "": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "ConvertDotsInJsonKeysToUnderscores": {
		//	                      "type": "boolean"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                }
		//	              },
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "OutputFormatConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Serializer": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "OrcSerDe": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "BlockSizeBytes": {
		//	                      "type": "integer"
		//	                    },
		//	                    "BloomFilterColumns": {
		//	                      "items": {
		//	                        "type": "string"
		//	                      },
		//	                      "type": "array",
		//	                      "uniqueItems": true
		//	                    },
		//	                    "BloomFilterFalsePositiveProbability": {
		//	                      "type": "number"
		//	                    },
		//	                    "Compression": {
		//	                      "type": "string"
		//	                    },
		//	                    "DictionaryKeyThreshold": {
		//	                      "type": "number"
		//	                    },
		//	                    "EnablePadding": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "FormatVersion": {
		//	                      "type": "string"
		//	                    },
		//	                    "PaddingTolerance": {
		//	                      "type": "number"
		//	                    },
		//	                    "RowIndexStride": {
		//	                      "type": "integer"
		//	                    },
		//	                    "StripeSizeBytes": {
		//	                      "type": "integer"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "ParquetSerDe": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "BlockSizeBytes": {
		//	                      "type": "integer"
		//	                    },
		//	                    "Compression": {
		//	                      "type": "string"
		//	                    },
		//	                    "EnableDictionaryCompression": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "MaxPaddingBytes": {
		//	                      "type": "integer"
		//	                    },
		//	                    "PageSizeBytes": {
		//	                      "type": "integer"
		//	                    },
		//	                    "WriterVersion": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                }
		//	              },
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "SchemaConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "CatalogId": {
		//	              "type": "string"
		//	            },
		//	            "DatabaseName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/Id",
		//	                "typeName": "AWS::Glue::Database"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "Region": {
		//	              "type": "string"
		//	            },
		//	            "RoleARN": {
		//	              "maxLength": 512,
		//	              "minLength": 1,
		//	              "pattern": "arn:.*",
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/Arn",
		//	                "typeName": "AWS::IAM::Role"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "TableName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/Id",
		//	                "typeName": "AWS::Glue::Table"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "VersionId": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "DynamicPartitioningConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "RetryOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "DurationInSeconds": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "EncryptionConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "KMSEncryptionConfig": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AWSKMSKeyARN": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/Arn",
		//	                "typeName": "AWS::KMS::Key"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "AWSKMSKeyARN"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "NoEncryptionConfig": {
		//	          "enum": [
		//	            "NoEncryption"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ErrorOutputPrefix": {
		//	      "maxLength": 1024,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "FileExtension": {
		//	      "maxLength": 128,
		//	      "minLength": 0,
		//	      "pattern": "^$|\\.[0-9a-z!\\-_.*'()]+",
		//	      "type": "string"
		//	    },
		//	    "Prefix": {
		//	      "maxLength": 1024,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "ProcessingConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "Processors": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Parameters": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "ParameterName": {
		//	                      "type": "string"
		//	                    },
		//	                    "ParameterValue": {
		//	                      "anyOf": [
		//	                        {},
		//	                        {},
		//	                        {}
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ParameterValue",
		//	                    "ParameterName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "RecordDeAggregation",
		//	                  "Decompression",
		//	                  "CloudWatchLogProcessing",
		//	                  "Lambda",
		//	                  "MetadataExtraction",
		//	                  "AppendDelimiterToRecord"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RoleARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::IAM::Role"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "S3BackupConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::S3::Bucket"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "BufferingHints": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "IntervalInSeconds": {
		//	              "type": "integer"
		//	            },
		//	            "SizeInMBs": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CloudWatchLoggingOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogGroupName",
		//	                "typeName": "AWS::Logs::LogGroup"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "LogStreamName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogStreamName",
		//	                "typeName": "AWS::Logs::LogStream"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CompressionFormat": {
		//	          "enum": [
		//	            "UNCOMPRESSED",
		//	            "GZIP",
		//	            "ZIP",
		//	            "Snappy",
		//	            "HADOOP_SNAPPY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "KMSEncryptionConfig": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AWSKMSKeyARN": {
		//	                  "relationshipRef": {
		//	                    "propertyPath": "/properties/Arn",
		//	                    "typeName": "AWS::KMS::Key"
		//	                  },
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "AWSKMSKeyARN"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NoEncryptionConfig": {
		//	              "enum": [
		//	                "NoEncryption"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ErrorOutputPrefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketARN",
		//	        "RoleARN"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "S3BackupMode": {
		//	      "enum": [
		//	        "Disabled",
		//	        "Enabled"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "BucketARN",
		//	    "RoleARN"
		//	  ],
		//	  "type": "object"
		//	}
		"extended_s3_destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BucketARN
				"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: BufferingHints
				"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IntervalInSeconds
						"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SizeInMBs
						"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CloudWatchLoggingOptions
				"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogGroupName
						"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CompressionFormat
				"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CustomTimeZone
				"custom_time_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DataFormatConversionConfiguration
				"data_format_conversion_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: InputFormatConfiguration
						"input_format_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Deserializer
								"deserializer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: HiveJsonSerDe
										"hive_json_ser_de": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: TimestampFormats
												"timestamp_formats": schema.ListAttribute{ /*START ATTRIBUTE*/
													ElementType: types.StringType,
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: OpenXJsonSerDe
										"open_x_json_ser_de": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: CaseInsensitive
												"case_insensitive": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ColumnToJsonKeyMappings
												"column_to_json_key_mappings": // Pattern: ""
												schema.MapAttribute{           /*START ATTRIBUTE*/
													ElementType: types.StringType,
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: ConvertDotsInJsonKeysToUnderscores
												"convert_dots_in_json_keys_to_underscores": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OutputFormatConfiguration
						"output_format_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Serializer
								"serializer": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: OrcSerDe
										"orc_ser_de": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: BlockSizeBytes
												"block_size_bytes": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: BloomFilterColumns
												"bloom_filter_columns": schema.ListAttribute{ /*START ATTRIBUTE*/
													ElementType: types.StringType,
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: BloomFilterFalsePositiveProbability
												"bloom_filter_false_positive_probability": schema.Float64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Compression
												"compression": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: DictionaryKeyThreshold
												"dictionary_key_threshold": schema.Float64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: EnablePadding
												"enable_padding": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: FormatVersion
												"format_version": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: PaddingTolerance
												"padding_tolerance": schema.Float64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: RowIndexStride
												"row_index_stride": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: StripeSizeBytes
												"stripe_size_bytes": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: ParquetSerDe
										"parquet_ser_de": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: BlockSizeBytes
												"block_size_bytes": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Compression
												"compression": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: EnableDictionaryCompression
												"enable_dictionary_compression": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: MaxPaddingBytes
												"max_padding_bytes": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: PageSizeBytes
												"page_size_bytes": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: WriterVersion
												"writer_version": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SchemaConfiguration
						"schema_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CatalogId
								"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: DatabaseName
								"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Region
								"region": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RoleARN
								"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: TableName
								"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: VersionId
								"version_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DynamicPartitioningConfiguration
				"dynamic_partitioning_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RetryOptions
						"retry_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: DurationInSeconds
								"duration_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EncryptionConfiguration
				"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: KMSEncryptionConfig
						"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AWSKMSKeyARN
								"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: NoEncryptionConfig
						"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ErrorOutputPrefix
				"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: FileExtension
				"file_extension": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Prefix
				"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProcessingConfiguration
				"processing_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Processors
						"processors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Parameters
									"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: ParameterName
												"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ParameterValue
												"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleARN
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3BackupConfiguration
				"s3_backup_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketARN
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BufferingHints
						"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: IntervalInSeconds
								"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SizeInMBs
								"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudWatchLoggingOptions
						"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogStreamName
								"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CompressionFormat
						"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KMSEncryptionConfig
								"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AWSKMSKeyARN
										"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoEncryptionConfig
								"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ErrorOutputPrefix
						"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3BackupMode
				"s3_backup_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: HttpEndpointDestinationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BufferingHints": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IntervalInSeconds": {
		//	          "type": "integer"
		//	        },
		//	        "SizeInMBs": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CloudWatchLoggingOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "LogGroupName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogGroupName",
		//	            "typeName": "AWS::Logs::LogGroup"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "LogStreamName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogStreamName",
		//	            "typeName": "AWS::Logs::LogStream"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "EndpointConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AccessKey": {
		//	          "maxLength": 4096,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Name": {
		//	          "maxLength": 256,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Url": {
		//	          "maxLength": 1000,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Url"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "ProcessingConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "Processors": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Parameters": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "ParameterName": {
		//	                      "type": "string"
		//	                    },
		//	                    "ParameterValue": {
		//	                      "anyOf": [
		//	                        {},
		//	                        {},
		//	                        {}
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ParameterValue",
		//	                    "ParameterName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "RecordDeAggregation",
		//	                  "Decompression",
		//	                  "CloudWatchLogProcessing",
		//	                  "Lambda",
		//	                  "MetadataExtraction",
		//	                  "AppendDelimiterToRecord"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RequestConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CommonAttributes": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "AttributeName": {
		//	                "maxLength": 256,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "AttributeValue": {
		//	                "maxLength": 1024,
		//	                "minLength": 0,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "AttributeName",
		//	              "AttributeValue"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "maxItems": 50,
		//	          "minItems": 0,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        },
		//	        "ContentEncoding": {
		//	          "enum": [
		//	            "NONE",
		//	            "GZIP"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RetryOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DurationInSeconds": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RoleARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::IAM::Role"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "S3BackupMode": {
		//	      "type": "string"
		//	    },
		//	    "S3Configuration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::S3::Bucket"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "BufferingHints": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "IntervalInSeconds": {
		//	              "type": "integer"
		//	            },
		//	            "SizeInMBs": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CloudWatchLoggingOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogGroupName",
		//	                "typeName": "AWS::Logs::LogGroup"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "LogStreamName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogStreamName",
		//	                "typeName": "AWS::Logs::LogStream"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CompressionFormat": {
		//	          "enum": [
		//	            "UNCOMPRESSED",
		//	            "GZIP",
		//	            "ZIP",
		//	            "Snappy",
		//	            "HADOOP_SNAPPY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "KMSEncryptionConfig": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AWSKMSKeyARN": {
		//	                  "relationshipRef": {
		//	                    "propertyPath": "/properties/Arn",
		//	                    "typeName": "AWS::KMS::Key"
		//	                  },
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "AWSKMSKeyARN"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NoEncryptionConfig": {
		//	              "enum": [
		//	                "NoEncryption"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ErrorOutputPrefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketARN",
		//	        "RoleARN"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SecretsManagerConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*:iam::\\d{12}:role/[a-zA-Z_0-9+=,.@\\-_/]+",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "SecretARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*:secretsmanager:[a-zA-Z0-9\\-]+:\\d{12}:secret:[a-zA-Z0-9\\-/_+=.@]+",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::SecretsManager::Secret"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Enabled"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "EndpointConfiguration",
		//	    "S3Configuration"
		//	  ],
		//	  "type": "object"
		//	}
		"http_endpoint_destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BufferingHints
				"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IntervalInSeconds
						"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SizeInMBs
						"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CloudWatchLoggingOptions
				"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogGroupName
						"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EndpointConfiguration
				"endpoint_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AccessKey
						"access_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Name
						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Url
						"url": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProcessingConfiguration
				"processing_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Processors
						"processors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Parameters
									"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: ParameterName
												"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ParameterValue
												"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RequestConfiguration
				"request_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CommonAttributes
						"common_attributes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AttributeName
									"attribute_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: AttributeValue
									"attribute_value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ContentEncoding
						"content_encoding": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RetryOptions
				"retry_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DurationInSeconds
						"duration_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleARN
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3BackupMode
				"s3_backup_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Configuration
				"s3_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketARN
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BufferingHints
						"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: IntervalInSeconds
								"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SizeInMBs
								"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudWatchLoggingOptions
						"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogStreamName
								"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CompressionFormat
						"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KMSEncryptionConfig
								"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AWSKMSKeyARN
										"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoEncryptionConfig
								"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ErrorOutputPrefix
						"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SecretsManagerConfiguration
				"secrets_manager_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SecretARN
						"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: IcebergDestinationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BufferingHints": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IntervalInSeconds": {
		//	          "type": "integer"
		//	        },
		//	        "SizeInMBs": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CatalogConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CatalogArn": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CloudWatchLoggingOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "LogGroupName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogGroupName",
		//	            "typeName": "AWS::Logs::LogGroup"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "LogStreamName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogStreamName",
		//	            "typeName": "AWS::Logs::LogStream"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "DestinationTableConfigurationList": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "DestinationDatabaseName": {
		//	            "maxLength": 512,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "DestinationTableName": {
		//	            "maxLength": 512,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "S3ErrorOutputPrefix": {
		//	            "maxLength": 1024,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "UniqueKeys": {
		//	            "items": {
		//	              "maxLength": 512,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            },
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          }
		//	        },
		//	        "required": [
		//	          "DestinationDatabaseName",
		//	          "DestinationTableName"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "ProcessingConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "Processors": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Parameters": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "ParameterName": {
		//	                      "type": "string"
		//	                    },
		//	                    "ParameterValue": {
		//	                      "anyOf": [
		//	                        {},
		//	                        {},
		//	                        {}
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ParameterValue",
		//	                    "ParameterName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "RecordDeAggregation",
		//	                  "Decompression",
		//	                  "CloudWatchLogProcessing",
		//	                  "Lambda",
		//	                  "MetadataExtraction",
		//	                  "AppendDelimiterToRecord"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RetryOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DurationInSeconds": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RoleARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::IAM::Role"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "S3Configuration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::S3::Bucket"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "BufferingHints": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "IntervalInSeconds": {
		//	              "type": "integer"
		//	            },
		//	            "SizeInMBs": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CloudWatchLoggingOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogGroupName",
		//	                "typeName": "AWS::Logs::LogGroup"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "LogStreamName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogStreamName",
		//	                "typeName": "AWS::Logs::LogStream"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CompressionFormat": {
		//	          "enum": [
		//	            "UNCOMPRESSED",
		//	            "GZIP",
		//	            "ZIP",
		//	            "Snappy",
		//	            "HADOOP_SNAPPY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "KMSEncryptionConfig": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AWSKMSKeyARN": {
		//	                  "relationshipRef": {
		//	                    "propertyPath": "/properties/Arn",
		//	                    "typeName": "AWS::KMS::Key"
		//	                  },
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "AWSKMSKeyARN"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NoEncryptionConfig": {
		//	              "enum": [
		//	                "NoEncryption"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ErrorOutputPrefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketARN",
		//	        "RoleARN"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "s3BackupMode": {
		//	      "enum": [
		//	        "AllData",
		//	        "FailedDataOnly"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "RoleARN",
		//	    "CatalogConfiguration",
		//	    "S3Configuration"
		//	  ],
		//	  "type": "object"
		//	}
		"iceberg_destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BufferingHints
				"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IntervalInSeconds
						"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SizeInMBs
						"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CatalogConfiguration
				"catalog_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CatalogArn
						"catalog_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CloudWatchLoggingOptions
				"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogGroupName
						"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DestinationTableConfigurationList
				"destination_table_configuration_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DestinationDatabaseName
							"destination_database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: DestinationTableName
							"destination_table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: S3ErrorOutputPrefix
							"s3_error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: UniqueKeys
							"unique_keys": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProcessingConfiguration
				"processing_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Processors
						"processors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Parameters
									"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: ParameterName
												"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ParameterValue
												"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RetryOptions
				"retry_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DurationInSeconds
						"duration_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleARN
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Configuration
				"s3_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketARN
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BufferingHints
						"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: IntervalInSeconds
								"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SizeInMBs
								"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudWatchLoggingOptions
						"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogStreamName
								"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CompressionFormat
						"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KMSEncryptionConfig
								"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AWSKMSKeyARN
										"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoEncryptionConfig
								"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ErrorOutputPrefix
						"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: s3BackupMode
				"s_3_backup_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: KinesisStreamSourceConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "KinesisStreamARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::Kinesis::Stream"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "RoleARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::IAM::Role"
		//	      },
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "RoleARN",
		//	    "KinesisStreamARN"
		//	  ],
		//	  "type": "object"
		//	}
		"kinesis_stream_source_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: KinesisStreamARN
				"kinesis_stream_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleARN
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: MSKSourceConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AuthenticationConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Connectivity": {
		//	          "enum": [
		//	            "PUBLIC",
		//	            "PRIVATE"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "RoleARN",
		//	        "Connectivity"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "MSKClusterARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::MSK::Cluster"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "ReadFromTimestamp": {
		//	      "type": "string"
		//	    },
		//	    "TopicName": {
		//	      "maxLength": 255,
		//	      "minLength": 1,
		//	      "pattern": "[a-zA-Z0-9\\._\\-]+",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "MSKClusterARN",
		//	    "TopicName",
		//	    "AuthenticationConfiguration"
		//	  ],
		//	  "type": "object"
		//	}
		"msk_source_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AuthenticationConfiguration
				"authentication_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Connectivity
						"connectivity": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: MSKClusterARN
				"msk_cluster_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ReadFromTimestamp
				"read_from_timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TopicName
				"topic_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RedshiftDestinationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "CloudWatchLoggingOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "LogGroupName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogGroupName",
		//	            "typeName": "AWS::Logs::LogGroup"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "LogStreamName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogStreamName",
		//	            "typeName": "AWS::Logs::LogStream"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ClusterJDBCURL": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "CopyCommand": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CopyOptions": {
		//	          "maxLength": 204800,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "DataTableColumns": {
		//	          "maxLength": 204800,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "DataTableName": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "DataTableName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Password": {
		//	      "maxLength": 512,
		//	      "minLength": 6,
		//	      "type": "string"
		//	    },
		//	    "ProcessingConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "Processors": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Parameters": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "ParameterName": {
		//	                      "type": "string"
		//	                    },
		//	                    "ParameterValue": {
		//	                      "anyOf": [
		//	                        {},
		//	                        {},
		//	                        {}
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ParameterValue",
		//	                    "ParameterName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "RecordDeAggregation",
		//	                  "Decompression",
		//	                  "CloudWatchLogProcessing",
		//	                  "Lambda",
		//	                  "MetadataExtraction",
		//	                  "AppendDelimiterToRecord"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RetryOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DurationInSeconds": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RoleARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::IAM::Role"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "S3BackupConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::S3::Bucket"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "BufferingHints": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "IntervalInSeconds": {
		//	              "type": "integer"
		//	            },
		//	            "SizeInMBs": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CloudWatchLoggingOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogGroupName",
		//	                "typeName": "AWS::Logs::LogGroup"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "LogStreamName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogStreamName",
		//	                "typeName": "AWS::Logs::LogStream"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CompressionFormat": {
		//	          "enum": [
		//	            "UNCOMPRESSED",
		//	            "GZIP",
		//	            "ZIP",
		//	            "Snappy",
		//	            "HADOOP_SNAPPY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "KMSEncryptionConfig": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AWSKMSKeyARN": {
		//	                  "relationshipRef": {
		//	                    "propertyPath": "/properties/Arn",
		//	                    "typeName": "AWS::KMS::Key"
		//	                  },
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "AWSKMSKeyARN"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NoEncryptionConfig": {
		//	              "enum": [
		//	                "NoEncryption"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ErrorOutputPrefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketARN",
		//	        "RoleARN"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "S3BackupMode": {
		//	      "enum": [
		//	        "Disabled",
		//	        "Enabled"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "S3Configuration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::S3::Bucket"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "BufferingHints": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "IntervalInSeconds": {
		//	              "type": "integer"
		//	            },
		//	            "SizeInMBs": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CloudWatchLoggingOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogGroupName",
		//	                "typeName": "AWS::Logs::LogGroup"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "LogStreamName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogStreamName",
		//	                "typeName": "AWS::Logs::LogStream"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CompressionFormat": {
		//	          "enum": [
		//	            "UNCOMPRESSED",
		//	            "GZIP",
		//	            "ZIP",
		//	            "Snappy",
		//	            "HADOOP_SNAPPY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "KMSEncryptionConfig": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AWSKMSKeyARN": {
		//	                  "relationshipRef": {
		//	                    "propertyPath": "/properties/Arn",
		//	                    "typeName": "AWS::KMS::Key"
		//	                  },
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "AWSKMSKeyARN"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NoEncryptionConfig": {
		//	              "enum": [
		//	                "NoEncryption"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ErrorOutputPrefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketARN",
		//	        "RoleARN"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SecretsManagerConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*:iam::\\d{12}:role/[a-zA-Z_0-9+=,.@\\-_/]+",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "SecretARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*:secretsmanager:[a-zA-Z0-9\\-]+:\\d{12}:secret:[a-zA-Z0-9\\-/_+=.@]+",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::SecretsManager::Secret"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Enabled"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Username": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "S3Configuration",
		//	    "ClusterJDBCURL",
		//	    "CopyCommand",
		//	    "RoleARN"
		//	  ],
		//	  "type": "object"
		//	}
		"redshift_destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CloudWatchLoggingOptions
				"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogGroupName
						"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ClusterJDBCURL
				"cluster_jdbcurl": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CopyCommand
				"copy_command": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CopyOptions
						"copy_options": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DataTableColumns
						"data_table_columns": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DataTableName
						"data_table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Password
				"password": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProcessingConfiguration
				"processing_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Processors
						"processors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Parameters
									"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: ParameterName
												"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ParameterValue
												"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RetryOptions
				"retry_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DurationInSeconds
						"duration_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleARN
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3BackupConfiguration
				"s3_backup_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketARN
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BufferingHints
						"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: IntervalInSeconds
								"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SizeInMBs
								"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudWatchLoggingOptions
						"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogStreamName
								"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CompressionFormat
						"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KMSEncryptionConfig
								"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AWSKMSKeyARN
										"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoEncryptionConfig
								"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ErrorOutputPrefix
						"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3BackupMode
				"s3_backup_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Configuration
				"s3_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketARN
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BufferingHints
						"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: IntervalInSeconds
								"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SizeInMBs
								"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudWatchLoggingOptions
						"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogStreamName
								"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CompressionFormat
						"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KMSEncryptionConfig
								"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AWSKMSKeyARN
										"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoEncryptionConfig
								"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ErrorOutputPrefix
						"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SecretsManagerConfiguration
				"secrets_manager_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SecretARN
						"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Username
				"username": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: S3DestinationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BucketARN": {
		//	      "maxLength": 2048,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::S3::Bucket"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "BufferingHints": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IntervalInSeconds": {
		//	          "type": "integer"
		//	        },
		//	        "SizeInMBs": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CloudWatchLoggingOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "LogGroupName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogGroupName",
		//	            "typeName": "AWS::Logs::LogGroup"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "LogStreamName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogStreamName",
		//	            "typeName": "AWS::Logs::LogStream"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CompressionFormat": {
		//	      "enum": [
		//	        "UNCOMPRESSED",
		//	        "GZIP",
		//	        "ZIP",
		//	        "Snappy",
		//	        "HADOOP_SNAPPY"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "EncryptionConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "KMSEncryptionConfig": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AWSKMSKeyARN": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/Arn",
		//	                "typeName": "AWS::KMS::Key"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "AWSKMSKeyARN"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "NoEncryptionConfig": {
		//	          "enum": [
		//	            "NoEncryption"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ErrorOutputPrefix": {
		//	      "maxLength": 1024,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "Prefix": {
		//	      "maxLength": 1024,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "RoleARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::IAM::Role"
		//	      },
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "BucketARN",
		//	    "RoleARN"
		//	  ],
		//	  "type": "object"
		//	}
		"s3_destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BucketARN
				"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: BufferingHints
				"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IntervalInSeconds
						"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SizeInMBs
						"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CloudWatchLoggingOptions
				"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogGroupName
						"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CompressionFormat
				"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EncryptionConfiguration
				"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: KMSEncryptionConfig
						"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AWSKMSKeyARN
								"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: NoEncryptionConfig
						"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ErrorOutputPrefix
				"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Prefix
				"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleARN
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SnowflakeDestinationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AccountUrl": {
		//	      "maxLength": 2048,
		//	      "minLength": 24,
		//	      "pattern": ".+?\\.snowflakecomputing\\.com",
		//	      "type": "string"
		//	    },
		//	    "BufferingHints": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IntervalInSeconds": {
		//	          "type": "integer"
		//	        },
		//	        "SizeInMBs": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CloudWatchLoggingOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "LogGroupName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogGroupName",
		//	            "typeName": "AWS::Logs::LogGroup"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "LogStreamName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogStreamName",
		//	            "typeName": "AWS::Logs::LogStream"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ContentColumnName": {
		//	      "maxLength": 255,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "DataLoadingOption": {
		//	      "enum": [
		//	        "JSON_MAPPING",
		//	        "VARIANT_CONTENT_MAPPING",
		//	        "VARIANT_CONTENT_AND_METADATA_MAPPING"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Database": {
		//	      "maxLength": 255,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "KeyPassphrase": {
		//	      "maxLength": 255,
		//	      "minLength": 7,
		//	      "type": "string"
		//	    },
		//	    "MetaDataColumnName": {
		//	      "maxLength": 255,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "PrivateKey": {
		//	      "maxLength": 4096,
		//	      "minLength": 256,
		//	      "pattern": "^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$",
		//	      "type": "string"
		//	    },
		//	    "ProcessingConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "Processors": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Parameters": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "ParameterName": {
		//	                      "type": "string"
		//	                    },
		//	                    "ParameterValue": {
		//	                      "anyOf": [
		//	                        {},
		//	                        {},
		//	                        {}
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ParameterValue",
		//	                    "ParameterName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "RecordDeAggregation",
		//	                  "Decompression",
		//	                  "CloudWatchLogProcessing",
		//	                  "Lambda",
		//	                  "MetadataExtraction",
		//	                  "AppendDelimiterToRecord"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RetryOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DurationInSeconds": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RoleARN": {
		//	      "maxLength": 512,
		//	      "minLength": 1,
		//	      "pattern": "arn:.*",
		//	      "relationshipRef": {
		//	        "propertyPath": "/properties/Arn",
		//	        "typeName": "AWS::IAM::Role"
		//	      },
		//	      "type": "string"
		//	    },
		//	    "S3BackupMode": {
		//	      "enum": [
		//	        "FailedDataOnly",
		//	        "AllData"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "S3Configuration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::S3::Bucket"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "BufferingHints": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "IntervalInSeconds": {
		//	              "type": "integer"
		//	            },
		//	            "SizeInMBs": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CloudWatchLoggingOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogGroupName",
		//	                "typeName": "AWS::Logs::LogGroup"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "LogStreamName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogStreamName",
		//	                "typeName": "AWS::Logs::LogStream"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CompressionFormat": {
		//	          "enum": [
		//	            "UNCOMPRESSED",
		//	            "GZIP",
		//	            "ZIP",
		//	            "Snappy",
		//	            "HADOOP_SNAPPY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "KMSEncryptionConfig": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AWSKMSKeyARN": {
		//	                  "relationshipRef": {
		//	                    "propertyPath": "/properties/Arn",
		//	                    "typeName": "AWS::KMS::Key"
		//	                  },
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "AWSKMSKeyARN"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NoEncryptionConfig": {
		//	              "enum": [
		//	                "NoEncryption"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ErrorOutputPrefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketARN",
		//	        "RoleARN"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Schema": {
		//	      "maxLength": 255,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "SecretsManagerConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*:iam::\\d{12}:role/[a-zA-Z_0-9+=,.@\\-_/]+",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "SecretARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*:secretsmanager:[a-zA-Z0-9\\-]+:\\d{12}:secret:[a-zA-Z0-9\\-/_+=.@]+",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::SecretsManager::Secret"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Enabled"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SnowflakeRoleConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "SnowflakeRole": {
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "SnowflakeVpcConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "PrivateLinkVpceId": {
		//	          "maxLength": 255,
		//	          "minLength": 47,
		//	          "pattern": "([a-zA-Z0-9\\-\\_]+\\.){2,3}vpce\\.[a-zA-Z0-9\\-]*\\.vpce-svc\\-[a-zA-Z0-9\\-]{17}$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "PrivateLinkVpceId"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Table": {
		//	      "maxLength": 255,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "User": {
		//	      "maxLength": 255,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "AccountUrl",
		//	    "Database",
		//	    "Schema",
		//	    "Table",
		//	    "RoleARN",
		//	    "S3Configuration"
		//	  ],
		//	  "type": "object"
		//	}
		"snowflake_destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AccountUrl
				"account_url": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: BufferingHints
				"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IntervalInSeconds
						"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SizeInMBs
						"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CloudWatchLoggingOptions
				"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogGroupName
						"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ContentColumnName
				"content_column_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DataLoadingOption
				"data_loading_option": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Database
				"database": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: KeyPassphrase
				"key_passphrase": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: MetaDataColumnName
				"meta_data_column_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: PrivateKey
				"private_key": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProcessingConfiguration
				"processing_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Processors
						"processors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Parameters
									"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: ParameterName
												"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ParameterValue
												"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RetryOptions
				"retry_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DurationInSeconds
						"duration_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RoleARN
				"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3BackupMode
				"s3_backup_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Configuration
				"s3_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketARN
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BufferingHints
						"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: IntervalInSeconds
								"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SizeInMBs
								"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudWatchLoggingOptions
						"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogStreamName
								"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CompressionFormat
						"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KMSEncryptionConfig
								"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AWSKMSKeyARN
										"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoEncryptionConfig
								"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ErrorOutputPrefix
						"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Schema
				"schema": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SecretsManagerConfiguration
				"secrets_manager_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SecretARN
						"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SnowflakeRoleConfiguration
				"snowflake_role_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SnowflakeRole
						"snowflake_role": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SnowflakeVpcConfiguration
				"snowflake_vpc_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: PrivateLinkVpceId
						"private_link_vpce_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Table
				"table": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: User
				"user": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SplunkDestinationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BufferingHints": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IntervalInSeconds": {
		//	          "type": "integer"
		//	        },
		//	        "SizeInMBs": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CloudWatchLoggingOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "LogGroupName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogGroupName",
		//	            "typeName": "AWS::Logs::LogGroup"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "LogStreamName": {
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/LogStreamName",
		//	            "typeName": "AWS::Logs::LogStream"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "HECAcknowledgmentTimeoutInSeconds": {
		//	      "maximum": 600,
		//	      "minimum": 180,
		//	      "type": "integer"
		//	    },
		//	    "HECEndpoint": {
		//	      "maxLength": 2048,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "HECEndpointType": {
		//	      "enum": [
		//	        "Raw",
		//	        "Event"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "HECToken": {
		//	      "maxLength": 2048,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    },
		//	    "ProcessingConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "Processors": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Parameters": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "ParameterName": {
		//	                      "type": "string"
		//	                    },
		//	                    "ParameterValue": {
		//	                      "anyOf": [
		//	                        {},
		//	                        {},
		//	                        {}
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ParameterValue",
		//	                    "ParameterName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": true
		//	              },
		//	              "Type": {
		//	                "enum": [
		//	                  "RecordDeAggregation",
		//	                  "Decompression",
		//	                  "CloudWatchLogProcessing",
		//	                  "Lambda",
		//	                  "MetadataExtraction",
		//	                  "AppendDelimiterToRecord"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Type"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "RetryOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DurationInSeconds": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "S3BackupMode": {
		//	      "type": "string"
		//	    },
		//	    "S3Configuration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BucketARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::S3::Bucket"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "BufferingHints": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "IntervalInSeconds": {
		//	              "type": "integer"
		//	            },
		//	            "SizeInMBs": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CloudWatchLoggingOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Enabled": {
		//	              "type": "boolean"
		//	            },
		//	            "LogGroupName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogGroupName",
		//	                "typeName": "AWS::Logs::LogGroup"
		//	              },
		//	              "type": "string"
		//	            },
		//	            "LogStreamName": {
		//	              "relationshipRef": {
		//	                "propertyPath": "/properties/LogStreamName",
		//	                "typeName": "AWS::Logs::LogStream"
		//	              },
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "CompressionFormat": {
		//	          "enum": [
		//	            "UNCOMPRESSED",
		//	            "GZIP",
		//	            "ZIP",
		//	            "Snappy",
		//	            "HADOOP_SNAPPY"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "KMSEncryptionConfig": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "AWSKMSKeyARN": {
		//	                  "relationshipRef": {
		//	                    "propertyPath": "/properties/Arn",
		//	                    "typeName": "AWS::KMS::Key"
		//	                  },
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "AWSKMSKeyARN"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "NoEncryptionConfig": {
		//	              "enum": [
		//	                "NoEncryption"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ErrorOutputPrefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "Prefix": {
		//	          "maxLength": 1024,
		//	          "minLength": 0,
		//	          "type": "string"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BucketARN",
		//	        "RoleARN"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SecretsManagerConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "RoleARN": {
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*:iam::\\d{12}:role/[a-zA-Z_0-9+=,.@\\-_/]+",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::IAM::Role"
		//	          },
		//	          "type": "string"
		//	        },
		//	        "SecretARN": {
		//	          "maxLength": 2048,
		//	          "minLength": 1,
		//	          "pattern": "arn:.*:secretsmanager:[a-zA-Z0-9\\-]+:\\d{12}:secret:[a-zA-Z0-9\\-/_+=.@]+",
		//	          "relationshipRef": {
		//	            "propertyPath": "/properties/Arn",
		//	            "typeName": "AWS::SecretsManager::Secret"
		//	          },
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Enabled"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "HECEndpoint",
		//	    "S3Configuration",
		//	    "HECEndpointType"
		//	  ],
		//	  "type": "object"
		//	}
		"splunk_destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BufferingHints
				"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IntervalInSeconds
						"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SizeInMBs
						"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CloudWatchLoggingOptions
				"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogGroupName
						"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogStreamName
						"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: HECAcknowledgmentTimeoutInSeconds
				"hec_acknowledgment_timeout_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: HECEndpoint
				"hec_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: HECEndpointType
				"hec_endpoint_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: HECToken
				"hec_token": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProcessingConfiguration
				"processing_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Processors
						"processors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Parameters
									"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: ParameterName
												"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ParameterValue
												"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RetryOptions
				"retry_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DurationInSeconds
						"duration_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3BackupMode
				"s3_backup_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3Configuration
				"s3_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketARN
						"bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BufferingHints
						"buffering_hints": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: IntervalInSeconds
								"interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SizeInMBs
								"size_in_m_bs": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CloudWatchLoggingOptions
						"cloudwatch_logging_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Enabled
								"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupName
								"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogStreamName
								"log_stream_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CompressionFormat
						"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KMSEncryptionConfig
								"kms_encryption_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: AWSKMSKeyARN
										"awskms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoEncryptionConfig
								"no_encryption_config": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ErrorOutputPrefix
						"error_output_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Prefix
						"prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SecretsManagerConfiguration
				"secrets_manager_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RoleARN
						"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SecretARN
						"secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "pattern": "^[\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@%]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::KinesisFirehose::DeliveryStream",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::KinesisFirehose::DeliveryStream").WithTerraformTypeName("awscc_kinesisfirehose_delivery_stream")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_key":  "AccessKey",
		"account_url": "AccountUrl",
		"amazon_open_search_serverless_destination_configuration": "AmazonOpenSearchServerlessDestinationConfiguration",
		"amazonopensearchservice_destination_configuration":       "AmazonopensearchserviceDestinationConfiguration",
		"arn":                          "Arn",
		"attribute_name":               "AttributeName",
		"attribute_value":              "AttributeValue",
		"authentication_configuration": "AuthenticationConfiguration",
		"awskms_key_arn":               "AWSKMSKeyARN",
		"block_size_bytes":             "BlockSizeBytes",
		"bloom_filter_columns":         "BloomFilterColumns",
		"bloom_filter_false_positive_probability": "BloomFilterFalsePositiveProbability",
		"bucket_arn":                               "BucketARN",
		"buffering_hints":                          "BufferingHints",
		"case_insensitive":                         "CaseInsensitive",
		"catalog_arn":                              "CatalogArn",
		"catalog_configuration":                    "CatalogConfiguration",
		"catalog_id":                               "CatalogId",
		"cloudwatch_logging_options":               "CloudWatchLoggingOptions",
		"cluster_endpoint":                         "ClusterEndpoint",
		"cluster_jdbcurl":                          "ClusterJDBCURL",
		"collection_endpoint":                      "CollectionEndpoint",
		"column_to_json_key_mappings":              "ColumnToJsonKeyMappings",
		"columns":                                  "Columns",
		"common_attributes":                        "CommonAttributes",
		"compression":                              "Compression",
		"compression_format":                       "CompressionFormat",
		"connectivity":                             "Connectivity",
		"content_column_name":                      "ContentColumnName",
		"content_encoding":                         "ContentEncoding",
		"convert_dots_in_json_keys_to_underscores": "ConvertDotsInJsonKeysToUnderscores",
		"copy_command":                             "CopyCommand",
		"copy_options":                             "CopyOptions",
		"custom_time_zone":                         "CustomTimeZone",
		"data_format_conversion_configuration":     "DataFormatConversionConfiguration",
		"data_loading_option":                      "DataLoadingOption",
		"data_table_columns":                       "DataTableColumns",
		"data_table_name":                          "DataTableName",
		"database":                                 "Database",
		"database_name":                            "DatabaseName",
		"database_source_authentication_configuration":   "DatabaseSourceAuthenticationConfiguration",
		"database_source_configuration":                  "DatabaseSourceConfiguration",
		"database_source_vpc_configuration":              "DatabaseSourceVPCConfiguration",
		"databases":                                      "Databases",
		"default_document_id_format":                     "DefaultDocumentIdFormat",
		"delivery_stream_encryption_configuration_input": "DeliveryStreamEncryptionConfigurationInput",
		"delivery_stream_name":                           "DeliveryStreamName",
		"delivery_stream_type":                           "DeliveryStreamType",
		"deserializer":                                   "Deserializer",
		"destination_database_name":                      "DestinationDatabaseName",
		"destination_table_configuration_list":           "DestinationTableConfigurationList",
		"destination_table_name":                         "DestinationTableName",
		"dictionary_key_threshold":                       "DictionaryKeyThreshold",
		"digest":                                         "Digest",
		"document_id_options":                            "DocumentIdOptions",
		"domain_arn":                                     "DomainARN",
		"duration_in_seconds":                            "DurationInSeconds",
		"dynamic_partitioning_configuration":             "DynamicPartitioningConfiguration",
		"elasticsearch_destination_configuration":        "ElasticsearchDestinationConfiguration",
		"enable_dictionary_compression":                  "EnableDictionaryCompression",
		"enable_padding":                                 "EnablePadding",
		"enabled":                                        "Enabled",
		"encryption_configuration":                       "EncryptionConfiguration",
		"endpoint":                                       "Endpoint",
		"endpoint_configuration":                         "EndpointConfiguration",
		"error_output_prefix":                            "ErrorOutputPrefix",
		"exclude":                                        "Exclude",
		"extended_s3_destination_configuration":          "ExtendedS3DestinationConfiguration",
		"file_extension":                                 "FileExtension",
		"format_version":                                 "FormatVersion",
		"hec_acknowledgment_timeout_in_seconds":          "HECAcknowledgmentTimeoutInSeconds",
		"hec_endpoint":                                   "HECEndpoint",
		"hec_endpoint_type":                              "HECEndpointType",
		"hec_token":                                      "HECToken",
		"hive_json_ser_de":                               "HiveJsonSerDe",
		"http_endpoint_destination_configuration":        "HttpEndpointDestinationConfiguration",
		"iceberg_destination_configuration":              "IcebergDestinationConfiguration",
		"include":                                        "Include",
		"index_name":                                     "IndexName",
		"index_rotation_period":                          "IndexRotationPeriod",
		"input_format_configuration":                     "InputFormatConfiguration",
		"interval_in_seconds":                            "IntervalInSeconds",
		"key":                                            "Key",
		"key_arn":                                        "KeyARN",
		"key_passphrase":                                 "KeyPassphrase",
		"key_type":                                       "KeyType",
		"kinesis_stream_arn":                             "KinesisStreamARN",
		"kinesis_stream_source_configuration":            "KinesisStreamSourceConfiguration",
		"kms_encryption_config":                          "KMSEncryptionConfig",
		"log_group_name":                                 "LogGroupName",
		"log_stream_name":                                "LogStreamName",
		"max_padding_bytes":                              "MaxPaddingBytes",
		"meta_data_column_name":                          "MetaDataColumnName",
		"msk_cluster_arn":                                "MSKClusterARN",
		"msk_source_configuration":                       "MSKSourceConfiguration",
		"name":                                           "Name",
		"no_encryption_config":                           "NoEncryptionConfig",
		"open_x_json_ser_de":                             "OpenXJsonSerDe",
		"orc_ser_de":                                     "OrcSerDe",
		"output_format_configuration":                    "OutputFormatConfiguration",
		"padding_tolerance":                              "PaddingTolerance",
		"page_size_bytes":                                "PageSizeBytes",
		"parameter_name":                                 "ParameterName",
		"parameter_value":                                "ParameterValue",
		"parameters":                                     "Parameters",
		"parquet_ser_de":                                 "ParquetSerDe",
		"password":                                       "Password",
		"port":                                           "Port",
		"prefix":                                         "Prefix",
		"private_key":                                    "PrivateKey",
		"private_link_vpce_id":                           "PrivateLinkVpceId",
		"processing_configuration":                       "ProcessingConfiguration",
		"processors":                                     "Processors",
		"public_certificate":                             "PublicCertificate",
		"read_from_timestamp":                            "ReadFromTimestamp",
		"redshift_destination_configuration":             "RedshiftDestinationConfiguration",
		"region":                                         "Region",
		"request_configuration":                          "RequestConfiguration",
		"retry_options":                                  "RetryOptions",
		"role_arn":                                       "RoleARN",
		"row_index_stride":                               "RowIndexStride",
		"s3_backup_configuration":                        "S3BackupConfiguration",
		"s3_backup_mode":                                 "S3BackupMode",
		"s3_configuration":                               "S3Configuration",
		"s3_destination_configuration":                   "S3DestinationConfiguration",
		"s3_error_output_prefix":                         "S3ErrorOutputPrefix",
		"s_3_backup_mode":                                "s3BackupMode",
		"schema":                                         "Schema",
		"schema_configuration":                           "SchemaConfiguration",
		"secret_arn":                                     "SecretARN",
		"secrets_manager_configuration":                  "SecretsManagerConfiguration",
		"security_group_ids":                             "SecurityGroupIds",
		"serializer":                                     "Serializer",
		"size_in_m_bs":                                   "SizeInMBs",
		"snapshot_watermark_table":                       "SnapshotWatermarkTable",
		"snowflake_destination_configuration":            "SnowflakeDestinationConfiguration",
		"snowflake_role":                                 "SnowflakeRole",
		"snowflake_role_configuration":                   "SnowflakeRoleConfiguration",
		"snowflake_vpc_configuration":                    "SnowflakeVpcConfiguration",
		"splunk_destination_configuration":               "SplunkDestinationConfiguration",
		"ssl_mode":                                       "SSLMode",
		"stripe_size_bytes":                              "StripeSizeBytes",
		"subnet_ids":                                     "SubnetIds",
		"surrogate_keys":                                 "SurrogateKeys",
		"table":                                          "Table",
		"table_name":                                     "TableName",
		"tables":                                         "Tables",
		"tags":                                           "Tags",
		"timestamp_formats":                              "TimestampFormats",
		"topic_name":                                     "TopicName",
		"type":                                           "Type",
		"type_name":                                      "TypeName",
		"unique_keys":                                    "UniqueKeys",
		"url":                                            "Url",
		"user":                                           "User",
		"username":                                       "Username",
		"value":                                          "Value",
		"version_id":                                     "VersionId",
		"vpc_configuration":                              "VpcConfiguration",
		"vpc_endpoint_service_name":                      "VpcEndpointServiceName",
		"writer_version":                                 "WriterVersion",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
