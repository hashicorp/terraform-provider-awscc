// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package xray

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_xray_group", groupDataSource)
}

// groupDataSource returns the Terraform awscc_xray_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::XRay::Group resource.
func groupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: FilterExpression
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The filter expression defining criteria by which to group traces.",
		//	  "type": "string"
		//	}
		"filter_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The filter expression defining criteria by which to group traces.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GroupARN
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the group that was generated on creation.",
		//	  "maxLength": 400,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the group that was generated on creation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The case-sensitive name of the new group. Names must be unique.",
		//	  "maxLength": 32,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The case-sensitive name of the new group. Names must be unique.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InsightsConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "InsightsEnabled": {
		//	      "description": "Set the InsightsEnabled value to true to enable insights or false to disable insights.",
		//	      "type": "boolean"
		//	    },
		//	    "NotificationsEnabled": {
		//	      "description": "Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.",
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"insights_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: InsightsEnabled
				"insights_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Set the InsightsEnabled value to true to enable insights or false to disable insights.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: NotificationsEnabled
				"notifications_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Set the NotificationsEnabled value to true to enable insights notifications. Notifications can only be enabled on a group with InsightsEnabled set to true.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::XRay::Group",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::XRay::Group").WithTerraformTypeName("awscc_xray_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"filter_expression":      "FilterExpression",
		"group_arn":              "GroupARN",
		"group_name":             "GroupName",
		"insights_configuration": "InsightsConfiguration",
		"insights_enabled":       "InsightsEnabled",
		"key":                    "Key",
		"notifications_enabled":  "NotificationsEnabled",
		"tags":                   "Tags",
		"value":                  "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
