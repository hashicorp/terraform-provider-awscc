// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package xray

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_xray_transaction_search_config", transactionSearchConfigDataSource)
}

// transactionSearchConfigDataSource returns the Terraform awscc_xray_transaction_search_config data source.
// This Terraform data source corresponds to the CloudFormation AWS::XRay::TransactionSearchConfig resource.
func transactionSearchConfigDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AccountId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "User account id, used as the primary identifier for the resource",
		//	  "pattern": "^\\d{12}$",
		//	  "type": "string"
		//	}
		"account_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "User account id, used as the primary identifier for the resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IndexingPercentage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Determines the percentage of traces indexed from CloudWatch Logs to X-Ray",
		//	  "maximum": 100,
		//	  "minimum": 0,
		//	  "type": "number"
		//	}
		"indexing_percentage": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "Determines the percentage of traces indexed from CloudWatch Logs to X-Ray",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::XRay::TransactionSearchConfig",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::XRay::TransactionSearchConfig").WithTerraformTypeName("awscc_xray_transaction_search_config")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_id":          "AccountId",
		"indexing_percentage": "IndexingPercentage",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
