// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package route53profiles

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_route53profiles_profile_resource_association", profileResourceAssociationDataSource)
}

// profileResourceAssociationDataSource returns the Terraform awscc_route53profiles_profile_resource_association data source.
// This Terraform data source corresponds to the CloudFormation AWS::Route53Profiles::ProfileResourceAssociation resource.
func profileResourceAssociationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Primary Identifier for  Profile Resource Association",
		//	  "type": "string"
		//	}
		"profile_resource_association_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Primary Identifier for  Profile Resource Association",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of an association between the  Profile and resource.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of an association between the  Profile and resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProfileId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the  profile that you associated the resource to that is specified by ResourceArn.",
		//	  "type": "string"
		//	}
		"profile_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the  profile that you associated the resource to that is specified by ResourceArn.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The arn of the resource that you associated to the  Profile.",
		//	  "type": "string"
		//	}
		"resource_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The arn of the resource that you associated to the  Profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A JSON-formatted string with key-value pairs specifying the properties of the associated resource.",
		//	  "type": "string"
		//	}
		"resource_properties": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A JSON-formatted string with key-value pairs specifying the properties of the associated resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the resource associated to the  Profile.",
		//	  "type": "string"
		//	}
		"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the resource associated to the  Profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Route53Profiles::ProfileResourceAssociation",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Route53Profiles::ProfileResourceAssociation").WithTerraformTypeName("awscc_route53profiles_profile_resource_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"name":                            "Name",
		"profile_id":                      "ProfileId",
		"profile_resource_association_id": "Id",
		"resource_arn":                    "ResourceArn",
		"resource_properties":             "ResourceProperties",
		"resource_type":                   "ResourceType",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
