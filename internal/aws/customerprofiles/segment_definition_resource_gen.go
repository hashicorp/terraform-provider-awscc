// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package customerprofiles

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_customerprofiles_segment_definition", segmentDefinitionResource)
}

// segmentDefinitionResource returns the Terraform awscc_customerprofiles_segment_definition resource.
// This Terraform resource corresponds to the CloudFormation AWS::CustomerProfiles::SegmentDefinition resource.
func segmentDefinitionResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The time of this segment definition got created.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "The time of this segment definition got created.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the segment definition.",
		//	  "maxLength": 1000,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the segment definition.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 1000),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DisplayName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The display name of the segment definition.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"display_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The display name of the segment definition.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 255),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique name of the domain.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9_-]+$",
		//	  "type": "string"
		//	}
		"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique name of the domain.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 64),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SegmentDefinitionArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the segment definition.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"segment_definition_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the segment definition.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SegmentDefinitionName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique name of the segment definition.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9_-]+$",
		//	  "type": "string"
		//	}
		"segment_definition_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique name of the segment definition.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 64),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SegmentGroups
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "An array that defines the set of segment criteria to evaluate when handling segment groups for the segment.",
		//	  "properties": {
		//	    "Groups": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "An array that defines the set of segment criteria to evaluate when handling segment groups for the segment.",
		//	        "properties": {
		//	          "Dimensions": {
		//	            "items": {
		//	              "description": "The criteria that define the dimensions for the segment.",
		//	              "properties": {
		//	                "CalculatedAttributes": {
		//	                  "additionalProperties": false,
		//	                  "description": "One or more calculated attributes to use as criteria for the segment.",
		//	                  "patternProperties": {
		//	                    "": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies calculated attribute based criteria for a segment.",
		//	                      "properties": {
		//	                        "ConditionOverrides": {
		//	                          "additionalProperties": false,
		//	                          "description": "Overrides the condition block within the original calculated attribute definition.",
		//	                          "properties": {
		//	                            "Range": {
		//	                              "additionalProperties": false,
		//	                              "description": "Defines the range to be applied to the calculated attribute definition.",
		//	                              "properties": {
		//	                                "End": {
		//	                                  "description": "The ending point for this overridden range.",
		//	                                  "maximum": 366,
		//	                                  "minimum": 0,
		//	                                  "type": "integer"
		//	                                },
		//	                                "Start": {
		//	                                  "description": "The starting point for this overridden range.",
		//	                                  "maximum": 366,
		//	                                  "minimum": 1,
		//	                                  "type": "integer"
		//	                                },
		//	                                "Unit": {
		//	                                  "description": "The unit to be applied to the range.",
		//	                                  "enum": [
		//	                                    "DAYS"
		//	                                  ],
		//	                                  "type": "string"
		//	                                }
		//	                              },
		//	                              "required": [
		//	                                "Start",
		//	                                "Unit"
		//	                              ],
		//	                              "type": "object"
		//	                            }
		//	                          },
		//	                          "type": "object"
		//	                        },
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH",
		//	                            "BEFORE",
		//	                            "AFTER",
		//	                            "BETWEEN",
		//	                            "NOT_BETWEEN",
		//	                            "ON",
		//	                            "GREATER_THAN",
		//	                            "LESS_THAN",
		//	                            "GREATER_THAN_OR_EQUAL",
		//	                            "LESS_THAN_OR_EQUAL",
		//	                            "EQUAL"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "ProfileAttributes": {
		//	                  "additionalProperties": false,
		//	                  "description": "Specifies the dimension settings within profile attributes for a segment.",
		//	                  "properties": {
		//	                    "AccountNumber": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "AdditionalInformation": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies criteria for a segment using extended-length string values.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 1000,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "Address": {
		//	                      "additionalProperties": false,
		//	                      "description": "The address based criteria for the segment.",
		//	                      "properties": {
		//	                        "City": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Country": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "County": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "PostalCode": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Province": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "State": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "Attributes": {
		//	                      "additionalProperties": false,
		//	                      "description": "One or more custom attributes to use as criteria for the segment.",
		//	                      "patternProperties": {
		//	                        "": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies attribute based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH",
		//	                                "BEFORE",
		//	                                "AFTER",
		//	                                "BETWEEN",
		//	                                "NOT_BETWEEN",
		//	                                "ON",
		//	                                "GREATER_THAN",
		//	                                "LESS_THAN",
		//	                                "GREATER_THAN_OR_EQUAL",
		//	                                "LESS_THAN_OR_EQUAL",
		//	                                "EQUAL"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "BillingAddress": {
		//	                      "additionalProperties": false,
		//	                      "description": "The address based criteria for the segment.",
		//	                      "properties": {
		//	                        "City": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Country": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "County": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "PostalCode": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Province": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "State": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "BirthDate": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies date based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a date dimension.",
		//	                          "enum": [
		//	                            "BEFORE",
		//	                            "AFTER",
		//	                            "BETWEEN",
		//	                            "NOT_BETWEEN",
		//	                            "ON"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "BusinessEmailAddress": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "BusinessName": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "BusinessPhoneNumber": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "EmailAddress": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "FirstName": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "GenderString": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "HomePhoneNumber": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "LastName": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "MailingAddress": {
		//	                      "additionalProperties": false,
		//	                      "description": "The address based criteria for the segment.",
		//	                      "properties": {
		//	                        "City": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Country": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "County": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "PostalCode": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Province": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "State": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "MiddleName": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "MobilePhoneNumber": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "PartyTypeString": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "PersonalEmailAddress": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "PhoneNumber": {
		//	                      "additionalProperties": false,
		//	                      "description": "Specifies profile based criteria for a segment.",
		//	                      "properties": {
		//	                        "DimensionType": {
		//	                          "description": "The type of segment dimension to use for a string dimension.",
		//	                          "enum": [
		//	                            "INCLUSIVE",
		//	                            "EXCLUSIVE",
		//	                            "CONTAINS",
		//	                            "BEGINS_WITH",
		//	                            "ENDS_WITH"
		//	                          ],
		//	                          "type": "string"
		//	                        },
		//	                        "Values": {
		//	                          "insertionOrder": false,
		//	                          "items": {
		//	                            "maxLength": 255,
		//	                            "minLength": 1,
		//	                            "type": "string"
		//	                          },
		//	                          "maxItems": 50,
		//	                          "minItems": 1,
		//	                          "type": "array"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "DimensionType",
		//	                        "Values"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "ShippingAddress": {
		//	                      "additionalProperties": false,
		//	                      "description": "The address based criteria for the segment.",
		//	                      "properties": {
		//	                        "City": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Country": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "County": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "PostalCode": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "Province": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        },
		//	                        "State": {
		//	                          "additionalProperties": false,
		//	                          "description": "Specifies profile based criteria for a segment.",
		//	                          "properties": {
		//	                            "DimensionType": {
		//	                              "description": "The type of segment dimension to use for a string dimension.",
		//	                              "enum": [
		//	                                "INCLUSIVE",
		//	                                "EXCLUSIVE",
		//	                                "CONTAINS",
		//	                                "BEGINS_WITH",
		//	                                "ENDS_WITH"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "Values": {
		//	                              "insertionOrder": false,
		//	                              "items": {
		//	                                "maxLength": 255,
		//	                                "minLength": 1,
		//	                                "type": "string"
		//	                              },
		//	                              "maxItems": 50,
		//	                              "minItems": 1,
		//	                              "type": "array"
		//	                            }
		//	                          },
		//	                          "required": [
		//	                            "DimensionType",
		//	                            "Values"
		//	                          ],
		//	                          "type": "object"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "SourceSegments": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "The base segment to build the segment on.",
		//	              "properties": {
		//	                "SegmentDefinitionName": {
		//	                  "maxLength": 64,
		//	                  "minLength": 1,
		//	                  "pattern": "^[a-zA-Z0-9_-]+$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "SourceType": {
		//	            "description": "Specifies the operator on how to handle multiple groups within the same segment.",
		//	            "enum": [
		//	              "ALL",
		//	              "ANY",
		//	              "NONE"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Type": {
		//	            "description": "Specifies the operator on how to handle multiple groups within the same segment.",
		//	            "enum": [
		//	              "ALL",
		//	              "ANY",
		//	              "NONE"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "Include": {
		//	      "description": "Specifies the operator on how to handle multiple groups within the same segment.",
		//	      "enum": [
		//	        "ALL",
		//	        "ANY",
		//	        "NONE"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"segment_groups": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Groups
				"groups": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Dimensions
							"dimensions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: CalculatedAttributes
										"calculated_attributes":   // Pattern: ""
										schema.MapNestedAttribute{ /*START ATTRIBUTE*/
											NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: ConditionOverrides
													"condition_overrides": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: Range
															"range": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
																Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																	// Property: End
																	"end": schema.Int64Attribute{ /*START ATTRIBUTE*/
																		Description: "The ending point for this overridden range.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.Int64{ /*START VALIDATORS*/
																			int64validator.Between(0, 366),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
																			int64planmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Start
																	"start": schema.Int64Attribute{ /*START ATTRIBUTE*/
																		Description: "The starting point for this overridden range.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.Int64{ /*START VALIDATORS*/
																			int64validator.Between(1, 366),
																			fwvalidators.NotNullInt64(),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
																			int64planmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																	// Property: Unit
																	"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
																		Description: "The unit to be applied to the range.",
																		Optional:    true,
																		Computed:    true,
																		Validators: []validator.String{ /*START VALIDATORS*/
																			stringvalidator.OneOf(
																				"DAYS",
																			),
																			fwvalidators.NotNullString(),
																		}, /*END VALIDATORS*/
																		PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																			stringplanmodifier.UseStateForUnknown(),
																		}, /*END PLAN MODIFIERS*/
																	}, /*END ATTRIBUTE*/
																}, /*END SCHEMA*/
																Description: "Defines the range to be applied to the calculated attribute definition.",
																Optional:    true,
																Computed:    true,
																PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																	objectplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
														Description: "Overrides the condition block within the original calculated attribute definition.",
														Optional:    true,
														Computed:    true,
														PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
															objectplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: DimensionType
													"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Description: "The type of segment dimension to use.",
														Optional:    true,
														Computed:    true,
														Validators: []validator.String{ /*START VALIDATORS*/
															stringvalidator.OneOf(
																"INCLUSIVE",
																"EXCLUSIVE",
																"CONTAINS",
																"BEGINS_WITH",
																"ENDS_WITH",
																"BEFORE",
																"AFTER",
																"BETWEEN",
																"NOT_BETWEEN",
																"ON",
																"GREATER_THAN",
																"LESS_THAN",
																"GREATER_THAN_OR_EQUAL",
																"LESS_THAN_OR_EQUAL",
																"EQUAL",
															),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Values
													"values": schema.ListAttribute{ /*START ATTRIBUTE*/
														ElementType: types.StringType,
														Optional:    true,
														Computed:    true,
														Validators: []validator.List{ /*START VALIDATORS*/
															listvalidator.SizeBetween(1, 50),
															listvalidator.ValueStringsAre(
																stringvalidator.LengthBetween(1, 255),
															),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
															generic.Multiset(),
															listplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
											}, /*END NESTED OBJECT*/
											Description: "One or more calculated attributes to use as criteria for the segment.",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.Map{ /*START PLAN MODIFIERS*/
												mapplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
										// Property: ProfileAttributes
										"profile_attributes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AccountNumber
												"account_number": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: AdditionalInformation
												"additional_information": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 1000),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies criteria for a segment using extended-length string values.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Address
												"address": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: City
														"city": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Country
														"country": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: County
														"county": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: PostalCode
														"postal_code": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Province
														"province": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: State
														"state": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "The address based criteria for the segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Attributes
												"attributes":              // Pattern: ""
												schema.MapNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: DimensionType
															"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The type of segment dimension to use.",
																Optional:    true,
																Computed:    true,
																Validators: []validator.String{ /*START VALIDATORS*/
																	stringvalidator.OneOf(
																		"INCLUSIVE",
																		"EXCLUSIVE",
																		"CONTAINS",
																		"BEGINS_WITH",
																		"ENDS_WITH",
																		"BEFORE",
																		"AFTER",
																		"BETWEEN",
																		"NOT_BETWEEN",
																		"ON",
																		"GREATER_THAN",
																		"LESS_THAN",
																		"GREATER_THAN_OR_EQUAL",
																		"LESS_THAN_OR_EQUAL",
																		"EQUAL",
																	),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																	stringplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Values
															"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																ElementType: types.StringType,
																Optional:    true,
																Computed:    true,
																Validators: []validator.List{ /*START VALIDATORS*/
																	listvalidator.SizeBetween(1, 50),
																	listvalidator.ValueStringsAre(
																		stringvalidator.LengthBetween(1, 255),
																	),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																	generic.Multiset(),
																	listplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "One or more custom attributes to use as criteria for the segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Map{ /*START PLAN MODIFIERS*/
														mapplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: BillingAddress
												"billing_address": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: City
														"city": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Country
														"country": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: County
														"county": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: PostalCode
														"postal_code": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Province
														"province": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: State
														"state": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "The address based criteria for the segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: BirthDate
												"birth_date": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a date dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"BEFORE",
																	"AFTER",
																	"BETWEEN",
																	"NOT_BETWEEN",
																	"ON",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies date based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: BusinessEmailAddress
												"business_email_address": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: BusinessName
												"business_name": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: BusinessPhoneNumber
												"business_phone_number": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: EmailAddress
												"email_address": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: FirstName
												"first_name": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: GenderString
												"gender_string": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: HomePhoneNumber
												"home_phone_number": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: LastName
												"last_name": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: MailingAddress
												"mailing_address": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: City
														"city": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Country
														"country": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: County
														"county": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: PostalCode
														"postal_code": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Province
														"province": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: State
														"state": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "The address based criteria for the segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: MiddleName
												"middle_name": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: MobilePhoneNumber
												"mobile_phone_number": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: PartyTypeString
												"party_type_string": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: PersonalEmailAddress
												"personal_email_address": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: PhoneNumber
												"phone_number": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: DimensionType
														"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "The type of segment dimension to use for a string dimension.",
															Optional:    true,
															Computed:    true,
															Validators: []validator.String{ /*START VALIDATORS*/
																stringvalidator.OneOf(
																	"INCLUSIVE",
																	"EXCLUSIVE",
																	"CONTAINS",
																	"BEGINS_WITH",
																	"ENDS_WITH",
																),
																fwvalidators.NotNullString(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																stringplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Values
														"values": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Optional:    true,
															Computed:    true,
															Validators: []validator.List{ /*START VALIDATORS*/
																listvalidator.SizeBetween(1, 50),
																listvalidator.ValueStringsAre(
																	stringvalidator.LengthBetween(1, 255),
																),
																fwvalidators.NotNullList(),
															}, /*END VALIDATORS*/
															PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																generic.Multiset(),
																listplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "Specifies profile based criteria for a segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: ShippingAddress
												"shipping_address": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: City
														"city": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Country
														"country": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: County
														"county": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: PostalCode
														"postal_code": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: Province
														"province": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
														// Property: State
														"state": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: DimensionType
																"dimension_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Description: "The type of segment dimension to use for a string dimension.",
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.String{ /*START VALIDATORS*/
																		stringvalidator.OneOf(
																			"INCLUSIVE",
																			"EXCLUSIVE",
																			"CONTAINS",
																			"BEGINS_WITH",
																			"ENDS_WITH",
																		),
																		fwvalidators.NotNullString(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																		stringplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
																// Property: Values
																"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																	ElementType: types.StringType,
																	Optional:    true,
																	Computed:    true,
																	Validators: []validator.List{ /*START VALIDATORS*/
																		listvalidator.SizeBetween(1, 50),
																		listvalidator.ValueStringsAre(
																			stringvalidator.LengthBetween(1, 255),
																		),
																		fwvalidators.NotNullList(),
																	}, /*END VALIDATORS*/
																	PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																		generic.Multiset(),
																		listplanmodifier.UseStateForUnknown(),
																	}, /*END PLAN MODIFIERS*/
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Description: "Specifies profile based criteria for a segment.",
															Optional:    true,
															Computed:    true,
															PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
																objectplanmodifier.UseStateForUnknown(),
															}, /*END PLAN MODIFIERS*/
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Description: "The address based criteria for the segment.",
													Optional:    true,
													Computed:    true,
													PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
														objectplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Description: "Specifies the dimension settings within profile attributes for a segment.",
											Optional:    true,
											Computed:    true,
											PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
												objectplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: SourceSegments
							"source_segments": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: SegmentDefinitionName
										"segment_definition_name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Optional: true,
											Computed: true,
											Validators: []validator.String{ /*START VALIDATORS*/
												stringvalidator.LengthBetween(1, 64),
												stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]+$"), ""),
											}, /*END VALIDATORS*/
											PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
												stringplanmodifier.UseStateForUnknown(),
											}, /*END PLAN MODIFIERS*/
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: SourceType
							"source_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies the operator on how to handle multiple groups within the same segment.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"ALL",
										"ANY",
										"NONE",
									),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies the operator on how to handle multiple groups within the same segment.",
								Optional:    true,
								Computed:    true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"ALL",
										"ANY",
										"NONE",
									),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Include
				"include": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies the operator on how to handle multiple groups within the same segment.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"ALL",
							"ANY",
							"NONE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "An array that defines the set of segment criteria to evaluate when handling segment groups for the segment.",
			Required:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags used to organize, track, or control access for this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 256),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags used to organize, track, or control access for this resource.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeBetween(0, 50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "A segment definition resource of Amazon Connect Customer Profiles",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CustomerProfiles::SegmentDefinition").WithTerraformTypeName("awscc_customerprofiles_segment_definition")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account_number":          "AccountNumber",
		"additional_information":  "AdditionalInformation",
		"address":                 "Address",
		"attributes":              "Attributes",
		"billing_address":         "BillingAddress",
		"birth_date":              "BirthDate",
		"business_email_address":  "BusinessEmailAddress",
		"business_name":           "BusinessName",
		"business_phone_number":   "BusinessPhoneNumber",
		"calculated_attributes":   "CalculatedAttributes",
		"city":                    "City",
		"condition_overrides":     "ConditionOverrides",
		"country":                 "Country",
		"county":                  "County",
		"created_at":              "CreatedAt",
		"description":             "Description",
		"dimension_type":          "DimensionType",
		"dimensions":              "Dimensions",
		"display_name":            "DisplayName",
		"domain_name":             "DomainName",
		"email_address":           "EmailAddress",
		"end":                     "End",
		"first_name":              "FirstName",
		"gender_string":           "GenderString",
		"groups":                  "Groups",
		"home_phone_number":       "HomePhoneNumber",
		"include":                 "Include",
		"key":                     "Key",
		"last_name":               "LastName",
		"mailing_address":         "MailingAddress",
		"middle_name":             "MiddleName",
		"mobile_phone_number":     "MobilePhoneNumber",
		"party_type_string":       "PartyTypeString",
		"personal_email_address":  "PersonalEmailAddress",
		"phone_number":            "PhoneNumber",
		"postal_code":             "PostalCode",
		"profile_attributes":      "ProfileAttributes",
		"province":                "Province",
		"range":                   "Range",
		"segment_definition_arn":  "SegmentDefinitionArn",
		"segment_definition_name": "SegmentDefinitionName",
		"segment_groups":          "SegmentGroups",
		"shipping_address":        "ShippingAddress",
		"source_segments":         "SourceSegments",
		"source_type":             "SourceType",
		"start":                   "Start",
		"state":                   "State",
		"tags":                    "Tags",
		"type":                    "Type",
		"unit":                    "Unit",
		"value":                   "Value",
		"values":                  "Values",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
