// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package customerprofiles

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_customerprofiles_object_type", objectTypeDataSource)
}

// objectTypeDataSource returns the Terraform awscc_customerprofiles_object_type data source.
// This Terraform data source corresponds to the CloudFormation AWS::CustomerProfiles::ObjectType resource.
func objectTypeDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AllowProfileCreation
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether a profile should be created when data is received.",
		//	  "type": "boolean"
		//	}
		"allow_profile_creation": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether a profile should be created when data is received.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The time of this integration got created.",
		//	  "type": "string"
		//	}
		"created_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The time of this integration got created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of the profile object type.",
		//	  "maxLength": 10000,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of the profile object type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique name of the domain.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9_-]+$",
		//	  "type": "string"
		//	}
		"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique name of the domain.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EncryptionKey
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The default encryption key",
		//	  "maxLength": 255,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"encryption_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The default encryption key",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ExpirationDays
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The default number of days until the data within the domain expires.",
		//	  "maximum": 1098,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"expiration_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The default number of days until the data within the domain expires.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Fields
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of the name and ObjectType field.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Name": {
		//	        "maxLength": 64,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9_-]+$",
		//	        "type": "string"
		//	      },
		//	      "ObjectTypeField": {
		//	        "additionalProperties": false,
		//	        "description": "Represents a field in a ProfileObjectType.",
		//	        "properties": {
		//	          "ContentType": {
		//	            "description": "The content type of the field. Used for determining equality when searching.",
		//	            "enum": [
		//	              "STRING",
		//	              "NUMBER",
		//	              "PHONE_NUMBER",
		//	              "EMAIL_ADDRESS",
		//	              "NAME"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Source": {
		//	            "description": "A field of a ProfileObject. For example: _source.FirstName, where \"_source\" is a ProfileObjectType of a Zendesk user and \"FirstName\" is a field in that ObjectType.",
		//	            "maxLength": 1000,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Target": {
		//	            "description": "The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.",
		//	            "maxLength": 1000,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"fields": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ObjectTypeField
					"object_type_field": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ContentType
							"content_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The content type of the field. Used for determining equality when searching.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Source
							"source": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A field of a ProfileObject. For example: _source.FirstName, where \"_source\" is a ProfileObjectType of a Zendesk user and \"FirstName\" is a field in that ObjectType.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Target
							"target": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Represents a field in a ProfileObjectType.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of the name and ObjectType field.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Keys
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of unique keys that can be used to map data to the profile.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Name": {
		//	        "maxLength": 64,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9_-]+$",
		//	        "type": "string"
		//	      },
		//	      "ObjectTypeKeyList": {
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.",
		//	          "properties": {
		//	            "FieldNames": {
		//	              "description": "The reference for the key name of the fields map. ",
		//	              "items": {
		//	                "maxLength": 64,
		//	                "minLength": 1,
		//	                "pattern": "^[a-zA-Z0-9_-]+$",
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            },
		//	            "StandardIdentifiers": {
		//	              "description": "The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.",
		//	              "items": {
		//	                "enum": [
		//	                  "PROFILE",
		//	                  "UNIQUE",
		//	                  "SECONDARY",
		//	                  "LOOKUP_ONLY",
		//	                  "NEW_ONLY",
		//	                  "ASSET",
		//	                  "CASE",
		//	                  "ORDER"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"keys": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ObjectTypeKeyList
					"object_type_key_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: FieldNames
								"field_names": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The reference for the key name of the fields map. ",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: StandardIdentifiers
								"standard_identifiers": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE means that this key can be used to tie an object to a PROFILE. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of unique keys that can be used to map data to the profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastUpdatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The time of this integration got last updated at.",
		//	  "type": "string"
		//	}
		"last_updated_at": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The time of this integration got last updated at.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaxAvailableProfileObjectCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum available number of profile objects",
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"max_available_profile_object_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum available number of profile objects",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaxProfileObjectCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum number of profile objects for this object type",
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"max_profile_object_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum number of profile objects for this object type",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ObjectTypeName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the profile object type.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z_][a-zA-Z_0-9-]*$",
		//	  "type": "string"
		//	}
		"object_type_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the profile object type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceLastUpdatedTimestampFormat
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The format of your sourceLastUpdatedTimestamp that was previously set up.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"source_last_updated_timestamp_format": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The format of your sourceLastUpdatedTimestamp that was previously set up.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags (keys and values) associated with the integration.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags (keys and values) associated with the integration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TemplateId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A unique identifier for the object template.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9_-]+$",
		//	  "type": "string"
		//	}
		"template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A unique identifier for the object template.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::CustomerProfiles::ObjectType",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CustomerProfiles::ObjectType").WithTerraformTypeName("awscc_customerprofiles_object_type")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allow_profile_creation":               "AllowProfileCreation",
		"content_type":                         "ContentType",
		"created_at":                           "CreatedAt",
		"description":                          "Description",
		"domain_name":                          "DomainName",
		"encryption_key":                       "EncryptionKey",
		"expiration_days":                      "ExpirationDays",
		"field_names":                          "FieldNames",
		"fields":                               "Fields",
		"key":                                  "Key",
		"keys":                                 "Keys",
		"last_updated_at":                      "LastUpdatedAt",
		"max_available_profile_object_count":   "MaxAvailableProfileObjectCount",
		"max_profile_object_count":             "MaxProfileObjectCount",
		"name":                                 "Name",
		"object_type_field":                    "ObjectTypeField",
		"object_type_key_list":                 "ObjectTypeKeyList",
		"object_type_name":                     "ObjectTypeName",
		"source":                               "Source",
		"source_last_updated_timestamp_format": "SourceLastUpdatedTimestampFormat",
		"standard_identifiers":                 "StandardIdentifiers",
		"tags":                                 "Tags",
		"target":                               "Target",
		"template_id":                          "TemplateId",
		"value":                                "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
