// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package lambda

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_lambda_event_invoke_config", eventInvokeConfigDataSource)
}

// eventInvokeConfigDataSource returns the Terraform awscc_lambda_event_invoke_config data source.
// This Terraform data source corresponds to the CloudFormation AWS::Lambda::EventInvokeConfig resource.
func eventInvokeConfigDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DestinationConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A destination for events after they have been sent to a function for processing.",
		//	  "properties": {
		//	    "OnFailure": {
		//	      "additionalProperties": false,
		//	      "description": "The destination configuration for failed invocations.",
		//	      "properties": {
		//	        "Destination": {
		//	          "description": "The Amazon Resource Name (ARN) of the destination resource.",
		//	          "maxLength": 350,
		//	          "minLength": 0,
		//	          "pattern": "^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Destination"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "OnSuccess": {
		//	      "additionalProperties": false,
		//	      "description": "The destination configuration for successful invocations.",
		//	      "properties": {
		//	        "Destination": {
		//	          "description": "The Amazon Resource Name (ARN) of the destination resource.",
		//	          "maxLength": 350,
		//	          "minLength": 0,
		//	          "pattern": "^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Destination"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"destination_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: OnFailure
				"on_failure": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Destination
						"destination": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) of the destination resource.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The destination configuration for failed invocations.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: OnSuccess
				"on_success": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Destination
						"destination": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) of the destination resource.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The destination configuration for successful invocations.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A destination for events after they have been sent to a function for processing.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FunctionName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the Lambda function.",
		//	  "pattern": "^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?(-iso([a-z])?)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?$",
		//	  "type": "string"
		//	}
		"function_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the Lambda function.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaximumEventAgeInSeconds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum age of a request that Lambda sends to a function for processing.",
		//	  "maximum": 21600,
		//	  "minimum": 60,
		//	  "type": "integer"
		//	}
		"maximum_event_age_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum age of a request that Lambda sends to a function for processing.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaximumRetryAttempts
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum number of times to retry when the function returns an error.",
		//	  "maximum": 2,
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"maximum_retry_attempts": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum number of times to retry when the function returns an error.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Qualifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of a version or alias.",
		//	  "pattern": "^(|[a-zA-Z0-9$_-]{1,129})$",
		//	  "type": "string"
		//	}
		"qualifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of a version or alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Lambda::EventInvokeConfig",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Lambda::EventInvokeConfig").WithTerraformTypeName("awscc_lambda_event_invoke_config")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"destination":                  "Destination",
		"destination_config":           "DestinationConfig",
		"function_name":                "FunctionName",
		"maximum_event_age_in_seconds": "MaximumEventAgeInSeconds",
		"maximum_retry_attempts":       "MaximumRetryAttempts",
		"on_failure":                   "OnFailure",
		"on_success":                   "OnSuccess",
		"qualifier":                    "Qualifier",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
