// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package lambda

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_lambda_alias", aliasDataSource)
}

// aliasDataSource returns the Terraform awscc_lambda_alias data source.
// This Terraform data source corresponds to the CloudFormation AWS::Lambda::Alias resource.
func aliasDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AliasArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Lambda Alias ARN generated by the service.",
		//	  "type": "string"
		//	}
		"alias_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Lambda Alias ARN generated by the service.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A description of the alias.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A description of the alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FunctionName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the Lambda function.",
		//	  "type": "string"
		//	}
		"function_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the Lambda function.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FunctionVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The function version that the alias invokes.",
		//	  "type": "string"
		//	}
		"function_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The function version that the alias invokes.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the alias.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProvisionedConcurrencyConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Specifies a provisioned concurrency configuration for a function's alias.",
		//	  "properties": {
		//	    "ProvisionedConcurrentExecutions": {
		//	      "description": "The amount of provisioned concurrency to allocate for the alias.",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "ProvisionedConcurrentExecutions"
		//	  ],
		//	  "type": "object"
		//	}
		"provisioned_concurrency_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ProvisionedConcurrentExecutions
				"provisioned_concurrent_executions": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The amount of provisioned concurrency to allocate for the alias.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Specifies a provisioned concurrency configuration for a function's alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoutingConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The routing configuration of the alias.",
		//	  "properties": {
		//	    "AdditionalVersionWeights": {
		//	      "description": "The second version, and the percentage of traffic that's routed to it.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "The traffic-shifting configuration of a Lambda function alias.",
		//	        "properties": {
		//	          "FunctionVersion": {
		//	            "description": "The qualifier of the second version.",
		//	            "type": "string"
		//	          },
		//	          "FunctionWeight": {
		//	            "description": "The percentage of traffic that the alias routes to the second version.",
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "FunctionVersion",
		//	          "FunctionWeight"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"routing_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AdditionalVersionWeights
				"additional_version_weights": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: FunctionVersion
							"function_version": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The qualifier of the second version.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: FunctionWeight
							"function_weight": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "The percentage of traffic that the alias routes to the second version.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The second version, and the percentage of traffic that's routed to it.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The routing configuration of the alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Lambda::Alias",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Lambda::Alias").WithTerraformTypeName("awscc_lambda_alias")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"additional_version_weights":        "AdditionalVersionWeights",
		"alias_arn":                         "AliasArn",
		"description":                       "Description",
		"function_name":                     "FunctionName",
		"function_version":                  "FunctionVersion",
		"function_weight":                   "FunctionWeight",
		"name":                              "Name",
		"provisioned_concurrency_config":    "ProvisionedConcurrencyConfig",
		"provisioned_concurrent_executions": "ProvisionedConcurrentExecutions",
		"routing_config":                    "RoutingConfig",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
