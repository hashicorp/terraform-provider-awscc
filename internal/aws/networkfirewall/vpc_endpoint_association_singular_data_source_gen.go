// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package networkfirewall

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_networkfirewall_vpc_endpoint_association", vpcEndpointAssociationDataSource)
}

// vpcEndpointAssociationDataSource returns the Terraform awscc_networkfirewall_vpc_endpoint_association data source.
// This Terraform data source corresponds to the CloudFormation AWS::NetworkFirewall::VpcEndpointAssociation resource.
func vpcEndpointAssociationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 512,
		//	  "pattern": "^.*$",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An endpoint Id.",
		//	  "type": "string"
		//	}
		"endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An endpoint Id.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FirewallArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A resource ARN.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^(arn:aws.*)$",
		//	  "type": "string"
		//	}
		"firewall_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A resource ARN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SubnetMapping
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "IPAddressType": {
		//	      "description": "A IPAddressType",
		//	      "type": "string"
		//	    },
		//	    "SubnetId": {
		//	      "description": "A SubnetId.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "SubnetId"
		//	  ],
		//	  "type": "object"
		//	}
		"subnet_mapping": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: IPAddressType
				"ip_address_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A IPAddressType",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SubnetId
				"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A SubnetId.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "^.*$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 255,
		//	        "minLength": 0,
		//	        "pattern": "^.*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: VpcEndpointAssociationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A resource ARN.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^(arn:aws.*)$",
		//	  "type": "string"
		//	}
		"vpc_endpoint_association_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A resource ARN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcEndpointAssociationId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 36,
		//	  "minLength": 36,
		//	  "pattern": "^([0-9a-f]{8})-([0-9a-f]{4}-){3}([0-9a-f]{12})$",
		//	  "type": "string"
		//	}
		"vpc_endpoint_association_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "^vpc-[0-9a-f]+$",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::NetworkFirewall::VpcEndpointAssociation",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::NetworkFirewall::VpcEndpointAssociation").WithTerraformTypeName("awscc_networkfirewall_vpc_endpoint_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"description":                  "Description",
		"endpoint_id":                  "EndpointId",
		"firewall_arn":                 "FirewallArn",
		"ip_address_type":              "IPAddressType",
		"key":                          "Key",
		"subnet_id":                    "SubnetId",
		"subnet_mapping":               "SubnetMapping",
		"tags":                         "Tags",
		"value":                        "Value",
		"vpc_endpoint_association_arn": "VpcEndpointAssociationArn",
		"vpc_endpoint_association_id":  "VpcEndpointAssociationId",
		"vpc_id":                       "VpcId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
