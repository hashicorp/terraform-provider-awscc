// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package timestream

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_timestream_influx_db_instance", influxDBInstanceDataSource)
}

// influxDBInstanceDataSource returns the Terraform awscc_timestream_influx_db_instance data source.
// This Terraform data source corresponds to the CloudFormation AWS::Timestream::InfluxDBInstance resource.
func influxDBInstanceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AllocatedStorage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The allocated storage for the InfluxDB instance.",
		//	  "maximum": 16384,
		//	  "minimum": 20,
		//	  "type": "integer"
		//	}
		"allocated_storage": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The allocated storage for the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) that is associated with the InfluxDB instance.",
		//	  "maxLength": 1011,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws[a-z\\-]*:timestream\\-influxdb:[a-z0-9\\-]+:[0-9]{12}:(db\\-instance)/[a-zA-Z0-9]{3,64}$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) that is associated with the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Availability Zone (AZ) where the InfluxDB instance is created.",
		//	  "type": "string"
		//	}
		"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Availability Zone (AZ) where the InfluxDB instance is created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Bucket
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The bucket for the InfluxDB instance.",
		//	  "maxLength": 64,
		//	  "minLength": 2,
		//	  "pattern": "^[^_][^\"]*$",
		//	  "type": "string"
		//	}
		"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The bucket for the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DbInstanceType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The compute instance of the InfluxDB instance.",
		//	  "enum": [
		//	    "db.influx.medium",
		//	    "db.influx.large",
		//	    "db.influx.xlarge",
		//	    "db.influx.2xlarge",
		//	    "db.influx.4xlarge",
		//	    "db.influx.8xlarge",
		//	    "db.influx.12xlarge",
		//	    "db.influx.16xlarge",
		//	    "db.influx.24xlarge"
		//	  ],
		//	  "type": "string"
		//	}
		"db_instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The compute instance of the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DbParameterGroupIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of an existing InfluxDB parameter group.",
		//	  "maxLength": 64,
		//	  "minLength": 3,
		//	  "pattern": "^[a-zA-Z0-9]+$",
		//	  "type": "string"
		//	}
		"db_parameter_group_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of an existing InfluxDB parameter group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DbStorageType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The storage type of the InfluxDB instance.",
		//	  "enum": [
		//	    "InfluxIOIncludedT1",
		//	    "InfluxIOIncludedT2",
		//	    "InfluxIOIncludedT3"
		//	  ],
		//	  "type": "string"
		//	}
		"db_storage_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The storage type of the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DeploymentType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Deployment type of the InfluxDB Instance.",
		//	  "enum": [
		//	    "SINGLE_AZ",
		//	    "WITH_MULTIAZ_STANDBY"
		//	  ],
		//	  "type": "string"
		//	}
		"deployment_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Deployment type of the InfluxDB Instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Endpoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The connection endpoint for the InfluxDB instance.",
		//	  "type": "string"
		//	}
		"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The connection endpoint for the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The service generated unique identifier for InfluxDB instance.",
		//	  "maxLength": 64,
		//	  "minLength": 3,
		//	  "pattern": "^[a-zA-Z0-9]+$",
		//	  "type": "string"
		//	}
		"influx_db_instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The service generated unique identifier for InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InfluxAuthParametersSecretArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Auth parameters secret Amazon Resource name (ARN) that is associated with the InfluxDB instance.",
		//	  "pattern": "^arn:[a-z]*:secretsmanager:[a-z\\-0-9]*:[0-9]*:secret:[a-zA-Z0-9\\-]*",
		//	  "type": "string"
		//	}
		"influx_auth_parameters_secret_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Auth parameters secret Amazon Resource name (ARN) that is associated with the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LogDeliveryConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration for sending logs to customer account from the InfluxDB instance.",
		//	  "properties": {
		//	    "S3Configuration": {
		//	      "additionalProperties": false,
		//	      "description": "S3 configuration for sending logs to customer account from the InfluxDB instance.",
		//	      "properties": {
		//	        "BucketName": {
		//	          "description": "The bucket name for logs to be sent from the InfluxDB instance",
		//	          "maxLength": 63,
		//	          "minLength": 3,
		//	          "pattern": "^[0-9a-z]+[0-9a-z\\.\\-]*[0-9a-z]+$",
		//	          "type": "string"
		//	        },
		//	        "Enabled": {
		//	          "description": "Specifies whether logging to customer specified bucket is enabled.",
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "required": [
		//	        "Enabled",
		//	        "BucketName"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "S3Configuration"
		//	  ],
		//	  "type": "object"
		//	}
		"log_delivery_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: S3Configuration
				"s3_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BucketName
						"bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The bucket name for logs to be sent from the InfluxDB instance",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Description: "Specifies whether logging to customer specified bucket is enabled.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "S3 configuration for sending logs to customer account from the InfluxDB instance.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration for sending logs to customer account from the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique name that is associated with the InfluxDB instance.",
		//	  "maxLength": 40,
		//	  "minLength": 3,
		//	  "pattern": "^[a-zA-Z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique name that is associated with the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Network type of the InfluxDB Instance.",
		//	  "enum": [
		//	    "IPV4",
		//	    "DUAL"
		//	  ],
		//	  "type": "string"
		//	}
		"network_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Network type of the InfluxDB Instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Organization
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The organization for the InfluxDB instance.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"organization": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The organization for the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Password
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The password for the InfluxDB instance.",
		//	  "maxLength": 64,
		//	  "minLength": 8,
		//	  "pattern": "^[a-zA-Z0-9]+$",
		//	  "type": "string"
		//	}
		"password": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The password for the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Port
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The port number on which InfluxDB accepts connections.",
		//	  "maximum": 65535,
		//	  "minimum": 1024,
		//	  "type": "integer"
		//	}
		"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The port number on which InfluxDB accepts connections.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PubliclyAccessible
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "Attach a public IP to the customer ENI.",
		//	  "type": "boolean"
		//	}
		"publicly_accessible": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Attach a public IP to the customer ENI.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SecondaryAvailabilityZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Secondary Availability Zone (AZ) where the InfluxDB instance is created, if DeploymentType is set as WITH_MULTIAZ_STANDBY.",
		//	  "type": "string"
		//	}
		"secondary_availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Secondary Availability Zone (AZ) where the InfluxDB instance is created, if DeploymentType is set as WITH_MULTIAZ_STANDBY.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Status of the InfluxDB Instance.",
		//	  "enum": [
		//	    "CREATING",
		//	    "AVAILABLE",
		//	    "DELETING",
		//	    "MODIFYING",
		//	    "UPDATING",
		//	    "UPDATING_DEPLOYMENT_TYPE",
		//	    "UPDATING_INSTANCE_TYPE",
		//	    "DELETED",
		//	    "FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Status of the InfluxDB Instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An arbitrary set of tags (key-value pairs) for this DB instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "minItems": 1,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An arbitrary set of tags (key-value pairs) for this DB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Username
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The username for the InfluxDB instance.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"username": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The username for the InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcSecurityGroupIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of Amazon EC2 VPC security groups to associate with this InfluxDB instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "maxItems": 5,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"vpc_security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of Amazon EC2 VPC security groups to associate with this InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcSubnetIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of EC2 subnet IDs for this InfluxDB instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "maxItems": 3,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"vpc_subnet_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of EC2 subnet IDs for this InfluxDB instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Timestream::InfluxDBInstance",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Timestream::InfluxDBInstance").WithTerraformTypeName("awscc_timestream_influx_db_instance")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allocated_storage":                 "AllocatedStorage",
		"arn":                               "Arn",
		"availability_zone":                 "AvailabilityZone",
		"bucket":                            "Bucket",
		"bucket_name":                       "BucketName",
		"db_instance_type":                  "DbInstanceType",
		"db_parameter_group_identifier":     "DbParameterGroupIdentifier",
		"db_storage_type":                   "DbStorageType",
		"deployment_type":                   "DeploymentType",
		"enabled":                           "Enabled",
		"endpoint":                          "Endpoint",
		"influx_auth_parameters_secret_arn": "InfluxAuthParametersSecretArn",
		"influx_db_instance_id":             "Id",
		"key":                               "Key",
		"log_delivery_configuration":        "LogDeliveryConfiguration",
		"name":                              "Name",
		"network_type":                      "NetworkType",
		"organization":                      "Organization",
		"password":                          "Password",
		"port":                              "Port",
		"publicly_accessible":               "PubliclyAccessible",
		"s3_configuration":                  "S3Configuration",
		"secondary_availability_zone":       "SecondaryAvailabilityZone",
		"status":                            "Status",
		"tags":                              "Tags",
		"username":                          "Username",
		"value":                             "Value",
		"vpc_security_group_ids":            "VpcSecurityGroupIds",
		"vpc_subnet_ids":                    "VpcSubnetIds",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
