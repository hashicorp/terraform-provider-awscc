// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package securitylake

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_securitylake_subscriber_notification", subscriberNotificationDataSource)
}

// subscriberNotificationDataSource returns the Terraform awscc_securitylake_subscriber_notification data source.
// This Terraform data source corresponds to the CloudFormation AWS::SecurityLake::SubscriberNotification resource.
func subscriberNotificationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: NotificationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "oneOf": [
		//	    {
		//	      "required": [
		//	        "HttpsNotificationConfiguration"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "SqsNotificationConfiguration"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "HttpsNotificationConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "The configuration for HTTPS subscriber notification.",
		//	      "properties": {
		//	        "AuthorizationApiKeyName": {
		//	          "description": "The key name for the notification subscription.",
		//	          "type": "string"
		//	        },
		//	        "AuthorizationApiKeyValue": {
		//	          "description": "The key value for the notification subscription.",
		//	          "type": "string"
		//	        },
		//	        "Endpoint": {
		//	          "description": "The subscription endpoint in Security Lake.",
		//	          "pattern": "^https?://.+$",
		//	          "type": "string"
		//	        },
		//	        "HttpMethod": {
		//	          "description": "The HTTPS method used for the notification subscription.",
		//	          "enum": [
		//	            "POST",
		//	            "PUT"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "TargetRoleArn": {
		//	          "description": "The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created.",
		//	          "pattern": "^arn:.*$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Endpoint",
		//	        "TargetRoleArn"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "SqsNotificationConfiguration": {
		//	      "description": "The configurations for SQS subscriber notification. The members of this structure are context-dependent.",
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"notification_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: HttpsNotificationConfiguration
				"https_notification_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AuthorizationApiKeyName
						"authorization_api_key_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The key name for the notification subscription.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: AuthorizationApiKeyValue
						"authorization_api_key_value": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The key value for the notification subscription.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Endpoint
						"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The subscription endpoint in Security Lake.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: HttpMethod
						"http_method": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The HTTPS method used for the notification subscription.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TargetRoleArn
						"target_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The configuration for HTTPS subscriber notification.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SqsNotificationConfiguration
				"sqs_notification_configuration": schema.StringAttribute{ /*START ATTRIBUTE*/
					CustomType:  jsontypes.NormalizedType{},
					Description: "The configurations for SQS subscriber notification. The members of this structure are context-dependent.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SubscriberArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN for the subscriber",
		//	  "pattern": "^arn:.*$",
		//	  "type": "string"
		//	}
		"subscriber_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN for the subscriber",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SubscriberEndpoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The endpoint the subscriber should listen to for notifications",
		//	  "type": "string"
		//	}
		"subscriber_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The endpoint the subscriber should listen to for notifications",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SecurityLake::SubscriberNotification",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SecurityLake::SubscriberNotification").WithTerraformTypeName("awscc_securitylake_subscriber_notification")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"authorization_api_key_name":       "AuthorizationApiKeyName",
		"authorization_api_key_value":      "AuthorizationApiKeyValue",
		"endpoint":                         "Endpoint",
		"http_method":                      "HttpMethod",
		"https_notification_configuration": "HttpsNotificationConfiguration",
		"notification_configuration":       "NotificationConfiguration",
		"sqs_notification_configuration":   "SqsNotificationConfiguration",
		"subscriber_arn":                   "SubscriberArn",
		"subscriber_endpoint":              "SubscriberEndpoint",
		"target_role_arn":                  "TargetRoleArn",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
