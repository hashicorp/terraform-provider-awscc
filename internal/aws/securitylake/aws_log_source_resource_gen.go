// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package securitylake

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_securitylake_aws_log_source", awsLogSourceResource)
	registry.AddListResourceFactory("awscc_securitylake_aws_log_source", generic.NewListResource(awsLogSourceResource))
}

// awsLogSourceResource returns the Terraform awscc_securitylake_aws_log_source resource.
// This Terraform resource corresponds to the CloudFormation AWS::SecurityLake::AwsLogSource resource.
func awsLogSourceResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Accounts
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "AWS account where you want to collect logs from.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "pattern": "^[0-9]{12}$",
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"accounts": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "AWS account where you want to collect logs from.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.ValueStringsAre(
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9]{12}$"), ""),
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DataLakeArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN for the data lake.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"data_lake_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN for the data lake.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 256),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SourceName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name for a AWS source. This must be a Regionally unique value.",
		//	  "type": "string"
		//	}
		"source_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name for a AWS source. This must be a Regionally unique value.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SourceVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The version for a AWS source. This must be a Regionally unique value.",
		//	  "pattern": "^(latest|[0-9]\\.[0-9])$",
		//	  "type": "string"
		//	}
		"source_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The version for a AWS source. This must be a Regionally unique value.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^(latest|[0-9]\\.[0-9])$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::SecurityLake::AwsLogSource",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SecurityLake::AwsLogSource").WithTerraformTypeName("awscc_securitylake_aws_log_source")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "source_name",
			Description:       "The name for a AWS source",
			RequiredForImport: true,
		},
		identity.Identifier{
			Name:              "source_version",
			Description:       "The version for a AWS source",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"accounts":       "Accounts",
		"data_lake_arn":  "DataLakeArn",
		"source_name":    "SourceName",
		"source_version": "SourceVersion",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
