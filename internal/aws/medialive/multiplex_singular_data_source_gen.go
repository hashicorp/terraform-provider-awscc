// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package medialive

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_medialive_multiplex", multiplexDataSource)
}

// multiplexDataSource returns the Terraform awscc_medialive_multiplex data source.
// This Terraform data source corresponds to the CloudFormation AWS::MediaLive::Multiplex resource.
func multiplexDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique arn of the multiplex.",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique arn of the multiplex.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZones
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of availability zones for the multiplex.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"availability_zones": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of availability zones for the multiplex.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Destinations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of the multiplex output destinations.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Multiplex MediaConnect output destination settings.",
		//	    "properties": {
		//	      "MultiplexMediaConnectOutputDestinationSettings": {
		//	        "additionalProperties": false,
		//	        "description": "Multiplex MediaConnect output destination settings.",
		//	        "properties": {
		//	          "EntitlementArn": {
		//	            "description": "The MediaConnect entitlement ARN available as a Flow source.",
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        }
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"destinations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: MultiplexMediaConnectOutputDestinationSettings
					"multiplex_media_connect_output_destination_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: EntitlementArn
							"entitlement_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The MediaConnect entitlement ARN available as a Flow source.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Multiplex MediaConnect output destination settings.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of the multiplex output destinations.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique id of the multiplex.",
		//	  "type": "string"
		//	}
		"multiplex_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique id of the multiplex.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MultiplexSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration for a multiplex event.",
		//	  "properties": {
		//	    "MaximumVideoBufferDelayMilliseconds": {
		//	      "description": "Maximum video buffer delay in milliseconds.",
		//	      "maximum": 3000,
		//	      "minimum": 800,
		//	      "type": "integer"
		//	    },
		//	    "TransportStreamBitrate": {
		//	      "description": "Transport stream bit rate.",
		//	      "maximum": 100000000,
		//	      "minimum": 1000000,
		//	      "type": "integer"
		//	    },
		//	    "TransportStreamId": {
		//	      "description": "Transport stream ID.",
		//	      "maximum": 65535,
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    },
		//	    "TransportStreamReservedBitrate": {
		//	      "description": "Transport stream reserved bit rate.",
		//	      "maximum": 100000000,
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "TransportStreamBitrate",
		//	    "TransportStreamId"
		//	  ],
		//	  "type": "object"
		//	}
		"multiplex_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MaximumVideoBufferDelayMilliseconds
				"maximum_video_buffer_delay_milliseconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Maximum video buffer delay in milliseconds.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TransportStreamBitrate
				"transport_stream_bitrate": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Transport stream bit rate.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TransportStreamId
				"transport_stream_id": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Transport stream ID.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TransportStreamReservedBitrate
				"transport_stream_reserved_bitrate": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Transport stream reserved bit rate.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration for a multiplex event.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of multiplex.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of multiplex.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PipelinesRunningCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of currently healthy pipelines.",
		//	  "type": "integer"
		//	}
		"pipelines_running_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of currently healthy pipelines.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProgramCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of programs in the multiplex.",
		//	  "type": "integer"
		//	}
		"program_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of programs in the multiplex.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: State
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "CREATING",
		//	    "CREATE_FAILED",
		//	    "IDLE",
		//	    "STARTING",
		//	    "RUNNING",
		//	    "RECOVERING",
		//	    "STOPPING",
		//	    "DELETING",
		//	    "DELETED"
		//	  ],
		//	  "type": "string"
		//	}
		"state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A collection of key-value pairs.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A collection of key-value pairs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::MediaLive::Multiplex",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::MediaLive::Multiplex").WithTerraformTypeName("awscc_medialive_multiplex")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                "Arn",
		"availability_zones": "AvailabilityZones",
		"destinations":       "Destinations",
		"entitlement_arn":    "EntitlementArn",
		"key":                "Key",
		"maximum_video_buffer_delay_milliseconds": "MaximumVideoBufferDelayMilliseconds",
		"multiplex_id": "Id",
		"multiplex_media_connect_output_destination_settings": "MultiplexMediaConnectOutputDestinationSettings",
		"multiplex_settings":                "MultiplexSettings",
		"name":                              "Name",
		"pipelines_running_count":           "PipelinesRunningCount",
		"program_count":                     "ProgramCount",
		"state":                             "State",
		"tags":                              "Tags",
		"transport_stream_bitrate":          "TransportStreamBitrate",
		"transport_stream_id":               "TransportStreamId",
		"transport_stream_reserved_bitrate": "TransportStreamReservedBitrate",
		"value":                             "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
