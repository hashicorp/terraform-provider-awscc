// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ecs

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ecs_cluster_capacity_provider_associations", clusterCapacityProviderAssociationsDataSource)
}

// clusterCapacityProviderAssociationsDataSource returns the Terraform awscc_ecs_cluster_capacity_provider_associations data source.
// This Terraform data source corresponds to the CloudFormation AWS::ECS::ClusterCapacityProviderAssociations resource.
func clusterCapacityProviderAssociationsDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CapacityProviders
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of capacity providers to associate with the cluster",
		//	  "items": {
		//	    "anyOf": [
		//	      {},
		//	      {}
		//	    ],
		//	    "description": "If using ec2 auto-scaling, the name of the associated capacity provider. Otherwise FARGATE, FARGATE_SPOT.",
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"capacity_providers": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "List of capacity providers to associate with the cluster",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Cluster
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the cluster",
		//	  "maxLength": 2048,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"cluster": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the cluster",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DefaultCapacityProviderStrategy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of capacity providers to associate with the cluster",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Base": {
		//	        "maximum": 100000,
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      },
		//	      "CapacityProvider": {
		//	        "anyOf": [
		//	          {},
		//	          {}
		//	        ],
		//	        "description": "If using ec2 auto-scaling, the name of the associated capacity provider. Otherwise FARGATE, FARGATE_SPOT.",
		//	        "type": "string"
		//	      },
		//	      "Weight": {
		//	        "maximum": 1000,
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      }
		//	    },
		//	    "required": [
		//	      "CapacityProvider"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"default_capacity_provider_strategy": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Base
					"base": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: CapacityProvider
					"capacity_provider": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "If using ec2 auto-scaling, the name of the associated capacity provider. Otherwise FARGATE, FARGATE_SPOT.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Weight
					"weight": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of capacity providers to associate with the cluster",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ECS::ClusterCapacityProviderAssociations",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ECS::ClusterCapacityProviderAssociations").WithTerraformTypeName("awscc_ecs_cluster_capacity_provider_associations")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"base":                               "Base",
		"capacity_provider":                  "CapacityProvider",
		"capacity_providers":                 "CapacityProviders",
		"cluster":                            "Cluster",
		"default_capacity_provider_strategy": "DefaultCapacityProviderStrategy",
		"weight":                             "Weight",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
