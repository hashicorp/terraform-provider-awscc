// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package appsync

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_appsync_source_api_association", sourceApiAssociationDataSource)
}

// sourceApiAssociationDataSource returns the Terraform awscc_appsync_source_api_association data source.
// This Terraform data source corresponds to the CloudFormation AWS::AppSync::SourceApiAssociation resource.
func sourceApiAssociationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AssociationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN of the SourceApiAssociation.",
		//	  "type": "string"
		//	}
		"association_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN of the SourceApiAssociation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AssociationId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Id of the SourceApiAssociation.",
		//	  "type": "string"
		//	}
		"association_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Id of the SourceApiAssociation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Description of the SourceApiAssociation.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Description of the SourceApiAssociation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastSuccessfulMergeDate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Date of last schema successful merge.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"last_successful_merge_date": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Date of last schema successful merge.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MergedApiArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN of the Merged API in the association.",
		//	  "pattern": "^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$",
		//	  "type": "string"
		//	}
		"merged_api_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN of the Merged API in the association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MergedApiId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "GraphQLApiId of the Merged API in the association.",
		//	  "type": "string"
		//	}
		"merged_api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "GraphQLApiId of the Merged API in the association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MergedApiIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Identifier of the Merged GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN",
		//	  "type": "string"
		//	}
		"merged_api_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Identifier of the Merged GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceApiArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN of the source API in the association.",
		//	  "pattern": "^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$",
		//	  "type": "string"
		//	}
		"source_api_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN of the source API in the association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceApiAssociationConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Customized configuration for SourceApiAssociation.",
		//	  "properties": {
		//	    "MergeType": {
		//	      "description": "Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.",
		//	      "enum": [
		//	        "AUTO_MERGE",
		//	        "MANUAL_MERGE"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  }
		//	}
		"source_api_association_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MergeType
				"merge_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Customized configuration for SourceApiAssociation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceApiAssociationStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Current status of SourceApiAssociation.",
		//	  "enum": [
		//	    "MERGE_SCHEDULED",
		//	    "MERGE_FAILED",
		//	    "MERGE_SUCCESS",
		//	    "MERGE_IN_PROGRESS",
		//	    "AUTO_MERGE_SCHEDULE_FAILED",
		//	    "DELETION_SCHEDULED",
		//	    "DELETION_IN_PROGRESS",
		//	    "DELETION_FAILED"
		//	  ],
		//	  "type": "string"
		//	}
		"source_api_association_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Current status of SourceApiAssociation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceApiAssociationStatusDetail
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Current SourceApiAssociation status details.",
		//	  "type": "string"
		//	}
		"source_api_association_status_detail": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Current SourceApiAssociation status details.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceApiId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "GraphQLApiId of the source API in the association.",
		//	  "type": "string"
		//	}
		"source_api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "GraphQLApiId of the source API in the association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceApiIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Identifier of the Source GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN",
		//	  "type": "string"
		//	}
		"source_api_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Identifier of the Source GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::AppSync::SourceApiAssociation",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppSync::SourceApiAssociation").WithTerraformTypeName("awscc_appsync_source_api_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"association_arn":                      "AssociationArn",
		"association_id":                       "AssociationId",
		"description":                          "Description",
		"last_successful_merge_date":           "LastSuccessfulMergeDate",
		"merge_type":                           "MergeType",
		"merged_api_arn":                       "MergedApiArn",
		"merged_api_id":                        "MergedApiId",
		"merged_api_identifier":                "MergedApiIdentifier",
		"source_api_arn":                       "SourceApiArn",
		"source_api_association_config":        "SourceApiAssociationConfig",
		"source_api_association_status":        "SourceApiAssociationStatus",
		"source_api_association_status_detail": "SourceApiAssociationStatusDetail",
		"source_api_id":                        "SourceApiId",
		"source_api_identifier":                "SourceApiIdentifier",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
