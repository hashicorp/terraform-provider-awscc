// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package appsync

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_appsync_api", apiDataSource)
}

// apiDataSource returns the Terraform awscc_appsync_api data source.
// This Terraform data source corresponds to the CloudFormation AWS::AppSync::Api resource.
func apiDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApiArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the AppSync Api",
		//	  "type": "string"
		//	}
		"api_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the AppSync Api",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApiId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier for the AppSync Api generated by the service",
		//	  "type": "string"
		//	}
		"api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier for the AppSync Api generated by the service",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Dns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A map of DNS names for the AppSync API.",
		//	  "properties": {
		//	    "Http": {
		//	      "type": "string"
		//	    },
		//	    "Realtime": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"dns": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Http
				"http": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Realtime
				"realtime": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A map of DNS names for the AppSync API.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EventConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The configuration for an Event Api",
		//	  "properties": {
		//	    "AuthProviders": {
		//	      "description": "A list of auth providers for the AppSync API.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "An auth provider for the AppSync API.",
		//	        "properties": {
		//	          "AuthType": {
		//	            "description": "Security configuration for your AppSync API.",
		//	            "enum": [
		//	              "AMAZON_COGNITO_USER_POOLS",
		//	              "AWS_IAM",
		//	              "API_KEY",
		//	              "OPENID_CONNECT",
		//	              "AWS_LAMBDA"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "CognitoConfig": {
		//	            "additionalProperties": false,
		//	            "description": "Optional authorization configuration for using Amazon Cognito user pools with your API endpoint.",
		//	            "properties": {
		//	              "AppIdClientRegex": {
		//	                "type": "string"
		//	              },
		//	              "AwsRegion": {
		//	                "type": "string"
		//	              },
		//	              "UserPoolId": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "UserPoolId",
		//	              "AwsRegion"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "LambdaAuthorizerConfig": {
		//	            "additionalProperties": false,
		//	            "description": "A LambdaAuthorizerConfig holds configuration on how to authorize AWS AppSync API access when using the AWS_LAMBDA authorizer mode. Be aware that an AWS AppSync API may have only one Lambda authorizer configured at a time.",
		//	            "properties": {
		//	              "AuthorizerResultTtlInSeconds": {
		//	                "maximum": 3600,
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              },
		//	              "AuthorizerUri": {
		//	                "type": "string"
		//	              },
		//	              "IdentityValidationExpression": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "AuthorizerUri"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "OpenIDConnectConfig": {
		//	            "additionalProperties": false,
		//	            "description": "The OpenID Connect configuration.",
		//	            "properties": {
		//	              "AuthTTL": {
		//	                "type": "number"
		//	              },
		//	              "ClientId": {
		//	                "type": "string"
		//	              },
		//	              "IatTTL": {
		//	                "type": "number"
		//	              },
		//	              "Issuer": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Issuer"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "AuthType"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "ConnectionAuthModes": {
		//	      "description": "A list of auth modes for the AppSync API.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "An auth mode.",
		//	        "properties": {
		//	          "AuthType": {
		//	            "description": "Security configuration for your AppSync API.",
		//	            "enum": [
		//	              "AMAZON_COGNITO_USER_POOLS",
		//	              "AWS_IAM",
		//	              "API_KEY",
		//	              "OPENID_CONNECT",
		//	              "AWS_LAMBDA"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "DefaultPublishAuthModes": {
		//	      "description": "A list of auth modes for the AppSync API.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "An auth mode.",
		//	        "properties": {
		//	          "AuthType": {
		//	            "description": "Security configuration for your AppSync API.",
		//	            "enum": [
		//	              "AMAZON_COGNITO_USER_POOLS",
		//	              "AWS_IAM",
		//	              "API_KEY",
		//	              "OPENID_CONNECT",
		//	              "AWS_LAMBDA"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "DefaultSubscribeAuthModes": {
		//	      "description": "A list of auth modes for the AppSync API.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "An auth mode.",
		//	        "properties": {
		//	          "AuthType": {
		//	            "description": "Security configuration for your AppSync API.",
		//	            "enum": [
		//	              "AMAZON_COGNITO_USER_POOLS",
		//	              "AWS_IAM",
		//	              "API_KEY",
		//	              "OPENID_CONNECT",
		//	              "AWS_LAMBDA"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "LogConfig": {
		//	      "additionalProperties": false,
		//	      "description": "The log config for the AppSync API.",
		//	      "properties": {
		//	        "CloudWatchLogsRoleArn": {
		//	          "type": "string"
		//	        },
		//	        "LogLevel": {
		//	          "description": "Logging level for the AppSync API.",
		//	          "enum": [
		//	            "NONE",
		//	            "ERROR",
		//	            "ALL",
		//	            "INFO",
		//	            "DEBUG"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "LogLevel",
		//	        "CloudWatchLogsRoleArn"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "AuthProviders",
		//	    "ConnectionAuthModes",
		//	    "DefaultPublishAuthModes",
		//	    "DefaultSubscribeAuthModes"
		//	  ],
		//	  "type": "object"
		//	}
		"event_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AuthProviders
				"auth_providers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AuthType
							"auth_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Security configuration for your AppSync API.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: CognitoConfig
							"cognito_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AppIdClientRegex
									"app_id_client_regex": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: AwsRegion
									"aws_region": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: UserPoolId
									"user_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Optional authorization configuration for using Amazon Cognito user pools with your API endpoint.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: LambdaAuthorizerConfig
							"lambda_authorizer_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AuthorizerResultTtlInSeconds
									"authorizer_result_ttl_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: AuthorizerUri
									"authorizer_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: IdentityValidationExpression
									"identity_validation_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "A LambdaAuthorizerConfig holds configuration on how to authorize AWS AppSync API access when using the AWS_LAMBDA authorizer mode. Be aware that an AWS AppSync API may have only one Lambda authorizer configured at a time.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: OpenIDConnectConfig
							"open_id_connect_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AuthTTL
									"auth_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ClientId
									"client_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: IatTTL
									"iat_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Issuer
									"issuer": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "The OpenID Connect configuration.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A list of auth providers for the AppSync API.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ConnectionAuthModes
				"connection_auth_modes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AuthType
							"auth_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Security configuration for your AppSync API.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A list of auth modes for the AppSync API.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: DefaultPublishAuthModes
				"default_publish_auth_modes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AuthType
							"auth_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Security configuration for your AppSync API.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A list of auth modes for the AppSync API.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: DefaultSubscribeAuthModes
				"default_subscribe_auth_modes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AuthType
							"auth_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Security configuration for your AppSync API.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "A list of auth modes for the AppSync API.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: LogConfig
				"log_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CloudWatchLogsRoleArn
						"cloudwatch_logs_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LogLevel
						"log_level": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Logging level for the AppSync API.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The log config for the AppSync API.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The configuration for an Event Api",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the AppSync API.",
		//	  "maxLength": 50,
		//	  "minLength": 1,
		//	  "pattern": "[A-Za-z0-9_\\-\\ ]+",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the AppSync API.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OwnerContact
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The owner contact information for an API resource.",
		//	  "maxLength": 250,
		//	  "minLength": 1,
		//	  "pattern": "[A-Za-z0-9_\\-\\ \\.]+",
		//	  "type": "string"
		//	}
		"owner_contact": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The owner contact information for an API resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An arbitrary set of tags (key-value pairs) for this AppSync API.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An arbitrary set of tags (key-value pairs) for this AppSync API.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "A string used to identify this tag. You can specify a maximum of 128 characters for a tag key.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "pattern": "^[\\s\\w+-=\\.:/@]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A string used to identify this tag. You can specify a maximum of 128 characters for a tag key.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An arbitrary set of tags (key-value pairs) for this AppSync API.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::AppSync::Api",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppSync::Api").WithTerraformTypeName("awscc_appsync_api")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"api_arn":                          "ApiArn",
		"api_id":                           "ApiId",
		"app_id_client_regex":              "AppIdClientRegex",
		"auth_providers":                   "AuthProviders",
		"auth_ttl":                         "AuthTTL",
		"auth_type":                        "AuthType",
		"authorizer_result_ttl_in_seconds": "AuthorizerResultTtlInSeconds",
		"authorizer_uri":                   "AuthorizerUri",
		"aws_region":                       "AwsRegion",
		"client_id":                        "ClientId",
		"cloudwatch_logs_role_arn":         "CloudWatchLogsRoleArn",
		"cognito_config":                   "CognitoConfig",
		"connection_auth_modes":            "ConnectionAuthModes",
		"default_publish_auth_modes":       "DefaultPublishAuthModes",
		"default_subscribe_auth_modes":     "DefaultSubscribeAuthModes",
		"dns":                              "Dns",
		"event_config":                     "EventConfig",
		"http":                             "Http",
		"iat_ttl":                          "IatTTL",
		"identity_validation_expression":   "IdentityValidationExpression",
		"issuer":                           "Issuer",
		"key":                              "Key",
		"lambda_authorizer_config":         "LambdaAuthorizerConfig",
		"log_config":                       "LogConfig",
		"log_level":                        "LogLevel",
		"name":                             "Name",
		"open_id_connect_config":           "OpenIDConnectConfig",
		"owner_contact":                    "OwnerContact",
		"realtime":                         "Realtime",
		"tags":                             "Tags",
		"user_pool_id":                     "UserPoolId",
		"value":                            "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
