// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package appsync

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_appsync_data_source", dataSourceResource)
}

// dataSourceResource returns the Terraform awscc_appsync_data_source resource.
// This Terraform resource corresponds to the CloudFormation AWS::AppSync::DataSource resource.
func dataSourceResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApiId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Unique AWS AppSync GraphQL API identifier where this data source will be created.",
		//	  "type": "string"
		//	}
		"api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Unique AWS AppSync GraphQL API identifier where this data source will be created.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DataSourceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the API key, such as arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/datasources/datasourcename.",
		//	  "type": "string"
		//	}
		"data_source_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the API key, such as arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/datasources/datasourcename.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the data source.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the data source.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DynamoDBConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "AWS Region and TableName for an Amazon DynamoDB table in your account.",
		//	  "properties": {
		//	    "AwsRegion": {
		//	      "description": "The AWS Region.",
		//	      "type": "string"
		//	    },
		//	    "DeltaSyncConfig": {
		//	      "additionalProperties": false,
		//	      "description": "The DeltaSyncConfig for a versioned datasource.",
		//	      "properties": {
		//	        "BaseTableTTL": {
		//	          "description": "The number of minutes that an Item is stored in the data source.",
		//	          "type": "string"
		//	        },
		//	        "DeltaSyncTableName": {
		//	          "description": "The Delta Sync table name.",
		//	          "type": "string"
		//	        },
		//	        "DeltaSyncTableTTL": {
		//	          "description": "The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "BaseTableTTL",
		//	        "DeltaSyncTableTTL",
		//	        "DeltaSyncTableName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "TableName": {
		//	      "description": "The table name.",
		//	      "type": "string"
		//	    },
		//	    "UseCallerCredentials": {
		//	      "description": "Set to TRUE to use AWS Identity and Access Management with this data source.",
		//	      "type": "boolean"
		//	    },
		//	    "Versioned": {
		//	      "description": "Set to TRUE to use Conflict Detection and Resolution with this data source.",
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "required": [
		//	    "TableName",
		//	    "AwsRegion"
		//	  ],
		//	  "type": "object"
		//	}
		"dynamo_db_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AwsRegion
				"aws_region": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The AWS Region.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: DeltaSyncConfig
				"delta_sync_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BaseTableTTL
						"base_table_ttl": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The number of minutes that an Item is stored in the data source.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DeltaSyncTableName
						"delta_sync_table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Delta Sync table name.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DeltaSyncTableTTL
						"delta_sync_table_ttl": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The DeltaSyncConfig for a versioned datasource.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TableName
				"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The table name.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: UseCallerCredentials
				"use_caller_credentials": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Set to TRUE to use AWS Identity and Access Management with this data source.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Versioned
				"versioned": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Set to TRUE to use Conflict Detection and Resolution with this data source.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "AWS Region and TableName for an Amazon DynamoDB table in your account.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ElasticsearchConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account.\nAs of September 2021, Amazon Elasticsearch Service is Amazon OpenSearch Service. This property is deprecated. For new data sources, use OpenSearchServiceConfig to specify an OpenSearch Service data source.",
		//	  "properties": {
		//	    "AwsRegion": {
		//	      "description": "The AWS Region.",
		//	      "type": "string"
		//	    },
		//	    "Endpoint": {
		//	      "description": "The endpoint.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "AwsRegion",
		//	    "Endpoint"
		//	  ],
		//	  "type": "object"
		//	}
		"elasticsearch_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AwsRegion
				"aws_region": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The AWS Region.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Endpoint
				"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The endpoint.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account.\nAs of September 2021, Amazon Elasticsearch Service is Amazon OpenSearch Service. This property is deprecated. For new data sources, use OpenSearchServiceConfig to specify an OpenSearch Service data source.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EventBridgeConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "ARN for the EventBridge bus.",
		//	  "properties": {
		//	    "EventBusArn": {
		//	      "description": "ARN for the EventBridge bus.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "EventBusArn"
		//	  ],
		//	  "type": "object"
		//	}
		"event_bridge_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EventBusArn
				"event_bus_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "ARN for the EventBridge bus.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "ARN for the EventBridge bus.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: HttpConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Endpoints for an HTTP data source.",
		//	  "properties": {
		//	    "AuthorizationConfig": {
		//	      "additionalProperties": false,
		//	      "description": "The authorization configuration.",
		//	      "properties": {
		//	        "AuthorizationType": {
		//	          "description": "The authorization type that the HTTP endpoint requires.",
		//	          "type": "string"
		//	        },
		//	        "AwsIamConfig": {
		//	          "additionalProperties": false,
		//	          "description": "The AWS Identity and Access Management settings.",
		//	          "properties": {
		//	            "SigningRegion": {
		//	              "description": "The signing Region for AWS Identity and Access Management authorization.",
		//	              "type": "string"
		//	            },
		//	            "SigningServiceName": {
		//	              "description": "The signing service name for AWS Identity and Access Management authorization.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "AuthorizationType"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Endpoint": {
		//	      "description": "The endpoint.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Endpoint"
		//	  ],
		//	  "type": "object"
		//	}
		"http_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AuthorizationConfig
				"authorization_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AuthorizationType
						"authorization_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The authorization type that the HTTP endpoint requires.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AwsIamConfig
						"aws_iam_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: SigningRegion
								"signing_region": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The signing Region for AWS Identity and Access Management authorization.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: SigningServiceName
								"signing_service_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The signing service name for AWS Identity and Access Management authorization.",
									Optional:    true,
									Computed:    true,
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "The AWS Identity and Access Management settings.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The authorization configuration.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Endpoint
				"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The endpoint.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Endpoints for an HTTP data source.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LambdaConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "An ARN of a Lambda function in valid ARN format. This can be the ARN of a Lambda function that exists in the current account or in another account.",
		//	  "properties": {
		//	    "LambdaFunctionArn": {
		//	      "description": "The ARN for the Lambda function.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "LambdaFunctionArn"
		//	  ],
		//	  "type": "object"
		//	}
		"lambda_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: LambdaFunctionArn
				"lambda_function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN for the Lambda function.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "An ARN of a Lambda function in valid ARN format. This can be the ARN of a Lambda function that exists in the current account or in another account.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MetricsConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "enum": [
		//	    "DISABLED",
		//	    "ENABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"metrics_config": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"DISABLED",
					"ENABLED",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Friendly name for you to identify your AppSync data source after creation.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Friendly name for you to identify your AppSync data source after creation.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: OpenSearchServiceConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account.",
		//	  "properties": {
		//	    "AwsRegion": {
		//	      "description": "The AWS Region.",
		//	      "type": "string"
		//	    },
		//	    "Endpoint": {
		//	      "description": "The endpoint.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "AwsRegion",
		//	    "Endpoint"
		//	  ],
		//	  "type": "object"
		//	}
		"open_search_service_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AwsRegion
				"aws_region": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The AWS Region.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Endpoint
				"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The endpoint.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "AWS Region and Endpoints for an Amazon OpenSearch Service domain in your account.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RelationalDatabaseConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Relational Database configuration of the relational database data source.",
		//	  "properties": {
		//	    "RdsHttpEndpointConfig": {
		//	      "additionalProperties": false,
		//	      "description": "Information about the Amazon RDS resource.",
		//	      "properties": {
		//	        "AwsRegion": {
		//	          "description": "AWS Region for RDS HTTP endpoint.",
		//	          "type": "string"
		//	        },
		//	        "AwsSecretStoreArn": {
		//	          "description": "The ARN for database credentials stored in AWS Secrets Manager.",
		//	          "type": "string"
		//	        },
		//	        "DatabaseName": {
		//	          "description": "Logical database name.",
		//	          "type": "string"
		//	        },
		//	        "DbClusterIdentifier": {
		//	          "description": "Amazon RDS cluster Amazon Resource Name (ARN).",
		//	          "type": "string"
		//	        },
		//	        "Schema": {
		//	          "description": "Logical schema name.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "AwsRegion",
		//	        "DbClusterIdentifier",
		//	        "AwsSecretStoreArn"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "RelationalDatabaseSourceType": {
		//	      "description": "The type of relational data source.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "RelationalDatabaseSourceType"
		//	  ],
		//	  "type": "object"
		//	}
		"relational_database_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: RdsHttpEndpointConfig
				"rds_http_endpoint_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AwsRegion
						"aws_region": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "AWS Region for RDS HTTP endpoint.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: AwsSecretStoreArn
						"aws_secret_store_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ARN for database credentials stored in AWS Secrets Manager.",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Logical database name.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: DbClusterIdentifier
						"db_cluster_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Amazon RDS cluster Amazon Resource Name (ARN).",
							Optional:    true,
							Computed:    true,
							Validators: []validator.String{ /*START VALIDATORS*/
								fwvalidators.NotNullString(),
							}, /*END VALIDATORS*/
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Schema
						"schema": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Logical schema name.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Information about the Amazon RDS resource.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: RelationalDatabaseSourceType
				"relational_database_source_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The type of relational data source.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Relational Database configuration of the relational database data source.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ServiceRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS Identity and Access Management service role ARN for the data source. The system assumes this role when accessing the data source.",
		//	  "type": "string"
		//	}
		"service_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS Identity and Access Management service role ARN for the data source. The system assumes this role when accessing the data source.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the data source.",
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the data source.",
			Required:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::AppSync::DataSource",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppSync::DataSource").WithTerraformTypeName("awscc_appsync_data_source")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "data_source_arn",
			Description:       "The Amazon Resource Name (ARN) of the API key, such as arn:aws:appsync:us-east-1:123456789012:apis/graphqlapiid/datasources/datasourcename",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"api_id":                          "ApiId",
		"authorization_config":            "AuthorizationConfig",
		"authorization_type":              "AuthorizationType",
		"aws_iam_config":                  "AwsIamConfig",
		"aws_region":                      "AwsRegion",
		"aws_secret_store_arn":            "AwsSecretStoreArn",
		"base_table_ttl":                  "BaseTableTTL",
		"data_source_arn":                 "DataSourceArn",
		"database_name":                   "DatabaseName",
		"db_cluster_identifier":           "DbClusterIdentifier",
		"delta_sync_config":               "DeltaSyncConfig",
		"delta_sync_table_name":           "DeltaSyncTableName",
		"delta_sync_table_ttl":            "DeltaSyncTableTTL",
		"description":                     "Description",
		"dynamo_db_config":                "DynamoDBConfig",
		"elasticsearch_config":            "ElasticsearchConfig",
		"endpoint":                        "Endpoint",
		"event_bridge_config":             "EventBridgeConfig",
		"event_bus_arn":                   "EventBusArn",
		"http_config":                     "HttpConfig",
		"lambda_config":                   "LambdaConfig",
		"lambda_function_arn":             "LambdaFunctionArn",
		"metrics_config":                  "MetricsConfig",
		"name":                            "Name",
		"open_search_service_config":      "OpenSearchServiceConfig",
		"rds_http_endpoint_config":        "RdsHttpEndpointConfig",
		"relational_database_config":      "RelationalDatabaseConfig",
		"relational_database_source_type": "RelationalDatabaseSourceType",
		"schema":                          "Schema",
		"service_role_arn":                "ServiceRoleArn",
		"signing_region":                  "SigningRegion",
		"signing_service_name":            "SigningServiceName",
		"table_name":                      "TableName",
		"type":                            "Type",
		"use_caller_credentials":          "UseCallerCredentials",
		"versioned":                       "Versioned",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
