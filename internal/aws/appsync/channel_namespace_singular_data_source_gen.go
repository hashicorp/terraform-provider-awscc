// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package appsync

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_appsync_channel_namespace", channelNamespaceDataSource)
}

// channelNamespaceDataSource returns the Terraform awscc_appsync_channel_namespace data source.
// This Terraform data source corresponds to the CloudFormation AWS::AppSync::ChannelNamespace resource.
func channelNamespaceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApiId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "AppSync Api Id that this Channel Namespace belongs to.",
		//	  "type": "string"
		//	}
		"api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "AppSync Api Id that this Channel Namespace belongs to.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ChannelNamespaceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) for the Channel Namespace.",
		//	  "type": "string"
		//	}
		"channel_namespace_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) for the Channel Namespace.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CodeHandlers
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "String of APPSYNC_JS code to be used by the handlers.",
		//	  "maxLength": 32768,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"code_handlers": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "String of APPSYNC_JS code to be used by the handlers.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CodeS3Location
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon S3 endpoint where the code is located.",
		//	  "type": "string"
		//	}
		"code_s3_location": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon S3 endpoint where the code is located.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Namespace indentifier.",
		//	  "maxLength": 50,
		//	  "minLength": 1,
		//	  "pattern": "([A-Za-z0-9](?:[A-Za-z0-9\\-]{0,48}[A-Za-z0-9])?)",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Namespace indentifier.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PublishAuthModes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of AuthModes supported for Publish operations.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An auth mode.",
		//	    "properties": {
		//	      "AuthType": {
		//	        "description": "Security configuration for your AppSync API.",
		//	        "enum": [
		//	          "AMAZON_COGNITO_USER_POOLS",
		//	          "AWS_IAM",
		//	          "API_KEY",
		//	          "OPENID_CONNECT",
		//	          "AWS_LAMBDA"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"publish_auth_modes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AuthType
					"auth_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Security configuration for your AppSync API.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of AuthModes supported for Publish operations.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SubscribeAuthModes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of AuthModes supported for Subscribe operations.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An auth mode.",
		//	    "properties": {
		//	      "AuthType": {
		//	        "description": "Security configuration for your AppSync API.",
		//	        "enum": [
		//	          "AMAZON_COGNITO_USER_POOLS",
		//	          "AWS_IAM",
		//	          "API_KEY",
		//	          "OPENID_CONNECT",
		//	          "AWS_LAMBDA"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"subscribe_auth_modes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AuthType
					"auth_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Security configuration for your AppSync API.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of AuthModes supported for Subscribe operations.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An arbitrary set of tags (key-value pairs) for this AppSync API.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An arbitrary set of tags (key-value pairs) for this AppSync API.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "A string used to identify this tag. You can specify a maximum of 128 characters for a tag key.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "pattern": "^[\\s\\w+-=\\.:/@]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A string used to identify this tag. You can specify a maximum of 128 characters for a tag key.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A string containing the value for this tag. You can specify a maximum of 256 characters for a tag value.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An arbitrary set of tags (key-value pairs) for this AppSync API.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::AppSync::ChannelNamespace",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppSync::ChannelNamespace").WithTerraformTypeName("awscc_appsync_channel_namespace")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"api_id":                "ApiId",
		"auth_type":             "AuthType",
		"channel_namespace_arn": "ChannelNamespaceArn",
		"code_handlers":         "CodeHandlers",
		"code_s3_location":      "CodeS3Location",
		"key":                   "Key",
		"name":                  "Name",
		"publish_auth_modes":    "PublishAuthModes",
		"subscribe_auth_modes":  "SubscribeAuthModes",
		"tags":                  "Tags",
		"value":                 "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
