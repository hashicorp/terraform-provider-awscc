// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package appsync

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_appsync_graph_ql_api", graphQLApiDataSource)
}

// graphQLApiDataSource returns the Terraform awscc_appsync_graph_ql_api data source.
// This Terraform data source corresponds to the CloudFormation AWS::AppSync::GraphQLApi resource.
func graphQLApiDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AdditionalAuthenticationProviders
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of additional authentication providers for the GraphqlApi API.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "AuthenticationType": {
		//	        "description": "The authentication type for API key, AWS Identity and Access Management, OIDC, Amazon Cognito user pools, or AWS Lambda.",
		//	        "type": "string"
		//	      },
		//	      "LambdaAuthorizerConfig": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AuthorizerResultTtlInSeconds": {
		//	            "description": "The number of seconds a response should be cached for.",
		//	            "type": "integer"
		//	          },
		//	          "AuthorizerUri": {
		//	            "description": "The ARN of the Lambda function to be called for authorization.",
		//	            "type": "string"
		//	          },
		//	          "IdentityValidationExpression": {
		//	            "description": "A regular expression for validation of tokens before the Lambda function is called.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "OpenIDConnectConfig": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AuthTTL": {
		//	            "description": "The number of milliseconds that a token is valid after being authenticated.",
		//	            "type": "number"
		//	          },
		//	          "ClientId": {
		//	            "description": "The client identifier of the Relying party at the OpenID identity provider.",
		//	            "type": "string"
		//	          },
		//	          "IatTTL": {
		//	            "description": "The number of milliseconds that a token is valid after it's issued to a user.\n\n",
		//	            "type": "number"
		//	          },
		//	          "Issuer": {
		//	            "description": "The issuer for the OIDC configuration. ",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "UserPoolConfig": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "AppIdClientRegex": {
		//	            "description": "A regular expression for validating the incoming Amazon Cognito user pool app client ID. ",
		//	            "type": "string"
		//	          },
		//	          "AwsRegion": {
		//	            "description": "The AWS Region in which the user pool was created.",
		//	            "type": "string"
		//	          },
		//	          "UserPoolId": {
		//	            "description": "The user pool ID",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "AuthenticationType"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"additional_authentication_providers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AuthenticationType
					"authentication_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The authentication type for API key, AWS Identity and Access Management, OIDC, Amazon Cognito user pools, or AWS Lambda.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: LambdaAuthorizerConfig
					"lambda_authorizer_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AuthorizerResultTtlInSeconds
							"authorizer_result_ttl_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The number of seconds a response should be cached for.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: AuthorizerUri
							"authorizer_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The ARN of the Lambda function to be called for authorization.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: IdentityValidationExpression
							"identity_validation_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A regular expression for validation of tokens before the Lambda function is called.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: OpenIDConnectConfig
					"open_id_connect_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AuthTTL
							"auth_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "The number of milliseconds that a token is valid after being authenticated.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ClientId
							"client_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The client identifier of the Relying party at the OpenID identity provider.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: IatTTL
							"iat_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "The number of milliseconds that a token is valid after it's issued to a user.\n\n",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Issuer
							"issuer": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The issuer for the OIDC configuration. ",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: UserPoolConfig
					"user_pool_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: AppIdClientRegex
							"app_id_client_regex": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "A regular expression for validating the incoming Amazon Cognito user pool app client ID. ",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: AwsRegion
							"aws_region": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The AWS Region in which the user pool was created.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: UserPoolId
							"user_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The user pool ID",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of additional authentication providers for the GraphqlApi API.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApiId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Unique AWS AppSync GraphQL API identifier.",
		//	  "type": "string"
		//	}
		"api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Unique AWS AppSync GraphQL API identifier.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApiType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The value that indicates whether the GraphQL API is a standard API (GRAPHQL) or merged API (MERGED).",
		//	  "type": "string"
		//	}
		"api_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The value that indicates whether the GraphQL API is a standard API (GRAPHQL) or merged API (MERGED).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the API key",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the API key",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AuthenticationType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Security configuration for your GraphQL API",
		//	  "type": "string"
		//	}
		"authentication_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Security configuration for your GraphQL API",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnhancedMetricsConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Enables and controls the enhanced metrics feature. Enhanced metrics emit granular data on API usage and performance such as AppSync request and error counts, latency, and cache hits/misses. All enhanced metric data is sent to your CloudWatch account, and you can configure the types of data that will be sent.",
		//	  "properties": {
		//	    "DataSourceLevelMetricsBehavior": {
		//	      "description": "Controls how data source metrics will be emitted to CloudWatch. Data source metrics include:\n\n",
		//	      "type": "string"
		//	    },
		//	    "OperationLevelMetricsConfig": {
		//	      "description": "Controls how operation metrics will be emitted to CloudWatch. Operation metrics include:\n\n",
		//	      "type": "string"
		//	    },
		//	    "ResolverLevelMetricsBehavior": {
		//	      "description": "Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics include:\n\n",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "OperationLevelMetricsConfig",
		//	    "ResolverLevelMetricsBehavior",
		//	    "DataSourceLevelMetricsBehavior"
		//	  ],
		//	  "type": "object"
		//	}
		"enhanced_metrics_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DataSourceLevelMetricsBehavior
				"data_source_level_metrics_behavior": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Controls how data source metrics will be emitted to CloudWatch. Data source metrics include:\n\n",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: OperationLevelMetricsConfig
				"operation_level_metrics_config": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Controls how operation metrics will be emitted to CloudWatch. Operation metrics include:\n\n",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ResolverLevelMetricsBehavior
				"resolver_level_metrics_behavior": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Controls how resolver metrics will be emitted to CloudWatch. Resolver metrics include:\n\n",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Enables and controls the enhanced metrics feature. Enhanced metrics emit granular data on API usage and performance such as AppSync request and error counts, latency, and cache hits/misses. All enhanced metric data is sent to your CloudWatch account, and you can configure the types of data that will be sent.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnvironmentVariables
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A map containing the list of resources with their properties and environment variables.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"environment_variables": // Pattern: ""
		schema.MapAttribute{     /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A map containing the list of resources with their properties and environment variables.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GraphQLDns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The fully qualified domain name (FQDN) of the endpoint URL of your GraphQL API.",
		//	  "type": "string"
		//	}
		"graph_ql_dns": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The fully qualified domain name (FQDN) of the endpoint URL of your GraphQL API.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GraphQLEndpointArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The GraphQL endpoint ARN.",
		//	  "type": "string"
		//	}
		"graph_ql_endpoint_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The GraphQL endpoint ARN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GraphQLUrl
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Endpoint URL of your GraphQL API.",
		//	  "type": "string"
		//	}
		"graph_ql_url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Endpoint URL of your GraphQL API.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IntrospectionConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Sets the value of the GraphQL API to enable (ENABLED) or disable (DISABLED) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled.",
		//	  "type": "string"
		//	}
		"introspection_config": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Sets the value of the GraphQL API to enable (ENABLED) or disable (DISABLED) introspection. If no value is provided, the introspection configuration will be set to ENABLED by default. This field will produce an error if the operation attempts to use the introspection feature while this field is disabled.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LambdaAuthorizerConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A LambdaAuthorizerConfig holds configuration on how to authorize AWS AppSync API access when using the AWS_LAMBDA authorizer mode. Be aware that an AWS AppSync API may have only one Lambda authorizer configured at a time.",
		//	  "properties": {
		//	    "AuthorizerResultTtlInSeconds": {
		//	      "description": "The number of seconds a response should be cached for.",
		//	      "type": "integer"
		//	    },
		//	    "AuthorizerUri": {
		//	      "description": "The ARN of the Lambda function to be called for authorization.",
		//	      "type": "string"
		//	    },
		//	    "IdentityValidationExpression": {
		//	      "description": "A regular expression for validation of tokens before the Lambda function is called.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"lambda_authorizer_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AuthorizerResultTtlInSeconds
				"authorizer_result_ttl_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The number of seconds a response should be cached for.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AuthorizerUri
				"authorizer_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the Lambda function to be called for authorization.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IdentityValidationExpression
				"identity_validation_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A regular expression for validation of tokens before the Lambda function is called.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A LambdaAuthorizerConfig holds configuration on how to authorize AWS AppSync API access when using the AWS_LAMBDA authorizer mode. Be aware that an AWS AppSync API may have only one Lambda authorizer configured at a time.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LogConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The Amazon CloudWatch Logs configuration.",
		//	  "properties": {
		//	    "CloudWatchLogsRoleArn": {
		//	      "description": "The service role that AWS AppSync will assume to publish to Amazon CloudWatch Logs in your account.",
		//	      "type": "string"
		//	    },
		//	    "ExcludeVerboseContent": {
		//	      "description": "Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.",
		//	      "type": "boolean"
		//	    },
		//	    "FieldLogLevel": {
		//	      "description": "The field logging level. Values can be NONE, ERROR, INFO, DEBUG, or ALL.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"log_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CloudWatchLogsRoleArn
				"cloudwatch_logs_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The service role that AWS AppSync will assume to publish to Amazon CloudWatch Logs in your account.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ExcludeVerboseContent
				"exclude_verbose_content": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: FieldLogLevel
				"field_log_level": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The field logging level. Values can be NONE, ERROR, INFO, DEBUG, or ALL.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The Amazon CloudWatch Logs configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MergedApiExecutionRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS Identity and Access Management service role ARN for a merged API. ",
		//	  "type": "string"
		//	}
		"merged_api_execution_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS Identity and Access Management service role ARN for a merged API. ",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The API name",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The API name",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OpenIDConnectConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The OpenID Connect configuration.",
		//	  "properties": {
		//	    "AuthTTL": {
		//	      "description": "The number of milliseconds that a token is valid after being authenticated.",
		//	      "type": "number"
		//	    },
		//	    "ClientId": {
		//	      "description": "The client identifier of the Relying party at the OpenID identity provider.",
		//	      "type": "string"
		//	    },
		//	    "IatTTL": {
		//	      "description": "The number of milliseconds that a token is valid after it's issued to a user.\n\n",
		//	      "type": "number"
		//	    },
		//	    "Issuer": {
		//	      "description": "The issuer for the OIDC configuration. ",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"open_id_connect_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AuthTTL
				"auth_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "The number of milliseconds that a token is valid after being authenticated.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ClientId
				"client_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The client identifier of the Relying party at the OpenID identity provider.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: IatTTL
				"iat_ttl": schema.Float64Attribute{ /*START ATTRIBUTE*/
					Description: "The number of milliseconds that a token is valid after it's issued to a user.\n\n",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Issuer
				"issuer": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The issuer for the OIDC configuration. ",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The OpenID Connect configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OwnerContact
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The owner contact information for an API resource.",
		//	  "type": "string"
		//	}
		"owner_contact": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The owner contact information for an API resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: QueryDepthLimit
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query.",
		//	  "type": "integer"
		//	}
		"query_depth_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum depth a query can have in a single request. Depth refers to the amount of nested levels allowed in the body of query.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RealtimeDns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The fully qualified domain name (FQDN) of the real-time endpoint URL of your GraphQL API.",
		//	  "type": "string"
		//	}
		"realtime_dns": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The fully qualified domain name (FQDN) of the real-time endpoint URL of your GraphQL API.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RealtimeUrl
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The GraphQL API real-time endpoint URL.",
		//	  "type": "string"
		//	}
		"realtime_url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The GraphQL API real-time endpoint URL.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResolverCountLimit
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum number of resolvers that can be invoked in a single request.",
		//	  "type": "integer"
		//	}
		"resolver_count_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum number of resolvers that can be invoked in a single request.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An arbitrary set of tags (key-value pairs) for this GraphQL API.\n\n",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An arbitrary set of tags (key-value pairs) for this GraphQL API.\n\n",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UserPoolConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Optional authorization configuration for using Amazon Cognito user pools with your GraphQL endpoint.\n\n",
		//	  "properties": {
		//	    "AppIdClientRegex": {
		//	      "description": "A regular expression for validating the incoming Amazon Cognito user pool app client ID.",
		//	      "type": "string"
		//	    },
		//	    "AwsRegion": {
		//	      "description": "The AWS Region in which the user pool was created.",
		//	      "type": "string"
		//	    },
		//	    "DefaultAction": {
		//	      "description": "The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.",
		//	      "type": "string"
		//	    },
		//	    "UserPoolId": {
		//	      "description": "The user pool ID.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"user_pool_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AppIdClientRegex
				"app_id_client_regex": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A regular expression for validating the incoming Amazon Cognito user pool app client ID.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: AwsRegion
				"aws_region": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The AWS Region in which the user pool was created.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: DefaultAction
				"default_action": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UserPoolId
				"user_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The user pool ID.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Optional authorization configuration for using Amazon Cognito user pools with your GraphQL endpoint.\n\n",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Visibility
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Sets the scope of the GraphQL API to public (GLOBAL) or private (PRIVATE). By default, the scope is set to Global if no value is provided.",
		//	  "type": "string"
		//	}
		"visibility": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Sets the scope of the GraphQL API to public (GLOBAL) or private (PRIVATE). By default, the scope is set to Global if no value is provided.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: XrayEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A flag indicating whether to use AWS X-Ray tracing for this GraphqlApi.\n\n",
		//	  "type": "boolean"
		//	}
		"xray_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "A flag indicating whether to use AWS X-Ray tracing for this GraphqlApi.\n\n",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::AppSync::GraphQLApi",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppSync::GraphQLApi").WithTerraformTypeName("awscc_appsync_graph_ql_api")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"additional_authentication_providers": "AdditionalAuthenticationProviders",
		"api_id":                              "ApiId",
		"api_type":                            "ApiType",
		"app_id_client_regex":                 "AppIdClientRegex",
		"arn":                                 "Arn",
		"auth_ttl":                            "AuthTTL",
		"authentication_type":                 "AuthenticationType",
		"authorizer_result_ttl_in_seconds":    "AuthorizerResultTtlInSeconds",
		"authorizer_uri":                      "AuthorizerUri",
		"aws_region":                          "AwsRegion",
		"client_id":                           "ClientId",
		"cloudwatch_logs_role_arn":            "CloudWatchLogsRoleArn",
		"data_source_level_metrics_behavior":  "DataSourceLevelMetricsBehavior",
		"default_action":                      "DefaultAction",
		"enhanced_metrics_config":             "EnhancedMetricsConfig",
		"environment_variables":               "EnvironmentVariables",
		"exclude_verbose_content":             "ExcludeVerboseContent",
		"field_log_level":                     "FieldLogLevel",
		"graph_ql_dns":                        "GraphQLDns",
		"graph_ql_endpoint_arn":               "GraphQLEndpointArn",
		"graph_ql_url":                        "GraphQLUrl",
		"iat_ttl":                             "IatTTL",
		"identity_validation_expression":      "IdentityValidationExpression",
		"introspection_config":                "IntrospectionConfig",
		"issuer":                              "Issuer",
		"key":                                 "Key",
		"lambda_authorizer_config":            "LambdaAuthorizerConfig",
		"log_config":                          "LogConfig",
		"merged_api_execution_role_arn":       "MergedApiExecutionRoleArn",
		"name":                                "Name",
		"open_id_connect_config":              "OpenIDConnectConfig",
		"operation_level_metrics_config":      "OperationLevelMetricsConfig",
		"owner_contact":                       "OwnerContact",
		"query_depth_limit":                   "QueryDepthLimit",
		"realtime_dns":                        "RealtimeDns",
		"realtime_url":                        "RealtimeUrl",
		"resolver_count_limit":                "ResolverCountLimit",
		"resolver_level_metrics_behavior":     "ResolverLevelMetricsBehavior",
		"tags":                                "Tags",
		"user_pool_config":                    "UserPoolConfig",
		"user_pool_id":                        "UserPoolId",
		"value":                               "Value",
		"visibility":                          "Visibility",
		"xray_enabled":                        "XrayEnabled",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
