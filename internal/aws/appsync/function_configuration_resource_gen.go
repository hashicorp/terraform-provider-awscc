// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package appsync

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_appsync_function_configuration", functionConfigurationResource)
}

// functionConfigurationResource returns the Terraform awscc_appsync_function_configuration resource.
// This Terraform resource corresponds to the CloudFormation AWS::AppSync::FunctionConfiguration resource.
func functionConfigurationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApiId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS AppSync GraphQL API that you want to attach using this function.",
		//	  "type": "string"
		//	}
		"api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS AppSync GraphQL API that you want to attach using this function.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Code
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.",
		//	  "type": "string"
		//	}
		"code": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CodeS3Location
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon S3 endpoint (where the code is located??).",
		//	  "type": "string"
		//	}
		"code_s3_location": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon S3 endpoint (where the code is located??).",
			Optional:    true,
			// CodeS3Location is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: DataSourceName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of data source this function will attach.",
		//	  "type": "string"
		//	}
		"data_source_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of data source this function will attach.",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The function description.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The function description.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: FunctionArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN for the function generated by the service",
		//	  "type": "string"
		//	}
		"function_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN for the function generated by the service",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: FunctionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier for the function generated by the service",
		//	  "type": "string"
		//	}
		"function_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier for the function generated by the service",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: FunctionVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.",
		//	  "type": "string"
		//	}
		"function_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MaxBatchSize
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.",
		//	  "type": "integer"
		//	}
		"max_batch_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the function.",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the function.",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: RequestMappingTemplate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.",
		//	  "type": "string"
		//	}
		"request_mapping_template": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RequestMappingTemplateS3Location
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.",
		//	  "type": "string"
		//	}
		"request_mapping_template_s3_location": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.",
			Optional:    true,
			// RequestMappingTemplateS3Location is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: ResponseMappingTemplate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Function response mapping template.",
		//	  "type": "string"
		//	}
		"response_mapping_template": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Function response mapping template.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ResponseMappingTemplateS3Location
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.",
		//	  "type": "string"
		//	}
		"response_mapping_template_s3_location": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.",
			Optional:    true,
			// ResponseMappingTemplateS3Location is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Runtime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.",
		//	  "properties": {
		//	    "Name": {
		//	      "description": "The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.",
		//	      "type": "string"
		//	    },
		//	    "RuntimeVersion": {
		//	      "description": "The version of the runtime to use. Currently, the only allowed version is 1.0.0.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Name",
		//	    "RuntimeVersion"
		//	  ],
		//	  "type": "object"
		//	}
		"runtime": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Name
				"name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: RuntimeVersion
				"runtime_version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The version of the runtime to use. Currently, the only allowed version is 1.0.0.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SyncConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.",
		//	  "properties": {
		//	    "ConflictDetection": {
		//	      "description": "The Conflict Detection strategy to use.",
		//	      "type": "string"
		//	    },
		//	    "ConflictHandler": {
		//	      "description": "The Conflict Resolution strategy to perform in the event of a conflict.",
		//	      "type": "string"
		//	    },
		//	    "LambdaConflictHandlerConfig": {
		//	      "additionalProperties": false,
		//	      "description": "The LambdaConflictHandlerConfig when configuring LAMBDA as the Conflict Handler.",
		//	      "properties": {
		//	        "LambdaConflictHandlerArn": {
		//	          "description": "The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "ConflictDetection"
		//	  ],
		//	  "type": "object"
		//	}
		"sync_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ConflictDetection
				"conflict_detection": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Conflict Detection strategy to use.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ConflictHandler
				"conflict_handler": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Conflict Resolution strategy to perform in the event of a conflict.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LambdaConflictHandlerConfig
				"lambda_conflict_handler_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: LambdaConflictHandlerArn
						"lambda_conflict_handler_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
								stringplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The LambdaConflictHandlerConfig when configuring LAMBDA as the Conflict Handler.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "An example resource schema demonstrating some basic constructs and validation rules.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::AppSync::FunctionConfiguration").WithTerraformTypeName("awscc_appsync_function_configuration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"api_id":                                "ApiId",
		"code":                                  "Code",
		"code_s3_location":                      "CodeS3Location",
		"conflict_detection":                    "ConflictDetection",
		"conflict_handler":                      "ConflictHandler",
		"data_source_name":                      "DataSourceName",
		"description":                           "Description",
		"function_arn":                          "FunctionArn",
		"function_id":                           "FunctionId",
		"function_version":                      "FunctionVersion",
		"lambda_conflict_handler_arn":           "LambdaConflictHandlerArn",
		"lambda_conflict_handler_config":        "LambdaConflictHandlerConfig",
		"max_batch_size":                        "MaxBatchSize",
		"name":                                  "Name",
		"request_mapping_template":              "RequestMappingTemplate",
		"request_mapping_template_s3_location":  "RequestMappingTemplateS3Location",
		"response_mapping_template":             "ResponseMappingTemplate",
		"response_mapping_template_s3_location": "ResponseMappingTemplateS3Location",
		"runtime":                               "Runtime",
		"runtime_version":                       "RuntimeVersion",
		"sync_config":                           "SyncConfig",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/CodeS3Location",
		"/properties/ResponseMappingTemplateS3Location",
		"/properties/RequestMappingTemplateS3Location",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
