// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package observabilityadmin

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_observabilityadmin_organization_centralization_rule", organizationCentralizationRuleDataSource)
}

// organizationCentralizationRuleDataSource returns the Terraform awscc_observabilityadmin_organization_centralization_rule data source.
// This Terraform data source corresponds to the CloudFormation AWS::ObservabilityAdmin::OrganizationCentralizationRule resource.
func organizationCentralizationRuleDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Rule
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Destination": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Account": {
		//	          "maxLength": 12,
		//	          "minLength": 12,
		//	          "pattern": "^[0-9]{12}$",
		//	          "type": "string"
		//	        },
		//	        "DestinationLogsConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "BackupConfiguration": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "KmsKeyArn": {
		//	                  "maxLength": 1011,
		//	                  "minLength": 1,
		//	                  "pattern": "^arn:aws([a-z0-9\\-]+)?:([a-zA-Z0-9\\-]+):([a-z0-9\\-]+)?:([0-9]{12})?:(.+)$",
		//	                  "type": "string"
		//	                },
		//	                "Region": {
		//	                  "minLength": 1,
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Region"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "LogsEncryptionConfiguration": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "EncryptionConflictResolutionStrategy": {
		//	                  "enum": [
		//	                    "ALLOW",
		//	                    "SKIP"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "EncryptionStrategy": {
		//	                  "enum": [
		//	                    "CUSTOMER_MANAGED",
		//	                    "AWS_OWNED"
		//	                  ],
		//	                  "type": "string"
		//	                },
		//	                "KmsKeyArn": {
		//	                  "maxLength": 1011,
		//	                  "minLength": 1,
		//	                  "pattern": "^arn:aws([a-z0-9\\-]+)?:([a-zA-Z0-9\\-]+):([a-z0-9\\-]+)?:([0-9]{12})?:(.+)$",
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "EncryptionStrategy"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Region": {
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Region"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Source": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Regions": {
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        },
		//	        "Scope": {
		//	          "maxLength": 2000,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "SourceLogsConfiguration": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "EncryptedLogGroupStrategy": {
		//	              "enum": [
		//	                "ALLOW",
		//	                "SKIP"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "LogGroupSelectionCriteria": {
		//	              "maxLength": 2000,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "LogGroupSelectionCriteria",
		//	            "EncryptedLogGroupStrategy"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "Regions"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "Source",
		//	    "Destination"
		//	  ],
		//	  "type": "object"
		//	}
		"rule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Destination
				"destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Account
						"account": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DestinationLogsConfiguration
						"destination_logs_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BackupConfiguration
								"backup_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: KmsKeyArn
										"kms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Region
										"region": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogsEncryptionConfiguration
								"logs_encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: EncryptionConflictResolutionStrategy
										"encryption_conflict_resolution_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: EncryptionStrategy
										"encryption_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: KmsKeyArn
										"kms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Region
						"region": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Source
				"source": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Regions
						"regions": schema.SetAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Scope
						"scope": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SourceLogsConfiguration
						"source_logs_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EncryptedLogGroupStrategy
								"encrypted_log_group_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: LogGroupSelectionCriteria
								"log_group_selection_criteria": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RuleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 1011,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws([a-z0-9\\-]+)?:([a-zA-Z0-9\\-]+):([a-z0-9\\-]+)?:([0-9]{12})?:(.+)$",
		//	  "type": "string"
		//	}
		"rule_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RuleName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "pattern": "^[0-9A-Za-z-]+$",
		//	  "type": "string"
		//	}
		"rule_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ObservabilityAdmin::OrganizationCentralizationRule",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ObservabilityAdmin::OrganizationCentralizationRule").WithTerraformTypeName("awscc_observabilityadmin_organization_centralization_rule")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"account":                                 "Account",
		"backup_configuration":                    "BackupConfiguration",
		"destination":                             "Destination",
		"destination_logs_configuration":          "DestinationLogsConfiguration",
		"encrypted_log_group_strategy":            "EncryptedLogGroupStrategy",
		"encryption_conflict_resolution_strategy": "EncryptionConflictResolutionStrategy",
		"encryption_strategy":                     "EncryptionStrategy",
		"key":                                     "Key",
		"kms_key_arn":                             "KmsKeyArn",
		"log_group_selection_criteria":            "LogGroupSelectionCriteria",
		"logs_encryption_configuration":           "LogsEncryptionConfiguration",
		"region":                                  "Region",
		"regions":                                 "Regions",
		"rule":                                    "Rule",
		"rule_arn":                                "RuleArn",
		"rule_name":                               "RuleName",
		"scope":                                   "Scope",
		"source":                                  "Source",
		"source_logs_configuration":               "SourceLogsConfiguration",
		"tags":                                    "Tags",
		"value":                                   "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
