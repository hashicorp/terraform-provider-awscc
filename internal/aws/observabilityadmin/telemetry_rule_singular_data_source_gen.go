// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package observabilityadmin

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_observabilityadmin_telemetry_rule", telemetryRuleDataSource)
}

// telemetryRuleDataSource returns the Terraform awscc_observabilityadmin_telemetry_rule data source.
// This Terraform data source corresponds to the CloudFormation AWS::ObservabilityAdmin::TelemetryRule resource.
func telemetryRuleDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Rule
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The telemetry rule",
		//	  "properties": {
		//	    "DestinationConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "The destination configuration for telemetry data",
		//	      "properties": {
		//	        "DestinationPattern": {
		//	          "description": "Pattern for telemetry data destination",
		//	          "type": "string"
		//	        },
		//	        "DestinationType": {
		//	          "description": "Type of telemetry destination",
		//	          "enum": [
		//	            "cloud-watch-logs"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "RetentionInDays": {
		//	          "description": "Number of days to retain the telemetry data in the specified destination",
		//	          "type": "integer"
		//	        },
		//	        "VPCFlowLogParameters": {
		//	          "additionalProperties": false,
		//	          "description": "Telemetry parameters for VPC Flow logs",
		//	          "properties": {
		//	            "LogFormat": {
		//	              "description": "The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.",
		//	              "type": "string"
		//	            },
		//	            "MaxAggregationInterval": {
		//	              "description": "The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.",
		//	              "type": "integer"
		//	            },
		//	            "TrafficType": {
		//	              "description": "The type of traffic captured for the flow log. Default is ALL",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ResourceType": {
		//	      "description": "Resource Type associated with the Telemetry Rule",
		//	      "enum": [
		//	        "AWS::EC2::VPC"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "SelectionCriteria": {
		//	      "description": "Selection Criteria on resource level for rule application",
		//	      "type": "string"
		//	    },
		//	    "TelemetryType": {
		//	      "description": "Telemetry Type associated with the Telemetry Rule",
		//	      "enum": [
		//	        "Logs"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "ResourceType",
		//	    "TelemetryType"
		//	  ],
		//	  "type": "object"
		//	}
		"rule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DestinationConfiguration
				"destination_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DestinationPattern
						"destination_pattern": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Pattern for telemetry data destination",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DestinationType
						"destination_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Type of telemetry destination",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RetentionInDays
						"retention_in_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "Number of days to retain the telemetry data in the specified destination",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: VPCFlowLogParameters
						"vpc_flow_log_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: LogFormat
								"log_format": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: MaxAggregationInterval
								"max_aggregation_interval": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: TrafficType
								"traffic_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The type of traffic captured for the flow log. Default is ALL",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Telemetry parameters for VPC Flow logs",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The destination configuration for telemetry data",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ResourceType
				"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Resource Type associated with the Telemetry Rule",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SelectionCriteria
				"selection_criteria": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Selection Criteria on resource level for rule application",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TelemetryType
				"telemetry_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Telemetry Type associated with the Telemetry Rule",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The telemetry rule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RuleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The arn of the telemetry rule",
		//	  "maxLength": 1011,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws([a-z0-9\\-]+)?:([a-zA-Z0-9\\-]+):([a-z0-9\\-]+)?:([0-9]{12})?:(.+)$",
		//	  "type": "string"
		//	}
		"rule_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The arn of the telemetry rule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RuleName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the telemetry rule",
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "pattern": "^[0-9A-Za-z-]+$",
		//	  "type": "string"
		//	}
		"rule_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the telemetry rule",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ObservabilityAdmin::TelemetryRule",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ObservabilityAdmin::TelemetryRule").WithTerraformTypeName("awscc_observabilityadmin_telemetry_rule")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"destination_configuration": "DestinationConfiguration",
		"destination_pattern":       "DestinationPattern",
		"destination_type":          "DestinationType",
		"key":                       "Key",
		"log_format":                "LogFormat",
		"max_aggregation_interval":  "MaxAggregationInterval",
		"resource_type":             "ResourceType",
		"retention_in_days":         "RetentionInDays",
		"rule":                      "Rule",
		"rule_arn":                  "RuleArn",
		"rule_name":                 "RuleName",
		"selection_criteria":        "SelectionCriteria",
		"tags":                      "Tags",
		"telemetry_type":            "TelemetryType",
		"traffic_type":              "TrafficType",
		"value":                     "Value",
		"vpc_flow_log_parameters":   "VPCFlowLogParameters",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
