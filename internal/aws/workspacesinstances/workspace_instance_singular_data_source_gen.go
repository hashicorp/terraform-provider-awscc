// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package workspacesinstances

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_workspacesinstances_workspace_instance", workspaceInstanceDataSource)
}

// workspaceInstanceDataSource returns the Terraform awscc_workspacesinstances_workspace_instance data source.
// This Terraform data source corresponds to the CloudFormation AWS::WorkspacesInstances::WorkspaceInstance resource.
func workspaceInstanceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: EC2ManagedInstance
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "InstanceId": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"ec2_managed_instance": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: InstanceId
				"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ManagedInstance
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "BlockDeviceMappings": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "DeviceName": {
		//	            "maxLength": 32,
		//	            "type": "string"
		//	          },
		//	          "Ebs": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Encrypted": {
		//	                "type": "boolean"
		//	              },
		//	              "Iops": {
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              },
		//	              "KmsKeyId": {
		//	                "maxLength": 128,
		//	                "type": "string"
		//	              },
		//	              "Throughput": {
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              },
		//	              "VolumeSize": {
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              },
		//	              "VolumeType": {
		//	                "enum": [
		//	                  "standard",
		//	                  "io1",
		//	                  "io2",
		//	                  "gp2",
		//	                  "sc1",
		//	                  "st1",
		//	                  "gp3"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "NoDevice": {
		//	            "maxLength": 32,
		//	            "type": "string"
		//	          },
		//	          "VirtualName": {
		//	            "pattern": "^ephemeral(0|[1-9][0-9]{0,2})$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "CapacityReservationSpecification": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CapacityReservationPreference": {
		//	          "enum": [
		//	            "capacity-reservations-only",
		//	            "open",
		//	            "none"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "CapacityReservationTarget": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "CapacityReservationId": {
		//	              "maxLength": 128,
		//	              "type": "string"
		//	            },
		//	            "CapacityReservationResourceGroupArn": {
		//	              "pattern": "^arn:.*",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CpuOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CoreCount": {
		//	          "minimum": 0,
		//	          "type": "integer"
		//	        },
		//	        "ThreadsPerCore": {
		//	          "minimum": 0,
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "CreditSpecification": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CpuCredits": {
		//	          "enum": [
		//	            "standard",
		//	            "unlimited"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "DisableApiStop": {
		//	      "type": "boolean"
		//	    },
		//	    "EbsOptimized": {
		//	      "type": "boolean"
		//	    },
		//	    "EnablePrimaryIpv6": {
		//	      "type": "boolean"
		//	    },
		//	    "EnclaveOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "HibernationOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Configured": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "IamInstanceProfile": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Arn": {
		//	          "maxLength": 2048,
		//	          "pattern": "^arn:.*",
		//	          "type": "string"
		//	        },
		//	        "Name": {
		//	          "maxLength": 64,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ImageId": {
		//	      "pattern": "^ami-[0-9a-zA-Z]{1,63}$",
		//	      "type": "string"
		//	    },
		//	    "InstanceMarketOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "MarketType": {
		//	          "enum": [
		//	            "spot",
		//	            "capacity-block"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "SpotOptions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "InstanceInterruptionBehavior": {
		//	              "enum": [
		//	                "hibernate",
		//	                "stop"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "MaxPrice": {
		//	              "maxLength": 64,
		//	              "type": "string"
		//	            },
		//	            "SpotInstanceType": {
		//	              "enum": [
		//	                "one-time",
		//	                "persistent"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "ValidUntilUtc": {
		//	              "maxLength": 64,
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "InstanceType": {
		//	      "pattern": "^([a-z0-9-]+)\\.([a-z0-9]+)$",
		//	      "type": "string"
		//	    },
		//	    "Ipv6AddressCount": {
		//	      "minimum": 0,
		//	      "type": "integer"
		//	    },
		//	    "KeyName": {
		//	      "maxLength": 64,
		//	      "type": "string"
		//	    },
		//	    "LicenseSpecifications": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "LicenseConfigurationArn": {
		//	            "pattern": "^arn:.*",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "MaintenanceOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AutoRecovery": {
		//	          "enum": [
		//	            "disabled",
		//	            "default"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "MetadataOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "HttpEndpoint": {
		//	          "enum": [
		//	            "enabled",
		//	            "disabled"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "HttpProtocolIpv6": {
		//	          "enum": [
		//	            "enabled",
		//	            "disabled"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "HttpPutResponseHopLimit": {
		//	          "maximum": 64,
		//	          "minimum": 1,
		//	          "type": "integer"
		//	        },
		//	        "HttpTokens": {
		//	          "enum": [
		//	            "optional",
		//	            "required"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "InstanceMetadataTags": {
		//	          "enum": [
		//	            "enabled",
		//	            "disabled"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Monitoring": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "NetworkInterfaces": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Description": {
		//	            "maxLength": 1000,
		//	            "pattern": "^[\\S\\s]*$",
		//	            "type": "string"
		//	          },
		//	          "DeviceIndex": {
		//	            "minimum": 0,
		//	            "type": "integer"
		//	          },
		//	          "Groups": {
		//	            "items": {
		//	              "pattern": "^sg-[0-9a-zA-Z]{1,63}$",
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "SubnetId": {
		//	            "pattern": "^subnet-[0-9a-zA-Z]{1,63}$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "NetworkPerformanceOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "BandwidthWeighting": {
		//	          "enum": [
		//	            "default",
		//	            "vpc-1",
		//	            "ebs-1"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Placement": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AvailabilityZone": {
		//	          "pattern": "^[a-z]{2}-[a-z]+-\\d[a-z](-[a-z0-9]+)?$",
		//	          "type": "string"
		//	        },
		//	        "GroupId": {
		//	          "pattern": "^pg-[0-9a-zA-Z]{1,63}$",
		//	          "type": "string"
		//	        },
		//	        "GroupName": {
		//	          "maxLength": 255,
		//	          "type": "string"
		//	        },
		//	        "PartitionNumber": {
		//	          "type": "integer"
		//	        },
		//	        "Tenancy": {
		//	          "enum": [
		//	            "default",
		//	            "dedicated",
		//	            "host"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "PrivateDnsNameOptions": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "EnableResourceNameDnsAAAARecord": {
		//	          "type": "boolean"
		//	        },
		//	        "EnableResourceNameDnsARecord": {
		//	          "type": "boolean"
		//	        },
		//	        "HostnameType": {
		//	          "enum": [
		//	            "ip-name",
		//	            "resource-name"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "SubnetId": {
		//	      "pattern": "^subnet-[0-9a-zA-Z]{1,63}$",
		//	      "type": "string"
		//	    },
		//	    "TagSpecifications": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ResourceType": {
		//	            "enum": [
		//	              "instance",
		//	              "volume",
		//	              "spot-instances-request",
		//	              "network-interface"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Tags": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Key": {
		//	                  "maxLength": 128,
		//	                  "minLength": 1,
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "maxLength": 256,
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Key"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "maxItems": 30,
		//	            "type": "array"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 30,
		//	      "type": "array"
		//	    },
		//	    "UserData": {
		//	      "maxLength": 16000,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "ImageId",
		//	    "InstanceType"
		//	  ],
		//	  "type": "object"
		//	}
		"managed_instance": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BlockDeviceMappings
				"block_device_mappings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DeviceName
							"device_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Ebs
							"ebs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Encrypted
									"encrypted": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Iops
									"iops": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: KmsKeyId
									"kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Throughput
									"throughput": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: VolumeSize
									"volume_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: VolumeType
									"volume_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: NoDevice
							"no_device": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: VirtualName
							"virtual_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CapacityReservationSpecification
				"capacity_reservation_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CapacityReservationPreference
						"capacity_reservation_preference": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: CapacityReservationTarget
						"capacity_reservation_target": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CapacityReservationId
								"capacity_reservation_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: CapacityReservationResourceGroupArn
								"capacity_reservation_resource_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CpuOptions
				"cpu_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CoreCount
						"core_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ThreadsPerCore
						"threads_per_core": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: CreditSpecification
				"credit_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CpuCredits
						"cpu_credits": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DisableApiStop
				"disable_api_stop": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EbsOptimized
				"ebs_optimized": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EnablePrimaryIpv6
				"enable_primary_ipv_6": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EnclaveOptions
				"enclave_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: HibernationOptions
				"hibernation_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Configured
						"configured": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: IamInstanceProfile
				"iam_instance_profile": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Arn
						"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Name
						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ImageId
				"image_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InstanceMarketOptions
				"instance_market_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MarketType
						"market_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SpotOptions
						"spot_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: InstanceInterruptionBehavior
								"instance_interruption_behavior": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: MaxPrice
								"max_price": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SpotInstanceType
								"spot_instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ValidUntilUtc
								"valid_until_utc": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InstanceType
				"instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Ipv6AddressCount
				"ipv_6_address_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: KeyName
				"key_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LicenseSpecifications
				"license_specifications": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: LicenseConfigurationArn
							"license_configuration_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: MaintenanceOptions
				"maintenance_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AutoRecovery
						"auto_recovery": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: MetadataOptions
				"metadata_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: HttpEndpoint
						"http_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HttpProtocolIpv6
						"http_protocol_ipv_6": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HttpPutResponseHopLimit
						"http_put_response_hop_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HttpTokens
						"http_tokens": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: InstanceMetadataTags
						"instance_metadata_tags": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Monitoring
				"monitoring": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: NetworkInterfaces
				"network_interfaces": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Description
							"description": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: DeviceIndex
							"device_index": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Groups
							"groups": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: SubnetId
							"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: NetworkPerformanceOptions
				"network_performance_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: BandwidthWeighting
						"bandwidth_weighting": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Placement
				"placement": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AvailabilityZone
						"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GroupId
						"group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GroupName
						"group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PartitionNumber
						"partition_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Tenancy
						"tenancy": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: PrivateDnsNameOptions
				"private_dns_name_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: EnableResourceNameDnsAAAARecord
						"enable_resource_name_dns_aaaa_record": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EnableResourceNameDnsARecord
						"enable_resource_name_dns_a_record": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HostnameType
						"hostname_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SubnetId
				"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TagSpecifications
				"tag_specifications": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ResourceType
							"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Tags
							"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Key
										"key": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: UserData
				"user_data": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ProvisionState
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The current state of the workspace instance",
		//	  "enum": [
		//	    "ALLOCATING",
		//	    "ALLOCATED",
		//	    "DEALLOCATING",
		//	    "DEALLOCATED",
		//	    "ERROR_ALLOCATING",
		//	    "ERROR_DEALLOCATING"
		//	  ],
		//	  "type": "string"
		//	}
		"provision_state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The current state of the workspace instance",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 30,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: WorkspaceInstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Unique identifier for the workspace instance",
		//	  "pattern": "^wsinst-[0-9a-zA-Z]{8,63}$",
		//	  "type": "string"
		//	}
		"workspace_instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Unique identifier for the workspace instance",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::WorkspacesInstances::WorkspaceInstance",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::WorkspacesInstances::WorkspaceInstance").WithTerraformTypeName("awscc_workspacesinstances_workspace_instance")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                                     "Arn",
		"auto_recovery":                           "AutoRecovery",
		"availability_zone":                       "AvailabilityZone",
		"bandwidth_weighting":                     "BandwidthWeighting",
		"block_device_mappings":                   "BlockDeviceMappings",
		"capacity_reservation_id":                 "CapacityReservationId",
		"capacity_reservation_preference":         "CapacityReservationPreference",
		"capacity_reservation_resource_group_arn": "CapacityReservationResourceGroupArn",
		"capacity_reservation_specification":      "CapacityReservationSpecification",
		"capacity_reservation_target":             "CapacityReservationTarget",
		"configured":                              "Configured",
		"core_count":                              "CoreCount",
		"cpu_credits":                             "CpuCredits",
		"cpu_options":                             "CpuOptions",
		"credit_specification":                    "CreditSpecification",
		"description":                             "Description",
		"device_index":                            "DeviceIndex",
		"device_name":                             "DeviceName",
		"disable_api_stop":                        "DisableApiStop",
		"ebs":                                     "Ebs",
		"ebs_optimized":                           "EbsOptimized",
		"ec2_managed_instance":                    "EC2ManagedInstance",
		"enable_primary_ipv_6":                    "EnablePrimaryIpv6",
		"enable_resource_name_dns_a_record":       "EnableResourceNameDnsARecord",
		"enable_resource_name_dns_aaaa_record":    "EnableResourceNameDnsAAAARecord",
		"enabled":                                 "Enabled",
		"enclave_options":                         "EnclaveOptions",
		"encrypted":                               "Encrypted",
		"group_id":                                "GroupId",
		"group_name":                              "GroupName",
		"groups":                                  "Groups",
		"hibernation_options":                     "HibernationOptions",
		"hostname_type":                           "HostnameType",
		"http_endpoint":                           "HttpEndpoint",
		"http_protocol_ipv_6":                     "HttpProtocolIpv6",
		"http_put_response_hop_limit":             "HttpPutResponseHopLimit",
		"http_tokens":                             "HttpTokens",
		"iam_instance_profile":                    "IamInstanceProfile",
		"image_id":                                "ImageId",
		"instance_id":                             "InstanceId",
		"instance_interruption_behavior":          "InstanceInterruptionBehavior",
		"instance_market_options":                 "InstanceMarketOptions",
		"instance_metadata_tags":                  "InstanceMetadataTags",
		"instance_type":                           "InstanceType",
		"iops":                                    "Iops",
		"ipv_6_address_count":                     "Ipv6AddressCount",
		"key":                                     "Key",
		"key_name":                                "KeyName",
		"kms_key_id":                              "KmsKeyId",
		"license_configuration_arn":               "LicenseConfigurationArn",
		"license_specifications":                  "LicenseSpecifications",
		"maintenance_options":                     "MaintenanceOptions",
		"managed_instance":                        "ManagedInstance",
		"market_type":                             "MarketType",
		"max_price":                               "MaxPrice",
		"metadata_options":                        "MetadataOptions",
		"monitoring":                              "Monitoring",
		"name":                                    "Name",
		"network_interfaces":                      "NetworkInterfaces",
		"network_performance_options":             "NetworkPerformanceOptions",
		"no_device":                               "NoDevice",
		"partition_number":                        "PartitionNumber",
		"placement":                               "Placement",
		"private_dns_name_options":                "PrivateDnsNameOptions",
		"provision_state":                         "ProvisionState",
		"resource_type":                           "ResourceType",
		"spot_instance_type":                      "SpotInstanceType",
		"spot_options":                            "SpotOptions",
		"subnet_id":                               "SubnetId",
		"tag_specifications":                      "TagSpecifications",
		"tags":                                    "Tags",
		"tenancy":                                 "Tenancy",
		"threads_per_core":                        "ThreadsPerCore",
		"throughput":                              "Throughput",
		"user_data":                               "UserData",
		"valid_until_utc":                         "ValidUntilUtc",
		"value":                                   "Value",
		"virtual_name":                            "VirtualName",
		"volume_size":                             "VolumeSize",
		"volume_type":                             "VolumeType",
		"workspace_instance_id":                   "WorkspaceInstanceId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
