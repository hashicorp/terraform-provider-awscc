// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package workspacesinstances

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_workspacesinstances_volume_association", volumeAssociationResource)
}

// volumeAssociationResource returns the Terraform awscc_workspacesinstances_volume_association resource.
// This Terraform resource corresponds to the CloudFormation AWS::WorkspacesInstances::VolumeAssociation resource.
func volumeAssociationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Device
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The device name for the volume attachment",
		//	  "maxLength": 32,
		//	  "type": "string"
		//	}
		"device": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The device name for the volume attachment",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(32),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DisassociateMode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Mode to use when disassociating the volume",
		//	  "enum": [
		//	    "FORCE",
		//	    "NO_FORCE"
		//	  ],
		//	  "type": "string"
		//	}
		"disassociate_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Mode to use when disassociating the volume",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"FORCE",
					"NO_FORCE",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// DisassociateMode is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: VolumeId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ID of the volume to attach to the workspace instance",
		//	  "pattern": "^vol-[0-9a-zA-Z]{1,63}$",
		//	  "type": "string"
		//	}
		"volume_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ID of the volume to attach to the workspace instance",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^vol-[0-9a-zA-Z]{1,63}$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: WorkspaceInstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ID of the workspace instance to associate with the volume",
		//	  "pattern": "^wsinst-[0-9a-zA-Z]{8,63}$",
		//	  "type": "string"
		//	}
		"workspace_instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ID of the workspace instance to associate with the volume",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^wsinst-[0-9a-zA-Z]{8,63}$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::WorkspacesInstances::VolumeAssociation",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::WorkspacesInstances::VolumeAssociation").WithTerraformTypeName("awscc_workspacesinstances_volume_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"device":                "Device",
		"disassociate_mode":     "DisassociateMode",
		"volume_id":             "VolumeId",
		"workspace_instance_id": "WorkspaceInstanceId",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/DisassociateMode",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
