// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_transit_gateway", transitGatewayDataSource)
}

// transitGatewayDataSource returns the Terraform awscc_ec2_transit_gateway data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::TransitGateway resource.
func transitGatewayDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AmazonSideAsn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"amazon_side_asn": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: AssociationDefaultRouteTableId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"association_default_route_table_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: AutoAcceptSharedAttachments
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"auto_accept_shared_attachments": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DefaultRouteTableAssociation
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"default_route_table_association": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DefaultRouteTablePropagation
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"default_route_table_propagation": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DnsSupport
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"dns_support": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"transit_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: MulticastSupport
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"multicast_support": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: PropagationDefaultRouteTableId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"propagation_default_route_table_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SecurityGroupReferencingSupport
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"security_group_referencing_support": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TransitGatewayArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"transit_gateway_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TransitGatewayCidrBlocks
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"transit_gateway_cidr_blocks": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpnEcmpSupport
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"vpn_ecmp_support": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::TransitGateway",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::TransitGateway").WithTerraformTypeName("awscc_ec2_transit_gateway")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"amazon_side_asn":                    "AmazonSideAsn",
		"association_default_route_table_id": "AssociationDefaultRouteTableId",
		"auto_accept_shared_attachments":     "AutoAcceptSharedAttachments",
		"default_route_table_association":    "DefaultRouteTableAssociation",
		"default_route_table_propagation":    "DefaultRouteTablePropagation",
		"description":                        "Description",
		"dns_support":                        "DnsSupport",
		"key":                                "Key",
		"multicast_support":                  "MulticastSupport",
		"propagation_default_route_table_id": "PropagationDefaultRouteTableId",
		"security_group_referencing_support": "SecurityGroupReferencingSupport",
		"tags":                               "Tags",
		"transit_gateway_arn":                "TransitGatewayArn",
		"transit_gateway_cidr_blocks":        "TransitGatewayCidrBlocks",
		"transit_gateway_id":                 "Id",
		"value":                              "Value",
		"vpn_ecmp_support":                   "VpnEcmpSupport",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
