// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_ec2_vpc_cidr_block", vPCCidrBlockResource)
}

// vPCCidrBlockResource returns the Terraform awscc_ec2_vpc_cidr_block resource.
// This Terraform resource corresponds to the CloudFormation AWS::EC2::VPCCidrBlock resource.
func vPCCidrBlockResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AmazonProvidedIpv6CidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.",
		//	  "type": "boolean"
		//	}
		"amazon_provided_ipv_6_cidr_block": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
				boolplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An IPv4 CIDR block to associate with the VPC.",
		//	  "type": "string"
		//	}
		"cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An IPv4 CIDR block to associate with the VPC.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Id of the VPC associated CIDR Block.",
		//	  "type": "string"
		//	}
		"vpc_cidr_block_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Id of the VPC associated CIDR Block.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IpSource
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IP Source of an IPv6 VPC CIDR Block.",
		//	  "type": "string"
		//	}
		"ip_source": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IP Source of an IPv6 VPC CIDR Block.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Ipv4IpamPoolId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.",
		//	  "type": "string"
		//	}
		"ipv_4_ipam_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// Ipv4IpamPoolId is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Ipv4NetmaskLength
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.",
		//	  "type": "integer"
		//	}
		"ipv_4_netmask_length": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
				int64planmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// Ipv4NetmaskLength is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Ipv6AddressAttribute
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The value denoting whether an IPv6 VPC CIDR Block is public or private.",
		//	  "type": "string"
		//	}
		"ipv_6_address_attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The value denoting whether an IPv6 VPC CIDR Block is public or private.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Ipv6CidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An IPv6 CIDR block from the IPv6 address pool.",
		//	  "type": "string"
		//	}
		"ipv_6_cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An IPv6 CIDR block from the IPv6 address pool.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Ipv6CidrBlockNetworkBorderGroup
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the location from which we advertise the IPV6 CIDR block.",
		//	  "type": "string"
		//	}
		"ipv_6_cidr_block_network_border_group": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the location from which we advertise the IPV6 CIDR block.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Ipv6IpamPoolId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.",
		//	  "type": "string"
		//	}
		"ipv_6_ipam_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// Ipv6IpamPoolId is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Ipv6NetmaskLength
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.",
		//	  "type": "integer"
		//	}
		"ipv_6_netmask_length": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
				int64planmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// Ipv6NetmaskLength is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Ipv6Pool
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.",
		//	  "type": "string"
		//	}
		"ipv_6_pool": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the VPC.",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the VPC.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::EC2::VPCCidrBlock",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::VPCCidrBlock").WithTerraformTypeName("awscc_ec2_vpc_cidr_block")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "id",
			Description:       "The Id of the VPC associated CIDR Block",
			RequiredForImport: true,
		},
		identity.Identifier{
			Name:              "vpc_id",
			Description:       "The ID of the VPC",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"amazon_provided_ipv_6_cidr_block":      "AmazonProvidedIpv6CidrBlock",
		"cidr_block":                            "CidrBlock",
		"ip_source":                             "IpSource",
		"ipv_4_ipam_pool_id":                    "Ipv4IpamPoolId",
		"ipv_4_netmask_length":                  "Ipv4NetmaskLength",
		"ipv_6_address_attribute":               "Ipv6AddressAttribute",
		"ipv_6_cidr_block":                      "Ipv6CidrBlock",
		"ipv_6_cidr_block_network_border_group": "Ipv6CidrBlockNetworkBorderGroup",
		"ipv_6_ipam_pool_id":                    "Ipv6IpamPoolId",
		"ipv_6_netmask_length":                  "Ipv6NetmaskLength",
		"ipv_6_pool":                            "Ipv6Pool",
		"vpc_cidr_block_id":                     "Id",
		"vpc_id":                                "VpcId",
	})

	opts = opts.IsImmutableType(true)

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/Ipv4IpamPoolId",
		"/properties/Ipv4NetmaskLength",
		"/properties/Ipv6IpamPoolId",
		"/properties/Ipv6NetmaskLength",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
