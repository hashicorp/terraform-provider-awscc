// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_vpn_connection", vPNConnectionDataSource)
}

// vPNConnectionDataSource returns the Terraform awscc_ec2_vpn_connection data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::VPNConnection resource.
func vPNConnectionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CustomerGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the customer gateway at your end of the VPN connection.",
		//	  "type": "string"
		//	}
		"customer_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the customer gateway at your end of the VPN connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnableAcceleration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicate whether to enable acceleration for the VPN connection.\n Default: ``false``",
		//	  "type": "boolean"
		//	}
		"enable_acceleration": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicate whether to enable acceleration for the VPN connection.\n Default: ``false``",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LocalIpv4NetworkCidr
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.\n Default: ``0.0.0.0/0``",
		//	  "type": "string"
		//	}
		"local_ipv_4_network_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.\n Default: ``0.0.0.0/0``",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LocalIpv6NetworkCidr
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.\n Default: ``::/0``",
		//	  "type": "string"
		//	}
		"local_ipv_6_network_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.\n Default: ``::/0``",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OutsideIpAddressType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of IPv4 address assigned to the outside interface of the customer gateway device.\n Valid values: ``PrivateIpv4`` | ``PublicIpv4`` \n Default: ``PublicIpv4``",
		//	  "type": "string"
		//	}
		"outside_ip_address_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of IPv4 address assigned to the outside interface of the customer gateway device.\n Valid values: ``PrivateIpv4`` | ``PublicIpv4`` \n Default: ``PublicIpv4``",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RemoteIpv4NetworkCidr
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv4 CIDR on the AWS side of the VPN connection.\n Default: ``0.0.0.0/0``",
		//	  "type": "string"
		//	}
		"remote_ipv_4_network_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IPv4 CIDR on the AWS side of the VPN connection.\n Default: ``0.0.0.0/0``",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RemoteIpv6NetworkCidr
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv6 CIDR on the AWS side of the VPN connection.\n Default: ``::/0``",
		//	  "type": "string"
		//	}
		"remote_ipv_6_network_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IPv6 CIDR on the AWS side of the VPN connection.\n Default: ``::/0``",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StaticRoutesOnly
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.\n If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must specify ``true``.",
		//	  "type": "boolean"
		//	}
		"static_routes_only": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.\n If you are creating a VPN connection for a device that does not support Border Gateway Protocol (BGP), you must specify ``true``.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Any tags assigned to the VPN connection.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Specifies a tag. For more information, see [Resource tags](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The tag key.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The tag value.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The tag key.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The tag value.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Any tags assigned to the VPN connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TransitGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the transit gateway associated with the VPN connection.\n You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.",
		//	  "type": "string"
		//	}
		"transit_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the transit gateway associated with the VPN connection.\n You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TransportTransitGatewayAttachmentId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The transit gateway attachment ID to use for the VPN tunnel.\n Required if ``OutsideIpAddressType`` is set to ``PrivateIpv4``.",
		//	  "type": "string"
		//	}
		"transport_transit_gateway_attachment_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The transit gateway attachment ID to use for the VPN tunnel.\n Required if ``OutsideIpAddressType`` is set to ``PrivateIpv4``.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TunnelInsideIpVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.\n Default: ``ipv4``",
		//	  "type": "string"
		//	}
		"tunnel_inside_ip_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.\n Default: ``ipv4``",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of VPN connection.",
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of VPN connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpnConnectionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"vpn_connection_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpnGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the virtual private gateway at the AWS side of the VPN connection.\n You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.",
		//	  "type": "string"
		//	}
		"vpn_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the virtual private gateway at the AWS side of the VPN connection.\n You must specify either ``TransitGatewayId`` or ``VpnGatewayId``, but not both.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpnTunnelOptionsSpecifications
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tunnel options for the VPN connection.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The tunnel options for a single VPN tunnel.",
		//	    "properties": {
		//	      "DPDTimeoutAction": {
		//	        "description": "The action to take after DPD timeout occurs. Specify ``restart`` to restart the IKE initiation. Specify ``clear`` to end the IKE session.\n Valid Values: ``clear`` | ``none`` | ``restart`` \n Default: ``clear``",
		//	        "enum": [
		//	          "clear",
		//	          "none",
		//	          "restart"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "DPDTimeoutSeconds": {
		//	        "description": "The number of seconds after which a DPD timeout occurs.\n Constraints: A value greater than or equal to 30.\n Default: ``30``",
		//	        "minimum": 30,
		//	        "type": "integer"
		//	      },
		//	      "EnableTunnelLifecycleControl": {
		//	        "description": "Turn on or off tunnel endpoint lifecycle control feature.",
		//	        "type": "boolean"
		//	      },
		//	      "IKEVersions": {
		//	        "description": "The IKE versions that are permitted for the VPN tunnel.\n Valid values: ``ikev1`` | ``ikev2``",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "The IKE version that is permitted for the VPN tunnel.",
		//	          "properties": {
		//	            "Value": {
		//	              "description": "The IKE version.",
		//	              "enum": [
		//	                "ikev1",
		//	                "ikev2"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "LogOptions": {
		//	        "additionalProperties": false,
		//	        "description": "Options for logging VPN tunnel activity.",
		//	        "properties": {
		//	          "CloudwatchLogOptions": {
		//	            "additionalProperties": false,
		//	            "description": "Options for sending VPN tunnel logs to CloudWatch.",
		//	            "properties": {
		//	              "LogEnabled": {
		//	                "description": "Enable or disable VPN tunnel logging feature. Default value is ``False``.\n Valid values: ``True`` | ``False``",
		//	                "type": "boolean"
		//	              },
		//	              "LogGroupArn": {
		//	                "description": "The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.",
		//	                "type": "string"
		//	              },
		//	              "LogOutputFormat": {
		//	                "description": "Set log format. Default format is ``json``.\n Valid values: ``json`` | ``text``",
		//	                "enum": [
		//	                  "json",
		//	                  "text"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Phase1DHGroupNumbers": {
		//	        "description": "One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations.\n Valid values: ``2`` | ``14`` | ``15`` | ``16`` | ``17`` | ``18`` | ``19`` | ``20`` | ``21`` | ``22`` | ``23`` | ``24``",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE negotiations.",
		//	          "properties": {
		//	            "Value": {
		//	              "description": "The Diffie-Hellmann group number.",
		//	              "enum": [
		//	                2,
		//	                14,
		//	                15,
		//	                16,
		//	                17,
		//	                18,
		//	                19,
		//	                20,
		//	                21,
		//	                22,
		//	                23,
		//	                24
		//	              ],
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "Phase1EncryptionAlgorithms": {
		//	        "description": "One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.\n Valid values: ``AES128`` | ``AES256`` | ``AES128-GCM-16`` | ``AES256-GCM-16``",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE negotiations.",
		//	          "properties": {
		//	            "Value": {
		//	              "description": "The value for the encryption algorithm.",
		//	              "enum": [
		//	                "AES128",
		//	                "AES256",
		//	                "AES128-GCM-16",
		//	                "AES256-GCM-16"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "Phase1IntegrityAlgorithms": {
		//	        "description": "One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.\n Valid values: ``SHA1`` | ``SHA2-256`` | ``SHA2-384`` | ``SHA2-512``",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE negotiations.",
		//	          "properties": {
		//	            "Value": {
		//	              "description": "The value for the integrity algorithm.",
		//	              "enum": [
		//	                "SHA1",
		//	                "SHA2-256",
		//	                "SHA2-384",
		//	                "SHA2-512"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "Phase1LifetimeSeconds": {
		//	        "description": "The lifetime for phase 1 of the IKE negotiation, in seconds.\n Constraints: A value between 900 and 28,800.\n Default: ``28800``",
		//	        "maximum": 28800,
		//	        "minimum": 900,
		//	        "type": "integer"
		//	      },
		//	      "Phase2DHGroupNumbers": {
		//	        "description": "One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations.\n Valid values: ``2`` | ``5`` | ``14`` | ``15`` | ``16`` | ``17`` | ``18`` | ``19`` | ``20`` | ``21`` | ``22`` | ``23`` | ``24``",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE negotiations.",
		//	          "properties": {
		//	            "Value": {
		//	              "description": "The Diffie-Hellmann group number.",
		//	              "enum": [
		//	                2,
		//	                5,
		//	                14,
		//	                15,
		//	                16,
		//	                17,
		//	                18,
		//	                19,
		//	                20,
		//	                21,
		//	                22,
		//	                23,
		//	                24
		//	              ],
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "Phase2EncryptionAlgorithms": {
		//	        "description": "One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.\n Valid values: ``AES128`` | ``AES256`` | ``AES128-GCM-16`` | ``AES256-GCM-16``",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE negotiations.",
		//	          "properties": {
		//	            "Value": {
		//	              "description": "The encryption algorithm.",
		//	              "enum": [
		//	                "AES128",
		//	                "AES256",
		//	                "AES128-GCM-16",
		//	                "AES256-GCM-16"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "Phase2IntegrityAlgorithms": {
		//	        "description": "One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.\n Valid values: ``SHA1`` | ``SHA2-256`` | ``SHA2-384`` | ``SHA2-512``",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE negotiations.",
		//	          "properties": {
		//	            "Value": {
		//	              "description": "The integrity algorithm.",
		//	              "enum": [
		//	                "SHA1",
		//	                "SHA2-256",
		//	                "SHA2-384",
		//	                "SHA2-512"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "Phase2LifetimeSeconds": {
		//	        "description": "The lifetime for phase 2 of the IKE negotiation, in seconds.\n Constraints: A value between 900 and 3,600. The value must be less than the value for ``Phase1LifetimeSeconds``.\n Default: ``3600``",
		//	        "maximum": 3600,
		//	        "minimum": 900,
		//	        "type": "integer"
		//	      },
		//	      "PreSharedKey": {
		//	        "description": "The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway.\n Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).",
		//	        "type": "string"
		//	      },
		//	      "RekeyFuzzPercentage": {
		//	        "description": "The percentage of the rekey window (determined by ``RekeyMarginTimeSeconds``) during which the rekey time is randomly selected.\n Constraints: A value between 0 and 100.\n Default: ``100``",
		//	        "maximum": 100,
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      },
		//	      "RekeyMarginTimeSeconds": {
		//	        "description": "The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for ``RekeyFuzzPercentage``.\n Constraints: A value between 60 and half of ``Phase2LifetimeSeconds``.\n Default: ``270``",
		//	        "minimum": 60,
		//	        "type": "integer"
		//	      },
		//	      "ReplayWindowSize": {
		//	        "description": "The number of packets in an IKE replay window.\n Constraints: A value between 64 and 2048.\n Default: ``1024``",
		//	        "maximum": 2048,
		//	        "minimum": 64,
		//	        "type": "integer"
		//	      },
		//	      "StartupAction": {
		//	        "description": "The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify ``start`` for AWS to initiate the IKE negotiation.\n Valid Values: ``add`` | ``start`` \n Default: ``add``",
		//	        "enum": [
		//	          "add",
		//	          "start"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "TunnelInsideCidr": {
		//	        "description": "The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway. \n Constraints: A size /30 CIDR block from the ``169.254.0.0/16`` range. The following CIDR blocks are reserved and cannot be used:\n  +   ``169.254.0.0/30`` \n  +   ``169.254.1.0/30`` \n  +   ``169.254.2.0/30`` \n  +   ``169.254.3.0/30`` \n  +   ``169.254.4.0/30`` \n  +   ``169.254.5.0/30`` \n  +   ``169.254.169.252/30``",
		//	        "type": "string"
		//	      },
		//	      "TunnelInsideIpv6Cidr": {
		//	        "description": "The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway.\n Constraints: A size /126 CIDR block from the local ``fd00::/8`` range.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"vpn_tunnel_options_specifications": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DPDTimeoutAction
					"dpd_timeout_action": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The action to take after DPD timeout occurs. Specify ``restart`` to restart the IKE initiation. Specify ``clear`` to end the IKE session.\n Valid Values: ``clear`` | ``none`` | ``restart`` \n Default: ``clear``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: DPDTimeoutSeconds
					"dpd_timeout_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The number of seconds after which a DPD timeout occurs.\n Constraints: A value greater than or equal to 30.\n Default: ``30``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: EnableTunnelLifecycleControl
					"enable_tunnel_lifecycle_control": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Description: "Turn on or off tunnel endpoint lifecycle control feature.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: IKEVersions
					"ike_versions": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The IKE version.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "The IKE versions that are permitted for the VPN tunnel.\n Valid values: ``ikev1`` | ``ikev2``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: LogOptions
					"log_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CloudwatchLogOptions
							"cloudwatch_log_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: LogEnabled
									"log_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Description: "Enable or disable VPN tunnel logging feature. Default value is ``False``.\n Valid values: ``True`` | ``False``",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: LogGroupArn
									"log_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: LogOutputFormat
									"log_output_format": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Set log format. Default format is ``json``.\n Valid values: ``json`` | ``text``",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Options for sending VPN tunnel logs to CloudWatch.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Options for logging VPN tunnel activity.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Phase1DHGroupNumbers
					"phase_1_dh_group_numbers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Value
								"value": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The Diffie-Hellmann group number.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations.\n Valid values: ``2`` | ``14`` | ``15`` | ``16`` | ``17`` | ``18`` | ``19`` | ``20`` | ``21`` | ``22`` | ``23`` | ``24``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Phase1EncryptionAlgorithms
					"phase_1_encryption_algorithms": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The value for the encryption algorithm.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.\n Valid values: ``AES128`` | ``AES256`` | ``AES128-GCM-16`` | ``AES256-GCM-16``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Phase1IntegrityAlgorithms
					"phase_1_integrity_algorithms": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The value for the integrity algorithm.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.\n Valid values: ``SHA1`` | ``SHA2-256`` | ``SHA2-384`` | ``SHA2-512``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Phase1LifetimeSeconds
					"phase_1_lifetime_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The lifetime for phase 1 of the IKE negotiation, in seconds.\n Constraints: A value between 900 and 28,800.\n Default: ``28800``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Phase2DHGroupNumbers
					"phase_2_dh_group_numbers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Value
								"value": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "The Diffie-Hellmann group number.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations.\n Valid values: ``2`` | ``5`` | ``14`` | ``15`` | ``16`` | ``17`` | ``18`` | ``19`` | ``20`` | ``21`` | ``22`` | ``23`` | ``24``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Phase2EncryptionAlgorithms
					"phase_2_encryption_algorithms": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The encryption algorithm.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.\n Valid values: ``AES128`` | ``AES256`` | ``AES128-GCM-16`` | ``AES256-GCM-16``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Phase2IntegrityAlgorithms
					"phase_2_integrity_algorithms": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Value
								"value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The integrity algorithm.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.\n Valid values: ``SHA1`` | ``SHA2-256`` | ``SHA2-384`` | ``SHA2-512``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Phase2LifetimeSeconds
					"phase_2_lifetime_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The lifetime for phase 2 of the IKE negotiation, in seconds.\n Constraints: A value between 900 and 3,600. The value must be less than the value for ``Phase1LifetimeSeconds``.\n Default: ``3600``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: PreSharedKey
					"pre_shared_key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway.\n Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: RekeyFuzzPercentage
					"rekey_fuzz_percentage": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The percentage of the rekey window (determined by ``RekeyMarginTimeSeconds``) during which the rekey time is randomly selected.\n Constraints: A value between 0 and 100.\n Default: ``100``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: RekeyMarginTimeSeconds
					"rekey_margin_time_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for ``RekeyFuzzPercentage``.\n Constraints: A value between 60 and half of ``Phase2LifetimeSeconds``.\n Default: ``270``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ReplayWindowSize
					"replay_window_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The number of packets in an IKE replay window.\n Constraints: A value between 64 and 2048.\n Default: ``1024``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: StartupAction
					"startup_action": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify ``start`` for AWS to initiate the IKE negotiation.\n Valid Values: ``add`` | ``start`` \n Default: ``add``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: TunnelInsideCidr
					"tunnel_inside_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway. \n Constraints: A size /30 CIDR block from the ``169.254.0.0/16`` range. The following CIDR blocks are reserved and cannot be used:\n  +   ``169.254.0.0/30`` \n  +   ``169.254.1.0/30`` \n  +   ``169.254.2.0/30`` \n  +   ``169.254.3.0/30`` \n  +   ``169.254.4.0/30`` \n  +   ``169.254.5.0/30`` \n  +   ``169.254.169.252/30``",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: TunnelInsideIpv6Cidr
					"tunnel_inside_ipv_6_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway.\n Constraints: A size /126 CIDR block from the local ``fd00::/8`` range.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tunnel options for the VPN connection.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::VPNConnection",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::VPNConnection").WithTerraformTypeName("awscc_ec2_vpn_connection")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"cloudwatch_log_options":                  "CloudwatchLogOptions",
		"customer_gateway_id":                     "CustomerGatewayId",
		"dpd_timeout_action":                      "DPDTimeoutAction",
		"dpd_timeout_seconds":                     "DPDTimeoutSeconds",
		"enable_acceleration":                     "EnableAcceleration",
		"enable_tunnel_lifecycle_control":         "EnableTunnelLifecycleControl",
		"ike_versions":                            "IKEVersions",
		"key":                                     "Key",
		"local_ipv_4_network_cidr":                "LocalIpv4NetworkCidr",
		"local_ipv_6_network_cidr":                "LocalIpv6NetworkCidr",
		"log_enabled":                             "LogEnabled",
		"log_group_arn":                           "LogGroupArn",
		"log_options":                             "LogOptions",
		"log_output_format":                       "LogOutputFormat",
		"outside_ip_address_type":                 "OutsideIpAddressType",
		"phase_1_dh_group_numbers":                "Phase1DHGroupNumbers",
		"phase_1_encryption_algorithms":           "Phase1EncryptionAlgorithms",
		"phase_1_integrity_algorithms":            "Phase1IntegrityAlgorithms",
		"phase_1_lifetime_seconds":                "Phase1LifetimeSeconds",
		"phase_2_dh_group_numbers":                "Phase2DHGroupNumbers",
		"phase_2_encryption_algorithms":           "Phase2EncryptionAlgorithms",
		"phase_2_integrity_algorithms":            "Phase2IntegrityAlgorithms",
		"phase_2_lifetime_seconds":                "Phase2LifetimeSeconds",
		"pre_shared_key":                          "PreSharedKey",
		"rekey_fuzz_percentage":                   "RekeyFuzzPercentage",
		"rekey_margin_time_seconds":               "RekeyMarginTimeSeconds",
		"remote_ipv_4_network_cidr":               "RemoteIpv4NetworkCidr",
		"remote_ipv_6_network_cidr":               "RemoteIpv6NetworkCidr",
		"replay_window_size":                      "ReplayWindowSize",
		"startup_action":                          "StartupAction",
		"static_routes_only":                      "StaticRoutesOnly",
		"tags":                                    "Tags",
		"transit_gateway_id":                      "TransitGatewayId",
		"transport_transit_gateway_attachment_id": "TransportTransitGatewayAttachmentId",
		"tunnel_inside_cidr":                      "TunnelInsideCidr",
		"tunnel_inside_ip_version":                "TunnelInsideIpVersion",
		"tunnel_inside_ipv_6_cidr":                "TunnelInsideIpv6Cidr",
		"type":                                    "Type",
		"value":                                   "Value",
		"vpn_connection_id":                       "VpnConnectionId",
		"vpn_gateway_id":                          "VpnGatewayId",
		"vpn_tunnel_options_specifications":       "VpnTunnelOptionsSpecifications",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
