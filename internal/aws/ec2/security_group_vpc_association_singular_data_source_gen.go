// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_security_group_vpc_association", securityGroupVpcAssociationDataSource)
}

// securityGroupVpcAssociationDataSource returns the Terraform awscc_ec2_security_group_vpc_association data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::SecurityGroupVpcAssociation resource.
func securityGroupVpcAssociationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: GroupId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The group ID of the specified security group.",
		//	  "type": "string"
		//	}
		"group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The group ID of the specified security group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: State
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The state of the security group vpc association.",
		//	  "enum": [
		//	    "associating",
		//	    "associated",
		//	    "association-failed",
		//	    "disassociating",
		//	    "disassociated",
		//	    "disassociation-failed"
		//	  ],
		//	  "type": "string"
		//	}
		"state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The state of the security group vpc association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: StateReason
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The reason for the state of the security group vpc association.",
		//	  "type": "string"
		//	}
		"state_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The reason for the state of the security group vpc association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the VPC in the security group vpc association.",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the VPC in the security group vpc association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcOwnerId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The owner of the VPC in the security group vpc association.",
		//	  "type": "string"
		//	}
		"vpc_owner_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The owner of the VPC in the security group vpc association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::SecurityGroupVpcAssociation",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::SecurityGroupVpcAssociation").WithTerraformTypeName("awscc_ec2_security_group_vpc_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"group_id":     "GroupId",
		"state":        "State",
		"state_reason": "StateReason",
		"vpc_id":       "VpcId",
		"vpc_owner_id": "VpcOwnerId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
