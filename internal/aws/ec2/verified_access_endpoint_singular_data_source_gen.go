// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_verified_access_endpoint", verifiedAccessEndpointDataSource)
}

// verifiedAccessEndpointDataSource returns the Terraform awscc_ec2_verified_access_endpoint data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::VerifiedAccessEndpoint resource.
func verifiedAccessEndpointDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApplicationDomain
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The DNS name for users to reach your application.",
		//	  "type": "string"
		//	}
		"application_domain": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The DNS name for users to reach your application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AttachmentType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of attachment used to provide connectivity between the AWS Verified Access endpoint and the application.",
		//	  "type": "string"
		//	}
		"attachment_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of attachment used to provide connectivity between the AWS Verified Access endpoint and the application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CidrOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The options for cidr type endpoint.",
		//	  "properties": {
		//	    "Cidr": {
		//	      "description": "The IP address range, in CIDR notation.",
		//	      "type": "string"
		//	    },
		//	    "PortRanges": {
		//	      "description": "The list of port range.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "The IP port range.",
		//	        "properties": {
		//	          "FromPort": {
		//	            "description": "The first port in the range.",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          },
		//	          "ToPort": {
		//	            "description": "The last port in the range.",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "Protocol": {
		//	      "description": "The IP protocol.",
		//	      "type": "string"
		//	    },
		//	    "SubnetIds": {
		//	      "description": "The IDs of the subnets.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "The IDs of the subnet.",
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"cidr_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Cidr
				"cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The IP address range, in CIDR notation.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PortRanges
				"port_ranges": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: FromPort
							"from_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The first port in the range.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ToPort
							"to_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The last port in the range.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The list of port range.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Protocol
				"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The IP protocol.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SubnetIds
				"subnet_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The IDs of the subnets.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The options for cidr type endpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The creation time.",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The creation time.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A description for the AWS Verified Access endpoint.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A description for the AWS Verified Access endpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DeviceValidationDomain
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Returned if endpoint has a device trust provider attached.",
		//	  "type": "string"
		//	}
		"device_validation_domain": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Returned if endpoint has a device trust provider attached.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainCertificateArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of a public TLS/SSL certificate imported into or created with ACM.",
		//	  "type": "string"
		//	}
		"domain_certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of a public TLS/SSL certificate imported into or created with ACM.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointDomain
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A DNS name that is generated for the endpoint.",
		//	  "type": "string"
		//	}
		"endpoint_domain": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A DNS name that is generated for the endpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointDomainPrefix
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A custom identifier that gets prepended to a DNS name that is generated for the endpoint.",
		//	  "type": "string"
		//	}
		"endpoint_domain_prefix": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A custom identifier that gets prepended to a DNS name that is generated for the endpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.",
		//	  "type": "string"
		//	}
		"endpoint_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastUpdatedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The last updated time.",
		//	  "type": "string"
		//	}
		"last_updated_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The last updated time.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LoadBalancerOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The load balancer details if creating the AWS Verified Access endpoint as load-balancer type.",
		//	  "properties": {
		//	    "LoadBalancerArn": {
		//	      "description": "The ARN of the load balancer.",
		//	      "type": "string"
		//	    },
		//	    "Port": {
		//	      "description": "The IP port number.",
		//	      "maximum": 65535,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "PortRanges": {
		//	      "description": "The list of port range.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "The IP port range.",
		//	        "properties": {
		//	          "FromPort": {
		//	            "description": "The first port in the range.",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          },
		//	          "ToPort": {
		//	            "description": "The last port in the range.",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "Protocol": {
		//	      "description": "The IP protocol.",
		//	      "type": "string"
		//	    },
		//	    "SubnetIds": {
		//	      "description": "The IDs of the subnets.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "The IDs of the subnet.",
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"load_balancer_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: LoadBalancerArn
				"load_balancer_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the load balancer.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Port
				"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The IP port number.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PortRanges
				"port_ranges": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: FromPort
							"from_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The first port in the range.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ToPort
							"to_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The last port in the range.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The list of port range.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Protocol
				"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The IP protocol.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SubnetIds
				"subnet_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The IDs of the subnets.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The load balancer details if creating the AWS Verified Access endpoint as load-balancer type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkInterfaceOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The options for network-interface type endpoint.",
		//	  "properties": {
		//	    "NetworkInterfaceId": {
		//	      "description": "The ID of the network interface.",
		//	      "type": "string"
		//	    },
		//	    "Port": {
		//	      "description": "The IP port number.",
		//	      "maximum": 65535,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "PortRanges": {
		//	      "description": "The list of port ranges.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "The IP port range.",
		//	        "properties": {
		//	          "FromPort": {
		//	            "description": "The first port in the range.",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          },
		//	          "ToPort": {
		//	            "description": "The last port in the range.",
		//	            "maximum": 65535,
		//	            "minimum": 1,
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "Protocol": {
		//	      "description": "The IP protocol.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"network_interface_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: NetworkInterfaceId
				"network_interface_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ID of the network interface.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Port
				"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The IP port number.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PortRanges
				"port_ranges": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: FromPort
							"from_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The first port in the range.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ToPort
							"to_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The last port in the range.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The list of port ranges.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Protocol
				"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The IP protocol.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The options for network-interface type endpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyDocument
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS Verified Access policy document.",
		//	  "type": "string"
		//	}
		"policy_document": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS Verified Access policy document.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PolicyEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the Verified Access policy.",
		//	  "type": "boolean"
		//	}
		"policy_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the Verified Access policy.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RdsOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The options for rds type endpoint.",
		//	  "properties": {
		//	    "Port": {
		//	      "description": "The IP port number.",
		//	      "maximum": 65535,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "Protocol": {
		//	      "description": "The IP protocol.",
		//	      "type": "string"
		//	    },
		//	    "RdsDbClusterArn": {
		//	      "description": "The ARN of the RDS DB cluster.",
		//	      "type": "string"
		//	    },
		//	    "RdsDbInstanceArn": {
		//	      "description": "The ARN of the RDS DB instance.",
		//	      "type": "string"
		//	    },
		//	    "RdsDbProxyArn": {
		//	      "description": "The ARN of the RDS DB proxy.",
		//	      "type": "string"
		//	    },
		//	    "RdsEndpoint": {
		//	      "description": "The RDS endpoint.",
		//	      "type": "string"
		//	    },
		//	    "SubnetIds": {
		//	      "description": "The IDs of the subnets.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "The IDs of the subnet.",
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"rds_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Port
				"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The IP port number.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Protocol
				"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The IP protocol.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RdsDbClusterArn
				"rds_db_cluster_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the RDS DB cluster.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RdsDbInstanceArn
				"rds_db_instance_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the RDS DB instance.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RdsDbProxyArn
				"rds_db_proxy_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ARN of the RDS DB proxy.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RdsEndpoint
				"rds_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The RDS endpoint.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SubnetIds
				"subnet_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The IDs of the subnets.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The options for rds type endpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SecurityGroupIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IDs of the security groups for the endpoint.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "The ID of a security group for the endpoint.",
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"security_group_ids": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The IDs of the security groups for the endpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SseSpecification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The configuration options for customer provided KMS encryption.",
		//	  "properties": {
		//	    "CustomerManagedKeyEnabled": {
		//	      "description": "Whether to encrypt the policy with the provided key or disable encryption",
		//	      "type": "boolean"
		//	    },
		//	    "KmsKeyArn": {
		//	      "description": "KMS Key Arn used to encrypt the group policy",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"sse_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CustomerManagedKeyEnabled
				"customer_managed_key_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Whether to encrypt the policy with the provided key or disable encryption",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: KmsKeyArn
				"kms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "KMS Key Arn used to encrypt the group policy",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The configuration options for customer provided KMS encryption.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The endpoint status.",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The endpoint status.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VerifiedAccessEndpointId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the AWS Verified Access endpoint.",
		//	  "type": "string"
		//	}
		"verified_access_endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the AWS Verified Access endpoint.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VerifiedAccessGroupId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the AWS Verified Access group.",
		//	  "type": "string"
		//	}
		"verified_access_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the AWS Verified Access group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VerifiedAccessInstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the AWS Verified Access instance.",
		//	  "type": "string"
		//	}
		"verified_access_instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the AWS Verified Access instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::VerifiedAccessEndpoint",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::VerifiedAccessEndpoint").WithTerraformTypeName("awscc_ec2_verified_access_endpoint")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"application_domain":           "ApplicationDomain",
		"attachment_type":              "AttachmentType",
		"cidr":                         "Cidr",
		"cidr_options":                 "CidrOptions",
		"creation_time":                "CreationTime",
		"customer_managed_key_enabled": "CustomerManagedKeyEnabled",
		"description":                  "Description",
		"device_validation_domain":     "DeviceValidationDomain",
		"domain_certificate_arn":       "DomainCertificateArn",
		"endpoint_domain":              "EndpointDomain",
		"endpoint_domain_prefix":       "EndpointDomainPrefix",
		"endpoint_type":                "EndpointType",
		"from_port":                    "FromPort",
		"key":                          "Key",
		"kms_key_arn":                  "KmsKeyArn",
		"last_updated_time":            "LastUpdatedTime",
		"load_balancer_arn":            "LoadBalancerArn",
		"load_balancer_options":        "LoadBalancerOptions",
		"network_interface_id":         "NetworkInterfaceId",
		"network_interface_options":    "NetworkInterfaceOptions",
		"policy_document":              "PolicyDocument",
		"policy_enabled":               "PolicyEnabled",
		"port":                         "Port",
		"port_ranges":                  "PortRanges",
		"protocol":                     "Protocol",
		"rds_db_cluster_arn":           "RdsDbClusterArn",
		"rds_db_instance_arn":          "RdsDbInstanceArn",
		"rds_db_proxy_arn":             "RdsDbProxyArn",
		"rds_endpoint":                 "RdsEndpoint",
		"rds_options":                  "RdsOptions",
		"security_group_ids":           "SecurityGroupIds",
		"sse_specification":            "SseSpecification",
		"status":                       "Status",
		"subnet_ids":                   "SubnetIds",
		"tags":                         "Tags",
		"to_port":                      "ToPort",
		"value":                        "Value",
		"verified_access_endpoint_id":  "VerifiedAccessEndpointId",
		"verified_access_group_id":     "VerifiedAccessGroupId",
		"verified_access_instance_id":  "VerifiedAccessInstanceId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
