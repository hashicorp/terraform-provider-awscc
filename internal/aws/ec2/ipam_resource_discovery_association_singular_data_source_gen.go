// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_ipam_resource_discovery_association", iPAMResourceDiscoveryAssociationDataSource)
}

// iPAMResourceDiscoveryAssociationDataSource returns the Terraform awscc_ec2_ipam_resource_discovery_association data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::IPAMResourceDiscoveryAssociation resource.
func iPAMResourceDiscoveryAssociationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: IpamArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Arn of the IPAM.",
		//	  "type": "string"
		//	}
		"ipam_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Arn of the IPAM.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IpamId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Id of the IPAM this Resource Discovery is associated to.",
		//	  "type": "string"
		//	}
		"ipam_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Id of the IPAM this Resource Discovery is associated to.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IpamRegion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The home region of the IPAM.",
		//	  "type": "string"
		//	}
		"ipam_region": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The home region of the IPAM.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IpamResourceDiscoveryAssociationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the resource discovery association is a part of.",
		//	  "type": "string"
		//	}
		"ipam_resource_discovery_association_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the resource discovery association is a part of.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IpamResourceDiscoveryAssociationId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Id of the IPAM Resource Discovery Association.",
		//	  "type": "string"
		//	}
		"ipam_resource_discovery_association_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Id of the IPAM Resource Discovery Association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IpamResourceDiscoveryId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the IPAM Resource Discovery Association.",
		//	  "type": "string"
		//	}
		"ipam_resource_discovery_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the IPAM Resource Discovery Association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IsDefault
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "If the Resource Discovery Association exists due as part of CreateIpam.",
		//	  "type": "boolean"
		//	}
		"is_default": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "If the Resource Discovery Association exists due as part of CreateIpam.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OwnerId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AWS Account ID for the account where the shared IPAM exists.",
		//	  "type": "string"
		//	}
		"owner_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AWS Account ID for the account where the shared IPAM exists.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceDiscoveryStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the resource discovery.",
		//	  "type": "string"
		//	}
		"resource_discovery_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the resource discovery.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: State
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The operational state of the Resource Discovery Association. Related to Create/Delete activities.",
		//	  "type": "string"
		//	}
		"state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The operational state of the Resource Discovery Association. Related to Create/Delete activities.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::IPAMResourceDiscoveryAssociation",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::IPAMResourceDiscoveryAssociation").WithTerraformTypeName("awscc_ec2_ipam_resource_discovery_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"ipam_arn":    "IpamArn",
		"ipam_id":     "IpamId",
		"ipam_region": "IpamRegion",
		"ipam_resource_discovery_association_arn": "IpamResourceDiscoveryAssociationArn",
		"ipam_resource_discovery_association_id":  "IpamResourceDiscoveryAssociationId",
		"ipam_resource_discovery_id":              "IpamResourceDiscoveryId",
		"is_default":                              "IsDefault",
		"key":                                     "Key",
		"owner_id":                                "OwnerId",
		"resource_discovery_status":               "ResourceDiscoveryStatus",
		"state":                                   "State",
		"tags":                                    "Tags",
		"value":                                   "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
