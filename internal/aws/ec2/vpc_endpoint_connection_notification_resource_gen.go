// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_ec2_vpc_endpoint_connection_notification", vPCEndpointConnectionNotificationResource)
	registry.AddListResourceFactory("awscc_ec2_vpc_endpoint_connection_notification", generic.NewListResource(vPCEndpointConnectionNotificationResource))
}

// vPCEndpointConnectionNotificationResource returns the Terraform awscc_ec2_vpc_endpoint_connection_notification resource.
// This Terraform resource corresponds to the CloudFormation AWS::EC2::VPCEndpointConnectionNotification resource.
func vPCEndpointConnectionNotificationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ConnectionEvents
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The endpoint events for which to receive notifications.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"connection_events": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The endpoint events for which to receive notifications.",
			Required:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ConnectionNotificationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the SNS topic for the notifications.",
		//	  "type": "string"
		//	}
		"connection_notification_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the SNS topic for the notifications.",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: ServiceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the endpoint service.",
		//	  "type": "string"
		//	}
		"service_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the endpoint service.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VPCEndpointConnectionNotificationId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "VPC Endpoint Connection ID generated by service",
		//	  "type": "string"
		//	}
		"vpc_endpoint_connection_notification_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "VPC Endpoint Connection ID generated by service",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VPCEndpointId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the endpoint.",
		//	  "type": "string"
		//	}
		"vpc_endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the endpoint.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::EC2::VPCEndpointConnectionNotification",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::VPCEndpointConnectionNotification").WithTerraformTypeName("awscc_ec2_vpc_endpoint_connection_notification")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "vpc_endpoint_connection_notification_id",
			Description:       "VPC Endpoint Connection ID generated by service",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"connection_events":                       "ConnectionEvents",
		"connection_notification_arn":             "ConnectionNotificationArn",
		"service_id":                              "ServiceId",
		"vpc_endpoint_connection_notification_id": "VPCEndpointConnectionNotificationId",
		"vpc_endpoint_id":                         "VPCEndpointId",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
