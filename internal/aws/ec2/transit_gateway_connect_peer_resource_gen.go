// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_ec2_transit_gateway_connect_peer", transitGatewayConnectPeerResource)
}

// transitGatewayConnectPeerResource returns the Terraform awscc_ec2_transit_gateway_connect_peer resource.
// This Terraform resource corresponds to the CloudFormation AWS::EC2::TransitGatewayConnectPeer resource.
func transitGatewayConnectPeerResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ConnectPeerConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The Connect peer details.",
		//	  "properties": {
		//	    "BgpConfigurations": {
		//	      "description": "The BGP configuration details.",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "BgpStatus": {
		//	            "description": "The BGP status.",
		//	            "type": "string"
		//	          },
		//	          "PeerAddress": {
		//	            "description": "The interior BGP peer IP address for the appliance.",
		//	            "type": "string"
		//	          },
		//	          "PeerAsn": {
		//	            "description": "The peer Autonomous System Number (ASN).",
		//	            "type": "number"
		//	          },
		//	          "TransitGatewayAddress": {
		//	            "description": "The interior BGP peer IP address for the transit gateway.",
		//	            "type": "string"
		//	          },
		//	          "TransitGatewayAsn": {
		//	            "description": "The transit gateway Autonomous System Number (ASN).",
		//	            "type": "number"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "InsideCidrBlocks": {
		//	      "description": "The range of interior BGP peer IP addresses.",
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    },
		//	    "PeerAddress": {
		//	      "description": "The peer IP address (GRE outer IP address) on the appliance side of the Connect peer.",
		//	      "type": "string"
		//	    },
		//	    "Protocol": {
		//	      "description": "The tunnel protocol.",
		//	      "type": "string"
		//	    },
		//	    "TransitGatewayAddress": {
		//	      "description": "The Connect peer IP address on the transit gateway side of the tunnel.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "PeerAddress",
		//	    "InsideCidrBlocks"
		//	  ],
		//	  "type": "object"
		//	}
		"connect_peer_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: BgpConfigurations
				"bgp_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: BgpStatus
							"bgp_status": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The BGP status.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: PeerAddress
							"peer_address": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The interior BGP peer IP address for the appliance.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: PeerAsn
							"peer_asn": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "The peer Autonomous System Number (ASN).",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: TransitGatewayAddress
							"transit_gateway_address": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The interior BGP peer IP address for the transit gateway.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: TransitGatewayAsn
							"transit_gateway_asn": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Description: "The transit gateway Autonomous System Number (ASN).",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The BGP configuration details.",
					Computed:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: InsideCidrBlocks
				"inside_cidr_blocks": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The range of interior BGP peer IP addresses.",
					Required:    true,
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.RequiresReplace(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: PeerAddress
				"peer_address": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The peer IP address (GRE outer IP address) on the appliance side of the Connect peer.",
					Required:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.RequiresReplace(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Protocol
				"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The tunnel protocol.",
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TransitGatewayAddress
				"transit_gateway_address": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The Connect peer IP address on the transit gateway side of the tunnel.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
						stringplanmodifier.RequiresReplaceIfConfigured(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The Connect peer details.",
			Required:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The creation time.",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The creation time.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: State
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The state of the Connect peer.",
		//	  "type": "string"
		//	}
		"state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The state of the Connect peer.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags for the Connect Peer.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws: .",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 256 Unicode characters.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws: .",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 256 Unicode characters.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags for the Connect Peer.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TransitGatewayAttachmentId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Connect attachment.",
		//	  "type": "string"
		//	}
		"transit_gateway_attachment_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Connect attachment.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TransitGatewayConnectPeerId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Connect peer.",
		//	  "type": "string"
		//	}
		"transit_gateway_connect_peer_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Connect peer.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::EC2::TransitGatewayConnectPeer",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::TransitGatewayConnectPeer").WithTerraformTypeName("awscc_ec2_transit_gateway_connect_peer")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"bgp_configurations":              "BgpConfigurations",
		"bgp_status":                      "BgpStatus",
		"connect_peer_configuration":      "ConnectPeerConfiguration",
		"creation_time":                   "CreationTime",
		"inside_cidr_blocks":              "InsideCidrBlocks",
		"key":                             "Key",
		"peer_address":                    "PeerAddress",
		"peer_asn":                        "PeerAsn",
		"protocol":                        "Protocol",
		"state":                           "State",
		"tags":                            "Tags",
		"transit_gateway_address":         "TransitGatewayAddress",
		"transit_gateway_asn":             "TransitGatewayAsn",
		"transit_gateway_attachment_id":   "TransitGatewayAttachmentId",
		"transit_gateway_connect_peer_id": "TransitGatewayConnectPeerId",
		"value":                           "Value",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
