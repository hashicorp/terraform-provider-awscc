// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_transit_gateway_attachment", transitGatewayAttachmentDataSource)
}

// transitGatewayAttachmentDataSource returns the Terraform awscc_ec2_transit_gateway_attachment data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::TransitGatewayAttachment resource.
func transitGatewayAttachmentDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"transit_gateway_attachment_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Options
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The options for the transit gateway vpc attachment.",
		//	  "properties": {
		//	    "ApplianceModeSupport": {
		//	      "description": "Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable",
		//	      "type": "string"
		//	    },
		//	    "DnsSupport": {
		//	      "description": "Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable",
		//	      "type": "string"
		//	    },
		//	    "Ipv6Support": {
		//	      "description": "Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable",
		//	      "type": "string"
		//	    },
		//	    "SecurityGroupReferencingSupport": {
		//	      "description": "Indicates whether to enable Security Group referencing support for Vpc Attachment. Valid Values: enable | disable",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ApplianceModeSupport
				"appliance_mode_support": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: DnsSupport
				"dns_support": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Ipv6Support
				"ipv_6_support": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SecurityGroupReferencingSupport
				"security_group_referencing_support": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether to enable Security Group referencing support for Vpc Attachment. Valid Values: enable | disable",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The options for the transit gateway vpc attachment.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SubnetIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "relationshipRef": {
		//	      "propertyPath": "/properties/SubnetId",
		//	      "typeName": "AWS::EC2::Subnet"
		//	    },
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"subnet_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TransitGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"transit_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::TransitGatewayAttachment",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::TransitGatewayAttachment").WithTerraformTypeName("awscc_ec2_transit_gateway_attachment")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"appliance_mode_support":             "ApplianceModeSupport",
		"dns_support":                        "DnsSupport",
		"ipv_6_support":                      "Ipv6Support",
		"key":                                "Key",
		"options":                            "Options",
		"security_group_referencing_support": "SecurityGroupReferencingSupport",
		"subnet_ids":                         "SubnetIds",
		"tags":                               "Tags",
		"transit_gateway_attachment_id":      "Id",
		"transit_gateway_id":                 "TransitGatewayId",
		"value":                              "Value",
		"vpc_id":                             "VpcId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
