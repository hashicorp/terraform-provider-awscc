// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_local_gateway_virtual_interface", localGatewayVirtualInterfaceDataSource)
}

// localGatewayVirtualInterfaceDataSource returns the Terraform awscc_ec2_local_gateway_virtual_interface data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::LocalGatewayVirtualInterface resource.
func localGatewayVirtualInterfaceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ConfigurationState
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The current state of the local gateway virtual interface",
		//	  "type": "string"
		//	}
		"configuration_state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The current state of the local gateway virtual interface",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LocalAddress
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The local address.",
		//	  "type": "string"
		//	}
		"local_address": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The local address.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LocalBgpAsn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Autonomous System Number(ASN) for the local Border Gateway Protocol (BGP)",
		//	  "type": "integer"
		//	}
		"local_bgp_asn": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The Autonomous System Number(ASN) for the local Border Gateway Protocol (BGP)",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LocalGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the local gateway",
		//	  "type": "string"
		//	}
		"local_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the local gateway",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LocalGatewayVirtualInterfaceGroupId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the virtual interface group",
		//	  "type": "string"
		//	}
		"local_gateway_virtual_interface_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the virtual interface group",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LocalGatewayVirtualInterfaceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the virtual interface",
		//	  "type": "string"
		//	}
		"local_gateway_virtual_interface_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the virtual interface",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OutpostLagId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Outpost LAG ID.",
		//	  "type": "string"
		//	}
		"outpost_lag_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Outpost LAG ID.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OwnerId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Amazon Web Services account that owns the local gateway virtual interface group",
		//	  "type": "string"
		//	}
		"owner_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Amazon Web Services account that owns the local gateway virtual interface group",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PeerAddress
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The peer address.",
		//	  "type": "string"
		//	}
		"peer_address": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The peer address.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PeerBgpAsn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The peer BGP ASN.",
		//	  "type": "integer"
		//	}
		"peer_bgp_asn": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The peer BGP ASN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PeerBgpAsnExtended
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The extended 32-bit ASN of the BGP peer for use with larger ASN values.",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"peer_bgp_asn_extended": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The extended 32-bit ASN of the BGP peer for use with larger ASN values.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 127,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Vlan
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the VLAN.",
		//	  "type": "integer"
		//	}
		"vlan": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The ID of the VLAN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::LocalGatewayVirtualInterface",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::LocalGatewayVirtualInterface").WithTerraformTypeName("awscc_ec2_local_gateway_virtual_interface")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"configuration_state": "ConfigurationState",
		"key":                 "Key",
		"local_address":       "LocalAddress",
		"local_bgp_asn":       "LocalBgpAsn",
		"local_gateway_id":    "LocalGatewayId",
		"local_gateway_virtual_interface_group_id": "LocalGatewayVirtualInterfaceGroupId",
		"local_gateway_virtual_interface_id":       "LocalGatewayVirtualInterfaceId",
		"outpost_lag_id":                           "OutpostLagId",
		"owner_id":                                 "OwnerId",
		"peer_address":                             "PeerAddress",
		"peer_bgp_asn":                             "PeerBgpAsn",
		"peer_bgp_asn_extended":                    "PeerBgpAsnExtended",
		"tags":                                     "Tags",
		"value":                                    "Value",
		"vlan":                                     "Vlan",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
