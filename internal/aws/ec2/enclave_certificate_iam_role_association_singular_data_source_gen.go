// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_ec2_enclave_certificate_iam_role_association", enclaveCertificateIamRoleAssociationDataSourceType)
}

// enclaveCertificateIamRoleAssociationDataSourceType returns the Terraform awscc_ec2_enclave_certificate_iam_role_association data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::EC2::EnclaveCertificateIamRoleAssociation resource type.
func enclaveCertificateIamRoleAssociationDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"certificate_arn": {
			// Property: CertificateArn
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.",
			//   "maxLength": 1283,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.",
			Type:        types.StringType,
			Computed:    true,
		},
		"certificate_s3_bucket_name": {
			// Property: CertificateS3BucketName
			// CloudFormation resource type schema:
			// {
			//   "description": "The name of the Amazon S3 bucket to which the certificate was uploaded.",
			//   "type": "string"
			// }
			Description: "The name of the Amazon S3 bucket to which the certificate was uploaded.",
			Type:        types.StringType,
			Computed:    true,
		},
		"certificate_s3_object_key": {
			// Property: CertificateS3ObjectKey
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored.",
			//   "type": "string"
			// }
			Description: "The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored.",
			Type:        types.StringType,
			Computed:    true,
		},
		"encryption_kms_key_id": {
			// Property: EncryptionKmsKeyId
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of the AWS KMS CMK used to encrypt the private key of the certificate.",
			//   "type": "string"
			// }
			Description: "The ID of the AWS KMS CMK used to encrypt the private key of the certificate.",
			Type:        types.StringType,
			Computed:    true,
		},
		"role_arn": {
			// Property: RoleArn
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.",
			//   "maxLength": 1283,
			//   "minLength": 1,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::EC2::EnclaveCertificateIamRoleAssociation",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::EnclaveCertificateIamRoleAssociation").WithTerraformTypeName("awscc_ec2_enclave_certificate_iam_role_association")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"certificate_arn":            "CertificateArn",
		"certificate_s3_bucket_name": "CertificateS3BucketName",
		"certificate_s3_object_key":  "CertificateS3ObjectKey",
		"encryption_kms_key_id":      "EncryptionKmsKeyId",
		"role_arn":                   "RoleArn",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_ec2_enclave_certificate_iam_role_association", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
