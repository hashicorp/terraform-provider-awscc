// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_ec2_instance", instanceResource)
}

// instanceResource returns the Terraform awscc_ec2_instance resource.
// This Terraform resource corresponds to the CloudFormation AWS::EC2::Instance resource.
func instanceResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AdditionalInfo
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "This property is reserved for internal use. If you use it, the stack fails with this error: Bad property set: [Testing this property] (Service: AmazonEC2; Status Code: 400; Error Code: InvalidParameterCombination; Request ID: 0XXXXXX-49c7-4b40-8bcc-76885dcXXXXX).",
		//	  "type": "string"
		//	}
		"additional_info": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "This property is reserved for internal use. If you use it, the stack fails with this error: Bad property set: [Testing this property] (Service: AmazonEC2; Status Code: 400; Error Code: InvalidParameterCombination; Request ID: 0XXXXXX-49c7-4b40-8bcc-76885dcXXXXX).",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// AdditionalInfo is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Affinity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether the instance is associated with a dedicated host. If you want the instance to always restart on the same host on which it was launched, specify host. If you want the instance to restart on any available host, but try to launch onto the last host it ran on (on a best-effort basis), specify default.",
		//	  "enum": [
		//	    "default",
		//	    "host"
		//	  ],
		//	  "type": "string"
		//	}
		"affinity": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether the instance is associated with a dedicated host. If you want the instance to always restart on the same host on which it was launched, specify host. If you want the instance to restart on any available host, but try to launch onto the last host it ran on (on a best-effort basis), specify default.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"default",
					"host",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: AvailabilityZone
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Availability Zone of the instance.",
		//	  "type": "string"
		//	}
		"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Availability Zone of the instance.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: BlockDeviceMappings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The block device mapping entries that defines the block devices to attach to the instance at launch.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "DeviceName": {
		//	        "description": "The device name (for example, /dev/sdh or xvdh).",
		//	        "type": "string"
		//	      },
		//	      "Ebs": {
		//	        "additionalProperties": false,
		//	        "description": "Parameters used to automatically set up EBS volumes when the instance is launched.",
		//	        "properties": {
		//	          "DeleteOnTermination": {
		//	            "description": "Indicates whether the EBS volume is deleted on instance termination.",
		//	            "type": "boolean"
		//	          },
		//	          "Encrypted": {
		//	            "description": "Indicates whether the volume should be encrypted.",
		//	            "type": "boolean"
		//	          },
		//	          "Iops": {
		//	            "description": "The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.",
		//	            "type": "integer"
		//	          },
		//	          "KmsKeyId": {
		//	            "description": "The identifier of the AWS Key Management Service (AWS KMS) customer managed CMK to use for Amazon EBS encryption. If KmsKeyId is specified, the encrypted state must be true. If the encrypted state is true but you do not specify KmsKeyId, your AWS managed CMK for EBS is used.",
		//	            "type": "string"
		//	          },
		//	          "SnapshotId": {
		//	            "description": "The ID of the snapshot.",
		//	            "type": "string"
		//	          },
		//	          "VolumeSize": {
		//	            "description": "The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size.",
		//	            "type": "integer"
		//	          },
		//	          "VolumeType": {
		//	            "description": "The volume type.",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "NoDevice": {
		//	        "additionalProperties": false,
		//	        "type": "object"
		//	      },
		//	      "VirtualName": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "DeviceName"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"block_device_mappings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DeviceName
					"device_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The device name (for example, /dev/sdh or xvdh).",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Ebs
					"ebs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DeleteOnTermination
							"delete_on_termination": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Indicates whether the EBS volume is deleted on instance termination.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Encrypted
							"encrypted": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Indicates whether the volume should be encrypted.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Iops
							"iops": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: KmsKeyId
							"kms_key_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The identifier of the AWS Key Management Service (AWS KMS) customer managed CMK to use for Amazon EBS encryption. If KmsKeyId is specified, the encrypted state must be true. If the encrypted state is true but you do not specify KmsKeyId, your AWS managed CMK for EBS is used.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: SnapshotId
							"snapshot_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The ID of the snapshot.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: VolumeSize
							"volume_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Description: "The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: VolumeType
							"volume_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The volume type.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Parameters used to automatically set up EBS volumes when the instance is launched.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: NoDevice
					"no_device": schema.StringAttribute{ /*START ATTRIBUTE*/
						CustomType: jsontypes.NormalizedType{},
						Optional:   true,
						Computed:   true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: VirtualName
					"virtual_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The block device mapping entries that defines the block devices to attach to the instance at launch.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CpuOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The CPU options for the instance.",
		//	  "properties": {
		//	    "CoreCount": {
		//	      "type": "integer"
		//	    },
		//	    "ThreadsPerCore": {
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"cpu_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CoreCount
				"core_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ThreadsPerCore
				"threads_per_core": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The CPU options for the instance.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
				objectplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreditSpecification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited.",
		//	  "properties": {
		//	    "CPUCredits": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"credit_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CPUCredits
				"cpu_credits": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DisableApiTermination
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can.",
		//	  "type": "boolean"
		//	}
		"disable_api_termination": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EbsOptimized
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether the instance is optimized for Amazon EBS I/O.",
		//	  "type": "boolean"
		//	}
		"ebs_optimized": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether the instance is optimized for Amazon EBS I/O.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ElasticGpuSpecifications
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An elastic GPU to associate with the instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Type": {
		//	        "description": "The type of Elastic Graphics accelerator. Amazon Elastic Graphics is no longer available.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Type"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"elastic_gpu_specifications": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The type of Elastic Graphics accelerator. Amazon Elastic Graphics is no longer available.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An elastic GPU to associate with the instance.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
				listplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ElasticInferenceAccelerators
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An elastic inference accelerator to associate with the instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Count": {
		//	        "description": "The number of elastic inference accelerators to attach to the instance. Amazon Elastic Inference is no longer available.",
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      },
		//	      "Type": {
		//	        "description": "The type of elastic inference accelerator. Amazon Elastic Inference is no longer available.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Type"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"elastic_inference_accelerators": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Count
					"count": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The number of elastic inference accelerators to attach to the instance. Amazon Elastic Inference is no longer available.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.Int64{ /*START VALIDATORS*/
							int64validator.AtLeast(0),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Type
					"type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The type of elastic inference accelerator. Amazon Elastic Inference is no longer available.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An elastic inference accelerator to associate with the instance.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
				listplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: EnclaveOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Indicates whether the instance is enabled for AWS Nitro Enclaves.",
		//	  "properties": {
		//	    "Enabled": {
		//	      "description": "If this parameter is set to true, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.",
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"enclave_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Enabled
				"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "If this parameter is set to true, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Indicates whether the instance is enabled for AWS Nitro Enclaves.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
				objectplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: HibernationOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Indicates whether an instance is enabled for hibernation.",
		//	  "properties": {
		//	    "Configured": {
		//	      "default": false,
		//	      "description": "If you set this parameter to true, your instance is enabled for hibernation.",
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"hibernation_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Configured
				"configured": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "If you set this parameter to true, your instance is enabled for hibernation.",
					Optional:    true,
					Computed:    true,
					Default:     booldefault.StaticBool(false),
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Indicates whether an instance is enabled for hibernation.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
				objectplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: HostId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with. If you don't specify an ID, Amazon EC2 launches the instance onto any available, compatible dedicated host in your account.",
		//	  "type": "string"
		//	}
		"host_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with. If you don't specify an ID, Amazon EC2 launches the instance onto any available, compatible dedicated host in your account.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: HostResourceGroupArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.",
		//	  "type": "string"
		//	}
		"host_resource_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: IamInstanceProfile
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IAM instance profile.",
		//	  "type": "string"
		//	}
		"iam_instance_profile": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IAM instance profile.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ImageId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.",
		//	  "type": "string"
		//	}
		"image_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The EC2 Instance ID.",
		//	  "type": "string"
		//	}
		"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The EC2 Instance ID.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InstanceInitiatedShutdownBehavior
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).",
		//	  "type": "string"
		//	}
		"instance_initiated_shutdown_behavior": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InstanceType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The instance type.",
		//	  "type": "string"
		//	}
		"instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The instance type.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Ipv6AddressCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.",
		//	  "type": "integer"
		//	}
		"ipv_6_address_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
				int64planmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// Ipv6AddressCount is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Ipv6Addresses
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Ipv6Address": {
		//	        "description": "The IPv6 address.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Ipv6Address"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"ipv_6_addresses": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Ipv6Address
					"ipv_6_address": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The IPv6 address.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
				listplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// Ipv6Addresses is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: KernelId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the kernel.",
		//	  "type": "string"
		//	}
		"kernel_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the kernel.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: KeyName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the key pair.",
		//	  "type": "string"
		//	}
		"key_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the key pair.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LaunchTemplate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The launch template to use to launch the instances.",
		//	  "oneOf": [
		//	    {
		//	      "required": [
		//	        "LaunchTemplateName",
		//	        "Version"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "LaunchTemplateId",
		//	        "Version"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "LaunchTemplateId": {
		//	      "description": "The ID of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.",
		//	      "type": "string"
		//	    },
		//	    "LaunchTemplateName": {
		//	      "description": "The name of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.",
		//	      "type": "string"
		//	    },
		//	    "Version": {
		//	      "description": "The version number of the launch template.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"launch_template": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: LaunchTemplateId
				"launch_template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The ID of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LaunchTemplateName
				"launch_template_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The name of the launch template. You must specify the LaunchTemplateName or the LaunchTemplateId, but not both.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Version
				"version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The version number of the launch template.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The launch template to use to launch the instances.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
				objectplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
			// LaunchTemplate is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: LicenseSpecifications
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The license configurations.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "LicenseConfigurationArn": {
		//	        "description": "The Amazon Resource Name (ARN) of the license configuration.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "LicenseConfigurationArn"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"license_specifications": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: LicenseConfigurationArn
					"license_configuration_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The Amazon Resource Name (ARN) of the license configuration.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The license configurations.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
				listplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: MetadataOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The metadata options for the instance",
		//	  "properties": {
		//	    "HttpEndpoint": {
		//	      "description": "Enables or disables the HTTP metadata endpoint on your instances. If you specify a value of disabled, you cannot access your instance metadata.",
		//	      "enum": [
		//	        "disabled",
		//	        "enabled"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "HttpProtocolIpv6": {
		//	      "description": "Enables or disables the IPv6 endpoint for the instance metadata service. To use this option, the instance must be a Nitro-based instance launched in a subnet that supports IPv6.",
		//	      "enum": [
		//	        "disabled",
		//	        "enabled"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "HttpPutResponseHopLimit": {
		//	      "default": 1,
		//	      "description": "The number of network hops that the metadata token can travel. Maximum is 64.",
		//	      "maximum": 64,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "HttpTokens": {
		//	      "description": "Indicates whether IMDSv2 is required.",
		//	      "enum": [
		//	        "optional",
		//	        "required"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "InstanceMetadataTags": {
		//	      "description": "Indicates whether tags from the instance are propagated to the EBS volumes.",
		//	      "enum": [
		//	        "disabled",
		//	        "enabled"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"metadata_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: HttpEndpoint
				"http_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Enables or disables the HTTP metadata endpoint on your instances. If you specify a value of disabled, you cannot access your instance metadata.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"disabled",
							"enabled",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: HttpProtocolIpv6
				"http_protocol_ipv_6": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Enables or disables the IPv6 endpoint for the instance metadata service. To use this option, the instance must be a Nitro-based instance launched in a subnet that supports IPv6.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"disabled",
							"enabled",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: HttpPutResponseHopLimit
				"http_put_response_hop_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The number of network hops that the metadata token can travel. Maximum is 64.",
					Optional:    true,
					Computed:    true,
					Default:     int64default.StaticInt64(1),
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.Between(1, 64),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: HttpTokens
				"http_tokens": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether IMDSv2 is required.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"optional",
							"required",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: InstanceMetadataTags
				"instance_metadata_tags": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether tags from the instance are propagated to the EBS volumes.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"disabled",
							"enabled",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The metadata options for the instance",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Monitoring
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies whether detailed monitoring is enabled for the instance.",
		//	  "type": "boolean"
		//	}
		"monitoring": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies whether detailed monitoring is enabled for the instance.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: NetworkInterfaces
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The network interfaces to associate with the instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "AssociateCarrierIpAddress": {
		//	        "description": "Not currently supported by AWS CloudFormation.",
		//	        "type": "boolean"
		//	      },
		//	      "AssociatePublicIpAddress": {
		//	        "description": "Indicates whether to assign a public IPv4 address to an instance you launch in a VPC.",
		//	        "type": "boolean"
		//	      },
		//	      "DeleteOnTermination": {
		//	        "description": "If set to true, the interface is deleted when the instance is terminated.",
		//	        "type": "boolean"
		//	      },
		//	      "Description": {
		//	        "description": "The description of the network interface.",
		//	        "type": "string"
		//	      },
		//	      "DeviceIndex": {
		//	        "description": "The position of the network interface in the attachment order. A primary network interface has a device index of 0.",
		//	        "type": "string"
		//	      },
		//	      "EnaSrdSpecification": {
		//	        "additionalProperties": false,
		//	        "description": "Specifies the ENA Express settings for the network interface that's attached to the instance.",
		//	        "properties": {
		//	          "EnaSrdEnabled": {
		//	            "description": "Specifies whether ENA Express is enabled for the network interface when you launch an instance.",
		//	            "type": "boolean"
		//	          },
		//	          "EnaSrdUdpSpecification": {
		//	            "additionalProperties": false,
		//	            "description": "Contains ENA Express settings for UDP network traffic for the network interface that's attached to the instance.",
		//	            "properties": {
		//	              "EnaSrdUdpEnabled": {
		//	                "description": "Indicates whether UDP traffic uses ENA Express for your instance.",
		//	                "type": "boolean"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "GroupSet": {
		//	        "description": "The IDs of the security groups for the network interface.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "Ipv6AddressCount": {
		//	        "description": "A number of IPv6 addresses to assign to the network interface.",
		//	        "type": "integer"
		//	      },
		//	      "Ipv6Addresses": {
		//	        "description": "The IPv6 addresses associated with the network interface.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Ipv6Address": {
		//	              "description": "The IPv6 address.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Ipv6Address"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "NetworkInterfaceId": {
		//	        "description": "The ID of the network interface.",
		//	        "type": "string"
		//	      },
		//	      "PrivateIpAddress": {
		//	        "description": "The private IPv4 address of the network interface.",
		//	        "type": "string"
		//	      },
		//	      "PrivateIpAddresses": {
		//	        "description": "One or more private IPv4 addresses to assign to the network interface.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Primary": {
		//	              "description": "Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.",
		//	              "type": "boolean"
		//	            },
		//	            "PrivateIpAddress": {
		//	              "description": "The private IPv4 addresses.",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "PrivateIpAddress",
		//	            "Primary"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "SecondaryPrivateIpAddressCount": {
		//	        "description": "The number of secondary private IPv4 addresses.",
		//	        "type": "integer"
		//	      },
		//	      "SubnetId": {
		//	        "description": "The ID of the subnet.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "DeviceIndex"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"network_interfaces": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AssociateCarrierIpAddress
					"associate_carrier_ip_address": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Description: "Not currently supported by AWS CloudFormation.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
							boolplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: AssociatePublicIpAddress
					"associate_public_ip_address": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Description: "Indicates whether to assign a public IPv4 address to an instance you launch in a VPC.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
							boolplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: DeleteOnTermination
					"delete_on_termination": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Description: "If set to true, the interface is deleted when the instance is terminated.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
							boolplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Description
					"description": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The description of the network interface.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: DeviceIndex
					"device_index": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The position of the network interface in the attachment order. A primary network interface has a device index of 0.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: EnaSrdSpecification
					"ena_srd_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: EnaSrdEnabled
							"ena_srd_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies whether ENA Express is enabled for the network interface when you launch an instance.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: EnaSrdUdpSpecification
							"ena_srd_udp_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: EnaSrdUdpEnabled
									"ena_srd_udp_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Description: "Indicates whether UDP traffic uses ENA Express for your instance.",
										Optional:    true,
										Computed:    true,
										PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
											boolplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Contains ENA Express settings for UDP network traffic for the network interface that's attached to the instance.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Specifies the ENA Express settings for the network interface that's attached to the instance.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: GroupSet
					"group_set": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "The IDs of the security groups for the network interface.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							generic.Multiset(),
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Ipv6AddressCount
					"ipv_6_address_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "A number of IPv6 addresses to assign to the network interface.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Ipv6Addresses
					"ipv_6_addresses": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Ipv6Address
								"ipv_6_address": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The IPv6 address.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "The IPv6 addresses associated with the network interface.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							generic.Multiset(),
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: NetworkInterfaceId
					"network_interface_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID of the network interface.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: PrivateIpAddress
					"private_ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The private IPv4 address of the network interface.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: PrivateIpAddresses
					"private_ip_addresses": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Primary
								"primary": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Description: "Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.Bool{ /*START VALIDATORS*/
										fwvalidators.NotNullBool(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
										boolplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: PrivateIpAddress
								"private_ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The private IPv4 addresses.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "One or more private IPv4 addresses to assign to the network interface.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							generic.Multiset(),
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: SecondaryPrivateIpAddressCount
					"secondary_private_ip_address_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The number of secondary private IPv4 addresses.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
							int64planmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: SubnetId
					"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID of the subnet.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The network interfaces to associate with the instance.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
				listplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PlacementGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of an existing placement group that you want to launch the instance into (cluster | partition | spread).",
		//	  "type": "string"
		//	}
		"placement_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of an existing placement group that you want to launch the instance into (cluster | partition | spread).",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PrivateDnsName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The private DNS name of the specified instance. For example: ip-10-24-34-0.ec2.internal.",
		//	  "type": "string"
		//	}
		"private_dns_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The private DNS name of the specified instance. For example: ip-10-24-34-0.ec2.internal.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PrivateDnsNameOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The options for the instance hostname.",
		//	  "properties": {
		//	    "EnableResourceNameDnsAAAARecord": {
		//	      "description": "Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. For more information, see Amazon EC2 instance hostname types in the Amazon Elastic Compute Cloud User Guide.",
		//	      "type": "boolean"
		//	    },
		//	    "EnableResourceNameDnsARecord": {
		//	      "description": "Indicates whether to respond to DNS queries for instance hostnames with DNS A records. For more information, see Amazon EC2 instance hostname types in the Amazon Elastic Compute Cloud User Guide.",
		//	      "type": "boolean"
		//	    },
		//	    "HostnameType": {
		//	      "description": "The type of hostnames to assign to instances in the subnet at launch. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. For more information, see Amazon EC2 instance hostname types in the Amazon Elastic Compute Cloud User Guide.",
		//	      "enum": [
		//	        "ip-name",
		//	        "resource-name"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"private_dns_name_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EnableResourceNameDnsAAAARecord
				"enable_resource_name_dns_aaaa_record": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. For more information, see Amazon EC2 instance hostname types in the Amazon Elastic Compute Cloud User Guide.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: EnableResourceNameDnsARecord
				"enable_resource_name_dns_a_record": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether to respond to DNS queries for instance hostnames with DNS A records. For more information, see Amazon EC2 instance hostname types in the Amazon Elastic Compute Cloud User Guide.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
						boolplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: HostnameType
				"hostname_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The type of hostnames to assign to instances in the subnet at launch. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. For more information, see Amazon EC2 instance hostname types in the Amazon Elastic Compute Cloud User Guide.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"ip-name",
							"resource-name",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The options for the instance hostname.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PrivateIp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The private IP address of the specified instance. For example: 10.24.34.0.",
		//	  "type": "string"
		//	}
		"private_ip": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The private IP address of the specified instance. For example: 10.24.34.0.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PrivateIpAddress
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.",
		//	  "type": "string"
		//	}
		"private_ip_address": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PropagateTagsToVolumeOnCreation
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether to assign the tags from the instance to all of the volumes attached to the instance at launch. If you specify true and you assign tags to the instance, those tags are automatically assigned to all of the volumes that you attach to the instance at launch. If you specify false, those tags are not assigned to the attached volumes.",
		//	  "type": "boolean"
		//	}
		"propagate_tags_to_volume_on_creation": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether to assign the tags from the instance to all of the volumes attached to the instance at launch. If you specify true and you assign tags to the instance, those tags are automatically assigned to all of the volumes that you attach to the instance at launch. If you specify false, those tags are not assigned to the attached volumes.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// PropagateTagsToVolumeOnCreation is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: PublicDnsName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The public DNS name of the specified instance. For example: ec2-107-20-50-45.compute-1.amazonaws.com.",
		//	  "type": "string"
		//	}
		"public_dns_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The public DNS name of the specified instance. For example: ec2-107-20-50-45.compute-1.amazonaws.com.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PublicIp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The public IP address of the specified instance. For example: 192.0.2.0.",
		//	  "type": "string"
		//	}
		"public_ip": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The public IP address of the specified instance. For example: 192.0.2.0.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RamdiskId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the RAM disk to select.",
		//	  "type": "string"
		//	}
		"ramdisk_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the RAM disk to select.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SecurityGroupIds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IDs of the security groups.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The IDs of the security groups.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SecurityGroups
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "the names of the security groups. For a nondefault VPC, you must use security group IDs instead.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"security_groups": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "the names of the security groups. For a nondefault VPC, you must use security group IDs instead.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
				listplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SourceDestCheck
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies whether to enable an instance launched in a VPC to perform NAT.",
		//	  "type": "boolean"
		//	}
		"source_dest_check": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies whether to enable an instance launched in a VPC to perform NAT.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SsmAssociations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The SSM document and parameter values in AWS Systems Manager to associate with this instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "AssociationParameters": {
		//	        "description": "The input parameter values to use with the associated SSM document.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Key": {
		//	              "description": "The name of an input parameter that is in the associated SSM document.",
		//	              "type": "string"
		//	            },
		//	            "Value": {
		//	              "description": "The value of an input parameter.",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "type": "string"
		//	              },
		//	              "type": "array",
		//	              "uniqueItems": false
		//	            }
		//	          },
		//	          "required": [
		//	            "Value",
		//	            "Key"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "DocumentName": {
		//	        "description": "The name of an SSM document to associate with the instance.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "DocumentName"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"ssm_associations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AssociationParameters
					"association_parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of an input parameter that is in the associated SSM document.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										fwvalidators.NotNullString(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Value
								"value": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "The value of an input parameter.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.List{ /*START VALIDATORS*/
										fwvalidators.NotNullList(),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
										generic.Multiset(),
										listplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "The input parameter values to use with the associated SSM document.",
						Optional:    true,
						Computed:    true,
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							generic.Multiset(),
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: DocumentName
					"document_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name of an SSM document to associate with the instance.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The SSM document and parameter values in AWS Systems Manager to associate with this instance.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: State
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The current state of the instance.",
		//	  "properties": {
		//	    "Code": {
		//	      "description": "The state of the instance as a 16-bit unsigned integer.",
		//	      "type": "string"
		//	    },
		//	    "Name": {
		//	      "description": "The current state of the instance.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"state": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Code
				"code": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The state of the instance as a 16-bit unsigned integer.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Name
				"name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The current state of the instance.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The current state of the instance.",
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SubnetId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "[EC2-VPC] The ID of the subnet to launch the instance into.\n\n",
		//	  "type": "string"
		//	}
		"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "[EC2-VPC] The ID of the subnet to launch the instance into.\n\n",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags to add to the instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags to add to the instance.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tenancy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.",
		//	  "type": "string"
		//	}
		"tenancy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UserData
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The user data to make available to the instance.",
		//	  "type": "string"
		//	}
		"user_data": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The user data to make available to the instance.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Volumes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The volumes to attach to the instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Device": {
		//	        "description": "The device name (for example, /dev/sdh or xvdh).",
		//	        "type": "string"
		//	      },
		//	      "VolumeId": {
		//	        "description": "The ID of the EBS volume. The volume and instance must be within the same Availability Zone.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "VolumeId",
		//	      "Device"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"volumes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Device
					"device": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The device name (for example, /dev/sdh or xvdh).",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: VolumeId
					"volume_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ID of the EBS volume. The volume and instance must be within the same Availability Zone.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The volumes to attach to the instance.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the VPC that the instance is running in.",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the VPC that the instance is running in.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::EC2::Instance",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::Instance").WithTerraformTypeName("awscc_ec2_instance")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"additional_info":                      "AdditionalInfo",
		"affinity":                             "Affinity",
		"associate_carrier_ip_address":         "AssociateCarrierIpAddress",
		"associate_public_ip_address":          "AssociatePublicIpAddress",
		"association_parameters":               "AssociationParameters",
		"availability_zone":                    "AvailabilityZone",
		"block_device_mappings":                "BlockDeviceMappings",
		"code":                                 "Code",
		"configured":                           "Configured",
		"core_count":                           "CoreCount",
		"count":                                "Count",
		"cpu_credits":                          "CPUCredits",
		"cpu_options":                          "CpuOptions",
		"credit_specification":                 "CreditSpecification",
		"delete_on_termination":                "DeleteOnTermination",
		"description":                          "Description",
		"device":                               "Device",
		"device_index":                         "DeviceIndex",
		"device_name":                          "DeviceName",
		"disable_api_termination":              "DisableApiTermination",
		"document_name":                        "DocumentName",
		"ebs":                                  "Ebs",
		"ebs_optimized":                        "EbsOptimized",
		"elastic_gpu_specifications":           "ElasticGpuSpecifications",
		"elastic_inference_accelerators":       "ElasticInferenceAccelerators",
		"ena_srd_enabled":                      "EnaSrdEnabled",
		"ena_srd_specification":                "EnaSrdSpecification",
		"ena_srd_udp_enabled":                  "EnaSrdUdpEnabled",
		"ena_srd_udp_specification":            "EnaSrdUdpSpecification",
		"enable_resource_name_dns_a_record":    "EnableResourceNameDnsARecord",
		"enable_resource_name_dns_aaaa_record": "EnableResourceNameDnsAAAARecord",
		"enabled":                              "Enabled",
		"enclave_options":                      "EnclaveOptions",
		"encrypted":                            "Encrypted",
		"group_set":                            "GroupSet",
		"hibernation_options":                  "HibernationOptions",
		"host_id":                              "HostId",
		"host_resource_group_arn":              "HostResourceGroupArn",
		"hostname_type":                        "HostnameType",
		"http_endpoint":                        "HttpEndpoint",
		"http_protocol_ipv_6":                  "HttpProtocolIpv6",
		"http_put_response_hop_limit":          "HttpPutResponseHopLimit",
		"http_tokens":                          "HttpTokens",
		"iam_instance_profile":                 "IamInstanceProfile",
		"image_id":                             "ImageId",
		"instance_id":                          "InstanceId",
		"instance_initiated_shutdown_behavior": "InstanceInitiatedShutdownBehavior",
		"instance_metadata_tags":               "InstanceMetadataTags",
		"instance_type":                        "InstanceType",
		"iops":                                 "Iops",
		"ipv_6_address":                        "Ipv6Address",
		"ipv_6_address_count":                  "Ipv6AddressCount",
		"ipv_6_addresses":                      "Ipv6Addresses",
		"kernel_id":                            "KernelId",
		"key":                                  "Key",
		"key_name":                             "KeyName",
		"kms_key_id":                           "KmsKeyId",
		"launch_template":                      "LaunchTemplate",
		"launch_template_id":                   "LaunchTemplateId",
		"launch_template_name":                 "LaunchTemplateName",
		"license_configuration_arn":            "LicenseConfigurationArn",
		"license_specifications":               "LicenseSpecifications",
		"metadata_options":                     "MetadataOptions",
		"monitoring":                           "Monitoring",
		"name":                                 "Name",
		"network_interface_id":                 "NetworkInterfaceId",
		"network_interfaces":                   "NetworkInterfaces",
		"no_device":                            "NoDevice",
		"placement_group_name":                 "PlacementGroupName",
		"primary":                              "Primary",
		"private_dns_name":                     "PrivateDnsName",
		"private_dns_name_options":             "PrivateDnsNameOptions",
		"private_ip":                           "PrivateIp",
		"private_ip_address":                   "PrivateIpAddress",
		"private_ip_addresses":                 "PrivateIpAddresses",
		"propagate_tags_to_volume_on_creation": "PropagateTagsToVolumeOnCreation",
		"public_dns_name":                      "PublicDnsName",
		"public_ip":                            "PublicIp",
		"ramdisk_id":                           "RamdiskId",
		"secondary_private_ip_address_count":   "SecondaryPrivateIpAddressCount",
		"security_group_ids":                   "SecurityGroupIds",
		"security_groups":                      "SecurityGroups",
		"snapshot_id":                          "SnapshotId",
		"source_dest_check":                    "SourceDestCheck",
		"ssm_associations":                     "SsmAssociations",
		"state":                                "State",
		"subnet_id":                            "SubnetId",
		"tags":                                 "Tags",
		"tenancy":                              "Tenancy",
		"threads_per_core":                     "ThreadsPerCore",
		"type":                                 "Type",
		"user_data":                            "UserData",
		"value":                                "Value",
		"version":                              "Version",
		"virtual_name":                         "VirtualName",
		"volume_id":                            "VolumeId",
		"volume_size":                          "VolumeSize",
		"volume_type":                          "VolumeType",
		"volumes":                              "Volumes",
		"vpc_id":                               "VpcId",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/BlockDeviceMappings/*/NoDevice",
		"/properties/BlockDeviceMappings/*/VirtualName",
		"/properties/LicenseSpecification",
		"/properties/AdditionalInfo",
		"/properties/Ipv6AddressCount",
		"/properties/Ipv6Addresses",
		"/properties/PropagateTagsToVolumeOnCreation",
		"/properties/LaunchTemplate",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
