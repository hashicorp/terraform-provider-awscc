// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_traffic_mirror_filter_rule", trafficMirrorFilterRuleDataSource)
}

// trafficMirrorFilterRuleDataSource returns the Terraform awscc_ec2_traffic_mirror_filter_rule data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::TrafficMirrorFilterRule resource.
func trafficMirrorFilterRuleDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the Traffic Mirror Filter rule.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the Traffic Mirror Filter rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DestinationCidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The destination CIDR block to assign to the Traffic Mirror rule.",
		//	  "type": "string"
		//	}
		"destination_cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The destination CIDR block to assign to the Traffic Mirror rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DestinationPortRange
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The destination port range.",
		//	  "properties": {
		//	    "FromPort": {
		//	      "description": "The first port in the Traffic Mirror port range.",
		//	      "type": "integer"
		//	    },
		//	    "ToPort": {
		//	      "description": "The last port in the Traffic Mirror port range.",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "FromPort",
		//	    "ToPort"
		//	  ],
		//	  "type": "object"
		//	}
		"destination_port_range": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: FromPort
				"from_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The first port in the Traffic Mirror port range.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ToPort
				"to_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The last port in the Traffic Mirror port range.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The destination port range.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Protocol
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of protocol, for example 17 (UDP), to assign to the Traffic Mirror rule.",
		//	  "type": "integer"
		//	}
		"protocol": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of protocol, for example 17 (UDP), to assign to the Traffic Mirror rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RuleAction
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The action to take on the filtered traffic (accept/reject).",
		//	  "type": "string"
		//	}
		"rule_action": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The action to take on the filtered traffic (accept/reject).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RuleNumber
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of the Traffic Mirror rule.",
		//	  "type": "integer"
		//	}
		"rule_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of the Traffic Mirror rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourceCidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The source CIDR block to assign to the Traffic Mirror Filter rule.",
		//	  "type": "string"
		//	}
		"source_cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The source CIDR block to assign to the Traffic Mirror Filter rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SourcePortRange
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The source port range.",
		//	  "properties": {
		//	    "FromPort": {
		//	      "description": "The first port in the Traffic Mirror port range.",
		//	      "type": "integer"
		//	    },
		//	    "ToPort": {
		//	      "description": "The last port in the Traffic Mirror port range.",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "FromPort",
		//	    "ToPort"
		//	  ],
		//	  "type": "object"
		//	}
		"source_port_range": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: FromPort
				"from_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The first port in the Traffic Mirror port range.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ToPort
				"to_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The last port in the Traffic Mirror port range.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The source port range.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Any tags assigned to the Traffic Mirror Filter rule.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Any tags assigned to the Traffic Mirror Filter rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TrafficDirection
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The direction of traffic (ingress/egress).",
		//	  "type": "string"
		//	}
		"traffic_direction": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The direction of traffic (ingress/egress).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TrafficMirrorFilterId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the filter that this rule is associated with.",
		//	  "type": "string"
		//	}
		"traffic_mirror_filter_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the filter that this rule is associated with.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TrafficMirrorFilterRuleId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the Traffic Mirror Filter rule.",
		//	  "type": "string"
		//	}
		"traffic_mirror_filter_rule_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the Traffic Mirror Filter rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::TrafficMirrorFilterRule",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::TrafficMirrorFilterRule").WithTerraformTypeName("awscc_ec2_traffic_mirror_filter_rule")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"description":                   "Description",
		"destination_cidr_block":        "DestinationCidrBlock",
		"destination_port_range":        "DestinationPortRange",
		"from_port":                     "FromPort",
		"key":                           "Key",
		"protocol":                      "Protocol",
		"rule_action":                   "RuleAction",
		"rule_number":                   "RuleNumber",
		"source_cidr_block":             "SourceCidrBlock",
		"source_port_range":             "SourcePortRange",
		"tags":                          "Tags",
		"to_port":                       "ToPort",
		"traffic_direction":             "TrafficDirection",
		"traffic_mirror_filter_id":      "TrafficMirrorFilterId",
		"traffic_mirror_filter_rule_id": "TrafficMirrorFilterRuleId",
		"value":                         "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
