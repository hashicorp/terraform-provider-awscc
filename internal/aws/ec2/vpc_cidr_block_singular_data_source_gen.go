// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_vpc_cidr_block", vPCCidrBlockDataSource)
}

// vPCCidrBlockDataSource returns the Terraform awscc_ec2_vpc_cidr_block data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::VPCCidrBlock resource.
func vPCCidrBlockDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AmazonProvidedIpv6CidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.",
		//	  "type": "boolean"
		//	}
		"amazon_provided_ipv_6_cidr_block": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An IPv4 CIDR block to associate with the VPC.",
		//	  "type": "string"
		//	}
		"cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An IPv4 CIDR block to associate with the VPC.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Id of the VPC associated CIDR Block.",
		//	  "type": "string"
		//	}
		"vpc_cidr_block_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Id of the VPC associated CIDR Block.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IpSource
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IP Source of an IPv6 VPC CIDR Block.",
		//	  "type": "string"
		//	}
		"ip_source": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IP Source of an IPv6 VPC CIDR Block.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv4IpamPoolId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.",
		//	  "type": "string"
		//	}
		"ipv_4_ipam_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the IPv4 IPAM pool to Associate a CIDR from to a VPC.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv4NetmaskLength
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.",
		//	  "type": "integer"
		//	}
		"ipv_4_netmask_length": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6AddressAttribute
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The value denoting whether an IPv6 VPC CIDR Block is public or private.",
		//	  "type": "string"
		//	}
		"ipv_6_address_attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The value denoting whether an IPv6 VPC CIDR Block is public or private.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6CidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An IPv6 CIDR block from the IPv6 address pool.",
		//	  "type": "string"
		//	}
		"ipv_6_cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An IPv6 CIDR block from the IPv6 address pool.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6CidrBlockNetworkBorderGroup
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the location from which we advertise the IPV6 CIDR block.",
		//	  "type": "string"
		//	}
		"ipv_6_cidr_block_network_border_group": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the location from which we advertise the IPV6 CIDR block.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6IpamPoolId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.",
		//	  "type": "string"
		//	}
		"ipv_6_ipam_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the IPv6 IPAM pool to Associate a CIDR from to a VPC.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6NetmaskLength
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.",
		//	  "type": "integer"
		//	}
		"ipv_6_netmask_length": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6Pool
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.",
		//	  "type": "string"
		//	}
		"ipv_6_pool": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the VPC.",
		//	  "type": "string"
		//	}
		"vpc_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the VPC.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::VPCCidrBlock",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::VPCCidrBlock").WithTerraformTypeName("awscc_ec2_vpc_cidr_block")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"amazon_provided_ipv_6_cidr_block":      "AmazonProvidedIpv6CidrBlock",
		"cidr_block":                            "CidrBlock",
		"ip_source":                             "IpSource",
		"ipv_4_ipam_pool_id":                    "Ipv4IpamPoolId",
		"ipv_4_netmask_length":                  "Ipv4NetmaskLength",
		"ipv_6_address_attribute":               "Ipv6AddressAttribute",
		"ipv_6_cidr_block":                      "Ipv6CidrBlock",
		"ipv_6_cidr_block_network_border_group": "Ipv6CidrBlockNetworkBorderGroup",
		"ipv_6_ipam_pool_id":                    "Ipv6IpamPoolId",
		"ipv_6_netmask_length":                  "Ipv6NetmaskLength",
		"ipv_6_pool":                            "Ipv6Pool",
		"vpc_cidr_block_id":                     "Id",
		"vpc_id":                                "VpcId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
