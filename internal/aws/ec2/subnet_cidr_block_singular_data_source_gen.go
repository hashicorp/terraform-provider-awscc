// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_subnet_cidr_block", subnetCidrBlockDataSource)
}

// subnetCidrBlockDataSource returns the Terraform awscc_ec2_subnet_cidr_block data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::SubnetCidrBlock resource.
func subnetCidrBlockDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Information about the IPv6 association.",
		//	  "type": "string"
		//	}
		"subnet_cidr_block_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Information about the IPv6 association.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IpSource
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IP Source of an IPv6 Subnet CIDR Block.",
		//	  "type": "string"
		//	}
		"ip_source": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IP Source of an IPv6 Subnet CIDR Block.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6AddressAttribute
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The value denoting whether an IPv6 Subnet CIDR Block is public or private.",
		//	  "type": "string"
		//	}
		"ipv_6_address_attribute": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The value denoting whether an IPv6 Subnet CIDR Block is public or private.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6CidrBlock
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length",
		//	  "maxLength": 42,
		//	  "type": "string"
		//	}
		"ipv_6_cidr_block": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6IpamPoolId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of an IPv6 Amazon VPC IP Address Manager (IPAM) pool from which to allocate, to get the subnet's CIDR",
		//	  "type": "string"
		//	}
		"ipv_6_ipam_pool_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of an IPv6 Amazon VPC IP Address Manager (IPAM) pool from which to allocate, to get the subnet's CIDR",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6NetmaskLength
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The netmask length of the IPv6 CIDR to allocate to the subnet from an IPAM pool",
		//	  "maximum": 128,
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"ipv_6_netmask_length": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The netmask length of the IPv6 CIDR to allocate to the subnet from an IPAM pool",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SubnetId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the subnet",
		//	  "type": "string"
		//	}
		"subnet_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the subnet",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::SubnetCidrBlock",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::SubnetCidrBlock").WithTerraformTypeName("awscc_ec2_subnet_cidr_block")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"ip_source":               "IpSource",
		"ipv_6_address_attribute": "Ipv6AddressAttribute",
		"ipv_6_cidr_block":        "Ipv6CidrBlock",
		"ipv_6_ipam_pool_id":      "Ipv6IpamPoolId",
		"ipv_6_netmask_length":    "Ipv6NetmaskLength",
		"subnet_cidr_block_id":    "Id",
		"subnet_id":               "SubnetId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
