// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_network_interface_attachment", networkInterfaceAttachmentDataSource)
}

// networkInterfaceAttachmentDataSource returns the Terraform awscc_ec2_network_interface_attachment data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::NetworkInterfaceAttachment resource.
func networkInterfaceAttachmentDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AttachmentId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the network interface attachment.",
		//	  "type": "string"
		//	}
		"attachment_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the network interface attachment.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DeleteOnTermination
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": true,
		//	  "description": "Whether to delete the network interface when the instance terminates. By default, this value is set to true.",
		//	  "type": "boolean"
		//	}
		"delete_on_termination": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Whether to delete the network interface when the instance terminates. By default, this value is set to true.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DeviceIndex
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The network interface's position in the attachment order. For example, the first attached network interface has a DeviceIndex of 0.",
		//	  "type": "string"
		//	}
		"device_index": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The network interface's position in the attachment order. For example, the first attached network interface has a DeviceIndex of 0.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnaQueueCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The number of ENA queues to be created with the instance.",
		//	  "type": "integer"
		//	}
		"ena_queue_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The number of ENA queues to be created with the instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EnaSrdSpecification
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "EnaSrdEnabled": {
		//	      "type": "boolean"
		//	    },
		//	    "EnaSrdUdpSpecification": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "EnaSrdUdpEnabled": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"ena_srd_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EnaSrdEnabled
				"ena_srd_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EnaSrdUdpSpecification
				"ena_srd_udp_specification": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: EnaSrdUdpEnabled
						"ena_srd_udp_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the instance to which you will attach the ENI.",
		//	  "type": "string"
		//	}
		"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the instance to which you will attach the ENI.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkInterfaceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the ENI that you want to attach.",
		//	  "type": "string"
		//	}
		"network_interface_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the ENI that you want to attach.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::NetworkInterfaceAttachment",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::NetworkInterfaceAttachment").WithTerraformTypeName("awscc_ec2_network_interface_attachment")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"attachment_id":             "AttachmentId",
		"delete_on_termination":     "DeleteOnTermination",
		"device_index":              "DeviceIndex",
		"ena_queue_count":           "EnaQueueCount",
		"ena_srd_enabled":           "EnaSrdEnabled",
		"ena_srd_specification":     "EnaSrdSpecification",
		"ena_srd_udp_enabled":       "EnaSrdUdpEnabled",
		"ena_srd_udp_specification": "EnaSrdUdpSpecification",
		"instance_id":               "InstanceId",
		"network_interface_id":      "NetworkInterfaceId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
