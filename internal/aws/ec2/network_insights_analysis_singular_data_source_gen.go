// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_network_insights_analysis", networkInsightsAnalysisDataSource)
}

// networkInsightsAnalysisDataSource returns the Terraform awscc_ec2_network_insights_analysis data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::NetworkInsightsAnalysis resource.
func networkInsightsAnalysisDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AlternatePathHints
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "ComponentArn": {
		//	        "type": "string"
		//	      },
		//	      "ComponentId": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"alternate_path_hints": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ComponentArn
					"component_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ComponentId
					"component_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Explanations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Acl": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "AclRule": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Cidr": {
		//	            "type": "string"
		//	          },
		//	          "Egress": {
		//	            "type": "boolean"
		//	          },
		//	          "PortRange": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "From": {
		//	                "type": "integer"
		//	              },
		//	              "To": {
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Protocol": {
		//	            "type": "string"
		//	          },
		//	          "RuleAction": {
		//	            "type": "string"
		//	          },
		//	          "RuleNumber": {
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Address": {
		//	        "type": "string"
		//	      },
		//	      "Addresses": {
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "AttachedTo": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "AvailabilityZones": {
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "Cidrs": {
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "ClassicLoadBalancerListener": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "InstancePort": {
		//	            "type": "integer"
		//	          },
		//	          "LoadBalancerPort": {
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Component": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "CustomerGateway": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Destination": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "DestinationVpc": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Direction": {
		//	        "type": "string"
		//	      },
		//	      "ElasticLoadBalancerListener": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "ExplanationCode": {
		//	        "type": "string"
		//	      },
		//	      "IngressRouteTable": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "InternetGateway": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "LoadBalancerArn": {
		//	        "type": "string"
		//	      },
		//	      "LoadBalancerListenerPort": {
		//	        "type": "integer"
		//	      },
		//	      "LoadBalancerTarget": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Address": {
		//	            "type": "string"
		//	          },
		//	          "AvailabilityZone": {
		//	            "type": "string"
		//	          },
		//	          "Instance": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Arn": {
		//	                "type": "string"
		//	              },
		//	              "Id": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Port": {
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "LoadBalancerTargetGroup": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "LoadBalancerTargetGroups": {
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Arn": {
		//	              "type": "string"
		//	            },
		//	            "Id": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "LoadBalancerTargetPort": {
		//	        "type": "integer"
		//	      },
		//	      "MissingComponent": {
		//	        "type": "string"
		//	      },
		//	      "NatGateway": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "NetworkInterface": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "PacketField": {
		//	        "type": "string"
		//	      },
		//	      "Port": {
		//	        "type": "integer"
		//	      },
		//	      "PortRanges": {
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "From": {
		//	              "type": "integer"
		//	            },
		//	            "To": {
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "PrefixList": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Protocols": {
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "RouteTable": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "RouteTableRoute": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "NatGatewayId": {
		//	            "type": "string"
		//	          },
		//	          "NetworkInterfaceId": {
		//	            "type": "string"
		//	          },
		//	          "Origin": {
		//	            "type": "string"
		//	          },
		//	          "TransitGatewayId": {
		//	            "type": "string"
		//	          },
		//	          "VpcPeeringConnectionId": {
		//	            "type": "string"
		//	          },
		//	          "destinationCidr": {
		//	            "type": "string"
		//	          },
		//	          "destinationPrefixListId": {
		//	            "type": "string"
		//	          },
		//	          "egressOnlyInternetGatewayId": {
		//	            "type": "string"
		//	          },
		//	          "gatewayId": {
		//	            "type": "string"
		//	          },
		//	          "instanceId": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "SecurityGroup": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "SecurityGroupRule": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Cidr": {
		//	            "type": "string"
		//	          },
		//	          "Direction": {
		//	            "type": "string"
		//	          },
		//	          "PortRange": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "From": {
		//	                "type": "integer"
		//	              },
		//	              "To": {
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "PrefixListId": {
		//	            "type": "string"
		//	          },
		//	          "Protocol": {
		//	            "type": "string"
		//	          },
		//	          "SecurityGroupId": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "SecurityGroups": {
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Arn": {
		//	              "type": "string"
		//	            },
		//	            "Id": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "type": "array"
		//	      },
		//	      "SourceVpc": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "State": {
		//	        "type": "string"
		//	      },
		//	      "Subnet": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "SubnetRouteTable": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Vpc": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "VpcPeeringConnection": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "VpnConnection": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "VpnGateway": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "vpcEndpoint": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"explanations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Acl
					"acl": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: AclRule
					"acl_rule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Cidr
							"cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Egress
							"egress": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PortRange
							"port_range": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: From
									"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: To
									"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Protocol
							"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: RuleAction
							"rule_action": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: RuleNumber
							"rule_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Address
					"address": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Addresses
					"addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: AttachedTo
					"attached_to": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: AvailabilityZones
					"availability_zones": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Cidrs
					"cidrs": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ClassicLoadBalancerListener
					"classic_load_balancer_listener": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: InstancePort
							"instance_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: LoadBalancerPort
							"load_balancer_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Component
					"component": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: CustomerGateway
					"customer_gateway": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Destination
					"destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: DestinationVpc
					"destination_vpc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Direction
					"direction": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ElasticLoadBalancerListener
					"elastic_load_balancer_listener": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: ExplanationCode
					"explanation_code": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: IngressRouteTable
					"ingress_route_table": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: InternetGateway
					"internet_gateway": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: LoadBalancerArn
					"load_balancer_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: LoadBalancerListenerPort
					"load_balancer_listener_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: LoadBalancerTarget
					"load_balancer_target": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Address
							"address": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: AvailabilityZone
							"availability_zone": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Instance
							"instance": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Arn
									"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Id
									"id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Port
							"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: LoadBalancerTargetGroup
					"load_balancer_target_group": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: LoadBalancerTargetGroups
					"load_balancer_target_groups": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Arn
								"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Id
								"id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: LoadBalancerTargetPort
					"load_balancer_target_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: MissingComponent
					"missing_component": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: NatGateway
					"nat_gateway": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: NetworkInterface
					"network_interface": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: PacketField
					"packet_field": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Port
					"port": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: PortRanges
					"port_ranges": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: From
								"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: To
								"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: PrefixList
					"prefix_list": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Protocols
					"protocols": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: RouteTable
					"route_table": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: RouteTableRoute
					"route_table_route": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NatGatewayId
							"nat_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: NetworkInterfaceId
							"network_interface_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Origin
							"origin": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: TransitGatewayId
							"transit_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: VpcPeeringConnectionId
							"vpc_peering_connection_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: destinationCidr
							"destination_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: destinationPrefixListId
							"destination_prefix_list_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: egressOnlyInternetGatewayId
							"egress_only_internet_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: gatewayId
							"gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: instanceId
							"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SecurityGroup
					"security_group": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SecurityGroupRule
					"security_group_rule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Cidr
							"cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Direction
							"direction": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PortRange
							"port_range": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: From
									"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: To
									"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PrefixListId
							"prefix_list_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Protocol
							"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SecurityGroupId
							"security_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SecurityGroups
					"security_groups": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Arn
								"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Id
								"id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SourceVpc
					"source_vpc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: State
					"state": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Subnet
					"subnet": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SubnetRouteTable
					"subnet_route_table": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Vpc
					"vpc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: VpcPeeringConnection
					"vpc_peering_connection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: VpnConnection
					"vpn_connection": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: VpnGateway
					"vpn_gateway": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: vpcEndpoint
					"vpc_endpoint": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: FilterInArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"filter_in_arns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ForwardPathComponents
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "AclRule": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Cidr": {
		//	            "type": "string"
		//	          },
		//	          "Egress": {
		//	            "type": "boolean"
		//	          },
		//	          "PortRange": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "From": {
		//	                "type": "integer"
		//	              },
		//	              "To": {
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Protocol": {
		//	            "type": "string"
		//	          },
		//	          "RuleAction": {
		//	            "type": "string"
		//	          },
		//	          "RuleNumber": {
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Component": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "DestinationVpc": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "InboundHeader": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "DestinationAddresses": {
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "DestinationPortRanges": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "From": {
		//	                  "type": "integer"
		//	                },
		//	                "To": {
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "Protocol": {
		//	            "type": "string"
		//	          },
		//	          "SourceAddresses": {
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "SourcePortRanges": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "From": {
		//	                  "type": "integer"
		//	                },
		//	                "To": {
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "OutboundHeader": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "DestinationAddresses": {
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "DestinationPortRanges": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "From": {
		//	                  "type": "integer"
		//	                },
		//	                "To": {
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "Protocol": {
		//	            "type": "string"
		//	          },
		//	          "SourceAddresses": {
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "SourcePortRanges": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "From": {
		//	                  "type": "integer"
		//	                },
		//	                "To": {
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "RouteTableRoute": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "NatGatewayId": {
		//	            "type": "string"
		//	          },
		//	          "NetworkInterfaceId": {
		//	            "type": "string"
		//	          },
		//	          "Origin": {
		//	            "type": "string"
		//	          },
		//	          "TransitGatewayId": {
		//	            "type": "string"
		//	          },
		//	          "VpcPeeringConnectionId": {
		//	            "type": "string"
		//	          },
		//	          "destinationCidr": {
		//	            "type": "string"
		//	          },
		//	          "destinationPrefixListId": {
		//	            "type": "string"
		//	          },
		//	          "egressOnlyInternetGatewayId": {
		//	            "type": "string"
		//	          },
		//	          "gatewayId": {
		//	            "type": "string"
		//	          },
		//	          "instanceId": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "SecurityGroupRule": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Cidr": {
		//	            "type": "string"
		//	          },
		//	          "Direction": {
		//	            "type": "string"
		//	          },
		//	          "PortRange": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "From": {
		//	                "type": "integer"
		//	              },
		//	              "To": {
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "PrefixListId": {
		//	            "type": "string"
		//	          },
		//	          "Protocol": {
		//	            "type": "string"
		//	          },
		//	          "SecurityGroupId": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "SequenceNumber": {
		//	        "type": "integer"
		//	      },
		//	      "SourceVpc": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Subnet": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Vpc": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"forward_path_components": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AclRule
					"acl_rule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Cidr
							"cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Egress
							"egress": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PortRange
							"port_range": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: From
									"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: To
									"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Protocol
							"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: RuleAction
							"rule_action": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: RuleNumber
							"rule_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Component
					"component": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: DestinationVpc
					"destination_vpc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: InboundHeader
					"inbound_header": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DestinationAddresses
							"destination_addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: DestinationPortRanges
							"destination_port_ranges": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: From
										"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: To
										"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Protocol
							"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SourceAddresses
							"source_addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: SourcePortRanges
							"source_port_ranges": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: From
										"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: To
										"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: OutboundHeader
					"outbound_header": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DestinationAddresses
							"destination_addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: DestinationPortRanges
							"destination_port_ranges": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: From
										"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: To
										"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Protocol
							"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SourceAddresses
							"source_addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: SourcePortRanges
							"source_port_ranges": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: From
										"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: To
										"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: RouteTableRoute
					"route_table_route": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NatGatewayId
							"nat_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: NetworkInterfaceId
							"network_interface_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Origin
							"origin": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: TransitGatewayId
							"transit_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: VpcPeeringConnectionId
							"vpc_peering_connection_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: destinationCidr
							"destination_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: destinationPrefixListId
							"destination_prefix_list_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: egressOnlyInternetGatewayId
							"egress_only_internet_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: gatewayId
							"gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: instanceId
							"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SecurityGroupRule
					"security_group_rule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Cidr
							"cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Direction
							"direction": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PortRange
							"port_range": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: From
									"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: To
									"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PrefixListId
							"prefix_list_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Protocol
							"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SecurityGroupId
							"security_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SequenceNumber
					"sequence_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SourceVpc
					"source_vpc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Subnet
					"subnet": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Vpc
					"vpc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkInsightsAnalysisArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"network_insights_analysis_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkInsightsAnalysisId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"network_insights_analysis_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkInsightsPathId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"network_insights_path_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: NetworkPathFound
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "boolean"
		//	}
		"network_path_found": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ReturnPathComponents
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "AclRule": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Cidr": {
		//	            "type": "string"
		//	          },
		//	          "Egress": {
		//	            "type": "boolean"
		//	          },
		//	          "PortRange": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "From": {
		//	                "type": "integer"
		//	              },
		//	              "To": {
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Protocol": {
		//	            "type": "string"
		//	          },
		//	          "RuleAction": {
		//	            "type": "string"
		//	          },
		//	          "RuleNumber": {
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Component": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "DestinationVpc": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "InboundHeader": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "DestinationAddresses": {
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "DestinationPortRanges": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "From": {
		//	                  "type": "integer"
		//	                },
		//	                "To": {
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "Protocol": {
		//	            "type": "string"
		//	          },
		//	          "SourceAddresses": {
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "SourcePortRanges": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "From": {
		//	                  "type": "integer"
		//	                },
		//	                "To": {
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "OutboundHeader": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "DestinationAddresses": {
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "DestinationPortRanges": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "From": {
		//	                  "type": "integer"
		//	                },
		//	                "To": {
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "Protocol": {
		//	            "type": "string"
		//	          },
		//	          "SourceAddresses": {
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "SourcePortRanges": {
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "From": {
		//	                  "type": "integer"
		//	                },
		//	                "To": {
		//	                  "type": "integer"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "RouteTableRoute": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "NatGatewayId": {
		//	            "type": "string"
		//	          },
		//	          "NetworkInterfaceId": {
		//	            "type": "string"
		//	          },
		//	          "Origin": {
		//	            "type": "string"
		//	          },
		//	          "TransitGatewayId": {
		//	            "type": "string"
		//	          },
		//	          "VpcPeeringConnectionId": {
		//	            "type": "string"
		//	          },
		//	          "destinationCidr": {
		//	            "type": "string"
		//	          },
		//	          "destinationPrefixListId": {
		//	            "type": "string"
		//	          },
		//	          "egressOnlyInternetGatewayId": {
		//	            "type": "string"
		//	          },
		//	          "gatewayId": {
		//	            "type": "string"
		//	          },
		//	          "instanceId": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "SecurityGroupRule": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Cidr": {
		//	            "type": "string"
		//	          },
		//	          "Direction": {
		//	            "type": "string"
		//	          },
		//	          "PortRange": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "From": {
		//	                "type": "integer"
		//	              },
		//	              "To": {
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "PrefixListId": {
		//	            "type": "string"
		//	          },
		//	          "Protocol": {
		//	            "type": "string"
		//	          },
		//	          "SecurityGroupId": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "SequenceNumber": {
		//	        "type": "integer"
		//	      },
		//	      "SourceVpc": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Subnet": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Vpc": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Arn": {
		//	            "type": "string"
		//	          },
		//	          "Id": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"return_path_components": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: AclRule
					"acl_rule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Cidr
							"cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Egress
							"egress": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PortRange
							"port_range": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: From
									"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: To
									"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Protocol
							"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: RuleAction
							"rule_action": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: RuleNumber
							"rule_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Component
					"component": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: DestinationVpc
					"destination_vpc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: InboundHeader
					"inbound_header": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DestinationAddresses
							"destination_addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: DestinationPortRanges
							"destination_port_ranges": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: From
										"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: To
										"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Protocol
							"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SourceAddresses
							"source_addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: SourcePortRanges
							"source_port_ranges": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: From
										"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: To
										"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: OutboundHeader
					"outbound_header": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DestinationAddresses
							"destination_addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: DestinationPortRanges
							"destination_port_ranges": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: From
										"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: To
										"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Protocol
							"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SourceAddresses
							"source_addresses": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: SourcePortRanges
							"source_port_ranges": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: From
										"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: To
										"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: RouteTableRoute
					"route_table_route": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NatGatewayId
							"nat_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: NetworkInterfaceId
							"network_interface_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Origin
							"origin": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: TransitGatewayId
							"transit_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: VpcPeeringConnectionId
							"vpc_peering_connection_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: destinationCidr
							"destination_cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: destinationPrefixListId
							"destination_prefix_list_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: egressOnlyInternetGatewayId
							"egress_only_internet_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: gatewayId
							"gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: instanceId
							"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SecurityGroupRule
					"security_group_rule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Cidr
							"cidr": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Direction
							"direction": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PortRange
							"port_range": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: From
									"from": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: To
									"to": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PrefixListId
							"prefix_list_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Protocol
							"protocol": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SecurityGroupId
							"security_group_id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SequenceNumber
					"sequence_number": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: SourceVpc
					"source_vpc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Subnet
					"subnet": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Vpc
					"vpc": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Arn
							"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Id
							"id": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: StartDate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"start_date": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "running",
		//	    "failed",
		//	    "succeeded"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: StatusMessage
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"status_message": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::NetworkInsightsAnalysis",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::NetworkInsightsAnalysis").WithTerraformTypeName("awscc_ec2_network_insights_analysis")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"acl":                             "Acl",
		"acl_rule":                        "AclRule",
		"address":                         "Address",
		"addresses":                       "Addresses",
		"alternate_path_hints":            "AlternatePathHints",
		"arn":                             "Arn",
		"attached_to":                     "AttachedTo",
		"availability_zone":               "AvailabilityZone",
		"availability_zones":              "AvailabilityZones",
		"cidr":                            "Cidr",
		"cidrs":                           "Cidrs",
		"classic_load_balancer_listener":  "ClassicLoadBalancerListener",
		"component":                       "Component",
		"component_arn":                   "ComponentArn",
		"component_id":                    "ComponentId",
		"customer_gateway":                "CustomerGateway",
		"destination":                     "Destination",
		"destination_addresses":           "DestinationAddresses",
		"destination_cidr":                "destinationCidr",
		"destination_port_ranges":         "DestinationPortRanges",
		"destination_prefix_list_id":      "destinationPrefixListId",
		"destination_vpc":                 "DestinationVpc",
		"direction":                       "Direction",
		"egress":                          "Egress",
		"egress_only_internet_gateway_id": "egressOnlyInternetGatewayId",
		"elastic_load_balancer_listener":  "ElasticLoadBalancerListener",
		"explanation_code":                "ExplanationCode",
		"explanations":                    "Explanations",
		"filter_in_arns":                  "FilterInArns",
		"forward_path_components":         "ForwardPathComponents",
		"from":                            "From",
		"gateway_id":                      "gatewayId",
		"id":                              "Id",
		"inbound_header":                  "InboundHeader",
		"ingress_route_table":             "IngressRouteTable",
		"instance":                        "Instance",
		"instance_id":                     "instanceId",
		"instance_port":                   "InstancePort",
		"internet_gateway":                "InternetGateway",
		"key":                             "Key",
		"load_balancer_arn":               "LoadBalancerArn",
		"load_balancer_listener_port":     "LoadBalancerListenerPort",
		"load_balancer_port":              "LoadBalancerPort",
		"load_balancer_target":            "LoadBalancerTarget",
		"load_balancer_target_group":      "LoadBalancerTargetGroup",
		"load_balancer_target_groups":     "LoadBalancerTargetGroups",
		"load_balancer_target_port":       "LoadBalancerTargetPort",
		"missing_component":               "MissingComponent",
		"nat_gateway":                     "NatGateway",
		"nat_gateway_id":                  "NatGatewayId",
		"network_insights_analysis_arn":   "NetworkInsightsAnalysisArn",
		"network_insights_analysis_id":    "NetworkInsightsAnalysisId",
		"network_insights_path_id":        "NetworkInsightsPathId",
		"network_interface":               "NetworkInterface",
		"network_interface_id":            "NetworkInterfaceId",
		"network_path_found":              "NetworkPathFound",
		"origin":                          "Origin",
		"outbound_header":                 "OutboundHeader",
		"packet_field":                    "PacketField",
		"port":                            "Port",
		"port_range":                      "PortRange",
		"port_ranges":                     "PortRanges",
		"prefix_list":                     "PrefixList",
		"prefix_list_id":                  "PrefixListId",
		"protocol":                        "Protocol",
		"protocols":                       "Protocols",
		"return_path_components":          "ReturnPathComponents",
		"route_table":                     "RouteTable",
		"route_table_route":               "RouteTableRoute",
		"rule_action":                     "RuleAction",
		"rule_number":                     "RuleNumber",
		"security_group":                  "SecurityGroup",
		"security_group_id":               "SecurityGroupId",
		"security_group_rule":             "SecurityGroupRule",
		"security_groups":                 "SecurityGroups",
		"sequence_number":                 "SequenceNumber",
		"source_addresses":                "SourceAddresses",
		"source_port_ranges":              "SourcePortRanges",
		"source_vpc":                      "SourceVpc",
		"start_date":                      "StartDate",
		"state":                           "State",
		"status":                          "Status",
		"status_message":                  "StatusMessage",
		"subnet":                          "Subnet",
		"subnet_route_table":              "SubnetRouteTable",
		"tags":                            "Tags",
		"to":                              "To",
		"transit_gateway_id":              "TransitGatewayId",
		"value":                           "Value",
		"vpc":                             "Vpc",
		"vpc_endpoint":                    "vpcEndpoint",
		"vpc_peering_connection":          "VpcPeeringConnection",
		"vpc_peering_connection_id":       "VpcPeeringConnectionId",
		"vpn_connection":                  "VpnConnection",
		"vpn_gateway":                     "VpnGateway",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
