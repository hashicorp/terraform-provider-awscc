// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ec2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ec2_dhcp_options", dHCPOptionsDataSource)
}

// dHCPOptionsDataSource returns the Terraform awscc_ec2_dhcp_options data source.
// This Terraform data source corresponds to the CloudFormation AWS::EC2::DHCPOptions resource.
func dHCPOptionsDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DhcpOptionsId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"dhcp_options_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "This value is used to complete unqualified DNS hostnames.",
		//	  "type": "string"
		//	}
		"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "This value is used to complete unqualified DNS hostnames.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainNameServers
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"domain_name_servers": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Ipv6AddressPreferredLeaseTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The preferred Lease Time for ipV6 address in seconds.",
		//	  "type": "integer"
		//	}
		"ipv_6_address_preferred_lease_time": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The preferred Lease Time for ipV6 address in seconds.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NetbiosNameServers
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv4 addresses of up to four NetBIOS name servers.",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"netbios_name_servers": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The IPv4 addresses of up to four NetBIOS name servers.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NetbiosNodeType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The NetBIOS node type (1, 2, 4, or 8).",
		//	  "type": "integer"
		//	}
		"netbios_node_type": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The NetBIOS node type (1, 2, 4, or 8).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: NtpServers
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The IPv4 addresses of up to four Network Time Protocol (NTP) servers.",
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"ntp_servers": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The IPv4 addresses of up to four Network Time Protocol (NTP) servers.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Any tags assigned to the DHCP options set.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Any tags assigned to the DHCP options set.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::EC2::DHCPOptions",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::EC2::DHCPOptions").WithTerraformTypeName("awscc_ec2_dhcp_options")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"dhcp_options_id":                    "DhcpOptionsId",
		"domain_name":                        "DomainName",
		"domain_name_servers":                "DomainNameServers",
		"ipv_6_address_preferred_lease_time": "Ipv6AddressPreferredLeaseTime",
		"key":                                "Key",
		"netbios_name_servers":               "NetbiosNameServers",
		"netbios_node_type":                  "NetbiosNodeType",
		"ntp_servers":                        "NtpServers",
		"tags":                               "Tags",
		"value":                              "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
