// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package sso

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_sso_application", applicationDataSource)
}

// applicationDataSource returns the Terraform awscc_sso_application data source.
// This Terraform data source corresponds to the CloudFormation AWS::SSO::Application resource.
func applicationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApplicationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Application ARN that is returned upon creation of the Identity Center (SSO) Application",
		//	  "maxLength": 1224,
		//	  "minLength": 10,
		//	  "pattern": "^arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso::\\d{12}:application/(sso)?ins-[a-zA-Z0-9-.]{16}/apl-[a-zA-Z0-9]{16}$",
		//	  "type": "string"
		//	}
		"application_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Application ARN that is returned upon creation of the Identity Center (SSO) Application",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ApplicationProviderArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the application provider under which the operation will run",
		//	  "maxLength": 1224,
		//	  "minLength": 10,
		//	  "pattern": "^arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso::aws:applicationProvider/[a-zA-Z0-9-/]+$",
		//	  "type": "string"
		//	}
		"application_provider_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the application provider under which the operation will run",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description information for the Identity Center (SSO) Application",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description information for the Identity Center (SSO) Application",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the instance of IAM Identity Center under which the operation will run",
		//	  "maxLength": 1224,
		//	  "minLength": 10,
		//	  "pattern": "^arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso:::instance/(sso)?ins-[a-zA-Z0-9-.]{16}$",
		//	  "type": "string"
		//	}
		"instance_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the instance of IAM Identity Center under which the operation will run",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name you want to assign to this Identity Center (SSO) Application",
		//	  "maxLength": 255,
		//	  "minLength": 0,
		//	  "pattern": "^[\\w+=,.@-]+$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name you want to assign to this Identity Center (SSO) Application",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PortalOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A structure that describes the options for the portal associated with an application",
		//	  "properties": {
		//	    "SignInOptions": {
		//	      "additionalProperties": false,
		//	      "description": "A structure that describes the sign-in options for the access portal",
		//	      "properties": {
		//	        "ApplicationUrl": {
		//	          "description": "The URL that accepts authentication requests for an application, this is a required parameter if the Origin parameter is APPLICATION",
		//	          "maxLength": 512,
		//	          "minLength": 1,
		//	          "pattern": "^http(s)?:\\/\\/[-a-zA-Z0-9+\u0026@#\\/%?=~_|!:,.;]*[-a-zA-Z0-9+\u0026bb@#\\/%?=~_|]$",
		//	          "type": "string"
		//	        },
		//	        "Origin": {
		//	          "description": "This determines how IAM Identity Center navigates the user to the target application",
		//	          "enum": [
		//	            "IDENTITY_CENTER",
		//	            "APPLICATION"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Origin"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Visibility": {
		//	      "description": "Indicates whether this application is visible in the access portal",
		//	      "enum": [
		//	        "ENABLED",
		//	        "DISABLED"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"portal_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: SignInOptions
				"sign_in_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ApplicationUrl
						"application_url": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The URL that accepts authentication requests for an application, this is a required parameter if the Origin parameter is APPLICATION",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Origin
						"origin": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "This determines how IAM Identity Center navigates the user to the target application",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A structure that describes the sign-in options for the access portal",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Visibility
				"visibility": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether this application is visible in the access portal",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A structure that describes the options for the portal associated with an application",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies whether the application is enabled or disabled",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies whether the application is enabled or disabled",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Specifies tags to be attached to the application",
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "^[\\w+=,.@-]+$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "pattern": "^[\\w+=,.@-]+$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 75,
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SSO::Application",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SSO::Application").WithTerraformTypeName("awscc_sso_application")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"application_arn":          "ApplicationArn",
		"application_provider_arn": "ApplicationProviderArn",
		"application_url":          "ApplicationUrl",
		"description":              "Description",
		"instance_arn":             "InstanceArn",
		"key":                      "Key",
		"name":                     "Name",
		"origin":                   "Origin",
		"portal_options":           "PortalOptions",
		"sign_in_options":          "SignInOptions",
		"status":                   "Status",
		"tags":                     "Tags",
		"value":                    "Value",
		"visibility":               "Visibility",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
