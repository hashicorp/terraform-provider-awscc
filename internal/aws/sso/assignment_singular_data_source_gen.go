// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package sso

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_sso_assignment", assignmentDataSource)
}

// assignmentDataSource returns the Terraform awscc_sso_assignment data source.
// This Terraform data source corresponds to the CloudFormation AWS::SSO::Assignment resource.
func assignmentDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: InstanceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The sso instance that the permission set is owned.",
		//	  "maxLength": 1224,
		//	  "minLength": 10,
		//	  "pattern": "arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso:::instance/(sso)?ins-[a-zA-Z0-9-.]{16}",
		//	  "type": "string"
		//	}
		"instance_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The sso instance that the permission set is owned.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PermissionSetArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The permission set that the assignemt will be assigned",
		//	  "maxLength": 1224,
		//	  "minLength": 10,
		//	  "pattern": "arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):sso:::permissionSet/(sso)?ins-[a-zA-Z0-9-.]{16}/ps-[a-zA-Z0-9-./]{16}",
		//	  "type": "string"
		//	}
		"permission_set_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The permission set that the assignemt will be assigned",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PrincipalId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The assignee's identifier, user id/group id",
		//	  "maxLength": 47,
		//	  "minLength": 1,
		//	  "pattern": "^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$",
		//	  "type": "string"
		//	}
		"principal_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The assignee's identifier, user id/group id",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PrincipalType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The assignee's type, user/group",
		//	  "enum": [
		//	    "USER",
		//	    "GROUP"
		//	  ],
		//	  "type": "string"
		//	}
		"principal_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The assignee's type, user/group",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TargetId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The account id to be provisioned.",
		//	  "pattern": "\\d{12}",
		//	  "type": "string"
		//	}
		"target_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The account id to be provisioned.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TargetType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of resource to be provsioned to, only aws account now",
		//	  "enum": [
		//	    "AWS_ACCOUNT"
		//	  ],
		//	  "type": "string"
		//	}
		"target_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of resource to be provsioned to, only aws account now",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SSO::Assignment",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SSO::Assignment").WithTerraformTypeName("awscc_sso_assignment")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"instance_arn":       "InstanceArn",
		"permission_set_arn": "PermissionSetArn",
		"principal_id":       "PrincipalId",
		"principal_type":     "PrincipalType",
		"target_id":          "TargetId",
		"target_type":        "TargetType",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
