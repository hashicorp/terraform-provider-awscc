// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package pcaconnectorad

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_pcaconnectorad_template", templateDataSource)
}

// templateDataSource returns the Terraform awscc_pcaconnectorad_template data source.
// This Terraform data source corresponds to the CloudFormation AWS::PCAConnectorAD::Template resource.
func templateDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ConnectorArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 200,
		//	  "minLength": 5,
		//	  "pattern": "^arn:[\\w-]+:pca-connector-ad:[\\w-]+:[0-9]+:connector\\/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$",
		//	  "type": "string"
		//	}
		"connector_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Definition
		// CloudFormation resource type schema:
		//
		//	{
		//	  "properties": {
		//	    "TemplateV2": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CertificateValidity": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "RenewalPeriod": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Period": {
		//	                  "maximum": 8766000,
		//	                  "minimum": 1,
		//	                  "type": "number"
		//	                },
		//	                "PeriodType": {
		//	                  "enum": [
		//	                    "HOURS",
		//	                    "DAYS",
		//	                    "WEEKS",
		//	                    "MONTHS",
		//	                    "YEARS"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Period",
		//	                "PeriodType"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ValidityPeriod": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Period": {
		//	                  "maximum": 8766000,
		//	                  "minimum": 1,
		//	                  "type": "number"
		//	                },
		//	                "PeriodType": {
		//	                  "enum": [
		//	                    "HOURS",
		//	                    "DAYS",
		//	                    "WEEKS",
		//	                    "MONTHS",
		//	                    "YEARS"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Period",
		//	                "PeriodType"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "RenewalPeriod",
		//	            "ValidityPeriod"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "EnrollmentFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "EnableKeyReuseOnNtTokenKeysetStorageFull": {
		//	              "type": "boolean"
		//	            },
		//	            "IncludeSymmetricAlgorithms": {
		//	              "type": "boolean"
		//	            },
		//	            "NoSecurityExtension": {
		//	              "type": "boolean"
		//	            },
		//	            "RemoveInvalidCertificateFromPersonalStore": {
		//	              "type": "boolean"
		//	            },
		//	            "UserInteractionRequired": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Extensions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ApplicationPolicies": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Critical": {
		//	                  "type": "boolean"
		//	                },
		//	                "Policies": {
		//	                  "items": {
		//	                    "properties": {
		//	                      "PolicyObjectIdentifier": {
		//	                        "maxLength": 64,
		//	                        "minLength": 1,
		//	                        "pattern": "^([0-2])\\.([0-9]|([0-3][0-9]))(\\.([0-9]+)){0,126}$",
		//	                        "type": "string"
		//	                      },
		//	                      "PolicyType": {
		//	                        "enum": [
		//	                          "ALL_APPLICATION_POLICIES",
		//	                          "ANY_PURPOSE",
		//	                          "ATTESTATION_IDENTITY_KEY_CERTIFICATE",
		//	                          "CERTIFICATE_REQUEST_AGENT",
		//	                          "CLIENT_AUTHENTICATION",
		//	                          "CODE_SIGNING",
		//	                          "CTL_USAGE",
		//	                          "DIGITAL_RIGHTS",
		//	                          "DIRECTORY_SERVICE_EMAIL_REPLICATION",
		//	                          "DISALLOWED_LIST",
		//	                          "DNS_SERVER_TRUST",
		//	                          "DOCUMENT_ENCRYPTION",
		//	                          "DOCUMENT_SIGNING",
		//	                          "DYNAMIC_CODE_GENERATOR",
		//	                          "EARLY_LAUNCH_ANTIMALWARE_DRIVER",
		//	                          "EMBEDDED_WINDOWS_SYSTEM_COMPONENT_VERIFICATION",
		//	                          "ENCLAVE",
		//	                          "ENCRYPTING_FILE_SYSTEM",
		//	                          "ENDORSEMENT_KEY_CERTIFICATE",
		//	                          "FILE_RECOVERY",
		//	                          "HAL_EXTENSION",
		//	                          "IP_SECURITY_END_SYSTEM",
		//	                          "IP_SECURITY_IKE_INTERMEDIATE",
		//	                          "IP_SECURITY_TUNNEL_TERMINATION",
		//	                          "IP_SECURITY_USER",
		//	                          "ISOLATED_USER_MODE",
		//	                          "KDC_AUTHENTICATION",
		//	                          "KERNEL_MODE_CODE_SIGNING",
		//	                          "KEY_PACK_LICENSES",
		//	                          "KEY_RECOVERY",
		//	                          "KEY_RECOVERY_AGENT",
		//	                          "LICENSE_SERVER_VERIFICATION",
		//	                          "LIFETIME_SIGNING",
		//	                          "MICROSOFT_PUBLISHER",
		//	                          "MICROSOFT_TIME_STAMPING",
		//	                          "MICROSOFT_TRUST_LIST_SIGNING",
		//	                          "OCSP_SIGNING",
		//	                          "OEM_WINDOWS_SYSTEM_COMPONENT_VERIFICATION",
		//	                          "PLATFORM_CERTIFICATE",
		//	                          "PREVIEW_BUILD_SIGNING",
		//	                          "PRIVATE_KEY_ARCHIVAL",
		//	                          "PROTECTED_PROCESS_LIGHT_VERIFICATION",
		//	                          "PROTECTED_PROCESS_VERIFICATION",
		//	                          "QUALIFIED_SUBORDINATION",
		//	                          "REVOKED_LIST_SIGNER",
		//	                          "ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION",
		//	                          "ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION",
		//	                          "ROOT_PROGRAM_NO_OSCP_FAILOVER_TO_CRL",
		//	                          "ROOT_LIST_SIGNER",
		//	                          "SECURE_EMAIL",
		//	                          "SERVER_AUTHENTICATION",
		//	                          "SMART_CARD_LOGIN",
		//	                          "SPC_ENCRYPTED_DIGEST_RETRY_COUNT",
		//	                          "SPC_RELAXED_PE_MARKER_CHECK",
		//	                          "TIME_STAMPING",
		//	                          "WINDOWS_HARDWARE_DRIVER_ATTESTED_VERIFICATION",
		//	                          "WINDOWS_HARDWARE_DRIVER_EXTENDED_VERIFICATION",
		//	                          "WINDOWS_HARDWARE_DRIVER_VERIFICATION",
		//	                          "WINDOWS_HELLO_RECOVERY_KEY_ENCRYPTION",
		//	                          "WINDOWS_KITS_COMPONENT",
		//	                          "WINDOWS_RT_VERIFICATION",
		//	                          "WINDOWS_SOFTWARE_EXTENSION_VERIFICATION",
		//	                          "WINDOWS_STORE",
		//	                          "WINDOWS_SYSTEM_COMPONENT_VERIFICATION",
		//	                          "WINDOWS_TCB_COMPONENT",
		//	                          "WINDOWS_THIRD_PARTY_APPLICATION_COMPONENT",
		//	                          "WINDOWS_UPDATE"
		//	                        ],
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "maxItems": 100,
		//	                  "minItems": 1,
		//	                  "type": "array",
		//	                  "uniqueItems": true
		//	                }
		//	              },
		//	              "required": [
		//	                "Policies"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "KeyUsage": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Critical": {
		//	                  "type": "boolean"
		//	                },
		//	                "UsageFlags": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "DataEncipherment": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "DigitalSignature": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "KeyAgreement": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "KeyEncipherment": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "NonRepudiation": {
		//	                      "type": "boolean"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                }
		//	              },
		//	              "required": [
		//	                "UsageFlags"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "KeyUsage"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "GeneralFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AutoEnrollment": {
		//	              "type": "boolean"
		//	            },
		//	            "MachineType": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "PrivateKeyAttributes": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "CryptoProviders": {
		//	              "items": {
		//	                "maxLength": 100,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "maxItems": 100,
		//	              "minItems": 1,
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            },
		//	            "KeySpec": {
		//	              "enum": [
		//	                "KEY_EXCHANGE",
		//	                "SIGNATURE"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "MinimalKeyLength": {
		//	              "minimum": 1,
		//	              "type": "number"
		//	            }
		//	          },
		//	          "required": [
		//	            "KeySpec",
		//	            "MinimalKeyLength"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "PrivateKeyFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ClientVersion": {
		//	              "enum": [
		//	                "WINDOWS_SERVER_2003",
		//	                "WINDOWS_SERVER_2008",
		//	                "WINDOWS_SERVER_2008_R2",
		//	                "WINDOWS_SERVER_2012",
		//	                "WINDOWS_SERVER_2012_R2",
		//	                "WINDOWS_SERVER_2016"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "ExportableKey": {
		//	              "type": "boolean"
		//	            },
		//	            "StrongKeyProtectionRequired": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "ClientVersion"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "SubjectNameFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "RequireCommonName": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireDirectoryPath": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireDnsAsCn": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireEmail": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireDirectoryGuid": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireDns": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireDomainDns": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireEmail": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireSpn": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireUpn": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "SupersededTemplates": {
		//	          "items": {
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "maxItems": 100,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "required": [
		//	        "CertificateValidity",
		//	        "EnrollmentFlags",
		//	        "Extensions",
		//	        "GeneralFlags",
		//	        "PrivateKeyAttributes",
		//	        "PrivateKeyFlags",
		//	        "SubjectNameFlags"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "TemplateV3": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CertificateValidity": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "RenewalPeriod": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Period": {
		//	                  "maximum": 8766000,
		//	                  "minimum": 1,
		//	                  "type": "number"
		//	                },
		//	                "PeriodType": {
		//	                  "enum": [
		//	                    "HOURS",
		//	                    "DAYS",
		//	                    "WEEKS",
		//	                    "MONTHS",
		//	                    "YEARS"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Period",
		//	                "PeriodType"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ValidityPeriod": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Period": {
		//	                  "maximum": 8766000,
		//	                  "minimum": 1,
		//	                  "type": "number"
		//	                },
		//	                "PeriodType": {
		//	                  "enum": [
		//	                    "HOURS",
		//	                    "DAYS",
		//	                    "WEEKS",
		//	                    "MONTHS",
		//	                    "YEARS"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Period",
		//	                "PeriodType"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "RenewalPeriod",
		//	            "ValidityPeriod"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "EnrollmentFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "EnableKeyReuseOnNtTokenKeysetStorageFull": {
		//	              "type": "boolean"
		//	            },
		//	            "IncludeSymmetricAlgorithms": {
		//	              "type": "boolean"
		//	            },
		//	            "NoSecurityExtension": {
		//	              "type": "boolean"
		//	            },
		//	            "RemoveInvalidCertificateFromPersonalStore": {
		//	              "type": "boolean"
		//	            },
		//	            "UserInteractionRequired": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Extensions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ApplicationPolicies": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Critical": {
		//	                  "type": "boolean"
		//	                },
		//	                "Policies": {
		//	                  "items": {
		//	                    "properties": {
		//	                      "PolicyObjectIdentifier": {
		//	                        "maxLength": 64,
		//	                        "minLength": 1,
		//	                        "pattern": "^([0-2])\\.([0-9]|([0-3][0-9]))(\\.([0-9]+)){0,126}$",
		//	                        "type": "string"
		//	                      },
		//	                      "PolicyType": {
		//	                        "enum": [
		//	                          "ALL_APPLICATION_POLICIES",
		//	                          "ANY_PURPOSE",
		//	                          "ATTESTATION_IDENTITY_KEY_CERTIFICATE",
		//	                          "CERTIFICATE_REQUEST_AGENT",
		//	                          "CLIENT_AUTHENTICATION",
		//	                          "CODE_SIGNING",
		//	                          "CTL_USAGE",
		//	                          "DIGITAL_RIGHTS",
		//	                          "DIRECTORY_SERVICE_EMAIL_REPLICATION",
		//	                          "DISALLOWED_LIST",
		//	                          "DNS_SERVER_TRUST",
		//	                          "DOCUMENT_ENCRYPTION",
		//	                          "DOCUMENT_SIGNING",
		//	                          "DYNAMIC_CODE_GENERATOR",
		//	                          "EARLY_LAUNCH_ANTIMALWARE_DRIVER",
		//	                          "EMBEDDED_WINDOWS_SYSTEM_COMPONENT_VERIFICATION",
		//	                          "ENCLAVE",
		//	                          "ENCRYPTING_FILE_SYSTEM",
		//	                          "ENDORSEMENT_KEY_CERTIFICATE",
		//	                          "FILE_RECOVERY",
		//	                          "HAL_EXTENSION",
		//	                          "IP_SECURITY_END_SYSTEM",
		//	                          "IP_SECURITY_IKE_INTERMEDIATE",
		//	                          "IP_SECURITY_TUNNEL_TERMINATION",
		//	                          "IP_SECURITY_USER",
		//	                          "ISOLATED_USER_MODE",
		//	                          "KDC_AUTHENTICATION",
		//	                          "KERNEL_MODE_CODE_SIGNING",
		//	                          "KEY_PACK_LICENSES",
		//	                          "KEY_RECOVERY",
		//	                          "KEY_RECOVERY_AGENT",
		//	                          "LICENSE_SERVER_VERIFICATION",
		//	                          "LIFETIME_SIGNING",
		//	                          "MICROSOFT_PUBLISHER",
		//	                          "MICROSOFT_TIME_STAMPING",
		//	                          "MICROSOFT_TRUST_LIST_SIGNING",
		//	                          "OCSP_SIGNING",
		//	                          "OEM_WINDOWS_SYSTEM_COMPONENT_VERIFICATION",
		//	                          "PLATFORM_CERTIFICATE",
		//	                          "PREVIEW_BUILD_SIGNING",
		//	                          "PRIVATE_KEY_ARCHIVAL",
		//	                          "PROTECTED_PROCESS_LIGHT_VERIFICATION",
		//	                          "PROTECTED_PROCESS_VERIFICATION",
		//	                          "QUALIFIED_SUBORDINATION",
		//	                          "REVOKED_LIST_SIGNER",
		//	                          "ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION",
		//	                          "ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION",
		//	                          "ROOT_PROGRAM_NO_OSCP_FAILOVER_TO_CRL",
		//	                          "ROOT_LIST_SIGNER",
		//	                          "SECURE_EMAIL",
		//	                          "SERVER_AUTHENTICATION",
		//	                          "SMART_CARD_LOGIN",
		//	                          "SPC_ENCRYPTED_DIGEST_RETRY_COUNT",
		//	                          "SPC_RELAXED_PE_MARKER_CHECK",
		//	                          "TIME_STAMPING",
		//	                          "WINDOWS_HARDWARE_DRIVER_ATTESTED_VERIFICATION",
		//	                          "WINDOWS_HARDWARE_DRIVER_EXTENDED_VERIFICATION",
		//	                          "WINDOWS_HARDWARE_DRIVER_VERIFICATION",
		//	                          "WINDOWS_HELLO_RECOVERY_KEY_ENCRYPTION",
		//	                          "WINDOWS_KITS_COMPONENT",
		//	                          "WINDOWS_RT_VERIFICATION",
		//	                          "WINDOWS_SOFTWARE_EXTENSION_VERIFICATION",
		//	                          "WINDOWS_STORE",
		//	                          "WINDOWS_SYSTEM_COMPONENT_VERIFICATION",
		//	                          "WINDOWS_TCB_COMPONENT",
		//	                          "WINDOWS_THIRD_PARTY_APPLICATION_COMPONENT",
		//	                          "WINDOWS_UPDATE"
		//	                        ],
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "maxItems": 100,
		//	                  "minItems": 1,
		//	                  "type": "array",
		//	                  "uniqueItems": true
		//	                }
		//	              },
		//	              "required": [
		//	                "Policies"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "KeyUsage": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Critical": {
		//	                  "type": "boolean"
		//	                },
		//	                "UsageFlags": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "DataEncipherment": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "DigitalSignature": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "KeyAgreement": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "KeyEncipherment": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "NonRepudiation": {
		//	                      "type": "boolean"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                }
		//	              },
		//	              "required": [
		//	                "UsageFlags"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "KeyUsage"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "GeneralFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AutoEnrollment": {
		//	              "type": "boolean"
		//	            },
		//	            "MachineType": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "HashAlgorithm": {
		//	          "enum": [
		//	            "SHA256",
		//	            "SHA384",
		//	            "SHA512"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "PrivateKeyAttributes": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Algorithm": {
		//	              "enum": [
		//	                "RSA",
		//	                "ECDH_P256",
		//	                "ECDH_P384",
		//	                "ECDH_P521"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "CryptoProviders": {
		//	              "items": {
		//	                "maxLength": 100,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "maxItems": 100,
		//	              "minItems": 1,
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            },
		//	            "KeySpec": {
		//	              "enum": [
		//	                "KEY_EXCHANGE",
		//	                "SIGNATURE"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "KeyUsageProperty": {
		//	              "properties": {
		//	                "PropertyFlags": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Decrypt": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "KeyAgreement": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "Sign": {
		//	                      "type": "boolean"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "PropertyType": {
		//	                  "enum": [
		//	                    "ALL"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "MinimalKeyLength": {
		//	              "minimum": 1,
		//	              "type": "number"
		//	            }
		//	          },
		//	          "required": [
		//	            "Algorithm",
		//	            "KeySpec",
		//	            "KeyUsageProperty",
		//	            "MinimalKeyLength"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "PrivateKeyFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ClientVersion": {
		//	              "enum": [
		//	                "WINDOWS_SERVER_2008",
		//	                "WINDOWS_SERVER_2008_R2",
		//	                "WINDOWS_SERVER_2012",
		//	                "WINDOWS_SERVER_2012_R2",
		//	                "WINDOWS_SERVER_2016"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "ExportableKey": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireAlternateSignatureAlgorithm": {
		//	              "type": "boolean"
		//	            },
		//	            "StrongKeyProtectionRequired": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "ClientVersion"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "SubjectNameFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "RequireCommonName": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireDirectoryPath": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireDnsAsCn": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireEmail": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireDirectoryGuid": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireDns": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireDomainDns": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireEmail": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireSpn": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireUpn": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "SupersededTemplates": {
		//	          "items": {
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "maxItems": 100,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "required": [
		//	        "CertificateValidity",
		//	        "EnrollmentFlags",
		//	        "Extensions",
		//	        "GeneralFlags",
		//	        "HashAlgorithm",
		//	        "PrivateKeyAttributes",
		//	        "PrivateKeyFlags",
		//	        "SubjectNameFlags"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "TemplateV4": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CertificateValidity": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "RenewalPeriod": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Period": {
		//	                  "maximum": 8766000,
		//	                  "minimum": 1,
		//	                  "type": "number"
		//	                },
		//	                "PeriodType": {
		//	                  "enum": [
		//	                    "HOURS",
		//	                    "DAYS",
		//	                    "WEEKS",
		//	                    "MONTHS",
		//	                    "YEARS"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Period",
		//	                "PeriodType"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "ValidityPeriod": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Period": {
		//	                  "maximum": 8766000,
		//	                  "minimum": 1,
		//	                  "type": "number"
		//	                },
		//	                "PeriodType": {
		//	                  "enum": [
		//	                    "HOURS",
		//	                    "DAYS",
		//	                    "WEEKS",
		//	                    "MONTHS",
		//	                    "YEARS"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Period",
		//	                "PeriodType"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "RenewalPeriod",
		//	            "ValidityPeriod"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "EnrollmentFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "EnableKeyReuseOnNtTokenKeysetStorageFull": {
		//	              "type": "boolean"
		//	            },
		//	            "IncludeSymmetricAlgorithms": {
		//	              "type": "boolean"
		//	            },
		//	            "NoSecurityExtension": {
		//	              "type": "boolean"
		//	            },
		//	            "RemoveInvalidCertificateFromPersonalStore": {
		//	              "type": "boolean"
		//	            },
		//	            "UserInteractionRequired": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Extensions": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ApplicationPolicies": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Critical": {
		//	                  "type": "boolean"
		//	                },
		//	                "Policies": {
		//	                  "items": {
		//	                    "properties": {
		//	                      "PolicyObjectIdentifier": {
		//	                        "maxLength": 64,
		//	                        "minLength": 1,
		//	                        "pattern": "^([0-2])\\.([0-9]|([0-3][0-9]))(\\.([0-9]+)){0,126}$",
		//	                        "type": "string"
		//	                      },
		//	                      "PolicyType": {
		//	                        "enum": [
		//	                          "ALL_APPLICATION_POLICIES",
		//	                          "ANY_PURPOSE",
		//	                          "ATTESTATION_IDENTITY_KEY_CERTIFICATE",
		//	                          "CERTIFICATE_REQUEST_AGENT",
		//	                          "CLIENT_AUTHENTICATION",
		//	                          "CODE_SIGNING",
		//	                          "CTL_USAGE",
		//	                          "DIGITAL_RIGHTS",
		//	                          "DIRECTORY_SERVICE_EMAIL_REPLICATION",
		//	                          "DISALLOWED_LIST",
		//	                          "DNS_SERVER_TRUST",
		//	                          "DOCUMENT_ENCRYPTION",
		//	                          "DOCUMENT_SIGNING",
		//	                          "DYNAMIC_CODE_GENERATOR",
		//	                          "EARLY_LAUNCH_ANTIMALWARE_DRIVER",
		//	                          "EMBEDDED_WINDOWS_SYSTEM_COMPONENT_VERIFICATION",
		//	                          "ENCLAVE",
		//	                          "ENCRYPTING_FILE_SYSTEM",
		//	                          "ENDORSEMENT_KEY_CERTIFICATE",
		//	                          "FILE_RECOVERY",
		//	                          "HAL_EXTENSION",
		//	                          "IP_SECURITY_END_SYSTEM",
		//	                          "IP_SECURITY_IKE_INTERMEDIATE",
		//	                          "IP_SECURITY_TUNNEL_TERMINATION",
		//	                          "IP_SECURITY_USER",
		//	                          "ISOLATED_USER_MODE",
		//	                          "KDC_AUTHENTICATION",
		//	                          "KERNEL_MODE_CODE_SIGNING",
		//	                          "KEY_PACK_LICENSES",
		//	                          "KEY_RECOVERY",
		//	                          "KEY_RECOVERY_AGENT",
		//	                          "LICENSE_SERVER_VERIFICATION",
		//	                          "LIFETIME_SIGNING",
		//	                          "MICROSOFT_PUBLISHER",
		//	                          "MICROSOFT_TIME_STAMPING",
		//	                          "MICROSOFT_TRUST_LIST_SIGNING",
		//	                          "OCSP_SIGNING",
		//	                          "OEM_WINDOWS_SYSTEM_COMPONENT_VERIFICATION",
		//	                          "PLATFORM_CERTIFICATE",
		//	                          "PREVIEW_BUILD_SIGNING",
		//	                          "PRIVATE_KEY_ARCHIVAL",
		//	                          "PROTECTED_PROCESS_LIGHT_VERIFICATION",
		//	                          "PROTECTED_PROCESS_VERIFICATION",
		//	                          "QUALIFIED_SUBORDINATION",
		//	                          "REVOKED_LIST_SIGNER",
		//	                          "ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION",
		//	                          "ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION",
		//	                          "ROOT_PROGRAM_NO_OSCP_FAILOVER_TO_CRL",
		//	                          "ROOT_LIST_SIGNER",
		//	                          "SECURE_EMAIL",
		//	                          "SERVER_AUTHENTICATION",
		//	                          "SMART_CARD_LOGIN",
		//	                          "SPC_ENCRYPTED_DIGEST_RETRY_COUNT",
		//	                          "SPC_RELAXED_PE_MARKER_CHECK",
		//	                          "TIME_STAMPING",
		//	                          "WINDOWS_HARDWARE_DRIVER_ATTESTED_VERIFICATION",
		//	                          "WINDOWS_HARDWARE_DRIVER_EXTENDED_VERIFICATION",
		//	                          "WINDOWS_HARDWARE_DRIVER_VERIFICATION",
		//	                          "WINDOWS_HELLO_RECOVERY_KEY_ENCRYPTION",
		//	                          "WINDOWS_KITS_COMPONENT",
		//	                          "WINDOWS_RT_VERIFICATION",
		//	                          "WINDOWS_SOFTWARE_EXTENSION_VERIFICATION",
		//	                          "WINDOWS_STORE",
		//	                          "WINDOWS_SYSTEM_COMPONENT_VERIFICATION",
		//	                          "WINDOWS_TCB_COMPONENT",
		//	                          "WINDOWS_THIRD_PARTY_APPLICATION_COMPONENT",
		//	                          "WINDOWS_UPDATE"
		//	                        ],
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  },
		//	                  "maxItems": 100,
		//	                  "minItems": 1,
		//	                  "type": "array",
		//	                  "uniqueItems": true
		//	                }
		//	              },
		//	              "required": [
		//	                "Policies"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "KeyUsage": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Critical": {
		//	                  "type": "boolean"
		//	                },
		//	                "UsageFlags": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "DataEncipherment": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "DigitalSignature": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "KeyAgreement": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "KeyEncipherment": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "NonRepudiation": {
		//	                      "type": "boolean"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                }
		//	              },
		//	              "required": [
		//	                "UsageFlags"
		//	              ],
		//	              "type": "object"
		//	            }
		//	          },
		//	          "required": [
		//	            "KeyUsage"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "GeneralFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "AutoEnrollment": {
		//	              "type": "boolean"
		//	            },
		//	            "MachineType": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "HashAlgorithm": {
		//	          "enum": [
		//	            "SHA256",
		//	            "SHA384",
		//	            "SHA512"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "PrivateKeyAttributes": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Algorithm": {
		//	              "enum": [
		//	                "RSA",
		//	                "ECDH_P256",
		//	                "ECDH_P384",
		//	                "ECDH_P521"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "CryptoProviders": {
		//	              "items": {
		//	                "maxLength": 100,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "maxItems": 100,
		//	              "minItems": 1,
		//	              "type": "array",
		//	              "uniqueItems": true
		//	            },
		//	            "KeySpec": {
		//	              "enum": [
		//	                "KEY_EXCHANGE",
		//	                "SIGNATURE"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "KeyUsageProperty": {
		//	              "properties": {
		//	                "PropertyFlags": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Decrypt": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "KeyAgreement": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "Sign": {
		//	                      "type": "boolean"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "PropertyType": {
		//	                  "enum": [
		//	                    "ALL"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "MinimalKeyLength": {
		//	              "minimum": 1,
		//	              "type": "number"
		//	            }
		//	          },
		//	          "required": [
		//	            "KeySpec",
		//	            "MinimalKeyLength"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "PrivateKeyFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ClientVersion": {
		//	              "enum": [
		//	                "WINDOWS_SERVER_2012",
		//	                "WINDOWS_SERVER_2012_R2",
		//	                "WINDOWS_SERVER_2016"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "ExportableKey": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireAlternateSignatureAlgorithm": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireSameKeyRenewal": {
		//	              "type": "boolean"
		//	            },
		//	            "StrongKeyProtectionRequired": {
		//	              "type": "boolean"
		//	            },
		//	            "UseLegacyProvider": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "required": [
		//	            "ClientVersion"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "SubjectNameFlags": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "RequireCommonName": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireDirectoryPath": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireDnsAsCn": {
		//	              "type": "boolean"
		//	            },
		//	            "RequireEmail": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireDirectoryGuid": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireDns": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireDomainDns": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireEmail": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireSpn": {
		//	              "type": "boolean"
		//	            },
		//	            "SanRequireUpn": {
		//	              "type": "boolean"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "SupersededTemplates": {
		//	          "items": {
		//	            "maxLength": 64,
		//	            "minLength": 1,
		//	            "pattern": "",
		//	            "type": "string"
		//	          },
		//	          "maxItems": 100,
		//	          "minItems": 1,
		//	          "type": "array",
		//	          "uniqueItems": true
		//	        }
		//	      },
		//	      "required": [
		//	        "CertificateValidity",
		//	        "EnrollmentFlags",
		//	        "Extensions",
		//	        "GeneralFlags",
		//	        "PrivateKeyAttributes",
		//	        "PrivateKeyFlags",
		//	        "SubjectNameFlags"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"definition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: TemplateV2
				"template_v2": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CertificateValidity
						"certificate_validity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: RenewalPeriod
								"renewal_period": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Period
										"period": schema.Float64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: PeriodType
										"period_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ValidityPeriod
								"validity_period": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Period
										"period": schema.Float64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: PeriodType
										"period_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EnrollmentFlags
						"enrollment_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EnableKeyReuseOnNtTokenKeysetStorageFull
								"enable_key_reuse_on_nt_token_keyset_storage_full": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IncludeSymmetricAlgorithms
								"include_symmetric_algorithms": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoSecurityExtension
								"no_security_extension": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RemoveInvalidCertificateFromPersonalStore
								"remove_invalid_certificate_from_personal_store": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: UserInteractionRequired
								"user_interaction_required": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Extensions
						"extensions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ApplicationPolicies
								"application_policies": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Critical
										"critical": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Policies
										"policies": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
											NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: PolicyObjectIdentifier
													"policy_object_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: PolicyType
													"policy_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
											}, /*END NESTED OBJECT*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: KeyUsage
								"key_usage": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Critical
										"critical": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: UsageFlags
										"usage_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: DataEncipherment
												"data_encipherment": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: DigitalSignature
												"digital_signature": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: KeyAgreement
												"key_agreement": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: KeyEncipherment
												"key_encipherment": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: NonRepudiation
												"non_repudiation": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GeneralFlags
						"general_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AutoEnrollment
								"auto_enrollment": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: MachineType
								"machine_type": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PrivateKeyAttributes
						"private_key_attributes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: CryptoProviders
								"crypto_providers": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: KeySpec
								"key_spec": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: MinimalKeyLength
								"minimal_key_length": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PrivateKeyFlags
						"private_key_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ClientVersion
								"client_version": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ExportableKey
								"exportable_key": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: StrongKeyProtectionRequired
								"strong_key_protection_required": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SubjectNameFlags
						"subject_name_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: RequireCommonName
								"require_common_name": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireDirectoryPath
								"require_directory_path": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireDnsAsCn
								"require_dns_as_cn": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireEmail
								"require_email": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireDirectoryGuid
								"san_require_directory_guid": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireDns
								"san_require_dns": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireDomainDns
								"san_require_domain_dns": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireEmail
								"san_require_email": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireSpn
								"san_require_spn": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireUpn
								"san_require_upn": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SupersededTemplates
						"superseded_templates": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TemplateV3
				"template_v3": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CertificateValidity
						"certificate_validity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: RenewalPeriod
								"renewal_period": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Period
										"period": schema.Float64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: PeriodType
										"period_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ValidityPeriod
								"validity_period": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Period
										"period": schema.Float64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: PeriodType
										"period_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EnrollmentFlags
						"enrollment_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EnableKeyReuseOnNtTokenKeysetStorageFull
								"enable_key_reuse_on_nt_token_keyset_storage_full": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IncludeSymmetricAlgorithms
								"include_symmetric_algorithms": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoSecurityExtension
								"no_security_extension": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RemoveInvalidCertificateFromPersonalStore
								"remove_invalid_certificate_from_personal_store": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: UserInteractionRequired
								"user_interaction_required": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Extensions
						"extensions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ApplicationPolicies
								"application_policies": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Critical
										"critical": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Policies
										"policies": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
											NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: PolicyObjectIdentifier
													"policy_object_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: PolicyType
													"policy_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
											}, /*END NESTED OBJECT*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: KeyUsage
								"key_usage": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Critical
										"critical": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: UsageFlags
										"usage_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: DataEncipherment
												"data_encipherment": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: DigitalSignature
												"digital_signature": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: KeyAgreement
												"key_agreement": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: KeyEncipherment
												"key_encipherment": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: NonRepudiation
												"non_repudiation": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GeneralFlags
						"general_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AutoEnrollment
								"auto_enrollment": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: MachineType
								"machine_type": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HashAlgorithm
						"hash_algorithm": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PrivateKeyAttributes
						"private_key_attributes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Algorithm
								"algorithm": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: CryptoProviders
								"crypto_providers": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: KeySpec
								"key_spec": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: KeyUsageProperty
								"key_usage_property": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: PropertyFlags
										"property_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Decrypt
												"decrypt": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: KeyAgreement
												"key_agreement": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Sign
												"sign": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: PropertyType
										"property_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: MinimalKeyLength
								"minimal_key_length": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PrivateKeyFlags
						"private_key_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ClientVersion
								"client_version": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ExportableKey
								"exportable_key": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireAlternateSignatureAlgorithm
								"require_alternate_signature_algorithm": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: StrongKeyProtectionRequired
								"strong_key_protection_required": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SubjectNameFlags
						"subject_name_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: RequireCommonName
								"require_common_name": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireDirectoryPath
								"require_directory_path": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireDnsAsCn
								"require_dns_as_cn": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireEmail
								"require_email": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireDirectoryGuid
								"san_require_directory_guid": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireDns
								"san_require_dns": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireDomainDns
								"san_require_domain_dns": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireEmail
								"san_require_email": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireSpn
								"san_require_spn": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireUpn
								"san_require_upn": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SupersededTemplates
						"superseded_templates": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TemplateV4
				"template_v4": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CertificateValidity
						"certificate_validity": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: RenewalPeriod
								"renewal_period": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Period
										"period": schema.Float64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: PeriodType
										"period_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ValidityPeriod
								"validity_period": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Period
										"period": schema.Float64Attribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: PeriodType
										"period_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EnrollmentFlags
						"enrollment_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EnableKeyReuseOnNtTokenKeysetStorageFull
								"enable_key_reuse_on_nt_token_keyset_storage_full": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: IncludeSymmetricAlgorithms
								"include_symmetric_algorithms": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: NoSecurityExtension
								"no_security_extension": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RemoveInvalidCertificateFromPersonalStore
								"remove_invalid_certificate_from_personal_store": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: UserInteractionRequired
								"user_interaction_required": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Extensions
						"extensions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ApplicationPolicies
								"application_policies": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Critical
										"critical": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Policies
										"policies": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
											NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: PolicyObjectIdentifier
													"policy_object_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
													// Property: PolicyType
													"policy_type": schema.StringAttribute{ /*START ATTRIBUTE*/
														Computed: true,
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
											}, /*END NESTED OBJECT*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: KeyUsage
								"key_usage": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Critical
										"critical": schema.BoolAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: UsageFlags
										"usage_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: DataEncipherment
												"data_encipherment": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: DigitalSignature
												"digital_signature": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: KeyAgreement
												"key_agreement": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: KeyEncipherment
												"key_encipherment": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: NonRepudiation
												"non_repudiation": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: GeneralFlags
						"general_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: AutoEnrollment
								"auto_enrollment": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: MachineType
								"machine_type": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HashAlgorithm
						"hash_algorithm": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PrivateKeyAttributes
						"private_key_attributes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Algorithm
								"algorithm": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: CryptoProviders
								"crypto_providers": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: KeySpec
								"key_spec": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: KeyUsageProperty
								"key_usage_property": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: PropertyFlags
										"property_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Decrypt
												"decrypt": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: KeyAgreement
												"key_agreement": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Sign
												"sign": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: PropertyType
										"property_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: MinimalKeyLength
								"minimal_key_length": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: PrivateKeyFlags
						"private_key_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ClientVersion
								"client_version": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ExportableKey
								"exportable_key": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireAlternateSignatureAlgorithm
								"require_alternate_signature_algorithm": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireSameKeyRenewal
								"require_same_key_renewal": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: StrongKeyProtectionRequired
								"strong_key_protection_required": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: UseLegacyProvider
								"use_legacy_provider": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SubjectNameFlags
						"subject_name_flags": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: RequireCommonName
								"require_common_name": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireDirectoryPath
								"require_directory_path": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireDnsAsCn
								"require_dns_as_cn": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: RequireEmail
								"require_email": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireDirectoryGuid
								"san_require_directory_guid": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireDns
								"san_require_dns": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireDomainDns
								"san_require_domain_dns": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireEmail
								"san_require_email": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireSpn
								"san_require_spn": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: SanRequireUpn
								"san_require_upn": schema.BoolAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SupersededTemplates
						"superseded_templates": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ReenrollAllCertificateHolders
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "boolean"
		//	}
		"reenroll_all_certificate_holders": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TemplateArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 200,
		//	  "minLength": 5,
		//	  "pattern": "^arn:[\\w-]+:pca-connector-ad:[\\w-]+:[0-9]+:connector\\/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}\\/template\\/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$",
		//	  "type": "string"
		//	}
		"template_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::PCAConnectorAD::Template",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::PCAConnectorAD::Template").WithTerraformTypeName("awscc_pcaconnectorad_template")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"algorithm":            "Algorithm",
		"application_policies": "ApplicationPolicies",
		"auto_enrollment":      "AutoEnrollment",
		"certificate_validity": "CertificateValidity",
		"client_version":       "ClientVersion",
		"connector_arn":        "ConnectorArn",
		"critical":             "Critical",
		"crypto_providers":     "CryptoProviders",
		"data_encipherment":    "DataEncipherment",
		"decrypt":              "Decrypt",
		"definition":           "Definition",
		"digital_signature":    "DigitalSignature",
		"enable_key_reuse_on_nt_token_keyset_storage_full": "EnableKeyReuseOnNtTokenKeysetStorageFull",
		"enrollment_flags":                 "EnrollmentFlags",
		"exportable_key":                   "ExportableKey",
		"extensions":                       "Extensions",
		"general_flags":                    "GeneralFlags",
		"hash_algorithm":                   "HashAlgorithm",
		"include_symmetric_algorithms":     "IncludeSymmetricAlgorithms",
		"key_agreement":                    "KeyAgreement",
		"key_encipherment":                 "KeyEncipherment",
		"key_spec":                         "KeySpec",
		"key_usage":                        "KeyUsage",
		"key_usage_property":               "KeyUsageProperty",
		"machine_type":                     "MachineType",
		"minimal_key_length":               "MinimalKeyLength",
		"name":                             "Name",
		"no_security_extension":            "NoSecurityExtension",
		"non_repudiation":                  "NonRepudiation",
		"period":                           "Period",
		"period_type":                      "PeriodType",
		"policies":                         "Policies",
		"policy_object_identifier":         "PolicyObjectIdentifier",
		"policy_type":                      "PolicyType",
		"private_key_attributes":           "PrivateKeyAttributes",
		"private_key_flags":                "PrivateKeyFlags",
		"property_flags":                   "PropertyFlags",
		"property_type":                    "PropertyType",
		"reenroll_all_certificate_holders": "ReenrollAllCertificateHolders",
		"remove_invalid_certificate_from_personal_store": "RemoveInvalidCertificateFromPersonalStore",
		"renewal_period":                        "RenewalPeriod",
		"require_alternate_signature_algorithm": "RequireAlternateSignatureAlgorithm",
		"require_common_name":                   "RequireCommonName",
		"require_directory_path":                "RequireDirectoryPath",
		"require_dns_as_cn":                     "RequireDnsAsCn",
		"require_email":                         "RequireEmail",
		"require_same_key_renewal":              "RequireSameKeyRenewal",
		"san_require_directory_guid":            "SanRequireDirectoryGuid",
		"san_require_dns":                       "SanRequireDns",
		"san_require_domain_dns":                "SanRequireDomainDns",
		"san_require_email":                     "SanRequireEmail",
		"san_require_spn":                       "SanRequireSpn",
		"san_require_upn":                       "SanRequireUpn",
		"sign":                                  "Sign",
		"strong_key_protection_required":        "StrongKeyProtectionRequired",
		"subject_name_flags":                    "SubjectNameFlags",
		"superseded_templates":                  "SupersededTemplates",
		"tags":                                  "Tags",
		"template_arn":                          "TemplateArn",
		"template_v2":                           "TemplateV2",
		"template_v3":                           "TemplateV3",
		"template_v4":                           "TemplateV4",
		"usage_flags":                           "UsageFlags",
		"use_legacy_provider":                   "UseLegacyProvider",
		"user_interaction_required":             "UserInteractionRequired",
		"validity_period":                       "ValidityPeriod",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
