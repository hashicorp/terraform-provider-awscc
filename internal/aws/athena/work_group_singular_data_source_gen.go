// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package athena

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_athena_work_group", workGroupDataSource)
}

// workGroupDataSource returns the Terraform awscc_athena_work_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::Athena::WorkGroup resource.
func workGroupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The date and time the workgroup was created.",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The date and time the workgroup was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The workgroup description.",
		//	  "maxLength": 1024,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The workgroup description.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The workGroup name.",
		//	  "pattern": "[a-zA-Z0-9._-]{1,128}",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The workGroup name.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RecursiveDeleteOption
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The option to delete the workgroup and its contents even if the workgroup contains any named queries.",
		//	  "type": "boolean"
		//	}
		"recursive_delete_option": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "The option to delete the workgroup and its contents even if the workgroup contains any named queries.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: State
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The state of the workgroup: ENABLED or DISABLED.",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The state of the workgroup: ENABLED or DISABLED.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "One or more tags, separated by commas, that you want to attach to the workgroup as you create it",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "One or more tags, separated by commas, that you want to attach to the workgroup as you create it",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: WorkGroupConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The workgroup configuration",
		//	  "properties": {
		//	    "AdditionalConfiguration": {
		//	      "description": "Additional Configuration that are passed to Athena Spark Calculations running in this workgroup",
		//	      "type": "string"
		//	    },
		//	    "BytesScannedCutoffPerQuery": {
		//	      "description": "The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.",
		//	      "format": "int64",
		//	      "minimum": 10000000,
		//	      "type": "integer"
		//	    },
		//	    "CustomerContentEncryptionConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Indicates the KMS key for encrypting notebook content.",
		//	      "properties": {
		//	        "KmsKey": {
		//	          "description": "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "KmsKey"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "EnforceWorkGroupConfiguration": {
		//	      "description": "If set to \"true\", the settings for the workgroup override client-side settings. If set to \"false\", client-side settings are used",
		//	      "type": "boolean"
		//	    },
		//	    "EngineVersion": {
		//	      "additionalProperties": false,
		//	      "description": "The Athena engine version for running queries.",
		//	      "properties": {
		//	        "EffectiveEngineVersion": {
		//	          "description": "Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a CreateWorkGroup or UpdateWorkGroup operation, the EffectiveEngineVersion field is ignored.",
		//	          "type": "string"
		//	        },
		//	        "SelectedEngineVersion": {
		//	          "description": "The engine version requested by the user. Possible values are determined by the output of ListEngineVersions, including Auto. The default is Auto.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ExecutionRole": {
		//	      "description": "Execution Role ARN required to run Athena Spark Calculations",
		//	      "type": "string"
		//	    },
		//	    "ManagedQueryResultsConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "The configuration for the managed query results and encryption option. ResultConfiguration and ManagedQueryResultsConfiguration cannot be set at the same time",
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "Indicates the encryption configuration for Athena Managed Storage. If not setting this field, Managed Storage will encrypt the query results with Athena's encryption key",
		//	          "properties": {
		//	            "KmsKey": {
		//	              "description": "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "PublishCloudWatchMetricsEnabled": {
		//	      "description": "Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.",
		//	      "type": "boolean"
		//	    },
		//	    "RequesterPaysEnabled": {
		//	      "description": "If set to true, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. ",
		//	      "type": "boolean"
		//	    },
		//	    "ResultConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as \"client-side settings\". If workgroup settings override client-side settings, then the query uses the workgroup settings.\n",
		//	      "properties": {
		//	        "AclConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results",
		//	          "properties": {
		//	            "S3AclOption": {
		//	              "description": "The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is BUCKET_OWNER_FULL_CONTROL",
		//	              "enum": [
		//	                "BUCKET_OWNER_FULL_CONTROL"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "S3AclOption"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "If query results are encrypted in Amazon S3, indicates the encryption option used (for example, SSE-KMS or CSE-KMS) and key information.",
		//	          "properties": {
		//	            "EncryptionOption": {
		//	              "description": "Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE-S3), server-side encryption with KMS-managed keys (SSE-KMS), or client-side encryption with KMS-managed keys (CSE-KMS) is used.",
		//	              "enum": [
		//	                "SSE_S3",
		//	                "SSE_KMS",
		//	                "CSE_KMS"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "KmsKey": {
		//	              "description": "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "EncryptionOption"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "ExpectedBucketOwner": {
		//	          "description": "The AWS account ID of the owner of S3 bucket where query results are stored",
		//	          "type": "string"
		//	        },
		//	        "OutputLocation": {
		//	          "description": "The location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using WorkGroupConfiguration",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"work_group_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AdditionalConfiguration
				"additional_configuration": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Additional Configuration that are passed to Athena Spark Calculations running in this workgroup",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: BytesScannedCutoffPerQuery
				"bytes_scanned_cutoff_per_query": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: CustomerContentEncryptionConfiguration
				"customer_content_encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: KmsKey
						"kms_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Indicates the KMS key for encrypting notebook content.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: EnforceWorkGroupConfiguration
				"enforce_work_group_configuration": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "If set to \"true\", the settings for the workgroup override client-side settings. If set to \"false\", client-side settings are used",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: EngineVersion
				"engine_version": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: EffectiveEngineVersion
						"effective_engine_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a CreateWorkGroup or UpdateWorkGroup operation, the EffectiveEngineVersion field is ignored.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SelectedEngineVersion
						"selected_engine_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The engine version requested by the user. Possible values are determined by the output of ListEngineVersions, including Auto. The default is Auto.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The Athena engine version for running queries.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ExecutionRole
				"execution_role": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Execution Role ARN required to run Athena Spark Calculations",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ManagedQueryResultsConfiguration
				"managed_query_results_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KmsKey
								"kms_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Indicates the encryption configuration for Athena Managed Storage. If not setting this field, Managed Storage will encrypt the query results with Athena's encryption key",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The configuration for the managed query results and encryption option. ResultConfiguration and ManagedQueryResultsConfiguration cannot be set at the same time",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PublishCloudWatchMetricsEnabled
				"publish_cloudwatch_metrics_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RequesterPaysEnabled
				"requester_pays_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "If set to true, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. ",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ResultConfiguration
				"result_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AclConfiguration
						"acl_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: S3AclOption
								"s3_acl_option": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is BUCKET_OWNER_FULL_CONTROL",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EncryptionOption
								"encryption_option": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE-S3), server-side encryption with KMS-managed keys (SSE-KMS), or client-side encryption with KMS-managed keys (CSE-KMS) is used.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: KmsKey
								"kms_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "If query results are encrypted in Amazon S3, indicates the encryption option used (for example, SSE-KMS or CSE-KMS) and key information.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ExpectedBucketOwner
						"expected_bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The AWS account ID of the owner of S3 bucket where query results are stored",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: OutputLocation
						"output_location": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using WorkGroupConfiguration",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The location in Amazon S3 where query results are stored and the encryption option, if any, used for query results. These are known as \"client-side settings\". If workgroup settings override client-side settings, then the query uses the workgroup settings.\n",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The workgroup configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: WorkGroupConfigurationUpdates
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The workgroup configuration update object",
		//	  "properties": {
		//	    "AdditionalConfiguration": {
		//	      "description": "Additional Configuration that are passed to Athena Spark Calculations running in this workgroup",
		//	      "type": "string"
		//	    },
		//	    "BytesScannedCutoffPerQuery": {
		//	      "description": "The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.",
		//	      "format": "int64",
		//	      "minimum": 10000000,
		//	      "type": "integer"
		//	    },
		//	    "CustomerContentEncryptionConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Indicates the KMS key for encrypting notebook content.",
		//	      "properties": {
		//	        "KmsKey": {
		//	          "description": "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "KmsKey"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "EnforceWorkGroupConfiguration": {
		//	      "description": "If set to \"true\", the settings for the workgroup override client-side settings. If set to \"false\", client-side settings are used",
		//	      "type": "boolean"
		//	    },
		//	    "EngineVersion": {
		//	      "additionalProperties": false,
		//	      "description": "The Athena engine version for running queries.",
		//	      "properties": {
		//	        "EffectiveEngineVersion": {
		//	          "description": "Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a CreateWorkGroup or UpdateWorkGroup operation, the EffectiveEngineVersion field is ignored.",
		//	          "type": "string"
		//	        },
		//	        "SelectedEngineVersion": {
		//	          "description": "The engine version requested by the user. Possible values are determined by the output of ListEngineVersions, including Auto. The default is Auto.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ExecutionRole": {
		//	      "description": "Execution Role ARN required to run Athena Spark Calculations",
		//	      "type": "string"
		//	    },
		//	    "ManagedQueryResultsConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "The configuration for the managed query results and encryption option. ResultConfiguration and ManagedQueryResultsConfiguration cannot be set at the same time",
		//	      "properties": {
		//	        "Enabled": {
		//	          "type": "boolean"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "Indicates the encryption configuration for Athena Managed Storage. If not setting this field, Managed Storage will encrypt the query results with Athena's encryption key",
		//	          "properties": {
		//	            "KmsKey": {
		//	              "description": "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "PublishCloudWatchMetricsEnabled": {
		//	      "description": "Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.",
		//	      "type": "boolean"
		//	    },
		//	    "RemoveBytesScannedCutoffPerQuery": {
		//	      "description": "Indicates that the data usage control limit per query is removed.",
		//	      "type": "boolean"
		//	    },
		//	    "RemoveCustomerContentEncryptionConfiguration": {
		//	      "type": "boolean"
		//	    },
		//	    "RequesterPaysEnabled": {
		//	      "description": "If set to true, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. ",
		//	      "type": "boolean"
		//	    },
		//	    "ResultConfigurationUpdates": {
		//	      "additionalProperties": false,
		//	      "description": "The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results. ",
		//	      "properties": {
		//	        "AclConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results",
		//	          "properties": {
		//	            "S3AclOption": {
		//	              "description": "The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is BUCKET_OWNER_FULL_CONTROL",
		//	              "enum": [
		//	                "BUCKET_OWNER_FULL_CONTROL"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "S3AclOption"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "EncryptionConfiguration": {
		//	          "additionalProperties": false,
		//	          "description": "If query results are encrypted in Amazon S3, indicates the encryption option used (for example, SSE-KMS or CSE-KMS) and key information.",
		//	          "properties": {
		//	            "EncryptionOption": {
		//	              "description": "Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE-S3), server-side encryption with KMS-managed keys (SSE-KMS), or client-side encryption with KMS-managed keys (CSE-KMS) is used.",
		//	              "enum": [
		//	                "SSE_S3",
		//	                "SSE_KMS",
		//	                "CSE_KMS"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "KmsKey": {
		//	              "description": "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "EncryptionOption"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "ExpectedBucketOwner": {
		//	          "description": "The AWS account ID of the owner of S3 bucket where query results are stored",
		//	          "type": "string"
		//	        },
		//	        "OutputLocation": {
		//	          "description": "The location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using WorkGroupConfiguration",
		//	          "type": "string"
		//	        },
		//	        "RemoveAclConfiguration": {
		//	          "type": "boolean"
		//	        },
		//	        "RemoveEncryptionConfiguration": {
		//	          "type": "boolean"
		//	        },
		//	        "RemoveExpectedBucketOwner": {
		//	          "type": "boolean"
		//	        },
		//	        "RemoveOutputLocation": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"work_group_configuration_updates": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AdditionalConfiguration
				"additional_configuration": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Additional Configuration that are passed to Athena Spark Calculations running in this workgroup",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: BytesScannedCutoffPerQuery
				"bytes_scanned_cutoff_per_query": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: CustomerContentEncryptionConfiguration
				"customer_content_encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: KmsKey
						"kms_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Indicates the KMS key for encrypting notebook content.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: EnforceWorkGroupConfiguration
				"enforce_work_group_configuration": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "If set to \"true\", the settings for the workgroup override client-side settings. If set to \"false\", client-side settings are used",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: EngineVersion
				"engine_version": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: EffectiveEngineVersion
						"effective_engine_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Read only. The engine version on which the query runs. If the user requests a valid engine version other than Auto, the effective engine version is the same as the engine version that the user requested. If the user requests Auto, the effective engine version is chosen by Athena. When a request to update the engine version is made by a CreateWorkGroup or UpdateWorkGroup operation, the EffectiveEngineVersion field is ignored.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SelectedEngineVersion
						"selected_engine_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The engine version requested by the user. Possible values are determined by the output of ListEngineVersions, including Auto. The default is Auto.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The Athena engine version for running queries.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ExecutionRole
				"execution_role": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Execution Role ARN required to run Athena Spark Calculations",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ManagedQueryResultsConfiguration
				"managed_query_results_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Enabled
						"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: KmsKey
								"kms_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Indicates the encryption configuration for Athena Managed Storage. If not setting this field, Managed Storage will encrypt the query results with Athena's encryption key",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The configuration for the managed query results and encryption option. ResultConfiguration and ManagedQueryResultsConfiguration cannot be set at the same time",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: PublishCloudWatchMetricsEnabled
				"publish_cloudwatch_metrics_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates that the Amazon CloudWatch metrics are enabled for the workgroup.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RemoveBytesScannedCutoffPerQuery
				"remove_bytes_scanned_cutoff_per_query": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates that the data usage control limit per query is removed.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RemoveCustomerContentEncryptionConfiguration
				"remove_customer_content_encryption_configuration": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RequesterPaysEnabled
				"requester_pays_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Description: "If set to true, allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false, workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. ",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ResultConfigurationUpdates
				"result_configuration_updates": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AclConfiguration
						"acl_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: S3AclOption
								"s3_acl_option": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is BUCKET_OWNER_FULL_CONTROL",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: EncryptionConfiguration
						"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: EncryptionOption
								"encryption_option": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (SSE-S3), server-side encryption with KMS-managed keys (SSE-KMS), or client-side encryption with KMS-managed keys (CSE-KMS) is used.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: KmsKey
								"kms_key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "For SSE-KMS and CSE-KMS, this is the KMS key ARN or ID. ",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "If query results are encrypted in Amazon S3, indicates the encryption option used (for example, SSE-KMS or CSE-KMS) and key information.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ExpectedBucketOwner
						"expected_bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The AWS account ID of the owner of S3 bucket where query results are stored",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: OutputLocation
						"output_location": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The location in Amazon S3 where your query results are stored, such as s3://path/to/query/bucket/. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using WorkGroupConfiguration",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: RemoveAclConfiguration
						"remove_acl_configuration": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RemoveEncryptionConfiguration
						"remove_encryption_configuration": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RemoveExpectedBucketOwner
						"remove_expected_bucket_owner": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: RemoveOutputLocation
						"remove_output_location": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The result configuration information about the queries in this workgroup that will be updated. Includes the updated results location and an updated option for encrypting query results. ",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The workgroup configuration update object",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Athena::WorkGroup",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Athena::WorkGroup").WithTerraformTypeName("awscc_athena_work_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"acl_configuration":                         "AclConfiguration",
		"additional_configuration":                  "AdditionalConfiguration",
		"bytes_scanned_cutoff_per_query":            "BytesScannedCutoffPerQuery",
		"creation_time":                             "CreationTime",
		"customer_content_encryption_configuration": "CustomerContentEncryptionConfiguration",
		"description":                               "Description",
		"effective_engine_version":                  "EffectiveEngineVersion",
		"enabled":                                   "Enabled",
		"encryption_configuration":                  "EncryptionConfiguration",
		"encryption_option":                         "EncryptionOption",
		"enforce_work_group_configuration":          "EnforceWorkGroupConfiguration",
		"engine_version":                            "EngineVersion",
		"execution_role":                            "ExecutionRole",
		"expected_bucket_owner":                     "ExpectedBucketOwner",
		"key":                                       "Key",
		"kms_key":                                   "KmsKey",
		"managed_query_results_configuration":       "ManagedQueryResultsConfiguration",
		"name":                                      "Name",
		"output_location":                           "OutputLocation",
		"publish_cloudwatch_metrics_enabled":        "PublishCloudWatchMetricsEnabled",
		"recursive_delete_option":                   "RecursiveDeleteOption",
		"remove_acl_configuration":                  "RemoveAclConfiguration",
		"remove_bytes_scanned_cutoff_per_query":     "RemoveBytesScannedCutoffPerQuery",
		"remove_customer_content_encryption_configuration": "RemoveCustomerContentEncryptionConfiguration",
		"remove_encryption_configuration":                  "RemoveEncryptionConfiguration",
		"remove_expected_bucket_owner":                     "RemoveExpectedBucketOwner",
		"remove_output_location":                           "RemoveOutputLocation",
		"requester_pays_enabled":                           "RequesterPaysEnabled",
		"result_configuration":                             "ResultConfiguration",
		"result_configuration_updates":                     "ResultConfigurationUpdates",
		"s3_acl_option":                                    "S3AclOption",
		"selected_engine_version":                          "SelectedEngineVersion",
		"state":                                            "State",
		"tags":                                             "Tags",
		"value":                                            "Value",
		"work_group_configuration":                         "WorkGroupConfiguration",
		"work_group_configuration_updates":                 "WorkGroupConfigurationUpdates",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
