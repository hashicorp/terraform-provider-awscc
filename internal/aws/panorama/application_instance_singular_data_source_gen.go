// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package panorama

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_panorama_application_instance", applicationInstanceDataSource)
}

// applicationInstanceDataSource returns the Terraform awscc_panorama_application_instance data source.
// This Terraform data source corresponds to the CloudFormation AWS::Panorama::ApplicationInstance resource.
func applicationInstanceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApplicationInstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9\\-\\_]+$",
		//	  "type": "string"
		//	}
		"application_instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ApplicationInstanceIdToReplace
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of an application instance to replace with the new instance.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9\\-\\_]+$",
		//	  "type": "string"
		//	}
		"application_instance_id_to_replace": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of an application instance to replace with the new instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "integer"
		//	}
		"created_time": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DefaultRuntimeContextDevice
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The device's ID.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9\\-\\_]+$",
		//	  "type": "string"
		//	}
		"default_runtime_context_device": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The device's ID.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DefaultRuntimeContextDeviceName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9\\-\\_]+$",
		//	  "type": "string"
		//	}
		"default_runtime_context_device_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A description for the application instance.",
		//	  "maxLength": 255,
		//	  "minLength": 0,
		//	  "pattern": "^.*$",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A description for the application instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HealthStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "RUNNING",
		//	    "ERROR",
		//	    "NOT_AVAILABLE"
		//	  ],
		//	  "type": "string"
		//	}
		"health_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: LastUpdatedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "integer"
		//	}
		"last_updated_time": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ManifestOverridesPayload
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Setting overrides for the application manifest.",
		//	  "properties": {
		//	    "PayloadData": {
		//	      "description": "The overrides document.",
		//	      "maxLength": 51200,
		//	      "minLength": 0,
		//	      "pattern": "^.+$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"manifest_overrides_payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: PayloadData
				"payload_data": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The overrides document.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Setting overrides for the application manifest.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ManifestPayload
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The application's manifest document.",
		//	  "properties": {
		//	    "PayloadData": {
		//	      "description": "The application manifest.",
		//	      "maxLength": 51200,
		//	      "minLength": 1,
		//	      "pattern": "^.+$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"manifest_payload": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: PayloadData
				"payload_data": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The application manifest.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The application's manifest document.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A name for the application instance.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9\\-\\_]+$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A name for the application instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RuntimeRoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of a runtime role for the application instance.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^arn:[a-z0-9][-.a-z0-9]{0,62}:iam::[0-9]{12}:role/.+$",
		//	  "type": "string"
		//	}
		"runtime_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of a runtime role for the application instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "DEPLOYMENT_PENDING",
		//	    "DEPLOYMENT_REQUESTED",
		//	    "DEPLOYMENT_IN_PROGRESS",
		//	    "DEPLOYMENT_ERROR",
		//	    "DEPLOYMENT_SUCCEEDED",
		//	    "REMOVAL_PENDING",
		//	    "REMOVAL_REQUESTED",
		//	    "REMOVAL_IN_PROGRESS",
		//	    "REMOVAL_FAILED",
		//	    "REMOVAL_SUCCEEDED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: StatusDescription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"status_description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Tags for the application instance.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "^.+$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "pattern": "^.+$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Tags for the application instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Panorama::ApplicationInstance",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Panorama::ApplicationInstance").WithTerraformTypeName("awscc_panorama_application_instance")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"application_instance_id":             "ApplicationInstanceId",
		"application_instance_id_to_replace":  "ApplicationInstanceIdToReplace",
		"arn":                                 "Arn",
		"created_time":                        "CreatedTime",
		"default_runtime_context_device":      "DefaultRuntimeContextDevice",
		"default_runtime_context_device_name": "DefaultRuntimeContextDeviceName",
		"description":                         "Description",
		"health_status":                       "HealthStatus",
		"key":                                 "Key",
		"last_updated_time":                   "LastUpdatedTime",
		"manifest_overrides_payload":          "ManifestOverridesPayload",
		"manifest_payload":                    "ManifestPayload",
		"name":                                "Name",
		"payload_data":                        "PayloadData",
		"runtime_role_arn":                    "RuntimeRoleArn",
		"status":                              "Status",
		"status_description":                  "StatusDescription",
		"tags":                                "Tags",
		"value":                               "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
