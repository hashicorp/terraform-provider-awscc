// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package s3vectors

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_s3vectors_vector_bucket", vectorBucketDataSource)
}

// vectorBucketDataSource returns the Terraform awscc_s3vectors_vector_bucket data source.
// This Terraform data source corresponds to the CloudFormation AWS::S3Vectors::VectorBucket resource.
func vectorBucketDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Date and time when the vector bucket was created.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Date and time when the vector bucket was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EncryptionConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The encryption configuration for the vector bucket.",
		//	  "properties": {
		//	    "KmsKeyArn": {
		//	      "description": "AWS Key Management Service (KMS) customer managed key ID to use for the encryption configuration. This parameter is allowed if and only if sseType is set to aws:kms",
		//	      "maxLength": 2048,
		//	      "minLength": 1,
		//	      "pattern": "^(arn:aws[-a-z0-9]*:kms:[-a-z0-9]*:[0-9]{12}:key/.+)$",
		//	      "type": "string"
		//	    },
		//	    "SseType": {
		//	      "default": "AES256",
		//	      "description": "The server-side encryption type to use for the encryption configuration of the vector bucket. By default, if you don't specify, all new vectors in Amazon S3 vector buckets use server-side encryption with Amazon S3 managed keys (SSE-S3), specifically AES256.",
		//	      "enum": [
		//	        "AES256",
		//	        "aws:kms"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"encryption_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: KmsKeyArn
				"kms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "AWS Key Management Service (KMS) customer managed key ID to use for the encryption configuration. This parameter is allowed if and only if sseType is set to aws:kms",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SseType
				"sse_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The server-side encryption type to use for the encryption configuration of the vector bucket. By default, if you don't specify, all new vectors in Amazon S3 vector buckets use server-side encryption with Amazon S3 managed keys (SSE-S3), specifically AES256.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The encryption configuration for the vector bucket.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VectorBucketArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the vector bucket.",
		//	  "examples": [
		//	    "arn:aws:s3vectors:us-east-1:123456789012:bucket/myvectorbucket"
		//	  ],
		//	  "type": "string"
		//	}
		"vector_bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the vector bucket.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VectorBucketName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the vector bucket.",
		//	  "maxLength": 63,
		//	  "minLength": 3,
		//	  "type": "string"
		//	}
		"vector_bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the vector bucket.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::S3Vectors::VectorBucket",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::S3Vectors::VectorBucket").WithTerraformTypeName("awscc_s3vectors_vector_bucket")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"creation_time":            "CreationTime",
		"encryption_configuration": "EncryptionConfiguration",
		"kms_key_arn":              "KmsKeyArn",
		"sse_type":                 "SseType",
		"vector_bucket_arn":        "VectorBucketArn",
		"vector_bucket_name":       "VectorBucketName",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
