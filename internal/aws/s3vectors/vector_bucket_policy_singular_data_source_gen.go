// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package s3vectors

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_s3vectors_vector_bucket_policy", vectorBucketPolicyDataSource)
}

// vectorBucketPolicyDataSource returns the Terraform awscc_s3vectors_vector_bucket_policy data source.
// This Terraform data source corresponds to the CloudFormation AWS::S3Vectors::VectorBucketPolicy resource.
func vectorBucketPolicyDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Policy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A policy document containing permissions to add to the specified vector bucket. In IAM, you must provide policy documents in JSON format. However, in CloudFormation you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to IAM.",
		//	  "type": "string"
		//	}
		"policy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A policy document containing permissions to add to the specified vector bucket. In IAM, you must provide policy documents in JSON format. However, in CloudFormation you can provide the policy in JSON or YAML format because CloudFormation converts YAML to JSON before submitting it to IAM.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VectorBucketArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the vector bucket.",
		//	  "examples": [
		//	    "arn:aws:s3vectors:us-east-1:123456789012:bucket/myvectorbucket"
		//	  ],
		//	  "type": "string"
		//	}
		"vector_bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the vector bucket.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VectorBucketName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the vector bucket",
		//	  "maxLength": 63,
		//	  "minLength": 3,
		//	  "type": "string"
		//	}
		"vector_bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the vector bucket",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::S3Vectors::VectorBucketPolicy",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::S3Vectors::VectorBucketPolicy").WithTerraformTypeName("awscc_s3vectors_vector_bucket_policy")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"policy":             "Policy",
		"vector_bucket_arn":  "VectorBucketArn",
		"vector_bucket_name": "VectorBucketName",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
