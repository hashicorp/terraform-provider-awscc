// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package s3vectors

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_s3vectors_index", indexDataSource)
}

// indexDataSource returns the Terraform awscc_s3vectors_index data source.
// This Terraform data source corresponds to the CloudFormation AWS::S3Vectors::Index resource.
func indexDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Date and time when the vector index was created.",
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  timetypes.RFC3339Type{},
			Description: "Date and time when the vector index was created.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DataType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The data type of the vectors to be inserted into the vector index.",
		//	  "enum": [
		//	    "float32"
		//	  ],
		//	  "type": "string"
		//	}
		"data_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The data type of the vectors to be inserted into the vector index.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Dimension
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The dimensions of the vectors to be inserted into the vector index.",
		//	  "maximum": 4096,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"dimension": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The dimensions of the vectors to be inserted into the vector index.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DistanceMetric
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The distance metric to be used for similarity search.",
		//	  "enum": [
		//	    "cosine",
		//	    "euclidean"
		//	  ],
		//	  "type": "string"
		//	}
		"distance_metric": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The distance metric to be used for similarity search.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IndexArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the index",
		//	  "examples": [
		//	    "arn:aws:s3vectors:us-east-1:123456789012:bucket/myvectorbucket/index/myindex"
		//	  ],
		//	  "type": "string"
		//	}
		"index_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the index",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IndexName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the vector index to create.",
		//	  "maxLength": 63,
		//	  "minLength": 3,
		//	  "type": "string"
		//	}
		"index_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the vector index to create.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MetadataConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The metadata configuration for the vector index.",
		//	  "properties": {
		//	    "NonFilterableMetadataKeys": {
		//	      "description": "Non-filterable metadata keys allow you to enrich vectors with additional context during storage and retrieval. Unlike default metadata keys, these keys cannot be used as query filters. Non-filterable metadata keys can be retrieved but cannot be searched, queried, or filtered. You can access non-filterable metadata keys of your vectors after finding the vectors.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "maxLength": 63,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 1,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"metadata_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: NonFilterableMetadataKeys
				"non_filterable_metadata_keys": schema.SetAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "Non-filterable metadata keys allow you to enrich vectors with additional context during storage and retrieval. Unlike default metadata keys, these keys cannot be used as query filters. Non-filterable metadata keys can be retrieved but cannot be searched, queried, or filtered. You can access non-filterable metadata keys of your vectors after finding the vectors.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The metadata configuration for the vector index.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VectorBucketArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the vector bucket.",
		//	  "examples": [
		//	    "arn:aws:s3vectors:us-east-1:123456789012:bucket/myvectorbucket"
		//	  ],
		//	  "type": "string"
		//	}
		"vector_bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the vector bucket.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VectorBucketName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the vector bucket that contains the vector index.",
		//	  "maxLength": 63,
		//	  "minLength": 3,
		//	  "type": "string"
		//	}
		"vector_bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the vector bucket that contains the vector index.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::S3Vectors::Index",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::S3Vectors::Index").WithTerraformTypeName("awscc_s3vectors_index")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"creation_time":                "CreationTime",
		"data_type":                    "DataType",
		"dimension":                    "Dimension",
		"distance_metric":              "DistanceMetric",
		"index_arn":                    "IndexArn",
		"index_name":                   "IndexName",
		"metadata_configuration":       "MetadataConfiguration",
		"non_filterable_metadata_keys": "NonFilterableMetadataKeys",
		"vector_bucket_arn":            "VectorBucketArn",
		"vector_bucket_name":           "VectorBucketName",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
