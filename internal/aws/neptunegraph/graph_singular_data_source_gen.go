// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package neptunegraph

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_neptunegraph_graph", graphDataSource)
}

// graphDataSource returns the Terraform awscc_neptunegraph_graph data source.
// This Terraform data source corresponds to the CloudFormation AWS::NeptuneGraph::Graph resource.
func graphDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DeletionProtection
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.\n\n_Default_: If not specified, the default value is true.",
		//	  "type": "boolean"
		//	}
		"deletion_protection": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.\n\n_Default_: If not specified, the default value is true.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Endpoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`",
		//	  "type": "string"
		//	}
		"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GraphArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Graph resource ARN",
		//	  "type": "string"
		//	}
		"graph_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Graph resource ARN",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GraphId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The auto-generated id assigned by the service.",
		//	  "type": "string"
		//	}
		"graph_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The auto-generated id assigned by the service.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GraphName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Contains a user-supplied name for the Graph. \n\nIf you don't specify a name, we generate a unique Graph Name using a combination of Stack Name and a UUID comprising of 4 characters.\n\n_Important_: If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.",
		//	  "maxLength": 63,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-z][a-zA-Z0-9]*(-[a-zA-Z0-9]+)*$",
		//	  "type": "string"
		//	}
		"graph_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Contains a user-supplied name for the Graph. \n\nIf you don't specify a name, we generate a unique Graph Name using a combination of Stack Name and a UUID comprising of 4 characters.\n\n_Important_: If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProvisionedMemory
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Memory for the Graph.",
		//	  "type": "integer"
		//	}
		"provisioned_memory": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Memory for the Graph.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PublicConnectivity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.\n\nWhen the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.\n\nWhen the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.\n\n_Default_: If not specified, the default value is false.",
		//	  "type": "boolean"
		//	}
		"public_connectivity": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.\n\nWhen the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.\n\nWhen the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.\n\n_Default_: If not specified, the default value is false.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ReplicaCount
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.\n\nReplica Count should always be less than or equal to 2.\n\n_Default_: If not specified, the default value is 1.",
		//	  "type": "integer"
		//	}
		"replica_count": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.\n\nReplica Count should always be less than or equal to 2.\n\n_Default_: If not specified, the default value is 1.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags associated with this graph.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags associated with this graph.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VectorSearchConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Vector Search Configuration",
		//	  "properties": {
		//	    "VectorSearchDimension": {
		//	      "description": "The vector search dimension",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "VectorSearchDimension"
		//	  ],
		//	  "type": "object"
		//	}
		"vector_search_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: VectorSearchDimension
				"vector_search_dimension": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The vector search dimension",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Vector Search Configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::NeptuneGraph::Graph",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::NeptuneGraph::Graph").WithTerraformTypeName("awscc_neptunegraph_graph")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"deletion_protection":         "DeletionProtection",
		"endpoint":                    "Endpoint",
		"graph_arn":                   "GraphArn",
		"graph_id":                    "GraphId",
		"graph_name":                  "GraphName",
		"key":                         "Key",
		"provisioned_memory":          "ProvisionedMemory",
		"public_connectivity":         "PublicConnectivity",
		"replica_count":               "ReplicaCount",
		"tags":                        "Tags",
		"value":                       "Value",
		"vector_search_configuration": "VectorSearchConfiguration",
		"vector_search_dimension":     "VectorSearchDimension",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
