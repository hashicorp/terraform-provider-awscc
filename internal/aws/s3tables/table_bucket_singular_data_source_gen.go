// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package s3tables

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_s3tables_table_bucket", tableBucketDataSource)
}

// tableBucketDataSource returns the Terraform awscc_s3tables_table_bucket data source.
// This Terraform data source corresponds to the CloudFormation AWS::S3Tables::TableBucket resource.
func tableBucketDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: TableBucketARN
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the specified table bucket.",
		//	  "examples": [
		//	    "arn:aws:s3tables:us-west-2:123456789012:bucket/mytablebucket"
		//	  ],
		//	  "type": "string"
		//	}
		"table_bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the specified table bucket.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TableBucketName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A name for the table bucket.",
		//	  "maxLength": 63,
		//	  "minLength": 3,
		//	  "type": "string"
		//	}
		"table_bucket_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A name for the table bucket.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UnreferencedFileRemoval
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Settings governing the Unreferenced File Removal maintenance action. Unreferenced file removal identifies and deletes all objects that are not referenced by any table snapshots.",
		//	  "properties": {
		//	    "NoncurrentDays": {
		//	      "description": "S3 permanently deletes noncurrent objects after the number of days specified by the NoncurrentDays property.",
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    },
		//	    "Status": {
		//	      "description": "Indicates whether the Unreferenced File Removal maintenance action is enabled.",
		//	      "enum": [
		//	        "Enabled",
		//	        "Disabled"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "UnreferencedDays": {
		//	      "description": "For any object not referenced by your table and older than the UnreferencedDays property, S3 creates a delete marker and marks the object version as noncurrent.",
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"unreferenced_file_removal": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: NoncurrentDays
				"noncurrent_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "S3 permanently deletes noncurrent objects after the number of days specified by the NoncurrentDays property.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Status
				"status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Indicates whether the Unreferenced File Removal maintenance action is enabled.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UnreferencedDays
				"unreferenced_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "For any object not referenced by your table and older than the UnreferencedDays property, S3 creates a delete marker and marks the object version as noncurrent.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Settings governing the Unreferenced File Removal maintenance action. Unreferenced file removal identifies and deletes all objects that are not referenced by any table snapshots.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::S3Tables::TableBucket",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::S3Tables::TableBucket").WithTerraformTypeName("awscc_s3tables_table_bucket")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"noncurrent_days":           "NoncurrentDays",
		"status":                    "Status",
		"table_bucket_arn":          "TableBucketARN",
		"table_bucket_name":         "TableBucketName",
		"unreferenced_days":         "UnreferencedDays",
		"unreferenced_file_removal": "UnreferencedFileRemoval",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
