// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package rtbfabric

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/float64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_rtbfabric_link", linkResource)
}

// linkResource returns the Terraform awscc_rtbfabric_link resource.
// This Terraform resource corresponds to the CloudFormation AWS::RTBFabric::Link resource.
func linkResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "pattern": "^arn:aws:rtbfabric:[a-zA-Z0-9_-]+:[0-9]{12}:gateway/[a-zA-Z0-9-]+/link/[a-zA-Z0-9-]+$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreatedTimestamp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"created_timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: GatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^rtb-gw-[a-z0-9-]{1,25}$",
		//	  "type": "string"
		//	}
		"gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^rtb-gw-[a-z0-9-]{1,25}$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: HttpResponderAllowed
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "boolean"
		//	}
		"http_responder_allowed": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// HttpResponderAllowed is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: LinkAttributes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "CustomerProvidedId": {
		//	      "type": "string"
		//	    },
		//	    "ResponderErrorMasking": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Action": {
		//	            "enum": [
		//	              "NO_BID",
		//	              "PASSTHROUGH"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "HttpCode": {
		//	            "maxLength": 7,
		//	            "minLength": 3,
		//	            "pattern": "^DEFAULT|4XX|5XX|\\d{3}$",
		//	            "type": "string"
		//	          },
		//	          "LoggingTypes": {
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "enum": [
		//	                "NONE",
		//	                "METRIC",
		//	                "RESPONSE"
		//	              ],
		//	              "type": "string"
		//	            },
		//	            "maxItems": 2,
		//	            "minItems": 1,
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "ResponseLoggingPercentage": {
		//	            "maximum": 100,
		//	            "minimum": 0,
		//	            "type": "number"
		//	          }
		//	        },
		//	        "required": [
		//	          "HttpCode",
		//	          "Action",
		//	          "LoggingTypes"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 200,
		//	      "minItems": 1,
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"link_attributes": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: CustomerProvidedId
				"customer_provided_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Optional: true,
					Computed: true,
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ResponderErrorMasking
				"responder_error_masking": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Action
							"action": schema.StringAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"NO_BID",
										"PASSTHROUGH",
									),
									fwvalidators.NotNullString(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: HttpCode
							"http_code": schema.StringAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.LengthBetween(3, 7),
									stringvalidator.RegexMatches(regexp.MustCompile("^DEFAULT|4XX|5XX|\\d{3}$"), ""),
									fwvalidators.NotNullString(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: LoggingTypes
							"logging_types": schema.SetAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								Validators: []validator.Set{ /*START VALIDATORS*/
									setvalidator.SizeBetween(1, 2),
									setvalidator.ValueStringsAre(
										stringvalidator.OneOf(
											"NONE",
											"METRIC",
											"RESPONSE",
										),
									),
									fwvalidators.NotNullSet(),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
									setplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ResponseLoggingPercentage
							"response_logging_percentage": schema.Float64Attribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.Float64{ /*START VALIDATORS*/
									float64validator.Between(0.000000, 100.000000),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
									float64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Optional: true,
					Computed: true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.SizeBetween(1, 200),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						generic.Multiset(),
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LinkDirection
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "REQUEST",
		//	    "RESPONSE"
		//	  ],
		//	  "type": "string"
		//	}
		"link_direction": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LinkId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^link-[a-z0-9-]{1,25}$",
		//	  "type": "string"
		//	}
		"link_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: LinkLogSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "ApplicationLogs": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "LinkApplicationLogSampling": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ErrorLog": {
		//	              "maximum": 100.0,
		//	              "minimum": 0.0,
		//	              "type": "number"
		//	            },
		//	            "FilterLog": {
		//	              "maximum": 100.0,
		//	              "minimum": 0.0,
		//	              "type": "number"
		//	            }
		//	          },
		//	          "required": [
		//	            "ErrorLog",
		//	            "FilterLog"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "LinkApplicationLogSampling"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "ApplicationLogs"
		//	  ],
		//	  "type": "object"
		//	}
		"link_log_settings": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ApplicationLogs
				"application_logs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: LinkApplicationLogSampling
						"link_application_log_sampling": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ErrorLog
								"error_log": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Required: true,
									Validators: []validator.Float64{ /*START VALIDATORS*/
										float64validator.Between(0.000000, 100.000000),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
								// Property: FilterLog
								"filter_log": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Required: true,
									Validators: []validator.Float64{ /*START VALIDATORS*/
										float64validator.Between(0.000000, 100.000000),
									}, /*END VALIDATORS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Required: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Required: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Required: true,
		}, /*END ATTRIBUTE*/
		// Property: LinkStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "enum": [
		//	    "PENDING_CREATION",
		//	    "PENDING_REQUEST",
		//	    "REQUESTED",
		//	    "ACCEPTED",
		//	    "ACTIVE",
		//	    "DECLINED",
		//	    "FAILED",
		//	    "PENDING_DELETION",
		//	    "DELETED",
		//	    "PENDING_UPDATE",
		//	    "PENDING_ISOLATION",
		//	    "ISOLATED",
		//	    "PENDING_RESTORATION",
		//	    "UNKNOWN_TO_SDK_VERSION"
		//	  ],
		//	  "type": "string"
		//	}
		"link_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ModuleConfigurationList
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "DependsOn": {
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "pattern": "^[A-Za-z0-9 -]+$",
		//	          "type": "string"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "ModuleParameters": {
		//	        "properties": {
		//	          "NoBid": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "PassThroughPercentage": {
		//	                "maximum": 100.0,
		//	                "minimum": 0.0,
		//	                "type": "number"
		//	              },
		//	              "Reason": {
		//	                "maxLength": 50,
		//	                "minLength": 1,
		//	                "pattern": "^[a-zA-Z0-9]*$",
		//	                "type": "string"
		//	              },
		//	              "ReasonCode": {
		//	                "maximum": 10,
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "OpenRtbAttribute": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Action": {
		//	                "properties": {
		//	                  "HeaderTag": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "Name": {
		//	                        "type": "string"
		//	                      },
		//	                      "Value": {
		//	                        "type": "string"
		//	                      }
		//	                    },
		//	                    "required": [
		//	                      "Name",
		//	                      "Value"
		//	                    ],
		//	                    "type": "object"
		//	                  },
		//	                  "NoBid": {
		//	                    "additionalProperties": false,
		//	                    "properties": {
		//	                      "NoBidReasonCode": {
		//	                        "minimum": 0,
		//	                        "type": "integer"
		//	                      }
		//	                    },
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "FilterConfiguration": {
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Criteria": {
		//	                      "insertionOrder": false,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "properties": {
		//	                          "Path": {
		//	                            "type": "string"
		//	                          },
		//	                          "Values": {
		//	                            "insertionOrder": false,
		//	                            "items": {
		//	                              "type": "string"
		//	                            },
		//	                            "minItems": 1,
		//	                            "type": "array",
		//	                            "uniqueItems": false
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "Path",
		//	                          "Values"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array",
		//	                      "uniqueItems": false
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Criteria"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "FilterType": {
		//	                "enum": [
		//	                  "INCLUDE",
		//	                  "EXCLUDE"
		//	                ],
		//	                "type": "string"
		//	              },
		//	              "HoldbackPercentage": {
		//	                "maximum": 100.0,
		//	                "minimum": 0.0,
		//	                "type": "number"
		//	              }
		//	            },
		//	            "required": [
		//	              "FilterType",
		//	              "FilterConfiguration",
		//	              "Action",
		//	              "HoldbackPercentage"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Name": {
		//	        "pattern": "^[A-Za-z0-9 -]+$",
		//	        "type": "string"
		//	      },
		//	      "Version": {
		//	        "pattern": "^[a-z0-9]{1,25}$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Name"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"module_configuration_list": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DependsOn
					"depends_on": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []validator.List{ /*START VALIDATORS*/
							listvalidator.ValueStringsAre(
								stringvalidator.RegexMatches(regexp.MustCompile("^[A-Za-z0-9 -]+$"), ""),
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							generic.Multiset(),
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: ModuleParameters
					"module_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: NoBid
							"no_bid": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: PassThroughPercentage
									"pass_through_percentage": schema.Float64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.Float64{ /*START VALIDATORS*/
											float64validator.Between(0.000000, 100.000000),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
											float64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: Reason
									"reason": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.LengthBetween(1, 50),
											stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9]*$"), ""),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: ReasonCode
									"reason_code": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.Int64{ /*START VALIDATORS*/
											int64validator.Between(0, 10),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
											int64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: OpenRtbAttribute
							"open_rtb_attribute": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Action
									"action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: HeaderTag
											"header_tag": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: Name
													"name": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															fwvalidators.NotNullString(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
													// Property: Value
													"value": schema.StringAttribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.String{ /*START VALIDATORS*/
															fwvalidators.NotNullString(),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
															stringplanmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
											// Property: NoBid
											"no_bid": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
												Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
													// Property: NoBidReasonCode
													"no_bid_reason_code": schema.Int64Attribute{ /*START ATTRIBUTE*/
														Optional: true,
														Computed: true,
														Validators: []validator.Int64{ /*START VALIDATORS*/
															int64validator.AtLeast(0),
														}, /*END VALIDATORS*/
														PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
															int64planmodifier.UseStateForUnknown(),
														}, /*END PLAN MODIFIERS*/
													}, /*END ATTRIBUTE*/
												}, /*END SCHEMA*/
												Optional: true,
												Computed: true,
												PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
													objectplanmodifier.UseStateForUnknown(),
												}, /*END PLAN MODIFIERS*/
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Optional: true,
										Computed: true,
										Validators: []validator.Object{ /*START VALIDATORS*/
											fwvalidators.NotNullObject(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
											objectplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: FilterConfiguration
									"filter_configuration": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Criteria
												"criteria": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: Path
															"path": schema.StringAttribute{ /*START ATTRIBUTE*/
																Optional: true,
																Computed: true,
																Validators: []validator.String{ /*START VALIDATORS*/
																	fwvalidators.NotNullString(),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
																	stringplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
															// Property: Values
															"values": schema.ListAttribute{ /*START ATTRIBUTE*/
																ElementType: types.StringType,
																Optional:    true,
																Computed:    true,
																Validators: []validator.List{ /*START VALIDATORS*/
																	listvalidator.SizeAtLeast(1),
																	fwvalidators.NotNullList(),
																}, /*END VALIDATORS*/
																PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
																	generic.Multiset(),
																	listplanmodifier.UseStateForUnknown(),
																}, /*END PLAN MODIFIERS*/
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Optional: true,
													Computed: true,
													Validators: []validator.List{ /*START VALIDATORS*/
														fwvalidators.NotNullList(),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
														generic.Multiset(),
														listplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Optional: true,
										Computed: true,
										Validators: []validator.List{ /*START VALIDATORS*/
											fwvalidators.NotNullList(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
											generic.Multiset(),
											listplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: FilterType
									"filter_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.String{ /*START VALIDATORS*/
											stringvalidator.OneOf(
												"INCLUDE",
												"EXCLUDE",
											),
											fwvalidators.NotNullString(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
											stringplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
									// Property: HoldbackPercentage
									"holdback_percentage": schema.Float64Attribute{ /*START ATTRIBUTE*/
										Optional: true,
										Computed: true,
										Validators: []validator.Float64{ /*START VALIDATORS*/
											float64validator.Between(0.000000, 100.000000),
											fwvalidators.NotNullFloat64(),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.Float64{ /*START PLAN MODIFIERS*/
											float64planmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
							objectplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.RegexMatches(regexp.MustCompile("^[A-Za-z0-9 -]+$"), ""),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Version
					"version": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9]{1,25}$"), ""),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// ModuleConfigurationList is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: PeerGatewayId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "pattern": "^rtb-gw-[a-z0-9-]{1,25}$",
		//	  "type": "string"
		//	}
		"peer_gateway_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Required: true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.RegexMatches(regexp.MustCompile("^rtb-gw-[a-z0-9-]{1,25}$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Tags to assign to the Link.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(0, 256),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Tags to assign to the Link.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeBetween(0, 50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: UpdatedTimestamp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"updated_timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::RTBFabric::Link Resource Type",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::RTBFabric::Link").WithTerraformTypeName("awscc_rtbfabric_link")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "arn",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"action":                        "Action",
		"application_logs":              "ApplicationLogs",
		"arn":                           "Arn",
		"created_timestamp":             "CreatedTimestamp",
		"criteria":                      "Criteria",
		"customer_provided_id":          "CustomerProvidedId",
		"depends_on":                    "DependsOn",
		"error_log":                     "ErrorLog",
		"filter_configuration":          "FilterConfiguration",
		"filter_log":                    "FilterLog",
		"filter_type":                   "FilterType",
		"gateway_id":                    "GatewayId",
		"header_tag":                    "HeaderTag",
		"holdback_percentage":           "HoldbackPercentage",
		"http_code":                     "HttpCode",
		"http_responder_allowed":        "HttpResponderAllowed",
		"key":                           "Key",
		"link_application_log_sampling": "LinkApplicationLogSampling",
		"link_attributes":               "LinkAttributes",
		"link_direction":                "LinkDirection",
		"link_id":                       "LinkId",
		"link_log_settings":             "LinkLogSettings",
		"link_status":                   "LinkStatus",
		"logging_types":                 "LoggingTypes",
		"module_configuration_list":     "ModuleConfigurationList",
		"module_parameters":             "ModuleParameters",
		"name":                          "Name",
		"no_bid":                        "NoBid",
		"no_bid_reason_code":            "NoBidReasonCode",
		"open_rtb_attribute":            "OpenRtbAttribute",
		"pass_through_percentage":       "PassThroughPercentage",
		"path":                          "Path",
		"peer_gateway_id":               "PeerGatewayId",
		"reason":                        "Reason",
		"reason_code":                   "ReasonCode",
		"responder_error_masking":       "ResponderErrorMasking",
		"response_logging_percentage":   "ResponseLoggingPercentage",
		"tags":                          "Tags",
		"updated_timestamp":             "UpdatedTimestamp",
		"value":                         "Value",
		"values":                        "Values",
		"version":                       "Version",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/HttpResponderAllowed",
		"/properties/ModuleConfigurationList",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
