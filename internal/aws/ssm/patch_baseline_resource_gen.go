// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package ssm

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	"regexp"
)

func init() {
	registry.AddResourceFactory("awscc_ssm_patch_baseline", patchBaselineResource)
}

// patchBaselineResource returns the Terraform awscc_ssm_patch_baseline resource.
// This Terraform resource corresponds to the CloudFormation AWS::SSM::PatchBaseline resource.
func patchBaselineResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApprovalRules
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A set of rules defining the approval rules for a patch baseline.",
		//	  "insertionOrder": false,
		//	  "properties": {
		//	    "PatchRules": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Defines an approval rule for a patch baseline.",
		//	        "insertionOrder": false,
		//	        "properties": {
		//	          "ApproveAfterDays": {
		//	            "maximum": 360,
		//	            "minimum": 0,
		//	            "type": "integer"
		//	          },
		//	          "ApproveUntilDate": {
		//	            "maxLength": 10,
		//	            "minLength": 0,
		//	            "type": "string"
		//	          },
		//	          "ComplianceLevel": {
		//	            "enum": [
		//	              "CRITICAL",
		//	              "HIGH",
		//	              "INFORMATIONAL",
		//	              "LOW",
		//	              "MEDIUM",
		//	              "UNSPECIFIED"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "EnableNonSecurity": {
		//	            "default": false,
		//	            "type": "boolean"
		//	          },
		//	          "PatchFilterGroup": {
		//	            "additionalProperties": false,
		//	            "description": "The patch filter group that defines the criteria for the rule.",
		//	            "properties": {
		//	              "PatchFilters": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "Defines which patches should be included in a patch baseline.",
		//	                  "properties": {
		//	                    "Key": {
		//	                      "enum": [
		//	                        "ADVISORY_ID",
		//	                        "ARCH",
		//	                        "BUGZILLA_ID",
		//	                        "CLASSIFICATION",
		//	                        "CVE_ID",
		//	                        "EPOCH",
		//	                        "MSRC_SEVERITY",
		//	                        "NAME",
		//	                        "PATCH_ID",
		//	                        "PATCH_SET",
		//	                        "PRIORITY",
		//	                        "PRODUCT",
		//	                        "PRODUCT_FAMILY",
		//	                        "RELEASE",
		//	                        "REPOSITORY",
		//	                        "SECTION",
		//	                        "SECURITY",
		//	                        "SEVERITY",
		//	                        "VERSION"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "Values": {
		//	                      "items": {
		//	                        "maxLength": 64,
		//	                        "minLength": 1,
		//	                        "type": "string"
		//	                      },
		//	                      "maxItems": 20,
		//	                      "minItems": 0,
		//	                      "type": "array",
		//	                      "uniqueItems": false
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "maxItems": 5,
		//	                "minItems": 0,
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 10,
		//	      "minItems": 0,
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"approval_rules": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: PatchRules
				"patch_rules": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ApproveAfterDays
							"approve_after_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.Int64{ /*START VALIDATORS*/
									int64validator.Between(0, 360),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
									int64planmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ApproveUntilDate
							"approve_until_date": schema.StringAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.LengthBetween(0, 10),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: ComplianceLevel
							"compliance_level": schema.StringAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"CRITICAL",
										"HIGH",
										"INFORMATIONAL",
										"LOW",
										"MEDIUM",
										"UNSPECIFIED",
									),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: EnableNonSecurity
							"enable_non_security": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
									generic.BoolDefaultValue(false),
									boolplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: PatchFilterGroup
							"patch_filter_group": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: PatchFilters
									"patch_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Key
												"key": schema.StringAttribute{ /*START ATTRIBUTE*/
													Optional: true,
													Computed: true,
													Validators: []validator.String{ /*START VALIDATORS*/
														stringvalidator.OneOf(
															"ADVISORY_ID",
															"ARCH",
															"BUGZILLA_ID",
															"CLASSIFICATION",
															"CVE_ID",
															"EPOCH",
															"MSRC_SEVERITY",
															"NAME",
															"PATCH_ID",
															"PATCH_SET",
															"PRIORITY",
															"PRODUCT",
															"PRODUCT_FAMILY",
															"RELEASE",
															"REPOSITORY",
															"SECTION",
															"SECURITY",
															"SEVERITY",
															"VERSION",
														),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
														stringplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
												// Property: Values
												"values": schema.ListAttribute{ /*START ATTRIBUTE*/
													ElementType: types.StringType,
													Optional:    true,
													Computed:    true,
													Validators: []validator.List{ /*START VALIDATORS*/
														listvalidator.SizeBetween(0, 20),
														listvalidator.ValueStringsAre(
															stringvalidator.LengthBetween(1, 64),
														),
													}, /*END VALIDATORS*/
													PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
														listplanmodifier.UseStateForUnknown(),
													}, /*END PLAN MODIFIERS*/
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Optional: true,
										Computed: true,
										Validators: []validator.List{ /*START VALIDATORS*/
											listvalidator.SizeBetween(0, 5),
										}, /*END VALIDATORS*/
										PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
											listplanmodifier.UseStateForUnknown(),
										}, /*END PLAN MODIFIERS*/
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "The patch filter group that defines the criteria for the rule.",
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
									objectplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Optional: true,
					Computed: true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.SizeBetween(0, 10),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A set of rules defining the approval rules for a patch baseline.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ApprovedPatches
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of explicitly approved patches for the baseline.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "maxLength": 100,
		//	    "minLength": 1,
		//	    "type": "string"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"approved_patches": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of explicitly approved patches for the baseline.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(0, 50),
				listvalidator.ValueStringsAre(
					stringvalidator.LengthBetween(1, 100),
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ApprovedPatchesComplianceLevel
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "UNSPECIFIED",
		//	  "description": "Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.",
		//	  "enum": [
		//	    "CRITICAL",
		//	    "HIGH",
		//	    "MEDIUM",
		//	    "LOW",
		//	    "INFORMATIONAL",
		//	    "UNSPECIFIED"
		//	  ],
		//	  "type": "string"
		//	}
		"approved_patches_compliance_level": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. The default value is UNSPECIFIED.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"CRITICAL",
					"HIGH",
					"MEDIUM",
					"LOW",
					"INFORMATIONAL",
					"UNSPECIFIED",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				generic.StringDefaultValue("UNSPECIFIED"),
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ApprovedPatchesEnableNonSecurity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.",
		//	  "type": "boolean"
		//	}
		"approved_patches_enable_non_security": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether the list of approved patches includes non-security updates that should be applied to the instances. The default value is 'false'. Applies to Linux instances only.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				generic.BoolDefaultValue(false),
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DefaultBaseline
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": false,
		//	  "description": "Set the baseline as default baseline. Only registering to default patch baseline is allowed.",
		//	  "type": "boolean"
		//	}
		"default_baseline": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Set the baseline as default baseline. Only registering to default patch baseline is allowed.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				generic.BoolDefaultValue(false),
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the patch baseline.",
		//	  "maxLength": 1024,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the patch baseline.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 1024),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: GlobalFilters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A set of global filters used to include patches in the baseline.",
		//	  "properties": {
		//	    "PatchFilters": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Defines which patches should be included in a patch baseline.",
		//	        "properties": {
		//	          "Key": {
		//	            "enum": [
		//	              "ADVISORY_ID",
		//	              "ARCH",
		//	              "BUGZILLA_ID",
		//	              "CLASSIFICATION",
		//	              "CVE_ID",
		//	              "EPOCH",
		//	              "MSRC_SEVERITY",
		//	              "NAME",
		//	              "PATCH_ID",
		//	              "PATCH_SET",
		//	              "PRIORITY",
		//	              "PRODUCT",
		//	              "PRODUCT_FAMILY",
		//	              "RELEASE",
		//	              "REPOSITORY",
		//	              "SECTION",
		//	              "SECURITY",
		//	              "SEVERITY",
		//	              "VERSION"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "Values": {
		//	            "items": {
		//	              "maxLength": 64,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            },
		//	            "maxItems": 20,
		//	            "minItems": 0,
		//	            "type": "array",
		//	            "uniqueItems": false
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "maxItems": 5,
		//	      "minItems": 0,
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"global_filters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: PatchFilters
				"patch_filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Key
							"key": schema.StringAttribute{ /*START ATTRIBUTE*/
								Optional: true,
								Computed: true,
								Validators: []validator.String{ /*START VALIDATORS*/
									stringvalidator.OneOf(
										"ADVISORY_ID",
										"ARCH",
										"BUGZILLA_ID",
										"CLASSIFICATION",
										"CVE_ID",
										"EPOCH",
										"MSRC_SEVERITY",
										"NAME",
										"PATCH_ID",
										"PATCH_SET",
										"PRIORITY",
										"PRODUCT",
										"PRODUCT_FAMILY",
										"RELEASE",
										"REPOSITORY",
										"SECTION",
										"SECURITY",
										"SEVERITY",
										"VERSION",
									),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
									stringplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
							// Property: Values
							"values": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								Validators: []validator.List{ /*START VALIDATORS*/
									listvalidator.SizeBetween(0, 20),
									listvalidator.ValueStringsAre(
										stringvalidator.LengthBetween(1, 64),
									),
								}, /*END VALIDATORS*/
								PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
									listplanmodifier.UseStateForUnknown(),
								}, /*END PLAN MODIFIERS*/
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Optional: true,
					Computed: true,
					Validators: []validator.List{ /*START VALIDATORS*/
						listvalidator.SizeBetween(0, 5),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
						listplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "A set of global filters used to include patches in the baseline.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the patch baseline.",
		//	  "maxLength": 128,
		//	  "minLength": 20,
		//	  "pattern": "^[a-zA-Z0-9_\\-:/]{20,128}$",
		//	  "type": "string"
		//	}
		"id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the patch baseline.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the patch baseline.",
		//	  "maxLength": 128,
		//	  "minLength": 3,
		//	  "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the patch baseline.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(3, 128),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\-.]{3,128}$"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: OperatingSystem
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "WINDOWS",
		//	  "description": "Defines the operating system the patch baseline applies to. The Default value is WINDOWS.",
		//	  "enum": [
		//	    "WINDOWS",
		//	    "AMAZON_LINUX",
		//	    "AMAZON_LINUX_2",
		//	    "AMAZON_LINUX_2022",
		//	    "AMAZON_LINUX_2023",
		//	    "UBUNTU",
		//	    "REDHAT_ENTERPRISE_LINUX",
		//	    "SUSE",
		//	    "CENTOS",
		//	    "ORACLE_LINUX",
		//	    "DEBIAN",
		//	    "MACOS",
		//	    "RASPBIAN",
		//	    "ROCKY_LINUX",
		//	    "ALMA_LINUX"
		//	  ],
		//	  "type": "string"
		//	}
		"operating_system": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Defines the operating system the patch baseline applies to. The Default value is WINDOWS.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"WINDOWS",
					"AMAZON_LINUX",
					"AMAZON_LINUX_2",
					"AMAZON_LINUX_2022",
					"AMAZON_LINUX_2023",
					"UBUNTU",
					"REDHAT_ENTERPRISE_LINUX",
					"SUSE",
					"CENTOS",
					"ORACLE_LINUX",
					"DEBIAN",
					"MACOS",
					"RASPBIAN",
					"ROCKY_LINUX",
					"ALMA_LINUX",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				generic.StringDefaultValue("WINDOWS"),
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: PatchGroups
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "PatchGroups is used to associate instances with a specific patch baseline",
		//	  "items": {
		//	    "maxLength": 256,
		//	    "minLength": 1,
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"patch_groups": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "PatchGroups is used to associate instances with a specific patch baseline",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.ValueStringsAre(
					stringvalidator.LengthBetween(1, 256),
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RejectedPatches
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of explicitly rejected patches for the baseline.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "maxLength": 100,
		//	    "minLength": 1,
		//	    "type": "string"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"rejected_patches": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A list of explicitly rejected patches for the baseline.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(0, 50),
				listvalidator.ValueStringsAre(
					stringvalidator.LengthBetween(1, 100),
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RejectedPatchesAction
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "ALLOW_AS_DEPENDENCY",
		//	  "description": "The action for Patch Manager to take on patches included in the RejectedPackages list.",
		//	  "enum": [
		//	    "ALLOW_AS_DEPENDENCY",
		//	    "BLOCK"
		//	  ],
		//	  "type": "string"
		//	}
		"rejected_patches_action": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The action for Patch Manager to take on patches included in the RejectedPackages list.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"ALLOW_AS_DEPENDENCY",
					"BLOCK",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				generic.StringDefaultValue("ALLOW_AS_DEPENDENCY"),
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Sources
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.",
		//	    "properties": {
		//	      "Configuration": {
		//	        "maxLength": 1024,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Name": {
		//	        "pattern": "^[a-zA-Z0-9_\\-.]{3,50}$",
		//	        "type": "string"
		//	      },
		//	      "Products": {
		//	        "items": {
		//	          "maxLength": 128,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "maxItems": 20,
		//	        "minItems": 0,
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 20,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"sources": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Configuration
					"configuration": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 1024),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Name
					"name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Optional: true,
						Computed: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\-.]{3,50}$"), ""),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Products
					"products": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Optional:    true,
						Computed:    true,
						Validators: []validator.List{ /*START VALIDATORS*/
							listvalidator.SizeBetween(0, 20),
							listvalidator.ValueStringsAre(
								stringvalidator.LengthBetween(1, 128),
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
							listplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Information about the patches to use to update the instances, including target operating systems and source repository. Applies to Linux instances only.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(0, 20),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Metadata that you assign to your AWS resources.",
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 1000,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 128),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Required: true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 256),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(0, 1000),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::SSM::PatchBaseline",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SSM::PatchBaseline").WithTerraformTypeName("awscc_ssm_patch_baseline")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(false)
	opts = opts.WithAttributeNameMap(map[string]string{
		"approval_rules":                       "ApprovalRules",
		"approve_after_days":                   "ApproveAfterDays",
		"approve_until_date":                   "ApproveUntilDate",
		"approved_patches":                     "ApprovedPatches",
		"approved_patches_compliance_level":    "ApprovedPatchesComplianceLevel",
		"approved_patches_enable_non_security": "ApprovedPatchesEnableNonSecurity",
		"compliance_level":                     "ComplianceLevel",
		"configuration":                        "Configuration",
		"default_baseline":                     "DefaultBaseline",
		"description":                          "Description",
		"enable_non_security":                  "EnableNonSecurity",
		"global_filters":                       "GlobalFilters",
		"id":                                   "Id",
		"key":                                  "Key",
		"name":                                 "Name",
		"operating_system":                     "OperatingSystem",
		"patch_filter_group":                   "PatchFilterGroup",
		"patch_filters":                        "PatchFilters",
		"patch_groups":                         "PatchGroups",
		"patch_rules":                          "PatchRules",
		"products":                             "Products",
		"rejected_patches":                     "RejectedPatches",
		"rejected_patches_action":              "RejectedPatchesAction",
		"sources":                              "Sources",
		"tags":                                 "Tags",
		"value":                                "Value",
		"values":                               "Values",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
