// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ivschat

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_ivschat_room", roomDataSource)
}

// roomDataSource returns the Terraform awscc_ivschat_room data source.
// This Terraform data source corresponds to the CloudFormation AWS::IVSChat::Room resource.
func roomDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Room ARN is automatically generated on creation and assigned as the unique identifier.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:room/[a-zA-Z0-9-]+$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Room ARN is automatically generated on creation and assigned as the unique identifier.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The system-generated ID of the room.",
		//	  "maxLength": 12,
		//	  "minLength": 12,
		//	  "pattern": "^[a-zA-Z0-9]+$",
		//	  "type": "string"
		//	}
		"room_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The system-generated ID of the room.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LoggingConfigurationIdentifiers
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Array of logging configuration identifiers attached to the room.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "maxLength": 128,
		//	    "minLength": 1,
		//	    "pattern": "^arn:aws:ivschat:[a-z0-9-]+:[0-9]+:logging-configuration/[a-zA-Z0-9-]+$",
		//	    "type": "string"
		//	  },
		//	  "maxItems": 50,
		//	  "minItems": 0,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"logging_configuration_identifiers": schema.SetAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "Array of logging configuration identifiers attached to the room.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaximumMessageLength
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": 500,
		//	  "description": "The maximum number of characters in a single message.",
		//	  "maximum": 500,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"maximum_message_length": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum number of characters in a single message.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaximumMessageRatePerSecond
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": 10,
		//	  "description": "The maximum number of messages per second that can be sent to the room.",
		//	  "maximum": 10,
		//	  "minimum": 1,
		//	  "type": "integer"
		//	}
		"maximum_message_rate_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum number of messages per second that can be sent to the room.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MessageReviewHandler
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration information for optional review of messages.",
		//	  "properties": {
		//	    "FallbackResult": {
		//	      "default": "ALLOW",
		//	      "description": "Specifies the fallback behavior if the handler does not return a valid response, encounters an error, or times out.",
		//	      "enum": [
		//	        "ALLOW",
		//	        "DENY"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Uri": {
		//	      "description": "Identifier of the message review handler.",
		//	      "maxLength": 170,
		//	      "minLength": 0,
		//	      "pattern": "^$|^arn:aws:lambda:[a-z0-9-]+:[0-9]{12}:function:.+",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"message_review_handler": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: FallbackResult
				"fallback_result": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies the fallback behavior if the handler does not return a valid response, encounters an error, or times out.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Uri
				"uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Identifier of the message review handler.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration information for optional review of messages.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the room. The value does not need to be unique.",
		//	  "maxLength": 128,
		//	  "minLength": 0,
		//	  "pattern": "^[a-zA-Z0-9-_]*$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the room. The value does not need to be unique.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::IVSChat::Room",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::IVSChat::Room").WithTerraformTypeName("awscc_ivschat_room")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                               "Arn",
		"fallback_result":                   "FallbackResult",
		"key":                               "Key",
		"logging_configuration_identifiers": "LoggingConfigurationIdentifiers",
		"maximum_message_length":            "MaximumMessageLength",
		"maximum_message_rate_per_second":   "MaximumMessageRatePerSecond",
		"message_review_handler":            "MessageReviewHandler",
		"name":                              "Name",
		"room_id":                           "Id",
		"tags":                              "Tags",
		"uri":                               "Uri",
		"value":                             "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
