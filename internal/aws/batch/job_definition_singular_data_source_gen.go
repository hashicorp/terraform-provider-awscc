// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package batch

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_batch_job_definition", jobDefinitionDataSource)
}

// jobDefinitionDataSource returns the Terraform awscc_batch_job_definition data source.
// This Terraform data source corresponds to the CloudFormation AWS::Batch::JobDefinition resource.
func jobDefinitionDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ContainerProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Command": {
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "Environment": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Name": {
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "EphemeralStorage": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "SizeInGiB": {
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "required": [
		//	        "SizeInGiB"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "ExecutionRoleArn": {
		//	      "type": "string"
		//	    },
		//	    "FargatePlatformConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "PlatformVersion": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Image": {
		//	      "type": "string"
		//	    },
		//	    "InstanceType": {
		//	      "type": "string"
		//	    },
		//	    "JobRoleArn": {
		//	      "type": "string"
		//	    },
		//	    "LinuxParameters": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Devices": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "ContainerPath": {
		//	                "type": "string"
		//	              },
		//	              "HostPath": {
		//	                "type": "string"
		//	              },
		//	              "Permissions": {
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "InitProcessEnabled": {
		//	          "type": "boolean"
		//	        },
		//	        "MaxSwap": {
		//	          "type": "integer"
		//	        },
		//	        "SharedMemorySize": {
		//	          "type": "integer"
		//	        },
		//	        "Swappiness": {
		//	          "type": "integer"
		//	        },
		//	        "Tmpfs": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "ContainerPath": {
		//	                "type": "string"
		//	              },
		//	              "MountOptions": {
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "Size": {
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "required": [
		//	              "Size",
		//	              "ContainerPath"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "LogConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "LogDriver": {
		//	          "type": "string"
		//	        },
		//	        "Options": {
		//	          "type": "object"
		//	        },
		//	        "SecretOptions": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Name": {
		//	                "type": "string"
		//	              },
		//	              "ValueFrom": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "ValueFrom",
		//	              "Name"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        }
		//	      },
		//	      "required": [
		//	        "LogDriver"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Memory": {
		//	      "type": "integer"
		//	    },
		//	    "MountPoints": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ContainerPath": {
		//	            "type": "string"
		//	          },
		//	          "ReadOnly": {
		//	            "type": "boolean"
		//	          },
		//	          "SourceVolume": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "NetworkConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AssignPublicIp": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Privileged": {
		//	      "type": "boolean"
		//	    },
		//	    "ReadonlyRootFilesystem": {
		//	      "type": "boolean"
		//	    },
		//	    "RepositoryCredentials": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CredentialsParameter": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "CredentialsParameter"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "ResourceRequirements": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Type": {
		//	            "type": "string"
		//	          },
		//	          "Value": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "RuntimePlatform": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CpuArchitecture": {
		//	          "type": "string"
		//	        },
		//	        "OperatingSystemFamily": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Secrets": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Name": {
		//	            "type": "string"
		//	          },
		//	          "ValueFrom": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "ValueFrom",
		//	          "Name"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "Ulimits": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "HardLimit": {
		//	            "type": "integer"
		//	          },
		//	          "Name": {
		//	            "type": "string"
		//	          },
		//	          "SoftLimit": {
		//	            "type": "integer"
		//	          }
		//	        },
		//	        "required": [
		//	          "SoftLimit",
		//	          "HardLimit",
		//	          "Name"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "User": {
		//	      "type": "string"
		//	    },
		//	    "Vcpus": {
		//	      "type": "integer"
		//	    },
		//	    "Volumes": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "EfsVolumeConfiguration": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "AuthorizationConfig": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "AccessPointId": {
		//	                    "type": "string"
		//	                  },
		//	                  "Iam": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "FileSystemId": {
		//	                "type": "string"
		//	              },
		//	              "RootDirectory": {
		//	                "type": "string"
		//	              },
		//	              "TransitEncryption": {
		//	                "type": "string"
		//	              },
		//	              "TransitEncryptionPort": {
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "required": [
		//	              "FileSystemId"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Host": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "SourcePath": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Name": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    }
		//	  },
		//	  "required": [
		//	    "Image"
		//	  ],
		//	  "type": "object"
		//	}
		"container_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Command
				"command": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Environment
				"environment": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EphemeralStorage
				"ephemeral_storage": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: SizeInGiB
						"size_in_gi_b": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ExecutionRoleArn
				"execution_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: FargatePlatformConfiguration
				"fargate_platform_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: PlatformVersion
						"platform_version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Image
				"image": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InstanceType
				"instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: JobRoleArn
				"job_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LinuxParameters
				"linux_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Devices
						"devices": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ContainerPath
									"container_path": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: HostPath
									"host_path": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Permissions
									"permissions": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: InitProcessEnabled
						"init_process_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: MaxSwap
						"max_swap": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SharedMemorySize
						"shared_memory_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Swappiness
						"swappiness": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Tmpfs
						"tmpfs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: ContainerPath
									"container_path": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: MountOptions
									"mount_options": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Size
									"size": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LogConfiguration
				"log_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: LogDriver
						"log_driver": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Options
						"options": schema.StringAttribute{ /*START ATTRIBUTE*/
							CustomType: jsontypes.NormalizedType{},
							Computed:   true,
						}, /*END ATTRIBUTE*/
						// Property: SecretOptions
						"secret_options": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Name
									"name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ValueFrom
									"value_from": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Memory
				"memory": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: MountPoints
				"mount_points": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ContainerPath
							"container_path": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ReadOnly
							"read_only": schema.BoolAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SourceVolume
							"source_volume": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: NetworkConfiguration
				"network_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AssignPublicIp
						"assign_public_ip": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Privileged
				"privileged": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ReadonlyRootFilesystem
				"readonly_root_filesystem": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RepositoryCredentials
				"repository_credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CredentialsParameter
						"credentials_parameter": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ResourceRequirements
				"resource_requirements": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Value
							"value": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: RuntimePlatform
				"runtime_platform": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CpuArchitecture
						"cpu_architecture": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: OperatingSystemFamily
						"operating_system_family": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Secrets
				"secrets": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ValueFrom
							"value_from": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Ulimits
				"ulimits": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: HardLimit
							"hard_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: SoftLimit
							"soft_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: User
				"user": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Vcpus
				"vcpus": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Volumes
				"volumes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: EfsVolumeConfiguration
							"efs_volume_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AuthorizationConfig
									"authorization_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AccessPointId
											"access_point_id": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Iam
											"iam": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: FileSystemId
									"file_system_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: RootDirectory
									"root_directory": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: TransitEncryption
									"transit_encryption": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: TransitEncryptionPort
									"transit_encryption_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Host
							"host": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: SourcePath
									"source_path": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: EksProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "PodProperties": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Containers": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Args": {
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "Command": {
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "Env": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Name": {
		//	                      "type": "string"
		//	                    },
		//	                    "Value": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Name"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "Image": {
		//	                "type": "string"
		//	              },
		//	              "ImagePullPolicy": {
		//	                "type": "string"
		//	              },
		//	              "Name": {
		//	                "type": "string"
		//	              },
		//	              "Resources": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Limits": {
		//	                    "type": "object"
		//	                  },
		//	                  "Requests": {
		//	                    "type": "object"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "SecurityContext": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Privileged": {
		//	                    "type": "boolean"
		//	                  },
		//	                  "ReadOnlyRootFilesystem": {
		//	                    "type": "boolean"
		//	                  },
		//	                  "RunAsGroup": {
		//	                    "type": "integer"
		//	                  },
		//	                  "RunAsNonRoot": {
		//	                    "type": "boolean"
		//	                  },
		//	                  "RunAsUser": {
		//	                    "type": "integer"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "VolumeMounts": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "MountPath": {
		//	                      "type": "string"
		//	                    },
		//	                    "Name": {
		//	                      "type": "string"
		//	                    },
		//	                    "ReadOnly": {
		//	                      "type": "boolean"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              }
		//	            },
		//	            "required": [
		//	              "Image"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "DnsPolicy": {
		//	          "type": "string"
		//	        },
		//	        "HostNetwork": {
		//	          "type": "boolean"
		//	        },
		//	        "Metadata": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Labels": {
		//	              "type": "object"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "ServiceAccountName": {
		//	          "type": "string"
		//	        },
		//	        "Volumes": {
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "EmptyDir": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Medium": {
		//	                    "type": "string"
		//	                  },
		//	                  "SizeLimit": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "HostPath": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Path": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Name": {
		//	                "type": "string"
		//	              },
		//	              "Secret": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Optional": {
		//	                    "type": "boolean"
		//	                  },
		//	                  "SecretName": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "SecretName"
		//	                ],
		//	                "type": "object"
		//	              }
		//	            },
		//	            "required": [
		//	              "Name"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"eks_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: PodProperties
				"pod_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Containers
						"containers": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Args
									"args": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Command
									"command": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Env
									"env": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Name
												"name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Value
												"value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Image
									"image": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ImagePullPolicy
									"image_pull_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Name
									"name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Resources
									"resources": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Limits
											"limits": schema.StringAttribute{ /*START ATTRIBUTE*/
												CustomType: jsontypes.NormalizedType{},
												Computed:   true,
											}, /*END ATTRIBUTE*/
											// Property: Requests
											"requests": schema.StringAttribute{ /*START ATTRIBUTE*/
												CustomType: jsontypes.NormalizedType{},
												Computed:   true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: SecurityContext
									"security_context": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Privileged
											"privileged": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: ReadOnlyRootFilesystem
											"read_only_root_filesystem": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: RunAsGroup
											"run_as_group": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: RunAsNonRoot
											"run_as_non_root": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: RunAsUser
											"run_as_user": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: VolumeMounts
									"volume_mounts": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: MountPath
												"mount_path": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Name
												"name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ReadOnly
												"read_only": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: DnsPolicy
						"dns_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HostNetwork
						"host_network": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Metadata
						"metadata": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Labels
								"labels": schema.StringAttribute{ /*START ATTRIBUTE*/
									CustomType: jsontypes.NormalizedType{},
									Computed:   true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ServiceAccountName
						"service_account_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Volumes
						"volumes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: EmptyDir
									"empty_dir": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Medium
											"medium": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: SizeLimit
											"size_limit": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: HostPath
									"host_path": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Path
											"path": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Name
									"name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Secret
									"secret": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Optional
											"optional": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: SecretName
											"secret_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: JobDefinitionName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"job_definition_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: NodeProperties
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "MainNode": {
		//	      "type": "integer"
		//	    },
		//	    "NodeRangeProperties": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Container": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Command": {
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "Environment": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Name": {
		//	                      "type": "string"
		//	                    },
		//	                    "Value": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "EphemeralStorage": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "SizeInGiB": {
		//	                    "type": "integer"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "SizeInGiB"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "ExecutionRoleArn": {
		//	                "type": "string"
		//	              },
		//	              "FargatePlatformConfiguration": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "PlatformVersion": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Image": {
		//	                "type": "string"
		//	              },
		//	              "InstanceType": {
		//	                "type": "string"
		//	              },
		//	              "JobRoleArn": {
		//	                "type": "string"
		//	              },
		//	              "LinuxParameters": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Devices": {
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "ContainerPath": {
		//	                          "type": "string"
		//	                        },
		//	                        "HostPath": {
		//	                          "type": "string"
		//	                        },
		//	                        "Permissions": {
		//	                          "items": {
		//	                            "type": "string"
		//	                          },
		//	                          "type": "array",
		//	                          "uniqueItems": false
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": false
		//	                  },
		//	                  "InitProcessEnabled": {
		//	                    "type": "boolean"
		//	                  },
		//	                  "MaxSwap": {
		//	                    "type": "integer"
		//	                  },
		//	                  "SharedMemorySize": {
		//	                    "type": "integer"
		//	                  },
		//	                  "Swappiness": {
		//	                    "type": "integer"
		//	                  },
		//	                  "Tmpfs": {
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "ContainerPath": {
		//	                          "type": "string"
		//	                        },
		//	                        "MountOptions": {
		//	                          "items": {
		//	                            "type": "string"
		//	                          },
		//	                          "type": "array",
		//	                          "uniqueItems": false
		//	                        },
		//	                        "Size": {
		//	                          "type": "integer"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "Size",
		//	                        "ContainerPath"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": false
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "LogConfiguration": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "LogDriver": {
		//	                    "type": "string"
		//	                  },
		//	                  "Options": {
		//	                    "type": "object"
		//	                  },
		//	                  "SecretOptions": {
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "Name": {
		//	                          "type": "string"
		//	                        },
		//	                        "ValueFrom": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "ValueFrom",
		//	                        "Name"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array",
		//	                    "uniqueItems": false
		//	                  }
		//	                },
		//	                "required": [
		//	                  "LogDriver"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Memory": {
		//	                "type": "integer"
		//	              },
		//	              "MountPoints": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "ContainerPath": {
		//	                      "type": "string"
		//	                    },
		//	                    "ReadOnly": {
		//	                      "type": "boolean"
		//	                    },
		//	                    "SourceVolume": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "NetworkConfiguration": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "AssignPublicIp": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Privileged": {
		//	                "type": "boolean"
		//	              },
		//	              "ReadonlyRootFilesystem": {
		//	                "type": "boolean"
		//	              },
		//	              "RepositoryCredentials": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "CredentialsParameter": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "CredentialsParameter"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "ResourceRequirements": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Type": {
		//	                      "type": "string"
		//	                    },
		//	                    "Value": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "RuntimePlatform": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "CpuArchitecture": {
		//	                    "type": "string"
		//	                  },
		//	                  "OperatingSystemFamily": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Secrets": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Name": {
		//	                      "type": "string"
		//	                    },
		//	                    "ValueFrom": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ValueFrom",
		//	                    "Name"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "Ulimits": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "HardLimit": {
		//	                      "type": "integer"
		//	                    },
		//	                    "Name": {
		//	                      "type": "string"
		//	                    },
		//	                    "SoftLimit": {
		//	                      "type": "integer"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "SoftLimit",
		//	                    "HardLimit",
		//	                    "Name"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "User": {
		//	                "type": "string"
		//	              },
		//	              "Vcpus": {
		//	                "type": "integer"
		//	              },
		//	              "Volumes": {
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "EfsVolumeConfiguration": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "AuthorizationConfig": {
		//	                          "additionalProperties": false,
		//	                          "properties": {
		//	                            "AccessPointId": {
		//	                              "type": "string"
		//	                            },
		//	                            "Iam": {
		//	                              "type": "string"
		//	                            }
		//	                          },
		//	                          "type": "object"
		//	                        },
		//	                        "FileSystemId": {
		//	                          "type": "string"
		//	                        },
		//	                        "RootDirectory": {
		//	                          "type": "string"
		//	                        },
		//	                        "TransitEncryption": {
		//	                          "type": "string"
		//	                        },
		//	                        "TransitEncryptionPort": {
		//	                          "type": "integer"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "FileSystemId"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "Host": {
		//	                      "additionalProperties": false,
		//	                      "properties": {
		//	                        "SourcePath": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "Name": {
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              }
		//	            },
		//	            "required": [
		//	              "Image"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "TargetNodes": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "TargetNodes"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "NumNodes": {
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "MainNode",
		//	    "NodeRangeProperties",
		//	    "NumNodes"
		//	  ],
		//	  "type": "object"
		//	}
		"node_properties": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MainNode
				"main_node": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: NodeRangeProperties
				"node_range_properties": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Container
							"container": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Command
									"command": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Environment
									"environment": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Name
												"name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Value
												"value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: EphemeralStorage
									"ephemeral_storage": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: SizeInGiB
											"size_in_gi_b": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ExecutionRoleArn
									"execution_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: FargatePlatformConfiguration
									"fargate_platform_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: PlatformVersion
											"platform_version": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Image
									"image": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: InstanceType
									"instance_type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: JobRoleArn
									"job_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: LinuxParameters
									"linux_parameters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Devices
											"devices": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: ContainerPath
														"container_path": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: HostPath
														"host_path": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: Permissions
														"permissions": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: InitProcessEnabled
											"init_process_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: MaxSwap
											"max_swap": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: SharedMemorySize
											"shared_memory_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Swappiness
											"swappiness": schema.Int64Attribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Tmpfs
											"tmpfs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: ContainerPath
														"container_path": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: MountOptions
														"mount_options": schema.ListAttribute{ /*START ATTRIBUTE*/
															ElementType: types.StringType,
															Computed:    true,
														}, /*END ATTRIBUTE*/
														// Property: Size
														"size": schema.Int64Attribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: LogConfiguration
									"log_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: LogDriver
											"log_driver": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: Options
											"options": schema.StringAttribute{ /*START ATTRIBUTE*/
												CustomType: jsontypes.NormalizedType{},
												Computed:   true,
											}, /*END ATTRIBUTE*/
											// Property: SecretOptions
											"secret_options": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Name
														"name": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: ValueFrom
														"value_from": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Memory
									"memory": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: MountPoints
									"mount_points": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: ContainerPath
												"container_path": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ReadOnly
												"read_only": schema.BoolAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: SourceVolume
												"source_volume": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: NetworkConfiguration
									"network_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AssignPublicIp
											"assign_public_ip": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Privileged
									"privileged": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ReadonlyRootFilesystem
									"readonly_root_filesystem": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: RepositoryCredentials
									"repository_credentials": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: CredentialsParameter
											"credentials_parameter": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ResourceRequirements
									"resource_requirements": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Type
												"type": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Value
												"value": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: RuntimePlatform
									"runtime_platform": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: CpuArchitecture
											"cpu_architecture": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
											// Property: OperatingSystemFamily
											"operating_system_family": schema.StringAttribute{ /*START ATTRIBUTE*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Secrets
									"secrets": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Name
												"name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: ValueFrom
												"value_from": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Ulimits
									"ulimits": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: HardLimit
												"hard_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Name
												"name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: SoftLimit
												"soft_limit": schema.Int64Attribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: User
									"user": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Vcpus
									"vcpus": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Volumes
									"volumes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: EfsVolumeConfiguration
												"efs_volume_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: AuthorizationConfig
														"authorization_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
															Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																// Property: AccessPointId
																"access_point_id": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Computed: true,
																}, /*END ATTRIBUTE*/
																// Property: Iam
																"iam": schema.StringAttribute{ /*START ATTRIBUTE*/
																	Computed: true,
																}, /*END ATTRIBUTE*/
															}, /*END SCHEMA*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: FileSystemId
														"file_system_id": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: RootDirectory
														"root_directory": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: TransitEncryption
														"transit_encryption": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: TransitEncryptionPort
														"transit_encryption_port": schema.Int64Attribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Host
												"host": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: SourcePath
														"source_path": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
													Computed: true,
												}, /*END ATTRIBUTE*/
												// Property: Name
												"name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: TargetNodes
							"target_nodes": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: NumNodes
				"num_nodes": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Parameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "object"
		//	}
		"parameters": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType: jsontypes.NormalizedType{},
			Computed:   true,
		}, /*END ATTRIBUTE*/
		// Property: PlatformCapabilities
		// CloudFormation resource type schema:
		//
		//	{
		//	  "items": {
		//	    "type": "string"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"platform_capabilities": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PropagateTags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "boolean"
		//	}
		"propagate_tags": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RetryStrategy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Attempts": {
		//	      "type": "integer"
		//	    },
		//	    "EvaluateOnExit": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Action": {
		//	            "type": "string"
		//	          },
		//	          "OnExitCode": {
		//	            "type": "string"
		//	          },
		//	          "OnReason": {
		//	            "type": "string"
		//	          },
		//	          "OnStatusReason": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Action"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"retry_strategy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Attempts
				"attempts": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EvaluateOnExit
				"evaluate_on_exit": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Action
							"action": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: OnExitCode
							"on_exit_code": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: OnReason
							"on_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: OnStatusReason
							"on_status_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: SchedulingPriority
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "integer"
		//	}
		"scheduling_priority": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "object"
		//	}
		"tags": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType: jsontypes.NormalizedType{},
			Computed:   true,
		}, /*END ATTRIBUTE*/
		// Property: Timeout
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AttemptDurationSeconds": {
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"timeout": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AttemptDurationSeconds
				"attempt_duration_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Batch::JobDefinition",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Batch::JobDefinition").WithTerraformTypeName("awscc_batch_job_definition")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"access_point_id":                "AccessPointId",
		"action":                         "Action",
		"args":                           "Args",
		"assign_public_ip":               "AssignPublicIp",
		"attempt_duration_seconds":       "AttemptDurationSeconds",
		"attempts":                       "Attempts",
		"authorization_config":           "AuthorizationConfig",
		"command":                        "Command",
		"container":                      "Container",
		"container_path":                 "ContainerPath",
		"container_properties":           "ContainerProperties",
		"containers":                     "Containers",
		"cpu_architecture":               "CpuArchitecture",
		"credentials_parameter":          "CredentialsParameter",
		"devices":                        "Devices",
		"dns_policy":                     "DnsPolicy",
		"efs_volume_configuration":       "EfsVolumeConfiguration",
		"eks_properties":                 "EksProperties",
		"empty_dir":                      "EmptyDir",
		"env":                            "Env",
		"environment":                    "Environment",
		"ephemeral_storage":              "EphemeralStorage",
		"evaluate_on_exit":               "EvaluateOnExit",
		"execution_role_arn":             "ExecutionRoleArn",
		"fargate_platform_configuration": "FargatePlatformConfiguration",
		"file_system_id":                 "FileSystemId",
		"hard_limit":                     "HardLimit",
		"host":                           "Host",
		"host_network":                   "HostNetwork",
		"host_path":                      "HostPath",
		"iam":                            "Iam",
		"id":                             "Id",
		"image":                          "Image",
		"image_pull_policy":              "ImagePullPolicy",
		"init_process_enabled":           "InitProcessEnabled",
		"instance_type":                  "InstanceType",
		"job_definition_name":            "JobDefinitionName",
		"job_role_arn":                   "JobRoleArn",
		"labels":                         "Labels",
		"limits":                         "Limits",
		"linux_parameters":               "LinuxParameters",
		"log_configuration":              "LogConfiguration",
		"log_driver":                     "LogDriver",
		"main_node":                      "MainNode",
		"max_swap":                       "MaxSwap",
		"medium":                         "Medium",
		"memory":                         "Memory",
		"metadata":                       "Metadata",
		"mount_options":                  "MountOptions",
		"mount_path":                     "MountPath",
		"mount_points":                   "MountPoints",
		"name":                           "Name",
		"network_configuration":          "NetworkConfiguration",
		"node_properties":                "NodeProperties",
		"node_range_properties":          "NodeRangeProperties",
		"num_nodes":                      "NumNodes",
		"on_exit_code":                   "OnExitCode",
		"on_reason":                      "OnReason",
		"on_status_reason":               "OnStatusReason",
		"operating_system_family":        "OperatingSystemFamily",
		"optional":                       "Optional",
		"options":                        "Options",
		"parameters":                     "Parameters",
		"path":                           "Path",
		"permissions":                    "Permissions",
		"platform_capabilities":          "PlatformCapabilities",
		"platform_version":               "PlatformVersion",
		"pod_properties":                 "PodProperties",
		"privileged":                     "Privileged",
		"propagate_tags":                 "PropagateTags",
		"read_only":                      "ReadOnly",
		"read_only_root_filesystem":      "ReadOnlyRootFilesystem",
		"readonly_root_filesystem":       "ReadonlyRootFilesystem",
		"repository_credentials":         "RepositoryCredentials",
		"requests":                       "Requests",
		"resource_requirements":          "ResourceRequirements",
		"resources":                      "Resources",
		"retry_strategy":                 "RetryStrategy",
		"root_directory":                 "RootDirectory",
		"run_as_group":                   "RunAsGroup",
		"run_as_non_root":                "RunAsNonRoot",
		"run_as_user":                    "RunAsUser",
		"runtime_platform":               "RuntimePlatform",
		"scheduling_priority":            "SchedulingPriority",
		"secret":                         "Secret",
		"secret_name":                    "SecretName",
		"secret_options":                 "SecretOptions",
		"secrets":                        "Secrets",
		"security_context":               "SecurityContext",
		"service_account_name":           "ServiceAccountName",
		"shared_memory_size":             "SharedMemorySize",
		"size":                           "Size",
		"size_in_gi_b":                   "SizeInGiB",
		"size_limit":                     "SizeLimit",
		"soft_limit":                     "SoftLimit",
		"source_path":                    "SourcePath",
		"source_volume":                  "SourceVolume",
		"swappiness":                     "Swappiness",
		"tags":                           "Tags",
		"target_nodes":                   "TargetNodes",
		"timeout":                        "Timeout",
		"tmpfs":                          "Tmpfs",
		"transit_encryption":             "TransitEncryption",
		"transit_encryption_port":        "TransitEncryptionPort",
		"type":                           "Type",
		"ulimits":                        "Ulimits",
		"user":                           "User",
		"value":                          "Value",
		"value_from":                     "ValueFrom",
		"vcpus":                          "Vcpus",
		"volume_mounts":                  "VolumeMounts",
		"volumes":                        "Volumes",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
