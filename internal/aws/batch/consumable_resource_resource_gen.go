// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package batch

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/identity"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_batch_consumable_resource", consumableResourceResource)
	registry.AddListResourceFactory("awscc_batch_consumable_resource", generic.NewListResource(consumableResourceResource))
}

// consumableResourceResource returns the Terraform awscc_batch_consumable_resource resource.
// This Terraform resource corresponds to the CloudFormation AWS::Batch::ConsumableResource resource.
func consumableResourceResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AvailableQuantity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Available Quantity of ConsumableResource.",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"available_quantity": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Available Quantity of ConsumableResource.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ConsumableResourceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN of the Consumable Resource.",
		//	  "type": "string"
		//	}
		"consumable_resource_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN of the Consumable Resource.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ConsumableResourceName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of ConsumableResource.",
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"consumable_resource_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of ConsumableResource.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"created_at": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Computed: true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: InUseQuantity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "In-use Quantity of ConsumableResource.",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"in_use_quantity": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "In-use Quantity of ConsumableResource.",
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ResourceType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Type of Consumable Resource.",
		//	  "enum": [
		//	    "REPLENISHABLE",
		//	    "NON_REPLENISHABLE"
		//	  ],
		//	  "type": "string"
		//	}
		"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Type of Consumable Resource.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"REPLENISHABLE",
					"NON_REPLENISHABLE",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A key-value pair to associate with a resource.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A key-value pair to associate with a resource.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Map{ /*START PLAN MODIFIERS*/
				mapplanmodifier.UseStateForUnknown(),
				mapplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TotalQuantity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Total Quantity of ConsumableResource.",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"total_quantity": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Total Quantity of ConsumableResource.",
			Required:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::Batch::ConsumableResource",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Batch::ConsumableResource").WithTerraformTypeName("awscc_batch_consumable_resource")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithPrimaryIdentifier(
		identity.Identifier{
			Name:              "consumable_resource_arn",
			Description:       "ARN of the Consumable Resource",
			RequiredForImport: true,
		})

	opts = opts.WithAttributeNameMap(map[string]string{
		"available_quantity":       "AvailableQuantity",
		"consumable_resource_arn":  "ConsumableResourceArn",
		"consumable_resource_name": "ConsumableResourceName",
		"created_at":               "CreatedAt",
		"in_use_quantity":          "InUseQuantity",
		"resource_type":            "ResourceType",
		"tags":                     "Tags",
		"total_quantity":           "TotalQuantity",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
