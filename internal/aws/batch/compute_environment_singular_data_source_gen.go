// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package batch

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_batch_compute_environment", computeEnvironmentDataSource)
}

// computeEnvironmentDataSource returns the Terraform awscc_batch_compute_environment data source.
// This Terraform data source corresponds to the CloudFormation AWS::Batch::ComputeEnvironment resource.
func computeEnvironmentDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ComputeEnvironmentArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"compute_environment_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ComputeEnvironmentName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"compute_environment_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ComputeResources
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "AllocationStrategy": {
		//	      "type": "string"
		//	    },
		//	    "BidPercentage": {
		//	      "type": "integer"
		//	    },
		//	    "DesiredvCpus": {
		//	      "type": "integer"
		//	    },
		//	    "Ec2Configuration": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "ImageIdOverride": {
		//	            "type": "string"
		//	          },
		//	          "ImageKubernetesVersion": {
		//	            "type": "string"
		//	          },
		//	          "ImageType": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "ImageType"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "Ec2KeyPair": {
		//	      "type": "string"
		//	    },
		//	    "ImageId": {
		//	      "type": "string"
		//	    },
		//	    "InstanceRole": {
		//	      "type": "string"
		//	    },
		//	    "InstanceTypes": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "LaunchTemplate": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "LaunchTemplateId": {
		//	          "type": "string"
		//	        },
		//	        "LaunchTemplateName": {
		//	          "type": "string"
		//	        },
		//	        "Overrides": {
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "LaunchTemplateId": {
		//	                "type": "string"
		//	              },
		//	              "LaunchTemplateName": {
		//	                "type": "string"
		//	              },
		//	              "TargetInstanceTypes": {
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "type": "string"
		//	                },
		//	                "type": "array",
		//	                "uniqueItems": false
		//	              },
		//	              "Version": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array",
		//	          "uniqueItems": false
		//	        },
		//	        "Version": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "MaxvCpus": {
		//	      "type": "integer"
		//	    },
		//	    "MinvCpus": {
		//	      "type": "integer"
		//	    },
		//	    "PlacementGroup": {
		//	      "type": "string"
		//	    },
		//	    "SecurityGroupIds": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "SpotIamFleetRole": {
		//	      "type": "string"
		//	    },
		//	    "Subnets": {
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "type": "string"
		//	      },
		//	      "type": "array",
		//	      "uniqueItems": false
		//	    },
		//	    "Tags": {
		//	      "additionalProperties": false,
		//	      "description": "A key-value pair to associate with a resource.",
		//	      "patternProperties": {
		//	        "": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Type": {
		//	      "type": "string"
		//	    },
		//	    "UpdateToLatestImageVersion": {
		//	      "default": false,
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "required": [
		//	    "Subnets",
		//	    "Type",
		//	    "MaxvCpus"
		//	  ],
		//	  "type": "object"
		//	}
		"compute_resources": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AllocationStrategy
				"allocation_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: BidPercentage
				"bid_percentage": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DesiredvCpus
				"desiredv_cpus": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Ec2Configuration
				"ec_2_configuration": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ImageIdOverride
							"image_id_override": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ImageKubernetesVersion
							"image_kubernetes_version": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: ImageType
							"image_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Ec2KeyPair
				"ec_2_key_pair": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ImageId
				"image_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InstanceRole
				"instance_role": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: InstanceTypes
				"instance_types": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: LaunchTemplate
				"launch_template": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: LaunchTemplateId
						"launch_template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: LaunchTemplateName
						"launch_template_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Overrides
						"overrides": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: LaunchTemplateId
									"launch_template_id": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: LaunchTemplateName
									"launch_template_name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: TargetInstanceTypes
									"target_instance_types": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Version
									"version": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Version
						"version": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: MaxvCpus
				"maxv_cpus": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: MinvCpus
				"minv_cpus": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: PlacementGroup
				"placement_group": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: SecurityGroupIds
				"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: SpotIamFleetRole
				"spot_iam_fleet_role": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Subnets
				"subnets": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Tags
				"tags":              // Pattern: ""
				schema.MapAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "A key-value pair to associate with a resource.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Type
				"type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: UpdateToLatestImageVersion
				"update_to_latest_image_version": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Context
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"context": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: EksConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "EksClusterArn": {
		//	      "default": false,
		//	      "type": "string"
		//	    },
		//	    "KubernetesNamespace": {
		//	      "default": false,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "EksClusterArn",
		//	    "KubernetesNamespace"
		//	  ],
		//	  "type": "object"
		//	}
		"eks_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EksClusterArn
				"eks_cluster_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: KubernetesNamespace
				"kubernetes_namespace": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ReplaceComputeEnvironment
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": true,
		//	  "type": "boolean"
		//	}
		"replace_compute_environment": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ServiceRole
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"service_role": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: State
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A key-value pair to associate with a resource.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A key-value pair to associate with a resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: UnmanagedvCpus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "integer"
		//	}
		"unmanagedv_cpus": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatePolicy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "JobExecutionTimeoutMinutes": {
		//	      "default": 30,
		//	      "type": "integer"
		//	    },
		//	    "TerminateJobsOnUpdate": {
		//	      "default": false,
		//	      "type": "boolean"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"update_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: JobExecutionTimeoutMinutes
				"job_execution_timeout_minutes": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: TerminateJobsOnUpdate
				"terminate_jobs_on_update": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Batch::ComputeEnvironment",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Batch::ComputeEnvironment").WithTerraformTypeName("awscc_batch_compute_environment")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allocation_strategy":            "AllocationStrategy",
		"bid_percentage":                 "BidPercentage",
		"compute_environment_arn":        "ComputeEnvironmentArn",
		"compute_environment_name":       "ComputeEnvironmentName",
		"compute_resources":              "ComputeResources",
		"context":                        "Context",
		"desiredv_cpus":                  "DesiredvCpus",
		"ec_2_configuration":             "Ec2Configuration",
		"ec_2_key_pair":                  "Ec2KeyPair",
		"eks_cluster_arn":                "EksClusterArn",
		"eks_configuration":              "EksConfiguration",
		"image_id":                       "ImageId",
		"image_id_override":              "ImageIdOverride",
		"image_kubernetes_version":       "ImageKubernetesVersion",
		"image_type":                     "ImageType",
		"instance_role":                  "InstanceRole",
		"instance_types":                 "InstanceTypes",
		"job_execution_timeout_minutes":  "JobExecutionTimeoutMinutes",
		"kubernetes_namespace":           "KubernetesNamespace",
		"launch_template":                "LaunchTemplate",
		"launch_template_id":             "LaunchTemplateId",
		"launch_template_name":           "LaunchTemplateName",
		"maxv_cpus":                      "MaxvCpus",
		"minv_cpus":                      "MinvCpus",
		"overrides":                      "Overrides",
		"placement_group":                "PlacementGroup",
		"replace_compute_environment":    "ReplaceComputeEnvironment",
		"security_group_ids":             "SecurityGroupIds",
		"service_role":                   "ServiceRole",
		"spot_iam_fleet_role":            "SpotIamFleetRole",
		"state":                          "State",
		"subnets":                        "Subnets",
		"tags":                           "Tags",
		"target_instance_types":          "TargetInstanceTypes",
		"terminate_jobs_on_update":       "TerminateJobsOnUpdate",
		"type":                           "Type",
		"unmanagedv_cpus":                "UnmanagedvCpus",
		"update_policy":                  "UpdatePolicy",
		"update_to_latest_image_version": "UpdateToLatestImageVersion",
		"version":                        "Version",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
