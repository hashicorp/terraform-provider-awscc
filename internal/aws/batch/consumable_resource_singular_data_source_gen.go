// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package batch

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_batch_consumable_resource", consumableResourceDataSource)
}

// consumableResourceDataSource returns the Terraform awscc_batch_consumable_resource data source.
// This Terraform data source corresponds to the CloudFormation AWS::Batch::ConsumableResource resource.
func consumableResourceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AvailableQuantity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Available Quantity of ConsumableResource.",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"available_quantity": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Available Quantity of ConsumableResource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConsumableResourceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "ARN of the Consumable Resource.",
		//	  "type": "string"
		//	}
		"consumable_resource_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "ARN of the Consumable Resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConsumableResourceName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Name of ConsumableResource.",
		//	  "pattern": "",
		//	  "type": "string"
		//	}
		"consumable_resource_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Name of ConsumableResource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CreatedAt
		// CloudFormation resource type schema:
		//
		//	{
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"created_at": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: InUseQuantity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "In-use Quantity of ConsumableResource.",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"in_use_quantity": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "In-use Quantity of ConsumableResource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Type of Consumable Resource.",
		//	  "enum": [
		//	    "REPLENISHABLE",
		//	    "NON_REPLENISHABLE"
		//	  ],
		//	  "type": "string"
		//	}
		"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Type of Consumable Resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A key-value pair to associate with a resource.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A key-value pair to associate with a resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TotalQuantity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Total Quantity of ConsumableResource.",
		//	  "format": "int64",
		//	  "type": "integer"
		//	}
		"total_quantity": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Total Quantity of ConsumableResource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Batch::ConsumableResource",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Batch::ConsumableResource").WithTerraformTypeName("awscc_batch_consumable_resource")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"available_quantity":       "AvailableQuantity",
		"consumable_resource_arn":  "ConsumableResourceArn",
		"consumable_resource_name": "ConsumableResourceName",
		"created_at":               "CreatedAt",
		"in_use_quantity":          "InUseQuantity",
		"resource_type":            "ResourceType",
		"tags":                     "Tags",
		"total_quantity":           "TotalQuantity",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
