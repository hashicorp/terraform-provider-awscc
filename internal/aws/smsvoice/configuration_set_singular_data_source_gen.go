// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package smsvoice

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_smsvoice_configuration_set", configurationSetDataSource)
}

// configurationSetDataSource returns the Terraform awscc_smsvoice_configuration_set data source.
// This Terraform data source corresponds to the CloudFormation AWS::SMSVOICE::ConfigurationSet resource.
func configurationSetDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ConfigurationSetName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name to use for the configuration set.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "^[A-Za-z0-9_-]+$",
		//	  "type": "string"
		//	}
		"configuration_set_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name to use for the configuration set.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DefaultSenderId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The default sender ID to set for the ConfigurationSet.",
		//	  "pattern": "^[A-Za-z0-9_-]+$",
		//	  "type": "string"
		//	}
		"default_sender_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The default sender ID to set for the ConfigurationSet.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EventDestinations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An event destination is a location where you send message events.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An event destination is a location where you send message events. The event options are Amazon CloudWatch, Amazon Data Firehose, or Amazon SNS. For example, when a message is delivered successfully, you can send information about that event to an event destination, or send notifications to endpoints that are subscribed to an Amazon SNS topic.",
		//	    "oneOf": [
		//	      {
		//	        "required": [
		//	          "CloudWatchLogsDestination"
		//	        ]
		//	      },
		//	      {
		//	        "required": [
		//	          "KinesisFirehoseDestination"
		//	        ]
		//	      },
		//	      {
		//	        "required": [
		//	          "SnsDestination"
		//	        ]
		//	      }
		//	    ],
		//	    "properties": {
		//	      "CloudWatchLogsDestination": {
		//	        "additionalProperties": false,
		//	        "description": "An object that contains IamRoleArn and LogGroupArn associated with an Amazon CloudWatch event destination.",
		//	        "properties": {
		//	          "IamRoleArn": {
		//	            "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.",
		//	            "pattern": "^arn:\\S+$",
		//	            "type": "string"
		//	          },
		//	          "LogGroupArn": {
		//	            "description": "The name of the Amazon CloudWatch log group that you want to record events in.",
		//	            "pattern": "^arn:\\S+$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "IamRoleArn",
		//	          "LogGroupArn"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "Enabled": {
		//	        "description": "When set to true events will be logged. By default this is set to true",
		//	        "type": "boolean"
		//	      },
		//	      "EventDestinationName": {
		//	        "description": "The name that identifies the event destination.",
		//	        "maxLength": 64,
		//	        "minLength": 1,
		//	        "pattern": "^[A-Za-z0-9_-]+$",
		//	        "type": "string"
		//	      },
		//	      "KinesisFirehoseDestination": {
		//	        "additionalProperties": false,
		//	        "description": "An object that contains IamRoleArn and DeliveryStreamArn associated with an Amazon Kinesis Firehose event destination.",
		//	        "properties": {
		//	          "DeliveryStreamArn": {
		//	            "description": "The Amazon Resource Name (ARN) of the delivery stream.",
		//	            "pattern": "^arn:\\S+$",
		//	            "type": "string"
		//	          },
		//	          "IamRoleArn": {
		//	            "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.",
		//	            "pattern": "^arn:\\S+$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "IamRoleArn",
		//	          "DeliveryStreamArn"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "MatchingEventTypes": {
		//	        "description": "An array of event types that determine which events to log. If 'ALL' is used, then AWS End User Messaging SMS and Voice logs every event type.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "SnsDestination": {
		//	        "additionalProperties": false,
		//	        "description": "An object that contains SNS TopicArn event destination.",
		//	        "properties": {
		//	          "TopicArn": {
		//	            "description": "The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish events to.",
		//	            "pattern": "^arn:\\S+$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "TopicArn"
		//	        ],
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "EventDestinationName",
		//	      "Enabled",
		//	      "MatchingEventTypes"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 5,
		//	  "type": "array"
		//	}
		"event_destinations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: CloudWatchLogsDestination
					"cloudwatch_logs_destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: IamRoleArn
							"iam_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: LogGroupArn
							"log_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The name of the Amazon CloudWatch log group that you want to record events in.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "An object that contains IamRoleArn and LogGroupArn associated with an Amazon CloudWatch event destination.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Enabled
					"enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Description: "When set to true events will be logged. By default this is set to true",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: EventDestinationName
					"event_destination_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name that identifies the event destination.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: KinesisFirehoseDestination
					"kinesis_firehose_destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DeliveryStreamArn
							"delivery_stream_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of the delivery stream.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: IamRoleArn
							"iam_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "An object that contains IamRoleArn and DeliveryStreamArn associated with an Amazon Kinesis Firehose event destination.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MatchingEventTypes
					"matching_event_types": schema.SetAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "An array of event types that determine which events to log. If 'ALL' is used, then AWS End User Messaging SMS and Voice logs every event type.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: SnsDestination
					"sns_destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: TopicArn
							"topic_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish events to.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "An object that contains SNS TopicArn event destination.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An event destination is a location where you send message events.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MessageFeedbackEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Set to true to enable message feedback.",
		//	  "type": "boolean"
		//	}
		"message_feedback_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Set to true to enable message feedback.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProtectConfigurationId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique identifier for the protect configuration to be associated to the configuration set.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^[A-Za-z0-9_:/-]+$",
		//	  "type": "string"
		//	}
		"protect_configuration_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique identifier for the protect configuration to be associated to the configuration set.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::SMSVOICE::ConfigurationSet",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::SMSVOICE::ConfigurationSet").WithTerraformTypeName("awscc_smsvoice_configuration_set")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                          "Arn",
		"cloudwatch_logs_destination":  "CloudWatchLogsDestination",
		"configuration_set_name":       "ConfigurationSetName",
		"default_sender_id":            "DefaultSenderId",
		"delivery_stream_arn":          "DeliveryStreamArn",
		"enabled":                      "Enabled",
		"event_destination_name":       "EventDestinationName",
		"event_destinations":           "EventDestinations",
		"iam_role_arn":                 "IamRoleArn",
		"key":                          "Key",
		"kinesis_firehose_destination": "KinesisFirehoseDestination",
		"log_group_arn":                "LogGroupArn",
		"matching_event_types":         "MatchingEventTypes",
		"message_feedback_enabled":     "MessageFeedbackEnabled",
		"protect_configuration_id":     "ProtectConfigurationId",
		"sns_destination":              "SnsDestination",
		"tags":                         "Tags",
		"topic_arn":                    "TopicArn",
		"value":                        "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
