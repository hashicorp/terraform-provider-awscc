// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package lakeformation

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_lakeformation_principal_permissions", principalPermissionsDataSource)
}

// principalPermissionsDataSource returns the Terraform awscc_lakeformation_principal_permissions data source.
// This Terraform data source corresponds to the CloudFormation AWS::LakeFormation::PrincipalPermissions resource.
func principalPermissionsDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Catalog
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier for the GLUDC. By default, the account ID. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.",
		//	  "maxLength": 12,
		//	  "minLength": 12,
		//	  "type": "string"
		//	}
		"catalog": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier for the GLUDC. By default, the account ID. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Permissions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The permissions granted or revoked.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "enum": [
		//	      "ALL",
		//	      "SELECT",
		//	      "ALTER",
		//	      "DROP",
		//	      "DELETE",
		//	      "INSERT",
		//	      "DESCRIBE",
		//	      "CREATE_DATABASE",
		//	      "CREATE_TABLE",
		//	      "DATA_LOCATION_ACCESS",
		//	      "CREATE_LF_TAG",
		//	      "ASSOCIATE",
		//	      "GRANT_WITH_LF_TAG_EXPRESSION"
		//	    ],
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"permissions": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The permissions granted or revoked.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PermissionsWithGrantOption
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates the ability to grant permissions (as a subset of permissions granted).",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "enum": [
		//	      "ALL",
		//	      "SELECT",
		//	      "ALTER",
		//	      "DROP",
		//	      "DELETE",
		//	      "INSERT",
		//	      "DESCRIBE",
		//	      "CREATE_DATABASE",
		//	      "CREATE_TABLE",
		//	      "DATA_LOCATION_ACCESS",
		//	      "CREATE_LF_TAG",
		//	      "ASSOCIATE",
		//	      "GRANT_WITH_LF_TAG_EXPRESSION"
		//	    ],
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"permissions_with_grant_option": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "Indicates the ability to grant permissions (as a subset of permissions granted).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Principal
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The principal to be granted a permission.",
		//	  "properties": {
		//	    "DataLakePrincipalIdentifier": {
		//	      "description": "An identifier for the LFlong principal.",
		//	      "maxLength": 255,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"principal": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DataLakePrincipalIdentifier
				"data_lake_principal_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "An identifier for the LFlong principal.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The principal to be granted a permission.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PrincipalIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"principal_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Resource
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The resource to be granted or revoked permissions.",
		//	  "properties": {
		//	    "Catalog": {
		//	      "additionalProperties": false,
		//	      "description": "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.",
		//	      "type": "object"
		//	    },
		//	    "DataCellsFilter": {
		//	      "additionalProperties": false,
		//	      "description": "A data cell filter.",
		//	      "properties": {
		//	        "DatabaseName": {
		//	          "description": "A database in the GLUDC.",
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Name": {
		//	          "description": "The name given by the user to the data filter cell.",
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "TableCatalogId": {
		//	          "description": "The ID of the catalog to which the table belongs.",
		//	          "maxLength": 12,
		//	          "minLength": 12,
		//	          "type": "string"
		//	        },
		//	        "TableName": {
		//	          "description": "The name of the table.",
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "TableCatalogId",
		//	        "DatabaseName",
		//	        "TableName",
		//	        "Name"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "DataLocation": {
		//	      "additionalProperties": false,
		//	      "description": "The location of an Amazon S3 path where permissions are granted or revoked.",
		//	      "properties": {
		//	        "CatalogId": {
		//	          "description": "The identifier for the GLUDC where the location is registered with LFlong.",
		//	          "maxLength": 12,
		//	          "minLength": 12,
		//	          "type": "string"
		//	        },
		//	        "ResourceArn": {
		//	          "description": "The Amazon Resource Name (ARN) that uniquely identifies the data location resource.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "CatalogId",
		//	        "ResourceArn"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Database": {
		//	      "additionalProperties": false,
		//	      "description": "The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal.",
		//	      "properties": {
		//	        "CatalogId": {
		//	          "description": "The identifier for the Data Catalog. By default, it is the account ID of the caller.",
		//	          "maxLength": 12,
		//	          "minLength": 12,
		//	          "type": "string"
		//	        },
		//	        "Name": {
		//	          "description": "The name of the database resource. Unique to the Data Catalog.",
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "CatalogId",
		//	        "Name"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "LFTag": {
		//	      "additionalProperties": false,
		//	      "description": "The LF-tag key and values attached to a resource.",
		//	      "properties": {
		//	        "CatalogId": {
		//	          "description": "The identifier for the GLUDC where the location is registered with GLUDC.",
		//	          "maxLength": 12,
		//	          "minLength": 12,
		//	          "type": "string"
		//	        },
		//	        "TagKey": {
		//	          "description": "The key-name for the LF-tag.",
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "TagValues": {
		//	          "description": "A list of possible values for the corresponding ``TagKey`` of an LF-tag key-value pair.",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "maxLength": 256,
		//	            "minLength": 0,
		//	            "type": "string"
		//	          },
		//	          "maxItems": 50,
		//	          "minItems": 1,
		//	          "type": "array"
		//	        }
		//	      },
		//	      "required": [
		//	        "CatalogId",
		//	        "TagKey",
		//	        "TagValues"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "LFTagPolicy": {
		//	      "additionalProperties": false,
		//	      "description": "A list of LF-tag conditions that define a resource's LF-tag policy.",
		//	      "properties": {
		//	        "CatalogId": {
		//	          "description": "The identifier for the GLUDC. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.",
		//	          "maxLength": 12,
		//	          "minLength": 12,
		//	          "type": "string"
		//	        },
		//	        "Expression": {
		//	          "description": "A list of LF-tag conditions that apply to the resource's LF-tag policy.",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "The LF-tag key and values attached to a resource.",
		//	            "properties": {
		//	              "TagKey": {
		//	                "description": "The key-name for the LF-tag.",
		//	                "maxLength": 128,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "TagValues": {
		//	                "description": "A list of possible values of the corresponding ``TagKey`` of an LF-tag key-value pair.",
		//	                "insertionOrder": false,
		//	                "items": {
		//	                  "maxLength": 256,
		//	                  "minLength": 0,
		//	                  "type": "string"
		//	                },
		//	                "maxItems": 50,
		//	                "minItems": 1,
		//	                "type": "array"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "maxItems": 5,
		//	          "minItems": 1,
		//	          "type": "array"
		//	        },
		//	        "ResourceType": {
		//	          "description": "The resource type for which the LF-tag policy applies.",
		//	          "enum": [
		//	            "DATABASE",
		//	            "TABLE"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "CatalogId",
		//	        "ResourceType",
		//	        "Expression"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Table": {
		//	      "additionalProperties": false,
		//	      "description": "The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.",
		//	      "properties": {
		//	        "CatalogId": {
		//	          "description": "The identifier for the Data Catalog. By default, it is the account ID of the caller.",
		//	          "maxLength": 12,
		//	          "minLength": 12,
		//	          "type": "string"
		//	        },
		//	        "DatabaseName": {
		//	          "description": "The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.",
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Name": {
		//	          "description": "The name of the table.",
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "TableWildcard": {
		//	          "additionalProperties": false,
		//	          "description": "A wildcard object representing every table under a database.\n At least one of ``TableResource$Name`` or ``TableResource$TableWildcard`` is required.",
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "CatalogId",
		//	        "DatabaseName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "TableWithColumns": {
		//	      "additionalProperties": false,
		//	      "description": "The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.",
		//	      "properties": {
		//	        "CatalogId": {
		//	          "description": "The identifier for the GLUDC where the location is registered with LFlong.",
		//	          "maxLength": 12,
		//	          "minLength": 12,
		//	          "type": "string"
		//	        },
		//	        "ColumnNames": {
		//	          "description": "The list of column names for the table. At least one of ``ColumnNames`` or ``ColumnWildcard`` is required.",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "maxLength": 255,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "ColumnWildcard": {
		//	          "additionalProperties": false,
		//	          "description": "A wildcard specified by a ``ColumnWildcard`` object. At least one of ``ColumnNames`` or ``ColumnWildcard`` is required.",
		//	          "properties": {
		//	            "ExcludedColumnNames": {
		//	              "description": "Excludes column names. Any column with this name will be excluded.",
		//	              "insertionOrder": false,
		//	              "items": {
		//	                "maxLength": 255,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "type": "array"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "DatabaseName": {
		//	          "description": "The name of the database for the table with columns resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.",
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "Name": {
		//	          "description": "The name of the table resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.",
		//	          "maxLength": 255,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "CatalogId",
		//	        "DatabaseName",
		//	        "Name"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"resource": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Catalog
				"catalog": schema.StringAttribute{ /*START ATTRIBUTE*/
					CustomType:  jsontypes.NormalizedType{},
					Description: "The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: DataCellsFilter
				"data_cells_filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "A database in the GLUDC.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Name
						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name given by the user to the data filter cell.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TableCatalogId
						"table_catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The ID of the catalog to which the table belongs.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TableName
						"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the table.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A data cell filter.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: DataLocation
				"data_location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CatalogId
						"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The identifier for the GLUDC where the location is registered with LFlong.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ResourceArn
						"resource_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The Amazon Resource Name (ARN) that uniquely identifies the data location resource.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The location of an Amazon S3 path where permissions are granted or revoked.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Database
				"database": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CatalogId
						"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The identifier for the Data Catalog. By default, it is the account ID of the caller.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Name
						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the database resource. Unique to the Data Catalog.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: LFTag
				"lf_tag": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CatalogId
						"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The identifier for the GLUDC where the location is registered with GLUDC.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TagKey
						"tag_key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The key-name for the LF-tag.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TagValues
						"tag_values": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "A list of possible values for the corresponding ``TagKey`` of an LF-tag key-value pair.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The LF-tag key and values attached to a resource.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: LFTagPolicy
				"lf_tag_policy": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CatalogId
						"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The identifier for the GLUDC. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Expression
						"expression": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: TagKey
									"tag_key": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The key-name for the LF-tag.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: TagValues
									"tag_values": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Description: "A list of possible values of the corresponding ``TagKey`` of an LF-tag key-value pair.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Description: "A list of LF-tag conditions that apply to the resource's LF-tag policy.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ResourceType
						"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The resource type for which the LF-tag policy applies.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "A list of LF-tag conditions that define a resource's LF-tag policy.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Table
				"table": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CatalogId
						"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The identifier for the Data Catalog. By default, it is the account ID of the caller.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Name
						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the table.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TableWildcard
						"table_wildcard": schema.StringAttribute{ /*START ATTRIBUTE*/
							CustomType:  jsontypes.NormalizedType{},
							Description: "A wildcard object representing every table under a database.\n At least one of ``TableResource$Name`` or ``TableResource$TableWildcard`` is required.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TableWithColumns
				"table_with_columns": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CatalogId
						"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The identifier for the GLUDC where the location is registered with LFlong.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ColumnNames
						"column_names": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "The list of column names for the table. At least one of ``ColumnNames`` or ``ColumnWildcard`` is required.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ColumnWildcard
						"column_wildcard": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ExcludedColumnNames
								"excluded_column_names": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Description: "Excludes column names. Any column with this name will be excluded.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "A wildcard specified by a ``ColumnWildcard`` object. At least one of ``ColumnNames`` or ``ColumnWildcard`` is required.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the database for the table with columns resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Name
						"name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The name of the table resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The resource to be granted or revoked permissions.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"resource_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::LakeFormation::PrincipalPermissions",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::LakeFormation::PrincipalPermissions").WithTerraformTypeName("awscc_lakeformation_principal_permissions")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"catalog":                        "Catalog",
		"catalog_id":                     "CatalogId",
		"column_names":                   "ColumnNames",
		"column_wildcard":                "ColumnWildcard",
		"data_cells_filter":              "DataCellsFilter",
		"data_lake_principal_identifier": "DataLakePrincipalIdentifier",
		"data_location":                  "DataLocation",
		"database":                       "Database",
		"database_name":                  "DatabaseName",
		"excluded_column_names":          "ExcludedColumnNames",
		"expression":                     "Expression",
		"lf_tag":                         "LFTag",
		"lf_tag_policy":                  "LFTagPolicy",
		"name":                           "Name",
		"permissions":                    "Permissions",
		"permissions_with_grant_option":  "PermissionsWithGrantOption",
		"principal":                      "Principal",
		"principal_identifier":           "PrincipalIdentifier",
		"resource":                       "Resource",
		"resource_arn":                   "ResourceArn",
		"resource_identifier":            "ResourceIdentifier",
		"resource_type":                  "ResourceType",
		"table":                          "Table",
		"table_catalog_id":               "TableCatalogId",
		"table_name":                     "TableName",
		"table_wildcard":                 "TableWildcard",
		"table_with_columns":             "TableWithColumns",
		"tag_key":                        "TagKey",
		"tag_values":                     "TagValues",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
