// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package databrew

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_databrew_dataset", datasetDataSource)
}

// datasetDataSource returns the Terraform awscc_databrew_dataset data source.
// This Terraform data source corresponds to the CloudFormation AWS::DataBrew::Dataset resource.
func datasetDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Format
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Dataset format",
		//	  "enum": [
		//	    "CSV",
		//	    "JSON",
		//	    "PARQUET",
		//	    "EXCEL",
		//	    "ORC"
		//	  ],
		//	  "type": "string"
		//	}
		"format": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Dataset format",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FormatOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Format options for dataset",
		//	  "properties": {
		//	    "Csv": {
		//	      "additionalProperties": false,
		//	      "description": "Csv options",
		//	      "properties": {
		//	        "Delimiter": {
		//	          "maxLength": 1,
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "HeaderRow": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Excel": {
		//	      "additionalProperties": false,
		//	      "oneOf": [
		//	        {
		//	          "required": [
		//	            "SheetNames"
		//	          ]
		//	        },
		//	        {
		//	          "required": [
		//	            "SheetIndexes"
		//	          ]
		//	        }
		//	      ],
		//	      "properties": {
		//	        "HeaderRow": {
		//	          "type": "boolean"
		//	        },
		//	        "SheetIndexes": {
		//	          "insertionOrder": true,
		//	          "items": {
		//	            "type": "integer"
		//	          },
		//	          "maxItems": 1,
		//	          "minItems": 1,
		//	          "type": "array"
		//	        },
		//	        "SheetNames": {
		//	          "insertionOrder": true,
		//	          "items": {
		//	            "type": "string"
		//	          },
		//	          "maxItems": 1,
		//	          "minItems": 1,
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "Json": {
		//	      "additionalProperties": false,
		//	      "description": "Json options",
		//	      "properties": {
		//	        "MultiLine": {
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"format_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Csv
				"csv": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Delimiter
						"delimiter": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: HeaderRow
						"header_row": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Csv options",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Excel
				"excel": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: HeaderRow
						"header_row": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SheetIndexes
						"sheet_indexes": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.Int64Type,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SheetNames
						"sheet_names": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Json
				"json": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MultiLine
						"multi_line": schema.BoolAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Json options",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Format options for dataset",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Input
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Input",
		//	  "properties": {
		//	    "DataCatalogInputDefinition": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "CatalogId": {
		//	          "description": "Catalog id",
		//	          "type": "string"
		//	        },
		//	        "DatabaseName": {
		//	          "description": "Database name",
		//	          "type": "string"
		//	        },
		//	        "TableName": {
		//	          "description": "Table name",
		//	          "type": "string"
		//	        },
		//	        "TempDirectory": {
		//	          "additionalProperties": false,
		//	          "description": "Input location",
		//	          "properties": {
		//	            "Bucket": {
		//	              "type": "string"
		//	            },
		//	            "BucketOwner": {
		//	              "description": "Bucket owner",
		//	              "maxLength": 12,
		//	              "minLength": 12,
		//	              "type": "string"
		//	            },
		//	            "Key": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Bucket"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "DatabaseInputDefinition": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "DatabaseTableName": {
		//	          "description": "Database table name",
		//	          "type": "string"
		//	        },
		//	        "GlueConnectionName": {
		//	          "description": "Glue connection name",
		//	          "type": "string"
		//	        },
		//	        "QueryString": {
		//	          "description": "Custom SQL to run against the provided AWS Glue connection. This SQL will be used as the input for DataBrew projects and jobs.",
		//	          "type": "string"
		//	        },
		//	        "TempDirectory": {
		//	          "additionalProperties": false,
		//	          "description": "Input location",
		//	          "properties": {
		//	            "Bucket": {
		//	              "type": "string"
		//	            },
		//	            "BucketOwner": {
		//	              "description": "Bucket owner",
		//	              "maxLength": 12,
		//	              "minLength": 12,
		//	              "type": "string"
		//	            },
		//	            "Key": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "Bucket"
		//	          ],
		//	          "type": "object"
		//	        }
		//	      },
		//	      "required": [
		//	        "GlueConnectionName"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Metadata": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "SourceArn": {
		//	          "description": "Arn of the source of the dataset. For e.g.: AppFlow Flow ARN.",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "S3InputDefinition": {
		//	      "additionalProperties": false,
		//	      "description": "Input location",
		//	      "properties": {
		//	        "Bucket": {
		//	          "type": "string"
		//	        },
		//	        "BucketOwner": {
		//	          "description": "Bucket owner",
		//	          "maxLength": 12,
		//	          "minLength": 12,
		//	          "type": "string"
		//	        },
		//	        "Key": {
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "Bucket"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"input": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: DataCatalogInputDefinition
				"data_catalog_input_definition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CatalogId
						"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Catalog id",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: DatabaseName
						"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Database name",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TableName
						"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Table name",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TempDirectory
						"temp_directory": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Bucket
								"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: BucketOwner
								"bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Bucket owner",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Input location",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DatabaseInputDefinition
				"database_input_definition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: DatabaseTableName
						"database_table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Database table name",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: GlueConnectionName
						"glue_connection_name": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Glue connection name",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: QueryString
						"query_string": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Custom SQL to run against the provided AWS Glue connection. This SQL will be used as the input for DataBrew projects and jobs.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: TempDirectory
						"temp_directory": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Bucket
								"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: BucketOwner
								"bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Bucket owner",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Key
								"key": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Input location",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Metadata
				"metadata": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: SourceArn
						"source_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Arn of the source of the dataset. For e.g.: AppFlow Flow ARN.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: S3InputDefinition
				"s3_input_definition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Bucket
						"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: BucketOwner
						"bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Bucket owner",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Key
						"key": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Input location",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Input",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Dataset name",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Dataset name",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PathOptions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "PathOptions",
		//	  "properties": {
		//	    "FilesLimit": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "MaxFiles": {
		//	          "description": "Maximum number of files",
		//	          "type": "integer"
		//	        },
		//	        "Order": {
		//	          "description": "Order",
		//	          "enum": [
		//	            "ASCENDING",
		//	            "DESCENDING"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "OrderedBy": {
		//	          "description": "Ordered by",
		//	          "enum": [
		//	            "LAST_MODIFIED_DATE"
		//	          ],
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "MaxFiles"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "LastModifiedDateCondition": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Expression": {
		//	          "description": "Filtering expression for a parameter",
		//	          "maxLength": 1024,
		//	          "minLength": 4,
		//	          "pattern": "^[\u003e\u003c0-9A-Za-z_.,:)(!= ]+$",
		//	          "type": "string"
		//	        },
		//	        "ValuesMap": {
		//	          "insertionOrder": true,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "A key-value pair to associate expression variable names with their values",
		//	            "properties": {
		//	              "Value": {
		//	                "maxLength": 1024,
		//	                "minLength": 0,
		//	                "type": "string"
		//	              },
		//	              "ValueReference": {
		//	                "description": "Variable name",
		//	                "maxLength": 128,
		//	                "minLength": 2,
		//	                "pattern": "^:[A-Za-z0-9_]+$",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "ValueReference",
		//	              "Value"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "required": [
		//	        "Expression",
		//	        "ValuesMap"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Parameters": {
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "A key-value pair to associate dataset parameter name with its definition.",
		//	        "properties": {
		//	          "DatasetParameter": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "CreateColumn": {
		//	                "description": "Add the value of this parameter as a column in a dataset.",
		//	                "type": "boolean"
		//	              },
		//	              "DatetimeOptions": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Format": {
		//	                    "description": "Date/time format of a date parameter",
		//	                    "maxLength": 100,
		//	                    "minLength": 2,
		//	                    "type": "string"
		//	                  },
		//	                  "LocaleCode": {
		//	                    "description": "Locale code for a date parameter",
		//	                    "maxLength": 100,
		//	                    "minLength": 2,
		//	                    "pattern": "^[A-Za-z0-9_\\.#@\\-]+$",
		//	                    "type": "string"
		//	                  },
		//	                  "TimezoneOffset": {
		//	                    "description": "Timezone offset",
		//	                    "maxLength": 6,
		//	                    "minLength": 1,
		//	                    "pattern": "^(Z|[-+](\\d|\\d{2}|\\d{2}:?\\d{2}))$",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Format"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Filter": {
		//	                "additionalProperties": false,
		//	                "properties": {
		//	                  "Expression": {
		//	                    "description": "Filtering expression for a parameter",
		//	                    "maxLength": 1024,
		//	                    "minLength": 4,
		//	                    "pattern": "^[\u003e\u003c0-9A-Za-z_.,:)(!= ]+$",
		//	                    "type": "string"
		//	                  },
		//	                  "ValuesMap": {
		//	                    "insertionOrder": true,
		//	                    "items": {
		//	                      "additionalProperties": false,
		//	                      "description": "A key-value pair to associate expression variable names with their values",
		//	                      "properties": {
		//	                        "Value": {
		//	                          "maxLength": 1024,
		//	                          "minLength": 0,
		//	                          "type": "string"
		//	                        },
		//	                        "ValueReference": {
		//	                          "description": "Variable name",
		//	                          "maxLength": 128,
		//	                          "minLength": 2,
		//	                          "pattern": "^:[A-Za-z0-9_]+$",
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "required": [
		//	                        "ValueReference",
		//	                        "Value"
		//	                      ],
		//	                      "type": "object"
		//	                    },
		//	                    "type": "array"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "Expression",
		//	                  "ValuesMap"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Name": {
		//	                "description": "Parameter name",
		//	                "maxLength": 255,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              },
		//	              "Type": {
		//	                "description": "Parameter type",
		//	                "enum": [
		//	                  "String",
		//	                  "Number",
		//	                  "Datetime"
		//	                ],
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Name",
		//	              "Type"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "PathParameterName": {
		//	            "description": "Parameter name",
		//	            "maxLength": 255,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "PathParameterName",
		//	          "DatasetParameter"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"path_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: FilesLimit
				"files_limit": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: MaxFiles
						"max_files": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "Maximum number of files",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Order
						"order": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Order",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: OrderedBy
						"ordered_by": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Ordered by",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: LastModifiedDateCondition
				"last_modified_date_condition": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Expression
						"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "Filtering expression for a parameter",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: ValuesMap
						"values_map": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Value
									"value": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: ValueReference
									"value_reference": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Variable name",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Parameters
				"parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: DatasetParameter
							"dataset_parameter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: CreateColumn
									"create_column": schema.BoolAttribute{ /*START ATTRIBUTE*/
										Description: "Add the value of this parameter as a column in a dataset.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: DatetimeOptions
									"datetime_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Format
											"format": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Date/time format of a date parameter",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: LocaleCode
											"locale_code": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Locale code for a date parameter",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: TimezoneOffset
											"timezone_offset": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Timezone offset",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Filter
									"filter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: Expression
											"expression": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Filtering expression for a parameter",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: ValuesMap
											"values_map": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
												NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
													Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
														// Property: Value
														"value": schema.StringAttribute{ /*START ATTRIBUTE*/
															Computed: true,
														}, /*END ATTRIBUTE*/
														// Property: ValueReference
														"value_reference": schema.StringAttribute{ /*START ATTRIBUTE*/
															Description: "Variable name",
															Computed:    true,
														}, /*END ATTRIBUTE*/
													}, /*END SCHEMA*/
												}, /*END NESTED OBJECT*/
												Computed: true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Name
									"name": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Parameter name",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Type
									"type": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "Parameter type",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: PathParameterName
							"path_parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Parameter name",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "PathOptions",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Source
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Source type of the dataset",
		//	  "enum": [
		//	    "S3",
		//	    "DATA-CATALOG",
		//	    "DATABASE"
		//	  ],
		//	  "type": "string"
		//	}
		"source": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Source type of the dataset",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::DataBrew::Dataset",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataBrew::Dataset").WithTerraformTypeName("awscc_databrew_dataset")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"bucket":                        "Bucket",
		"bucket_owner":                  "BucketOwner",
		"catalog_id":                    "CatalogId",
		"create_column":                 "CreateColumn",
		"csv":                           "Csv",
		"data_catalog_input_definition": "DataCatalogInputDefinition",
		"database_input_definition":     "DatabaseInputDefinition",
		"database_name":                 "DatabaseName",
		"database_table_name":           "DatabaseTableName",
		"dataset_parameter":             "DatasetParameter",
		"datetime_options":              "DatetimeOptions",
		"delimiter":                     "Delimiter",
		"excel":                         "Excel",
		"expression":                    "Expression",
		"files_limit":                   "FilesLimit",
		"filter":                        "Filter",
		"format":                        "Format",
		"format_options":                "FormatOptions",
		"glue_connection_name":          "GlueConnectionName",
		"header_row":                    "HeaderRow",
		"input":                         "Input",
		"json":                          "Json",
		"key":                           "Key",
		"last_modified_date_condition":  "LastModifiedDateCondition",
		"locale_code":                   "LocaleCode",
		"max_files":                     "MaxFiles",
		"metadata":                      "Metadata",
		"multi_line":                    "MultiLine",
		"name":                          "Name",
		"order":                         "Order",
		"ordered_by":                    "OrderedBy",
		"parameters":                    "Parameters",
		"path_options":                  "PathOptions",
		"path_parameter_name":           "PathParameterName",
		"query_string":                  "QueryString",
		"s3_input_definition":           "S3InputDefinition",
		"sheet_indexes":                 "SheetIndexes",
		"sheet_names":                   "SheetNames",
		"source":                        "Source",
		"source_arn":                    "SourceArn",
		"table_name":                    "TableName",
		"tags":                          "Tags",
		"temp_directory":                "TempDirectory",
		"timezone_offset":               "TimezoneOffset",
		"type":                          "Type",
		"value":                         "Value",
		"value_reference":               "ValueReference",
		"values_map":                    "ValuesMap",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
