// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package databrew

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_databrew_job", jobDataSource)
}

// jobDataSource returns the Terraform awscc_databrew_job data source.
// This Terraform data source corresponds to the CloudFormation AWS::DataBrew::Job resource.
func jobDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DataCatalogOutputs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "CatalogId": {
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "DatabaseName": {
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "DatabaseOptions": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "TableName": {
		//	            "maxLength": 255,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "TempDirectory": {
		//	            "additionalProperties": false,
		//	            "description": "S3 Output location",
		//	            "properties": {
		//	              "Bucket": {
		//	                "type": "string"
		//	              },
		//	              "BucketOwner": {
		//	                "maxLength": 12,
		//	                "minLength": 12,
		//	                "type": "string"
		//	              },
		//	              "Key": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Bucket"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "TableName"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "Overwrite": {
		//	        "type": "boolean"
		//	      },
		//	      "S3Options": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Location": {
		//	            "additionalProperties": false,
		//	            "description": "S3 Output location",
		//	            "properties": {
		//	              "Bucket": {
		//	                "type": "string"
		//	              },
		//	              "BucketOwner": {
		//	                "maxLength": 12,
		//	                "minLength": 12,
		//	                "type": "string"
		//	              },
		//	              "Key": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Bucket"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "Location"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "TableName": {
		//	        "maxLength": 255,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "DatabaseName",
		//	      "TableName"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"data_catalog_outputs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: CatalogId
					"catalog_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: DatabaseName
					"database_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: DatabaseOptions
					"database_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: TableName
							"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: TempDirectory
							"temp_directory": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Bucket
									"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: BucketOwner
									"bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Key
									"key": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "S3 Output location",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Overwrite
					"overwrite": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: S3Options
					"s3_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Location
							"location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Bucket
									"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: BucketOwner
									"bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Key
									"key": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "S3 Output location",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: TableName
					"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DatabaseOutputs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "DatabaseOptions": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "TableName": {
		//	            "maxLength": 255,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "TempDirectory": {
		//	            "additionalProperties": false,
		//	            "description": "S3 Output location",
		//	            "properties": {
		//	              "Bucket": {
		//	                "type": "string"
		//	              },
		//	              "BucketOwner": {
		//	                "maxLength": 12,
		//	                "minLength": 12,
		//	                "type": "string"
		//	              },
		//	              "Key": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Bucket"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "TableName"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "DatabaseOutputMode": {
		//	        "description": "Database table name",
		//	        "enum": [
		//	          "NEW_TABLE"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "GlueConnectionName": {
		//	        "description": "Glue connection name",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "GlueConnectionName",
		//	      "DatabaseOptions"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"database_outputs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: DatabaseOptions
					"database_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: TableName
							"table_name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: TempDirectory
							"temp_directory": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Bucket
									"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: BucketOwner
									"bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
									// Property: Key
									"key": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "S3 Output location",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: DatabaseOutputMode
					"database_output_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Database table name",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: GlueConnectionName
					"glue_connection_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Glue connection name",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: DatasetName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Dataset name",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"dataset_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Dataset name",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EncryptionKeyArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Encryption Key Arn",
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "type": "string"
		//	}
		"encryption_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Encryption Key Arn",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EncryptionMode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Encryption mode",
		//	  "enum": [
		//	    "SSE-KMS",
		//	    "SSE-S3"
		//	  ],
		//	  "type": "string"
		//	}
		"encryption_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Encryption mode",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: JobSample
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Job Sample",
		//	  "properties": {
		//	    "Mode": {
		//	      "description": "Sample configuration mode for profile jobs.",
		//	      "enum": [
		//	        "FULL_DATASET",
		//	        "CUSTOM_ROWS"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Size": {
		//	      "description": "Sample configuration size for profile jobs.",
		//	      "format": "int64",
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"job_sample": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Mode
				"mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Sample configuration mode for profile jobs.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Size
				"size": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "Sample configuration size for profile jobs.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Job Sample",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LogSubscription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Log subscription",
		//	  "enum": [
		//	    "ENABLE",
		//	    "DISABLE"
		//	  ],
		//	  "type": "string"
		//	}
		"log_subscription": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Log subscription",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaxCapacity
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Max capacity",
		//	  "type": "integer"
		//	}
		"max_capacity": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Max capacity",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaxRetries
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Max retries",
		//	  "type": "integer"
		//	}
		"max_retries": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Max retries",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Job name",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Job name",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OutputLocation
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Output location",
		//	  "properties": {
		//	    "Bucket": {
		//	      "type": "string"
		//	    },
		//	    "BucketOwner": {
		//	      "maxLength": 12,
		//	      "minLength": 12,
		//	      "type": "string"
		//	    },
		//	    "Key": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Bucket"
		//	  ],
		//	  "type": "object"
		//	}
		"output_location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Bucket
				"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: BucketOwner
				"bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Key
				"key": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Output location",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Outputs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "CompressionFormat": {
		//	        "enum": [
		//	          "GZIP",
		//	          "LZ4",
		//	          "SNAPPY",
		//	          "BZIP2",
		//	          "DEFLATE",
		//	          "LZO",
		//	          "BROTLI",
		//	          "ZSTD",
		//	          "ZLIB"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "Format": {
		//	        "enum": [
		//	          "CSV",
		//	          "JSON",
		//	          "PARQUET",
		//	          "GLUEPARQUET",
		//	          "AVRO",
		//	          "ORC",
		//	          "XML",
		//	          "TABLEAUHYPER"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "FormatOptions": {
		//	        "additionalProperties": false,
		//	        "description": "Format options for job Output",
		//	        "properties": {
		//	          "Csv": {
		//	            "additionalProperties": false,
		//	            "description": "Output Csv options",
		//	            "properties": {
		//	              "Delimiter": {
		//	                "maxLength": 1,
		//	                "minLength": 1,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Location": {
		//	        "additionalProperties": false,
		//	        "description": "S3 Output location",
		//	        "properties": {
		//	          "Bucket": {
		//	            "type": "string"
		//	          },
		//	          "BucketOwner": {
		//	            "maxLength": 12,
		//	            "minLength": 12,
		//	            "type": "string"
		//	          },
		//	          "Key": {
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Bucket"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "MaxOutputFiles": {
		//	        "maximum": 999,
		//	        "minimum": 1,
		//	        "type": "integer"
		//	      },
		//	      "Overwrite": {
		//	        "type": "boolean"
		//	      },
		//	      "PartitionColumns": {
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "type": "string"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      }
		//	    },
		//	    "required": [
		//	      "Location"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"outputs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: CompressionFormat
					"compression_format": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Format
					"format": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: FormatOptions
					"format_options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Csv
							"csv": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Delimiter
									"delimiter": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Output Csv options",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Format options for job Output",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Location
					"location": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Bucket
							"bucket": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: BucketOwner
							"bucket_owner": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Key
							"key": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "S3 Output location",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: MaxOutputFiles
					"max_output_files": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Overwrite
					"overwrite": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: PartitionColumns
					"partition_columns": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: ProfileConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Profile Job configuration",
		//	  "properties": {
		//	    "ColumnStatisticsConfigurations": {
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Selectors": {
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "properties": {
		//	                "Name": {
		//	                  "maxLength": 255,
		//	                  "minLength": 1,
		//	                  "type": "string"
		//	                },
		//	                "Regex": {
		//	                  "maxLength": 255,
		//	                  "minLength": 1,
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "minItems": 1,
		//	            "type": "array"
		//	          },
		//	          "Statistics": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "IncludedStatistics": {
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "maxLength": 128,
		//	                  "minLength": 1,
		//	                  "pattern": "^[A-Z\\_]+$",
		//	                  "type": "string"
		//	                },
		//	                "minItems": 1,
		//	                "type": "array"
		//	              },
		//	              "Overrides": {
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "properties": {
		//	                    "Parameters": {
		//	                      "additionalProperties": false,
		//	                      "patternProperties": {
		//	                        "": {
		//	                          "type": "string"
		//	                        }
		//	                      },
		//	                      "type": "object"
		//	                    },
		//	                    "Statistic": {
		//	                      "maxLength": 128,
		//	                      "minLength": 1,
		//	                      "pattern": "^[A-Z\\_]+$",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "Statistic",
		//	                    "Parameters"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "minItems": 1,
		//	                "type": "array"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "Statistics"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "minItems": 1,
		//	      "type": "array"
		//	    },
		//	    "DatasetStatisticsConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IncludedStatistics": {
		//	          "insertionOrder": true,
		//	          "items": {
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "pattern": "^[A-Z\\_]+$",
		//	            "type": "string"
		//	          },
		//	          "minItems": 1,
		//	          "type": "array"
		//	        },
		//	        "Overrides": {
		//	          "insertionOrder": true,
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Parameters": {
		//	                "additionalProperties": false,
		//	                "patternProperties": {
		//	                  "": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Statistic": {
		//	                "maxLength": 128,
		//	                "minLength": 1,
		//	                "pattern": "^[A-Z\\_]+$",
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "Statistic",
		//	              "Parameters"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "minItems": 1,
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "EntityDetectorConfiguration": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "AllowedStatistics": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "Statistics": {
		//	              "insertionOrder": true,
		//	              "items": {
		//	                "maxLength": 128,
		//	                "minLength": 1,
		//	                "pattern": "^[A-Z\\_]+$",
		//	                "type": "string"
		//	              },
		//	              "minItems": 1,
		//	              "type": "array"
		//	            }
		//	          },
		//	          "required": [
		//	            "Statistics"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "EntityTypes": {
		//	          "insertionOrder": true,
		//	          "items": {
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "pattern": "^[A-Z_][A-Z\\\\d_]*$",
		//	            "type": "string"
		//	          },
		//	          "minItems": 1,
		//	          "type": "array"
		//	        }
		//	      },
		//	      "required": [
		//	        "EntityTypes"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "ProfileColumns": {
		//	      "insertionOrder": true,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Name": {
		//	            "maxLength": 255,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          },
		//	          "Regex": {
		//	            "maxLength": 255,
		//	            "minLength": 1,
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "minItems": 1,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"profile_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ColumnStatisticsConfigurations
				"column_statistics_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Selectors
							"selectors": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Name
										"name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
										// Property: Regex
										"regex": schema.StringAttribute{ /*START ATTRIBUTE*/
											Computed: true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Statistics
							"statistics": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: IncludedStatistics
									"included_statistics": schema.ListAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Overrides
									"overrides": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Parameters
												"parameters":        // Pattern: ""
												schema.MapAttribute{ /*START ATTRIBUTE*/
													ElementType: types.StringType,
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Statistic
												"statistic": schema.StringAttribute{ /*START ATTRIBUTE*/
													Computed: true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: DatasetStatisticsConfiguration
				"dataset_statistics_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IncludedStatistics
						"included_statistics": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Overrides
						"overrides": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
							NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Parameters
									"parameters":        // Pattern: ""
									schema.MapAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Statistic
									"statistic": schema.StringAttribute{ /*START ATTRIBUTE*/
										Computed: true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
							}, /*END NESTED OBJECT*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: EntityDetectorConfiguration
				"entity_detector_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: AllowedStatistics
						"allowed_statistics": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Statistics
								"statistics": schema.ListAttribute{ /*START ATTRIBUTE*/
									ElementType: types.StringType,
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: EntityTypes
						"entity_types": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: ProfileColumns
				"profile_columns": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Name
							"name": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Regex
							"regex": schema.StringAttribute{ /*START ATTRIBUTE*/
								Computed: true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Profile Job configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProjectName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Project name",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"project_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Project name",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Recipe
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "Name": {
		//	      "description": "Recipe name",
		//	      "type": "string"
		//	    },
		//	    "Version": {
		//	      "description": "Recipe version",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Name"
		//	  ],
		//	  "type": "object"
		//	}
		"recipe": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Name
				"name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Recipe name",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: Version
				"version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Recipe version",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Role arn",
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Role arn",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Timeout
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Timeout",
		//	  "type": "integer"
		//	}
		"timeout": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Timeout",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Job type",
		//	  "enum": [
		//	    "PROFILE",
		//	    "RECIPE"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Job type",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ValidationConfigurations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Data quality rules configuration",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Configuration to attach Rulesets to the job",
		//	    "properties": {
		//	      "RulesetArn": {
		//	        "description": "Arn of the Ruleset",
		//	        "maxLength": 2048,
		//	        "minLength": 20,
		//	        "type": "string"
		//	      },
		//	      "ValidationMode": {
		//	        "enum": [
		//	          "CHECK_ALL"
		//	        ],
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "RulesetArn"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"validation_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: RulesetArn
					"ruleset_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Arn of the Ruleset",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ValidationMode
					"validation_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
						Computed: true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Data quality rules configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::DataBrew::Job",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataBrew::Job").WithTerraformTypeName("awscc_databrew_job")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allowed_statistics":               "AllowedStatistics",
		"bucket":                           "Bucket",
		"bucket_owner":                     "BucketOwner",
		"catalog_id":                       "CatalogId",
		"column_statistics_configurations": "ColumnStatisticsConfigurations",
		"compression_format":               "CompressionFormat",
		"csv":                              "Csv",
		"data_catalog_outputs":             "DataCatalogOutputs",
		"database_name":                    "DatabaseName",
		"database_options":                 "DatabaseOptions",
		"database_output_mode":             "DatabaseOutputMode",
		"database_outputs":                 "DatabaseOutputs",
		"dataset_name":                     "DatasetName",
		"dataset_statistics_configuration": "DatasetStatisticsConfiguration",
		"delimiter":                        "Delimiter",
		"encryption_key_arn":               "EncryptionKeyArn",
		"encryption_mode":                  "EncryptionMode",
		"entity_detector_configuration":    "EntityDetectorConfiguration",
		"entity_types":                     "EntityTypes",
		"format":                           "Format",
		"format_options":                   "FormatOptions",
		"glue_connection_name":             "GlueConnectionName",
		"included_statistics":              "IncludedStatistics",
		"job_sample":                       "JobSample",
		"key":                              "Key",
		"location":                         "Location",
		"log_subscription":                 "LogSubscription",
		"max_capacity":                     "MaxCapacity",
		"max_output_files":                 "MaxOutputFiles",
		"max_retries":                      "MaxRetries",
		"mode":                             "Mode",
		"name":                             "Name",
		"output_location":                  "OutputLocation",
		"outputs":                          "Outputs",
		"overrides":                        "Overrides",
		"overwrite":                        "Overwrite",
		"parameters":                       "Parameters",
		"partition_columns":                "PartitionColumns",
		"profile_columns":                  "ProfileColumns",
		"profile_configuration":            "ProfileConfiguration",
		"project_name":                     "ProjectName",
		"recipe":                           "Recipe",
		"regex":                            "Regex",
		"role_arn":                         "RoleArn",
		"ruleset_arn":                      "RulesetArn",
		"s3_options":                       "S3Options",
		"selectors":                        "Selectors",
		"size":                             "Size",
		"statistic":                        "Statistic",
		"statistics":                       "Statistics",
		"table_name":                       "TableName",
		"tags":                             "Tags",
		"temp_directory":                   "TempDirectory",
		"timeout":                          "Timeout",
		"type":                             "Type",
		"validation_configurations":        "ValidationConfigurations",
		"validation_mode":                  "ValidationMode",
		"value":                            "Value",
		"version":                          "Version",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
