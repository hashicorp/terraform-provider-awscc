// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package emr

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_emr_studio_session_mapping", studioSessionMappingDataSourceType)
}

// studioSessionMappingDataSourceType returns the Terraform awscc_emr_studio_session_mapping data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::EMR::StudioSessionMapping resource type.
func studioSessionMappingDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"identity_name": {
			// Property: IdentityName
			// CloudFormation resource type schema:
			// {
			//   "description": "The name of the user or group. For more information, see UserName and DisplayName in the AWS SSO Identity Store API Reference. Either IdentityName or IdentityId must be specified.",
			//   "type": "string"
			// }
			Description: "The name of the user or group. For more information, see UserName and DisplayName in the AWS SSO Identity Store API Reference. Either IdentityName or IdentityId must be specified.",
			Type:        types.StringType,
			Computed:    true,
		},
		"identity_type": {
			// Property: IdentityType
			// CloudFormation resource type schema:
			// {
			//   "description": "Specifies whether the identity to map to the Studio is a user or a group.",
			//   "enum": [
			//     "USER",
			//     "GROUP"
			//   ],
			//   "type": "string"
			// }
			Description: "Specifies whether the identity to map to the Studio is a user or a group.",
			Type:        types.StringType,
			Computed:    true,
		},
		"session_policy_arn": {
			// Property: SessionPolicyArn
			// CloudFormation resource type schema:
			// {
			//   "pattern": "",
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"studio_id": {
			// Property: StudioId
			// CloudFormation resource type schema:
			// {
			//   "description": "The ID of the Amazon EMR Studio to which the user or group will be mapped.",
			//   "maxLength": 256,
			//   "minLength": 4,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The ID of the Amazon EMR Studio to which the user or group will be mapped.",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::EMR::StudioSessionMapping",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::EMR::StudioSessionMapping").WithTerraformTypeName("awscc_emr_studio_session_mapping")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"identity_name":      "IdentityName",
		"identity_type":      "IdentityType",
		"session_policy_arn": "SessionPolicyArn",
		"studio_id":          "StudioId",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_emr_studio_session_mapping", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
