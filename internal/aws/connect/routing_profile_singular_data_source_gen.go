// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package connect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_connect_routing_profile", routingProfileDataSource)
}

// routingProfileDataSource returns the Terraform awscc_connect_routing_profile data source.
// This Terraform data source corresponds to the CloudFormation AWS::Connect::RoutingProfile resource.
func routingProfileDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AgentAvailabilityTimer
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Whether agents with this routing profile will have their routing order calculated based on longest idle time or time since their last inbound contact.",
		//	  "enum": [
		//	    "TIME_SINCE_LAST_ACTIVITY",
		//	    "TIME_SINCE_LAST_INBOUND"
		//	  ],
		//	  "type": "string"
		//	}
		"agent_availability_timer": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Whether agents with this routing profile will have their routing order calculated based on longest idle time or time since their last inbound contact.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DefaultOutboundQueueArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the default outbound queue for this routing profile.",
		//	  "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/queue/[-a-zA-Z0-9]*$",
		//	  "type": "string"
		//	}
		"default_outbound_queue_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the default outbound queue for this routing profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the routing profile.",
		//	  "maxLength": 250,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the routing profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the Amazon Connect instance.",
		//	  "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*$",
		//	  "type": "string"
		//	}
		"instance_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the Amazon Connect instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ManualAssignmentQueueConfigs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The manual assignment queues to associate with this routing profile.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Contains information about the manual assignment queue and channel",
		//	    "properties": {
		//	      "QueueReference": {
		//	        "additionalProperties": false,
		//	        "description": "Contains the channel and queue identifier for a routing profile.",
		//	        "properties": {
		//	          "Channel": {
		//	            "description": "The channels that agents can handle in the Contact Control Panel (CCP).",
		//	            "enum": [
		//	              "VOICE",
		//	              "CHAT",
		//	              "TASK",
		//	              "EMAIL"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "QueueArn": {
		//	            "description": "The Amazon Resource Name (ARN) for the queue.",
		//	            "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/queue/[-a-zA-Z0-9]*$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Channel",
		//	          "QueueArn"
		//	        ],
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "QueueReference"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 10,
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"manual_assignment_queue_configs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: QueueReference
					"queue_reference": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Channel
							"channel": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The channels that agents can handle in the Contact Control Panel (CCP).",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: QueueArn
							"queue_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) for the queue.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Contains the channel and queue identifier for a routing profile.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The manual assignment queues to associate with this routing profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MediaConcurrencies
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.",
		//	    "properties": {
		//	      "Channel": {
		//	        "description": "The channels that agents can handle in the Contact Control Panel (CCP).",
		//	        "enum": [
		//	          "VOICE",
		//	          "CHAT",
		//	          "TASK",
		//	          "EMAIL"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "Concurrency": {
		//	        "description": "The number of contacts an agent can have on a channel simultaneously.",
		//	        "maximum": 10,
		//	        "minimum": 1,
		//	        "type": "integer"
		//	      },
		//	      "CrossChannelBehavior": {
		//	        "additionalProperties": false,
		//	        "description": "Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.",
		//	        "properties": {
		//	          "BehaviorType": {
		//	            "description": "Specifies the other channels that can be routed to an agent handling their current channel.",
		//	            "enum": [
		//	              "ROUTE_CURRENT_CHANNEL_ONLY",
		//	              "ROUTE_ANY_CHANNEL"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "BehaviorType"
		//	        ],
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "Channel",
		//	      "Concurrency"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"media_concurrencies": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Channel
					"channel": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The channels that agents can handle in the Contact Control Panel (CCP).",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Concurrency
					"concurrency": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The number of contacts an agent can have on a channel simultaneously.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: CrossChannelBehavior
					"cross_channel_behavior": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: BehaviorType
							"behavior_type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Specifies the other channels that can be routed to an agent handling their current channel.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the routing profile.",
		//	  "maxLength": 127,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the routing profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: QueueConfigs
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The queues to associate with this routing profile.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Contains information about the queue and channel for which priority and delay can be set.",
		//	    "properties": {
		//	      "Delay": {
		//	        "description": "The delay, in seconds, a contact should wait in the queue before they are routed to an available agent.",
		//	        "maximum": 9999,
		//	        "minimum": 0,
		//	        "type": "integer"
		//	      },
		//	      "Priority": {
		//	        "description": "The order in which contacts are to be handled for the queue.",
		//	        "maximum": 99,
		//	        "minimum": 1,
		//	        "type": "integer"
		//	      },
		//	      "QueueReference": {
		//	        "additionalProperties": false,
		//	        "description": "Contains the channel and queue identifier for a routing profile.",
		//	        "properties": {
		//	          "Channel": {
		//	            "description": "The channels that agents can handle in the Contact Control Panel (CCP).",
		//	            "enum": [
		//	              "VOICE",
		//	              "CHAT",
		//	              "TASK",
		//	              "EMAIL"
		//	            ],
		//	            "type": "string"
		//	          },
		//	          "QueueArn": {
		//	            "description": "The Amazon Resource Name (ARN) for the queue.",
		//	            "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/queue/[-a-zA-Z0-9]*$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Channel",
		//	          "QueueArn"
		//	        ],
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "Delay",
		//	      "Priority",
		//	      "QueueReference"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"queue_configs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Delay
					"delay": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The delay, in seconds, a contact should wait in the queue before they are routed to an available agent.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Priority
					"priority": schema.Int64Attribute{ /*START ATTRIBUTE*/
						Description: "The order in which contacts are to be handled for the queue.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: QueueReference
					"queue_reference": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Channel
							"channel": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The channels that agents can handle in the Contact Control Panel (CCP).",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: QueueArn
							"queue_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "The Amazon Resource Name (ARN) for the queue.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "Contains the channel and queue identifier for a routing profile.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The queues to associate with this routing profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoutingProfileArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the routing profile.",
		//	  "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/routing-profile/[-a-zA-Z0-9]*$",
		//	  "type": "string"
		//	}
		"routing_profile_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the routing profile.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Connect::RoutingProfile",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Connect::RoutingProfile").WithTerraformTypeName("awscc_connect_routing_profile")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"agent_availability_timer":        "AgentAvailabilityTimer",
		"behavior_type":                   "BehaviorType",
		"channel":                         "Channel",
		"concurrency":                     "Concurrency",
		"cross_channel_behavior":          "CrossChannelBehavior",
		"default_outbound_queue_arn":      "DefaultOutboundQueueArn",
		"delay":                           "Delay",
		"description":                     "Description",
		"instance_arn":                    "InstanceArn",
		"key":                             "Key",
		"manual_assignment_queue_configs": "ManualAssignmentQueueConfigs",
		"media_concurrencies":             "MediaConcurrencies",
		"name":                            "Name",
		"priority":                        "Priority",
		"queue_arn":                       "QueueArn",
		"queue_configs":                   "QueueConfigs",
		"queue_reference":                 "QueueReference",
		"routing_profile_arn":             "RoutingProfileArn",
		"tags":                            "Tags",
		"value":                           "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
