// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package connect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_connect_predefined_attribute", predefinedAttributeDataSource)
}

// predefinedAttributeDataSource returns the Terraform awscc_connect_predefined_attribute data source.
// This Terraform data source corresponds to the CloudFormation AWS::Connect::PredefinedAttribute resource.
func predefinedAttributeDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: InstanceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the Amazon Connect instance.",
		//	  "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*$",
		//	  "type": "string"
		//	}
		"instance_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the Amazon Connect instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastModifiedRegion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Last modified region.",
		//	  "pattern": "[a-z]{2}(-[a-z]+){1,2}(-[0-9])?",
		//	  "type": "string"
		//	}
		"last_modified_region": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Last modified region.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LastModifiedTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Last modified time.",
		//	  "type": "number"
		//	}
		"last_modified_time": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "Last modified time.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the predefined attribute.",
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the predefined attribute.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Values
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The values of a predefined attribute.",
		//	  "properties": {
		//	    "StringList": {
		//	      "description": "Predefined attribute values of type string list.",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "description": "Textual or numeric value that describes an attribute.",
		//	        "maxLength": 100,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "maxItems": 500,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"values": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: StringList
				"string_list": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "Predefined attribute values of type string list.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The values of a predefined attribute.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Connect::PredefinedAttribute",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Connect::PredefinedAttribute").WithTerraformTypeName("awscc_connect_predefined_attribute")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"instance_arn":         "InstanceArn",
		"last_modified_region": "LastModifiedRegion",
		"last_modified_time":   "LastModifiedTime",
		"name":                 "Name",
		"string_list":          "StringList",
		"values":               "Values",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
