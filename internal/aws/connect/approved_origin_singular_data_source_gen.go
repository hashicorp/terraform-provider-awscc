// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package connect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_connect_approved_origin", approvedOriginDataSource)
}

// approvedOriginDataSource returns the Terraform awscc_connect_approved_origin data source.
// This Terraform data source corresponds to the CloudFormation AWS::Connect::ApprovedOrigin resource.
func approvedOriginDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: InstanceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Amazon Connect instance identifier",
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*$",
		//	  "type": "string"
		//	}
		"instance_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Amazon Connect instance identifier",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Origin
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Domain name to be added to the allowlist of instance",
		//	  "maxLength": 267,
		//	  "type": "string"
		//	}
		"origin": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Domain name to be added to the allowlist of instance",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Connect::ApprovedOrigin",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Connect::ApprovedOrigin").WithTerraformTypeName("awscc_connect_approved_origin")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"instance_id": "InstanceId",
		"origin":      "Origin",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
