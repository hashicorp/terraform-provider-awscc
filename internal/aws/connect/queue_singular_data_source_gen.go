// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package connect

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_connect_queue", queueDataSource)
}

// queueDataSource returns the Terraform awscc_connect_queue data source.
// This Terraform data source corresponds to the CloudFormation AWS::Connect::Queue resource.
func queueDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the queue.",
		//	  "maxLength": 250,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the queue.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: HoursOfOperationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier for the hours of operation.",
		//	  "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/operating-hours/[-a-zA-Z0-9]*$",
		//	  "type": "string"
		//	}
		"hours_of_operation_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier for the hours of operation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: InstanceArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The identifier of the Amazon Connect instance.",
		//	  "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*$",
		//	  "type": "string"
		//	}
		"instance_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The identifier of the Amazon Connect instance.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaxContacts
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum number of contacts that can be in the queue before it is considered full.",
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"max_contacts": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum number of contacts that can be in the queue before it is considered full.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the queue.",
		//	  "maxLength": 127,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the queue.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OutboundCallerConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The outbound caller ID name, number, and outbound whisper flow.",
		//	  "properties": {
		//	    "OutboundCallerIdName": {
		//	      "description": "The caller ID name.",
		//	      "maxLength": 255,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "OutboundCallerIdNumberArn": {
		//	      "description": "The caller ID number.",
		//	      "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:phone-number/[-a-zA-Z0-9]*$",
		//	      "type": "string"
		//	    },
		//	    "OutboundFlowArn": {
		//	      "description": "The outbound whisper flow to be used during an outbound call.",
		//	      "maxLength": 500,
		//	      "minLength": 1,
		//	      "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/contact-flow/[-a-zA-Z0-9]*$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"outbound_caller_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: OutboundCallerIdName
				"outbound_caller_id_name": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The caller ID name.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: OutboundCallerIdNumberArn
				"outbound_caller_id_number_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The caller ID number.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: OutboundFlowArn
				"outbound_flow_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The outbound whisper flow to be used during an outbound call.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The outbound caller ID name, number, and outbound whisper flow.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OutboundEmailConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The outbound email address ID.",
		//	  "properties": {
		//	    "OutboundEmailAddressId": {
		//	      "description": "The email address connect resource ID.",
		//	      "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/email-address/[-a-zA-Z0-9]*$",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"outbound_email_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: OutboundEmailAddressId
				"outbound_email_address_id": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The email address connect resource ID.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The outbound email address ID.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: QueueArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) for the queue.",
		//	  "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/queue/[-a-zA-Z0-9]*$",
		//	  "type": "string"
		//	}
		"queue_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) for the queue.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: QuickConnectArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The quick connects available to agents who are working the queue.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "description": "The Amazon Resource Name (ARN) for the quick connect.",
		//	    "pattern": "^arn:aws[-a-z0-9]*:connect:[-a-z0-9]*:[0-9]{12}:instance/[-a-zA-Z0-9]*/transfer-destination/[-a-zA-Z0-9]*$",
		//	    "type": "string"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"quick_connect_arns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The quick connects available to agents who are working the queue.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the queue.",
		//	  "enum": [
		//	    "ENABLED",
		//	    "DISABLED"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the queue.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of queue.",
		//	  "enum": [
		//	    "STANDARD",
		//	    "AGENT"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of queue.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Connect::Queue",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Connect::Queue").WithTerraformTypeName("awscc_connect_queue")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"description":                   "Description",
		"hours_of_operation_arn":        "HoursOfOperationArn",
		"instance_arn":                  "InstanceArn",
		"key":                           "Key",
		"max_contacts":                  "MaxContacts",
		"name":                          "Name",
		"outbound_caller_config":        "OutboundCallerConfig",
		"outbound_caller_id_name":       "OutboundCallerIdName",
		"outbound_caller_id_number_arn": "OutboundCallerIdNumberArn",
		"outbound_email_address_id":     "OutboundEmailAddressId",
		"outbound_email_config":         "OutboundEmailConfig",
		"outbound_flow_arn":             "OutboundFlowArn",
		"queue_arn":                     "QueueArn",
		"quick_connect_arns":            "QuickConnectArns",
		"status":                        "Status",
		"tags":                          "Tags",
		"type":                          "Type",
		"value":                         "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
