// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package codeguruprofiler

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_codeguruprofiler_profiling_group", profilingGroupDataSource)
}

// profilingGroupDataSource returns the Terraform awscc_codeguruprofiler_profiling_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::CodeGuruProfiler::ProfilingGroup resource.
func profilingGroupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AgentPermissions
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The agent permissions attached to this profiling group.",
		//	  "properties": {
		//	    "Principals": {
		//	      "description": "The principals for the agent permissions.",
		//	      "items": {
		//	        "pattern": "^arn:aws([-\\w]*):iam::([0-9]{12}):[\\S]+$",
		//	        "type": "string"
		//	      },
		//	      "type": "array"
		//	    }
		//	  },
		//	  "required": [
		//	    "Principals"
		//	  ],
		//	  "type": "object"
		//	}
		"agent_permissions": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Principals
				"principals": schema.ListAttribute{ /*START ATTRIBUTE*/
					ElementType: types.StringType,
					Description: "The principals for the agent permissions.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The agent permissions attached to this profiling group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AnomalyDetectionNotificationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Configuration for Notification Channels for Anomaly Detection feature in CodeGuru Profiler which enables customers to detect anomalies in the application profile for those methods that represent the highest proportion of CPU time or latency",
		//	  "items": {
		//	    "description": "Notification medium for users to get alerted for events that occur in application profile. We support SNS topic as a notification channel.",
		//	    "properties": {
		//	      "channelId": {
		//	        "description": "Unique identifier for each Channel in the notification configuration of a Profiling Group",
		//	        "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
		//	        "type": "string"
		//	      },
		//	      "channelUri": {
		//	        "description": "Unique arn of the resource to be used for notifications. We support a valid SNS topic arn as a channel uri.",
		//	        "pattern": "^arn:aws([-\\w]*):[a-z-]+:(([a-z]+-)+[0-9]+)?:([0-9]{12}):[^.]+$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "channelUri"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"anomaly_detection_notification_configuration": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: channelId
					"channel_id": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Unique identifier for each Channel in the notification configuration of a Profiling Group",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: channelUri
					"channel_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "Unique arn of the resource to be used for notifications. We support a valid SNS topic arn as a channel uri.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Configuration for Notification Channels for Anomaly Detection feature in CodeGuru Profiler which enables customers to detect anomalies in the application profile for those methods that represent the highest proportion of CPU time or latency",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Name (ARN) of the specified profiling group.",
		//	  "pattern": "^arn:aws([-\\w]*):codeguru-profiler:(([a-z]+-)+[0-9]+):([0-9]{12}):profilingGroup/[^.]+$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Resource Name (ARN) of the specified profiling group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ComputePlatform
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The compute platform of the profiling group.",
		//	  "enum": [
		//	    "Default",
		//	    "AWSLambda"
		//	  ],
		//	  "type": "string"
		//	}
		"compute_platform": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The compute platform of the profiling group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ProfilingGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the profiling group.",
		//	  "maxLength": 255,
		//	  "minLength": 1,
		//	  "pattern": "^[\\w-]+$",
		//	  "type": "string"
		//	}
		"profiling_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the profiling group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags associated with a profiling group.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. The allowed characters across services are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. The allowed characters across services are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. The allowed characters across services are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. The allowed characters across services are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags associated with a profiling group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::CodeGuruProfiler::ProfilingGroup",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CodeGuruProfiler::ProfilingGroup").WithTerraformTypeName("awscc_codeguruprofiler_profiling_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"agent_permissions":                            "AgentPermissions",
		"anomaly_detection_notification_configuration": "AnomalyDetectionNotificationConfiguration",
		"arn":                  "Arn",
		"channel_id":           "channelId",
		"channel_uri":          "channelUri",
		"compute_platform":     "ComputePlatform",
		"key":                  "Key",
		"principals":           "Principals",
		"profiling_group_name": "ProfilingGroupName",
		"tags":                 "Tags",
		"value":                "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
