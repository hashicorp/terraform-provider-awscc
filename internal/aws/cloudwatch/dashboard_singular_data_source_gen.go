// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cloudwatch

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_cloudwatch_dashboard", dashboardDataSource)
}

// dashboardDataSource returns the Terraform awscc_cloudwatch_dashboard data source.
// This Terraform data source corresponds to the CloudFormation AWS::CloudWatch::Dashboard resource.
func dashboardDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DashboardBody
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard",
		//	  "type": "string"
		//	}
		"dashboard_body": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DashboardName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the dashboard. The name must be between 1 and 255 characters. If you do not specify a name, one will be generated automatically.",
		//	  "type": "string"
		//	}
		"dashboard_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the dashboard. The name must be between 1 and 255 characters. If you do not specify a name, one will be generated automatically.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::CloudWatch::Dashboard",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CloudWatch::Dashboard").WithTerraformTypeName("awscc_cloudwatch_dashboard")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"dashboard_body": "DashboardBody",
		"dashboard_name": "DashboardName",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
