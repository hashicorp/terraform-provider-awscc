// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package backup

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_backup_backup_plan", backupPlanDataSourceType)
}

// backupPlanDataSourceType returns the Terraform awscc_backup_backup_plan data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::Backup::BackupPlan resource type.
func backupPlanDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"backup_plan": {
			// Property: BackupPlan
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "AdvancedBackupSettings": {
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "BackupOptions": {
			//             "type": "object"
			//           },
			//           "ResourceType": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "BackupOptions",
			//           "ResourceType"
			//         ],
			//         "type": "object"
			//       },
			//       "type": "array",
			//       "uniqueItems": false
			//     },
			//     "BackupPlanName": {
			//       "type": "string"
			//     },
			//     "BackupPlanRule": {
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "CompletionWindowMinutes": {
			//             "type": "number"
			//           },
			//           "CopyActions": {
			//             "items": {
			//               "additionalProperties": false,
			//               "properties": {
			//                 "DestinationBackupVaultArn": {
			//                   "type": "string"
			//                 },
			//                 "Lifecycle": {
			//                   "additionalProperties": false,
			//                   "properties": {
			//                     "DeleteAfterDays": {
			//                       "type": "number"
			//                     },
			//                     "MoveToColdStorageAfterDays": {
			//                       "type": "number"
			//                     }
			//                   },
			//                   "type": "object"
			//                 }
			//               },
			//               "required": [
			//                 "DestinationBackupVaultArn"
			//               ],
			//               "type": "object"
			//             },
			//             "type": "array",
			//             "uniqueItems": false
			//           },
			//           "EnableContinuousBackup": {
			//             "type": "boolean"
			//           },
			//           "Lifecycle": {
			//             "additionalProperties": false,
			//             "properties": {
			//               "DeleteAfterDays": {
			//                 "type": "number"
			//               },
			//               "MoveToColdStorageAfterDays": {
			//                 "type": "number"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "RecoveryPointTags": {
			//             "additionalProperties": false,
			//             "patternProperties": {
			//               "": {
			//                 "type": "string"
			//               }
			//             },
			//             "type": "object"
			//           },
			//           "RuleName": {
			//             "type": "string"
			//           },
			//           "ScheduleExpression": {
			//             "type": "string"
			//           },
			//           "StartWindowMinutes": {
			//             "type": "number"
			//           },
			//           "TargetBackupVault": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "TargetBackupVault",
			//           "RuleName"
			//         ],
			//         "type": "object"
			//       },
			//       "type": "array",
			//       "uniqueItems": false
			//     }
			//   },
			//   "required": [
			//     "BackupPlanName",
			//     "BackupPlanRule"
			//   ],
			//   "type": "object"
			// }
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"advanced_backup_settings": {
						// Property: AdvancedBackupSettings
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"backup_options": {
									// Property: BackupOptions
									Type:     types.MapType{ElemType: types.StringType},
									Computed: true,
								},
								"resource_type": {
									// Property: ResourceType
									Type:     types.StringType,
									Computed: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Computed: true,
					},
					"backup_plan_name": {
						// Property: BackupPlanName
						Type:     types.StringType,
						Computed: true,
					},
					"backup_plan_rule": {
						// Property: BackupPlanRule
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"completion_window_minutes": {
									// Property: CompletionWindowMinutes
									Type:     types.NumberType,
									Computed: true,
								},
								"copy_actions": {
									// Property: CopyActions
									Attributes: tfsdk.ListNestedAttributes(
										map[string]tfsdk.Attribute{
											"destination_backup_vault_arn": {
												// Property: DestinationBackupVaultArn
												Type:     types.StringType,
												Computed: true,
											},
											"lifecycle": {
												// Property: Lifecycle
												Attributes: tfsdk.SingleNestedAttributes(
													map[string]tfsdk.Attribute{
														"delete_after_days": {
															// Property: DeleteAfterDays
															Type:     types.NumberType,
															Computed: true,
														},
														"move_to_cold_storage_after_days": {
															// Property: MoveToColdStorageAfterDays
															Type:     types.NumberType,
															Computed: true,
														},
													},
												),
												Computed: true,
											},
										},
										tfsdk.ListNestedAttributesOptions{},
									),
									Computed: true,
								},
								"enable_continuous_backup": {
									// Property: EnableContinuousBackup
									Type:     types.BoolType,
									Computed: true,
								},
								"lifecycle": {
									// Property: Lifecycle
									Attributes: tfsdk.SingleNestedAttributes(
										map[string]tfsdk.Attribute{
											"delete_after_days": {
												// Property: DeleteAfterDays
												Type:     types.NumberType,
												Computed: true,
											},
											"move_to_cold_storage_after_days": {
												// Property: MoveToColdStorageAfterDays
												Type:     types.NumberType,
												Computed: true,
											},
										},
									),
									Computed: true,
								},
								"recovery_point_tags": {
									// Property: RecoveryPointTags
									// Pattern: ""
									Type:     types.MapType{ElemType: types.StringType},
									Computed: true,
								},
								"rule_name": {
									// Property: RuleName
									Type:     types.StringType,
									Computed: true,
								},
								"schedule_expression": {
									// Property: ScheduleExpression
									Type:     types.StringType,
									Computed: true,
								},
								"start_window_minutes": {
									// Property: StartWindowMinutes
									Type:     types.NumberType,
									Computed: true,
								},
								"target_backup_vault": {
									// Property: TargetBackupVault
									Type:     types.StringType,
									Computed: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Computed: true,
					},
				},
			),
			Computed: true,
		},
		"backup_plan_arn": {
			// Property: BackupPlanArn
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"backup_plan_id": {
			// Property: BackupPlanId
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"backup_plan_tags": {
			// Property: BackupPlanTags
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "patternProperties": {
			//     "": {
			//       "type": "string"
			//     }
			//   },
			//   "type": "object"
			// }
			// Pattern: ""
			Type:     types.MapType{ElemType: types.StringType},
			Computed: true,
		},
		"version_id": {
			// Property: VersionId
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::Backup::BackupPlan",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Backup::BackupPlan").WithTerraformTypeName("awscc_backup_backup_plan")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"advanced_backup_settings":        "AdvancedBackupSettings",
		"backup_options":                  "BackupOptions",
		"backup_plan":                     "BackupPlan",
		"backup_plan_arn":                 "BackupPlanArn",
		"backup_plan_id":                  "BackupPlanId",
		"backup_plan_name":                "BackupPlanName",
		"backup_plan_rule":                "BackupPlanRule",
		"backup_plan_tags":                "BackupPlanTags",
		"completion_window_minutes":       "CompletionWindowMinutes",
		"copy_actions":                    "CopyActions",
		"delete_after_days":               "DeleteAfterDays",
		"destination_backup_vault_arn":    "DestinationBackupVaultArn",
		"enable_continuous_backup":        "EnableContinuousBackup",
		"lifecycle":                       "Lifecycle",
		"move_to_cold_storage_after_days": "MoveToColdStorageAfterDays",
		"recovery_point_tags":             "RecoveryPointTags",
		"resource_type":                   "ResourceType",
		"rule_name":                       "RuleName",
		"schedule_expression":             "ScheduleExpression",
		"start_window_minutes":            "StartWindowMinutes",
		"target_backup_vault":             "TargetBackupVault",
		"version_id":                      "VersionId",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_backup_backup_plan", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
