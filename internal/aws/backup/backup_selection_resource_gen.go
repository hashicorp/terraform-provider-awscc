// Code generated by generators/resource/main.go; DO NOT EDIT.

package backup

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceTypeFactory("awscc_backup_backup_selection", backupSelectionResourceType)
}

// backupSelectionResourceType returns the Terraform awscc_backup_backup_selection resource type.
// This Terraform resource type corresponds to the CloudFormation AWS::Backup::BackupSelection resource type.
func backupSelectionResourceType(ctx context.Context) (tfsdk.ResourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"backup_plan_id": {
			// Property: BackupPlanId
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Required: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(), // BackupPlanId is a force-new property.
			},
		},
		"backup_selection": {
			// Property: BackupSelection
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "IamRoleArn": {
			//       "type": "string"
			//     },
			//     "ListOfTags": {
			//       "items": {
			//         "additionalProperties": false,
			//         "properties": {
			//           "ConditionKey": {
			//             "type": "string"
			//           },
			//           "ConditionType": {
			//             "type": "string"
			//           },
			//           "ConditionValue": {
			//             "type": "string"
			//           }
			//         },
			//         "required": [
			//           "ConditionValue",
			//           "ConditionKey",
			//           "ConditionType"
			//         ],
			//         "type": "object"
			//       },
			//       "type": "array",
			//       "uniqueItems": false
			//     },
			//     "Resources": {
			//       "items": {
			//         "type": "string"
			//       },
			//       "type": "array",
			//       "uniqueItems": false
			//     },
			//     "SelectionName": {
			//       "type": "string"
			//     }
			//   },
			//   "required": [
			//     "SelectionName",
			//     "IamRoleArn"
			//   ],
			//   "type": "object"
			// }
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"iam_role_arn": {
						// Property: IamRoleArn
						Type:     types.StringType,
						Required: true,
					},
					"list_of_tags": {
						// Property: ListOfTags
						Attributes: tfsdk.ListNestedAttributes(
							map[string]tfsdk.Attribute{
								"condition_key": {
									// Property: ConditionKey
									Type:     types.StringType,
									Required: true,
								},
								"condition_type": {
									// Property: ConditionType
									Type:     types.StringType,
									Required: true,
								},
								"condition_value": {
									// Property: ConditionValue
									Type:     types.StringType,
									Required: true,
								},
							},
							tfsdk.ListNestedAttributesOptions{},
						),
						Optional: true,
					},
					"resources": {
						// Property: Resources
						Type:     types.ListType{ElemType: types.StringType},
						Optional: true,
					},
					"selection_name": {
						// Property: SelectionName
						Type:     types.StringType,
						Required: true,
					},
				},
			),
			Required: true,
			PlanModifiers: []tfsdk.AttributePlanModifier{
				tfsdk.RequiresReplace(), // BackupSelection is a force-new property.
			},
		},
		"id": {
			// Property: Id
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"selection_id": {
			// Property: SelectionId
			// CloudFormation resource type schema:
			// {
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
	}

	schema := tfsdk.Schema{
		Description: "Resource Type definition for AWS::Backup::BackupSelection",
		Version:     1,
		Attributes:  attributes,
	}

	var opts ResourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::Backup::BackupSelection").WithTerraformTypeName("awscc_backup_backup_selection")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute(false)
	opts = opts.WithAttributeNameMap(map[string]string{
		"backup_plan_id":   "BackupPlanId",
		"backup_selection": "BackupSelection",
		"condition_key":    "ConditionKey",
		"condition_type":   "ConditionType",
		"condition_value":  "ConditionValue",
		"iam_role_arn":     "IamRoleArn",
		"id":               "Id",
		"list_of_tags":     "ListOfTags",
		"resources":        "Resources",
		"selection_id":     "SelectionId",
		"selection_name":   "SelectionName",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	resourceType, err := NewResourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_backup_backup_selection", "schema", hclog.Fmt("%v", schema))

	return resourceType, nil
}
