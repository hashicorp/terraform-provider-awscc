// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package backup

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_backup_framework", frameworkDataSource)
}

// frameworkDataSource returns the Terraform awscc_backup_framework data source.
// This Terraform data source corresponds to the CloudFormation AWS::Backup::Framework resource.
func frameworkDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The date and time that a framework is created, in ISO 8601 representation. The value of CreationTime is accurate to milliseconds. For example, 2020-07-10T15:00:00.000-08:00 represents the 10th of July 2020 at 3:00 PM 8 hours behind UTC.",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The date and time that a framework is created, in ISO 8601 representation. The value of CreationTime is accurate to milliseconds. For example, 2020-07-10T15:00:00.000-08:00 represents the 10th of July 2020 at 3:00 PM 8 hours behind UTC.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DeploymentStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED`",
		//	  "type": "string"
		//	}
		"deployment_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS | UPDATE_IN_PROGRESS | DELETE_IN_PROGRESS | COMPLETED | FAILED`",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FrameworkArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An Amazon Resource Name (ARN) that uniquely identifies Framework as a resource",
		//	  "type": "string"
		//	}
		"framework_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An Amazon Resource Name (ARN) that uniquely identifies Framework as a resource",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FrameworkControls
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "properties": {
		//	      "ControlInputParameters": {
		//	        "description": "A list of ParameterName and ParameterValue pairs.",
		//	        "insertionOrder": false,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "properties": {
		//	            "ParameterName": {
		//	              "type": "string"
		//	            },
		//	            "ParameterValue": {
		//	              "type": "string"
		//	            }
		//	          },
		//	          "required": [
		//	            "ParameterName",
		//	            "ParameterValue"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "type": "array",
		//	        "uniqueItems": true
		//	      },
		//	      "ControlName": {
		//	        "description": "The name of a control. This name is between 1 and 256 characters.",
		//	        "type": "string"
		//	      },
		//	      "ControlScope": {
		//	        "additionalProperties": false,
		//	        "description": "The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.",
		//	        "properties": {
		//	          "ComplianceResourceIds": {
		//	            "description": "The ID of the only AWS resource that you want your control scope to contain.",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "ComplianceResourceTypes": {
		//	            "description": "Describes whether the control scope includes one or more types of resources, such as `EFS` or `RDS`.",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "type": "string"
		//	            },
		//	            "type": "array"
		//	          },
		//	          "Tags": {
		//	            "description": "Describes whether the control scope includes resources with one or more tags. Each tag is a key-value pair.",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "A key-value pair to associate with a resource.",
		//	              "properties": {
		//	                "Key": {
		//	                  "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	                  "maxLength": 128,
		//	                  "minLength": 1,
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	                  "maxLength": 256,
		//	                  "minLength": 0,
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "type": "object"
		//	            },
		//	            "type": "array"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "ControlName"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"framework_controls": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ControlInputParameters
					"control_input_parameters": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ParameterName
								"parameter_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: ParameterValue
								"parameter_value": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "A list of ParameterName and ParameterValue pairs.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ControlName
					"control_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name of a control. This name is between 1 and 256 characters.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ControlScope
					"control_scope": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ComplianceResourceIds
							"compliance_resource_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "The ID of the only AWS resource that you want your control scope to contain.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: ComplianceResourceTypes
							"compliance_resource_types": schema.ListAttribute{ /*START ATTRIBUTE*/
								ElementType: types.StringType,
								Description: "Describes whether the control scope includes one or more types of resources, such as `EFS` or `RDS`.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Tags
							"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Key
										"key": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "Describes whether the control scope includes resources with one or more tags. Each tag is a key-value pair.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Contains detailed information about all of the controls of a framework. Each framework must contain at least one control.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FrameworkDescription
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An optional description of the framework with a maximum 1,024 characters.",
		//	  "maxLength": 1024,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"framework_description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "An optional description of the framework with a maximum 1,024 characters.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FrameworkName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "[a-zA-Z][_a-zA-Z0-9]*",
		//	  "type": "string"
		//	}
		"framework_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique name of a framework. This name is between 1 and 256 characters, starting with a letter, and consisting of letters (a-z, A-Z), numbers (0-9), and underscores (_).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FrameworkStatus
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. The statuses are:\n\n`ACTIVE` when recording is turned on for all resources governed by the framework.\n\n`PARTIALLY_ACTIVE` when recording is turned off for at least one resource governed by the framework.\n\n`INACTIVE` when recording is turned off for all resources governed by the framework.\n\n`UNAVAILABLE` when AWS Backup is unable to validate recording status at this time.",
		//	  "type": "string"
		//	}
		"framework_status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. The statuses are:\n\n`ACTIVE` when recording is turned on for all resources governed by the framework.\n\n`PARTIALLY_ACTIVE` when recording is turned off for at least one resource governed by the framework.\n\n`INACTIVE` when recording is turned off for all resources governed by the framework.\n\n`UNAVAILABLE` when AWS Backup is unable to validate recording status at this time.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: FrameworkTags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array"
		//	}
		"framework_tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Metadata that you can assign to help organize the frameworks that you create. Each tag is a key-value pair.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Backup::Framework",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Backup::Framework").WithTerraformTypeName("awscc_backup_framework")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"compliance_resource_ids":   "ComplianceResourceIds",
		"compliance_resource_types": "ComplianceResourceTypes",
		"control_input_parameters":  "ControlInputParameters",
		"control_name":              "ControlName",
		"control_scope":             "ControlScope",
		"creation_time":             "CreationTime",
		"deployment_status":         "DeploymentStatus",
		"framework_arn":             "FrameworkArn",
		"framework_controls":        "FrameworkControls",
		"framework_description":     "FrameworkDescription",
		"framework_name":            "FrameworkName",
		"framework_status":          "FrameworkStatus",
		"framework_tags":            "FrameworkTags",
		"key":                       "Key",
		"parameter_name":            "ParameterName",
		"parameter_value":           "ParameterValue",
		"tags":                      "Tags",
		"value":                     "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
