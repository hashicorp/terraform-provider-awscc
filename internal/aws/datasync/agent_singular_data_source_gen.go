// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package datasync

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_datasync_agent", agentDataSource)
}

// agentDataSource returns the Terraform awscc_datasync_agent data source.
// This Terraform data source corresponds to the CloudFormation AWS::DataSync::Agent resource.
func agentDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ActivationKey
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Activation key of the Agent.",
		//	  "maxLength": 29,
		//	  "pattern": "[A-Z0-9]{5}(-[A-Z0-9]{5}){4}",
		//	  "type": "string"
		//	}
		"activation_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Activation key of the Agent.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AgentArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The DataSync Agent ARN.",
		//	  "maxLength": 128,
		//	  "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]+:[0-9]{12}:agent/agent-[0-9a-z]{17}$",
		//	  "type": "string"
		//	}
		"agent_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The DataSync Agent ARN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AgentName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name configured for the agent. Text reference used to identify the agent in the console.",
		//	  "maxLength": 256,
		//	  "minLength": 0,
		//	  "pattern": "^[a-zA-Z0-9\\s+=._:@/-]+$",
		//	  "type": "string"
		//	}
		"agent_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name configured for the agent. Text reference used to identify the agent in the console.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EndpointType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The service endpoints that the agent will connect to.",
		//	  "enum": [
		//	    "FIPS",
		//	    "PUBLIC",
		//	    "PRIVATE_LINK"
		//	  ],
		//	  "type": "string"
		//	}
		"endpoint_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The service endpoints that the agent will connect to.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SecurityGroupArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARNs of the security group used to protect your data transfer task subnets.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "maxLength": 128,
		//	    "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):ec2:[a-z\\-0-9]*:[0-9]{12}:security-group/.*$",
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"security_group_arns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The ARNs of the security group used to protect your data transfer task subnets.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SubnetArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARNs of the subnets in which DataSync will create elastic network interfaces for each data transfer task.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "maxLength": 128,
		//	    "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):ec2:[a-z\\-0-9]*:[0-9]{12}:subnet/.*$",
		//	    "type": "string"
		//	  },
		//	  "type": "array"
		//	}
		"subnet_arns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The ARNs of the subnets in which DataSync will create elastic network interfaces for each data transfer task.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key for an AWS resource tag.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9\\s+=._:/-]+$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for an AWS resource tag.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9\\s+=._:@/-]+$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key for an AWS resource tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for an AWS resource tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: VpcEndpointId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the VPC endpoint that the agent has access to.",
		//	  "pattern": "^vpce-[0-9a-f]{17}$",
		//	  "type": "string"
		//	}
		"vpc_endpoint_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the VPC endpoint that the agent has access to.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::DataSync::Agent",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataSync::Agent").WithTerraformTypeName("awscc_datasync_agent")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"activation_key":      "ActivationKey",
		"agent_arn":           "AgentArn",
		"agent_name":          "AgentName",
		"endpoint_type":       "EndpointType",
		"key":                 "Key",
		"security_group_arns": "SecurityGroupArns",
		"subnet_arns":         "SubnetArns",
		"tags":                "Tags",
		"value":               "Value",
		"vpc_endpoint_id":     "VpcEndpointId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
