// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package datasync

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	fwvalidators "github.com/hashicorp/terraform-provider-awscc/internal/validators"
)

func init() {
	registry.AddResourceFactory("awscc_datasync_task", taskResource)
}

// taskResource returns the Terraform awscc_datasync_task resource.
// This Terraform resource corresponds to the CloudFormation AWS::DataSync::Task resource.
func taskResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CloudWatchLogGroupArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.",
		//	  "maxLength": 562,
		//	  "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):logs:[a-z\\-0-9]*:[0-9]{12}:log-group:([^:\\*]*)(:\\*)?$",
		//	  "type": "string"
		//	}
		"cloudwatch_log_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the Amazon CloudWatch log group that is used to monitor and log events in the task.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(562),
				stringvalidator.RegexMatches(regexp.MustCompile("^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):logs:[a-z\\-0-9]*:[0-9]{12}:log-group:([^:\\*]*)(:\\*)?$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DestinationLocationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of an AWS storage resource's location.",
		//	  "maxLength": 128,
		//	  "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]+:[0-9]{12}:location/loc-[0-9a-z]{17}$",
		//	  "type": "string"
		//	}
		"destination_location_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of an AWS storage resource's location.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(128),
				stringvalidator.RegexMatches(regexp.MustCompile("^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]+:[0-9]{12}:location/loc-[0-9a-z]{17}$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: DestinationNetworkInterfaceArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Names (ARNs) of the destination ENIs (Elastic Network Interfaces) that were created for your subnet.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "pattern": "^arn:aws[\\-a-z]{0,}:ec2:[a-z\\-0-9]*:[0-9]{12}:network-interface/eni-[0-9a-f]+$",
		//	    "type": "string"
		//	  },
		//	  "maxItems": 128,
		//	  "type": "array"
		//	}
		"destination_network_interface_arns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The Amazon Resource Names (ARNs) of the destination ENIs (Elastic Network Interfaces) that were created for your subnet.",
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Excludes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Specifies which files folders and objects to include or exclude when transferring files from source to destination.",
		//	    "properties": {
		//	      "FilterType": {
		//	        "description": "The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.",
		//	        "enum": [
		//	          "SIMPLE_PATTERN"
		//	        ],
		//	        "maxLength": 128,
		//	        "pattern": "^[A-Z0-9_]+$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "A single filter string that consists of the patterns to include or exclude. The patterns are delimited by \"|\".",
		//	        "maxLength": 409600,
		//	        "pattern": "^[^\\x00]+$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 1,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"excludes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: FilterType
					"filter_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthAtMost(128),
							stringvalidator.RegexMatches(regexp.MustCompile("^[A-Z0-9_]+$"), ""),
							stringvalidator.OneOf(
								"SIMPLE_PATTERN",
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A single filter string that consists of the patterns to include or exclude. The patterns are delimited by \"|\".",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthAtMost(409600),
							stringvalidator.RegexMatches(regexp.MustCompile("^[^\\x00]+$"), ""),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(0, 1),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Includes
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Specifies which files folders and objects to include or exclude when transferring files from source to destination.",
		//	    "properties": {
		//	      "FilterType": {
		//	        "description": "The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.",
		//	        "enum": [
		//	          "SIMPLE_PATTERN"
		//	        ],
		//	        "maxLength": 128,
		//	        "pattern": "^[A-Z0-9_]+$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "A single filter string that consists of the patterns to include or exclude. The patterns are delimited by \"|\".",
		//	        "maxLength": 409600,
		//	        "pattern": "^[^\\x00]+$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "maxItems": 1,
		//	  "minItems": 0,
		//	  "type": "array"
		//	}
		"includes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: FilterType
					"filter_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The type of filter rule to apply. AWS DataSync only supports the SIMPLE_PATTERN rule type.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthAtMost(128),
							stringvalidator.RegexMatches(regexp.MustCompile("^[A-Z0-9_]+$"), ""),
							stringvalidator.OneOf(
								"SIMPLE_PATTERN",
							),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A single filter string that consists of the patterns to include or exclude. The patterns are delimited by \"|\".",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthAtMost(409600),
							stringvalidator.RegexMatches(regexp.MustCompile("^[^\\x00]+$"), ""),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Optional: true,
			Computed: true,
			Validators: []validator.List{ /*START VALIDATORS*/
				listvalidator.SizeBetween(0, 1),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: ManifestConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configures a manifest, which is a list of files or objects that you want DataSync to transfer.",
		//	  "properties": {
		//	    "Action": {
		//	      "description": "Specifies what DataSync uses the manifest for.",
		//	      "enum": [
		//	        "TRANSFER"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Format": {
		//	      "description": "Specifies the file format of your manifest.",
		//	      "enum": [
		//	        "CSV"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Source": {
		//	      "additionalProperties": false,
		//	      "description": "Specifies the manifest that you want DataSync to use and where it's hosted.",
		//	      "properties": {
		//	        "S3": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the S3 bucket where you're hosting the manifest that you want AWS DataSync to use.",
		//	          "properties": {
		//	            "BucketAccessRoleArn": {
		//	              "description": "Specifies the AWS Identity and Access Management (IAM) role that allows DataSync to access your manifest.",
		//	              "maxLength": 2048,
		//	              "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):iam::[0-9]{12}:role/.*$",
		//	              "type": "string"
		//	            },
		//	            "ManifestObjectPath": {
		//	              "description": "Specifies the Amazon S3 object key of your manifest.",
		//	              "maxLength": 1024,
		//	              "pattern": "^[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}\\p{C}]*$",
		//	              "type": "string"
		//	            },
		//	            "ManifestObjectVersionId": {
		//	              "description": "Specifies the object version ID of the manifest that you want DataSync to use.",
		//	              "maxLength": 100,
		//	              "pattern": "^.+$",
		//	              "type": "string"
		//	            },
		//	            "S3BucketArn": {
		//	              "description": "Specifies the Amazon Resource Name (ARN) of the S3 bucket where you're hosting your manifest.",
		//	              "maxLength": 156,
		//	              "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):(s3|s3-outposts):[a-z\\-0-9]*:[0-9]*:.*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "Source"
		//	  ],
		//	  "type": "object"
		//	}
		"manifest_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Action
				"action": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies what DataSync uses the manifest for.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"TRANSFER",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Format
				"format": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies the file format of your manifest.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"CSV",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Source
				"source": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: S3
						"s3": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BucketAccessRoleArn
								"bucket_access_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies the AWS Identity and Access Management (IAM) role that allows DataSync to access your manifest.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):iam::[0-9]{12}:role/.*$"), ""),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ManifestObjectPath
								"manifest_object_path": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies the Amazon S3 object key of your manifest.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(1024),
										stringvalidator.RegexMatches(regexp.MustCompile("^[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}\\p{C}]*$"), ""),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: ManifestObjectVersionId
								"manifest_object_version_id": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies the object version ID of the manifest that you want DataSync to use.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(100),
										stringvalidator.RegexMatches(regexp.MustCompile("^.+$"), ""),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: S3BucketArn
								"s3_bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies the Amazon Resource Name (ARN) of the S3 bucket where you're hosting your manifest.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(156),
										stringvalidator.RegexMatches(regexp.MustCompile("^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):(s3|s3-outposts):[a-z\\-0-9]*:[0-9]*:.*$"), ""),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Specifies the S3 bucket where you're hosting the manifest that you want AWS DataSync to use.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Specifies the manifest that you want DataSync to use and where it's hosted.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.Object{ /*START VALIDATORS*/
						fwvalidators.NotNullObject(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configures a manifest, which is a list of files or objects that you want DataSync to transfer.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of a task. This value is a text reference that is used to identify the task in the console.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9\\s+=._:@/-]+$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of a task. This value is a text reference that is used to identify the task in the console.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 256),
				stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9\\s+=._:@/-]+$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Options
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Represents the options that are available to control the behavior of a StartTaskExecution operation.",
		//	  "properties": {
		//	    "Atime": {
		//	      "description": "A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).",
		//	      "enum": [
		//	        "NONE",
		//	        "BEST_EFFORT"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "BytesPerSecond": {
		//	      "description": "A value that limits the bandwidth used by AWS DataSync.",
		//	      "format": "int64",
		//	      "minimum": -1,
		//	      "type": "integer"
		//	    },
		//	    "Gid": {
		//	      "description": "The group ID (GID) of the file's owners.",
		//	      "enum": [
		//	        "NONE",
		//	        "INT_VALUE",
		//	        "NAME",
		//	        "BOTH"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "LogLevel": {
		//	      "description": "A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.",
		//	      "enum": [
		//	        "OFF",
		//	        "BASIC",
		//	        "TRANSFER"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Mtime": {
		//	      "description": "A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.",
		//	      "enum": [
		//	        "NONE",
		//	        "PRESERVE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "ObjectTags": {
		//	      "description": "A value that determines whether object tags should be read from the source object store and written to the destination object store.",
		//	      "enum": [
		//	        "PRESERVE",
		//	        "NONE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "OverwriteMode": {
		//	      "description": "A value that determines whether files at the destination should be overwritten or preserved when copying files.",
		//	      "enum": [
		//	        "ALWAYS",
		//	        "NEVER"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "PosixPermissions": {
		//	      "description": "A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.",
		//	      "enum": [
		//	        "NONE",
		//	        "PRESERVE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "PreserveDeletedFiles": {
		//	      "description": "A value that specifies whether files in the destination that don't exist in the source file system should be preserved.",
		//	      "enum": [
		//	        "PRESERVE",
		//	        "REMOVE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "PreserveDevices": {
		//	      "description": "A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.",
		//	      "enum": [
		//	        "NONE",
		//	        "PRESERVE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "SecurityDescriptorCopyFlags": {
		//	      "description": "A value that determines which components of the SMB security descriptor are copied during transfer.",
		//	      "enum": [
		//	        "NONE",
		//	        "OWNER_DACL",
		//	        "OWNER_DACL_SACL"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "TaskQueueing": {
		//	      "description": "A value that determines whether tasks should be queued before executing the tasks.",
		//	      "enum": [
		//	        "ENABLED",
		//	        "DISABLED"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "TransferMode": {
		//	      "description": "A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.",
		//	      "enum": [
		//	        "CHANGED",
		//	        "ALL"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Uid": {
		//	      "description": "The user ID (UID) of the file's owner.",
		//	      "enum": [
		//	        "NONE",
		//	        "INT_VALUE",
		//	        "NAME",
		//	        "BOTH"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "VerifyMode": {
		//	      "description": "A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.",
		//	      "enum": [
		//	        "POINT_IN_TIME_CONSISTENT",
		//	        "ONLY_FILES_TRANSFERRED",
		//	        "NONE"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"options": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Atime
				"atime": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A file metadata value that shows the last time a file was accessed (that is, when the file was read or written to).",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"NONE",
							"BEST_EFFORT",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: BytesPerSecond
				"bytes_per_second": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "A value that limits the bandwidth used by AWS DataSync.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.Int64{ /*START VALIDATORS*/
						int64validator.AtLeast(-1),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
						int64planmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Gid
				"gid": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The group ID (GID) of the file's owners.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"NONE",
							"INT_VALUE",
							"NAME",
							"BOTH",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: LogLevel
				"log_level": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that determines the types of logs that DataSync publishes to a log stream in the Amazon CloudWatch log group that you provide.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"OFF",
							"BASIC",
							"TRANSFER",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Mtime
				"mtime": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that indicates the last time that a file was modified (that is, a file was written to) before the PREPARING phase.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"NONE",
							"PRESERVE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ObjectTags
				"object_tags": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that determines whether object tags should be read from the source object store and written to the destination object store.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"PRESERVE",
							"NONE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: OverwriteMode
				"overwrite_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that determines whether files at the destination should be overwritten or preserved when copying files.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"ALWAYS",
							"NEVER",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: PosixPermissions
				"posix_permissions": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"NONE",
							"PRESERVE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: PreserveDeletedFiles
				"preserve_deleted_files": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that specifies whether files in the destination that don't exist in the source file system should be preserved.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"PRESERVE",
							"REMOVE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: PreserveDevices
				"preserve_devices": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that determines whether AWS DataSync should preserve the metadata of block and character devices in the source file system, and recreate the files with that device name and metadata on the destination.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"NONE",
							"PRESERVE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SecurityDescriptorCopyFlags
				"security_descriptor_copy_flags": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that determines which components of the SMB security descriptor are copied during transfer.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"NONE",
							"OWNER_DACL",
							"OWNER_DACL_SACL",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TaskQueueing
				"task_queueing": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that determines whether tasks should be queued before executing the tasks.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"ENABLED",
							"DISABLED",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: TransferMode
				"transfer_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that determines whether DataSync transfers only the data and metadata that differ between the source and the destination location, or whether DataSync transfers all the content from the source, without comparing to the destination location.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"CHANGED",
							"ALL",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Uid
				"uid": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The user ID (UID) of the file's owner.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"NONE",
							"INT_VALUE",
							"NAME",
							"BOTH",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: VerifyMode
				"verify_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A value that determines whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"POINT_IN_TIME_CONSISTENT",
							"ONLY_FILES_TRANSFERRED",
							"NONE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Represents the options that are available to control the behavior of a StartTaskExecution operation.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Schedule
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Specifies the schedule you want your task to use for repeated executions.",
		//	  "properties": {
		//	    "ScheduleExpression": {
		//	      "description": "A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location",
		//	      "maxLength": 256,
		//	      "pattern": "^[a-zA-Z0-9\\ \\_\\*\\?\\,\\|\\^\\-\\/\\#\\s\\(\\)\\+]*$",
		//	      "type": "string"
		//	    },
		//	    "Status": {
		//	      "description": "Specifies status of a schedule.",
		//	      "enum": [
		//	        "ENABLED",
		//	        "DISABLED"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"schedule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ScheduleExpression
				"schedule_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "A cron expression that specifies when AWS DataSync initiates a scheduled transfer from a source to a destination location",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthAtMost(256),
						stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9\\ \\_\\*\\?\\,\\|\\^\\-\\/\\#\\s\\(\\)\\+]*$"), ""),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Status
				"status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies status of a schedule.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"ENABLED",
							"DISABLED",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Specifies the schedule you want your task to use for repeated executions.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SourceLocationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the source location for the task.",
		//	  "maxLength": 128,
		//	  "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]+:[0-9]{12}:location/loc-[0-9a-z]{17}$",
		//	  "type": "string"
		//	}
		"source_location_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the source location for the task.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthAtMost(128),
				stringvalidator.RegexMatches(regexp.MustCompile("^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]+:[0-9]{12}:location/loc-[0-9a-z]{17}$"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: SourceNetworkInterfaceArns
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Resource Names (ARNs) of the source ENIs (Elastic Network Interfaces) that were created for your subnet.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "pattern": "^arn:aws[\\-a-z]{0,}:ec2:[a-z\\-0-9]*:[0-9]{12}:network-interface/eni-[0-9a-f]+$",
		//	    "type": "string"
		//	  },
		//	  "maxItems": 128,
		//	  "type": "array"
		//	}
		"source_network_interface_arns": schema.ListAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The Amazon Resource Names (ARNs) of the source ENIs (Elastic Network Interfaces) that were created for your subnet.",
			Computed:    true,
			PlanModifiers: []planmodifier.List{ /*START PLAN MODIFIERS*/
				generic.Multiset(),
				listplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the task that was described.",
		//	  "enum": [
		//	    "AVAILABLE",
		//	    "CREATING",
		//	    "QUEUED",
		//	    "RUNNING",
		//	    "UNAVAILABLE"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the task that was described.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key for an AWS resource tag.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9\\s+=._:/-]+$",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for an AWS resource tag.",
		//	        "maxLength": 256,
		//	        "minLength": 1,
		//	        "pattern": "^[a-zA-Z0-9\\s+=._:@/-]+$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key for an AWS resource tag.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 256),
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9\\s+=._:/-]+$"), ""),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for an AWS resource tag.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 256),
							stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9\\s+=._:@/-]+$"), ""),
							fwvalidators.NotNullString(),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.Set{ /*START VALIDATORS*/
				setvalidator.SizeAtMost(50),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.Set{ /*START PLAN MODIFIERS*/
				setplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TaskArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the task.",
		//	  "maxLength": 128,
		//	  "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):datasync:[a-z\\-0-9]*:[0-9]{12}:task/task-[0-9a-f]{17}$",
		//	  "type": "string"
		//	}
		"task_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the task.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TaskMode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the task mode for the task.",
		//	  "enum": [
		//	    "BASIC",
		//	    "ENHANCED"
		//	  ],
		//	  "type": "string"
		//	}
		"task_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the task mode for the task.",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"BASIC",
					"ENHANCED",
				),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: TaskReportConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Specifies how you want to configure a task report, which provides detailed information about for your Datasync transfer.",
		//	  "properties": {
		//	    "Destination": {
		//	      "additionalProperties": false,
		//	      "description": "Specifies where DataSync uploads your task report.",
		//	      "properties": {
		//	        "S3": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the Amazon S3 bucket where DataSync uploads your task report.",
		//	          "properties": {
		//	            "BucketAccessRoleArn": {
		//	              "description": "Specifies the Amazon Resource Name (ARN) of the IAM policy that allows Datasync to upload a task report to your S3 bucket.",
		//	              "maxLength": 2048,
		//	              "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):iam::[0-9]{12}:role/.*$",
		//	              "type": "string"
		//	            },
		//	            "S3BucketArn": {
		//	              "description": "Specifies the ARN of the S3 bucket where Datasync uploads your report.",
		//	              "maxLength": 156,
		//	              "pattern": "^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):(s3|s3-outposts):[a-z\\-0-9]*:[0-9]*:.*$",
		//	              "type": "string"
		//	            },
		//	            "Subdirectory": {
		//	              "description": "Specifies a bucket prefix for your report.",
		//	              "maxLength": 4096,
		//	              "pattern": "^[a-zA-Z0-9_\\-\\+\\./\\(\\)\\p{Zs}]*$",
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ObjectVersionIds": {
		//	      "description": "Specifies whether your task report includes the new version of each object transferred into an S3 bucket, this only applies if you enable versioning on your bucket.",
		//	      "enum": [
		//	        "INCLUDE",
		//	        "NONE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "OutputType": {
		//	      "description": "Specifies the type of task report that you want.",
		//	      "enum": [
		//	        "SUMMARY_ONLY",
		//	        "STANDARD"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "Overrides": {
		//	      "additionalProperties": false,
		//	      "description": "Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that Datasync attempted to delete in your destination location.",
		//	      "properties": {
		//	        "Deleted": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the level of reporting for the files, objects, and directories that Datasync attempted to delete in your destination location. This only applies if you configure your task to delete data in the destination that isn't in the source.",
		//	          "properties": {
		//	            "ReportLevel": {
		//	              "description": "Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.",
		//	              "enum": [
		//	                "ERRORS_ONLY",
		//	                "SUCCESSES_AND_ERRORS"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Skipped": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the level of reporting for the files, objects, and directories that Datasync attempted to skip during your transfer.",
		//	          "properties": {
		//	            "ReportLevel": {
		//	              "description": "Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.",
		//	              "enum": [
		//	                "ERRORS_ONLY",
		//	                "SUCCESSES_AND_ERRORS"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Transferred": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the level of reporting for the files, objects, and directories that Datasync attempted to transfer.",
		//	          "properties": {
		//	            "ReportLevel": {
		//	              "description": "Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.",
		//	              "enum": [
		//	                "ERRORS_ONLY",
		//	                "SUCCESSES_AND_ERRORS"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        },
		//	        "Verified": {
		//	          "additionalProperties": false,
		//	          "description": "Specifies the level of reporting for the files, objects, and directories that Datasync attempted to verify at the end of your transfer. This only applies if you configure your task to verify data during and after the transfer (which Datasync does by default)",
		//	          "properties": {
		//	            "ReportLevel": {
		//	              "description": "Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.",
		//	              "enum": [
		//	                "ERRORS_ONLY",
		//	                "SUCCESSES_AND_ERRORS"
		//	              ],
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ReportLevel": {
		//	      "description": "Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.",
		//	      "enum": [
		//	        "ERRORS_ONLY",
		//	        "SUCCESSES_AND_ERRORS"
		//	      ],
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "Destination",
		//	    "OutputType"
		//	  ],
		//	  "type": "object"
		//	}
		"task_report_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Destination
				"destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: S3
						"s3": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: BucketAccessRoleArn
								"bucket_access_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies the Amazon Resource Name (ARN) of the IAM policy that allows Datasync to upload a task report to your S3 bucket.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(2048),
										stringvalidator.RegexMatches(regexp.MustCompile("^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):iam::[0-9]{12}:role/.*$"), ""),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: S3BucketArn
								"s3_bucket_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies the ARN of the S3 bucket where Datasync uploads your report.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(156),
										stringvalidator.RegexMatches(regexp.MustCompile("^arn:(aws|aws-cn|aws-us-gov|aws-iso|aws-iso-b):(s3|s3-outposts):[a-z\\-0-9]*:[0-9]*:.*$"), ""),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
								// Property: Subdirectory
								"subdirectory": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies a bucket prefix for your report.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.LengthAtMost(4096),
										stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\-\\+\\./\\(\\)\\p{Zs}]*$"), ""),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Specifies the Amazon S3 bucket where DataSync uploads your task report.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Specifies where DataSync uploads your task report.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.Object{ /*START VALIDATORS*/
						fwvalidators.NotNullObject(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ObjectVersionIds
				"object_version_ids": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies whether your task report includes the new version of each object transferred into an S3 bucket, this only applies if you enable versioning on your bucket.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"INCLUDE",
							"NONE",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: OutputType
				"output_type": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies the type of task report that you want.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"SUMMARY_ONLY",
							"STANDARD",
						),
						fwvalidators.NotNullString(),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: Overrides
				"overrides": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Deleted
						"deleted": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ReportLevel
								"report_level": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"ERRORS_ONLY",
											"SUCCESSES_AND_ERRORS",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Specifies the level of reporting for the files, objects, and directories that Datasync attempted to delete in your destination location. This only applies if you configure your task to delete data in the destination that isn't in the source.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Skipped
						"skipped": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ReportLevel
								"report_level": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"ERRORS_ONLY",
											"SUCCESSES_AND_ERRORS",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Specifies the level of reporting for the files, objects, and directories that Datasync attempted to skip during your transfer.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Transferred
						"transferred": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ReportLevel
								"report_level": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"ERRORS_ONLY",
											"SUCCESSES_AND_ERRORS",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Specifies the level of reporting for the files, objects, and directories that Datasync attempted to transfer.",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
						// Property: Verified
						"verified": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: ReportLevel
								"report_level": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.",
									Optional:    true,
									Computed:    true,
									Validators: []validator.String{ /*START VALIDATORS*/
										stringvalidator.OneOf(
											"ERRORS_ONLY",
											"SUCCESSES_AND_ERRORS",
										),
									}, /*END VALIDATORS*/
									PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
										stringplanmodifier.UseStateForUnknown(),
									}, /*END PLAN MODIFIERS*/
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Specifies the level of reporting for the files, objects, and directories that Datasync attempted to verify at the end of your transfer. This only applies if you configure your task to verify data during and after the transfer (which Datasync does by default)",
							Optional:    true,
							Computed:    true,
							PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
								objectplanmodifier.UseStateForUnknown(),
							}, /*END PLAN MODIFIERS*/
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that Datasync attempted to delete in your destination location.",
					Optional:    true,
					Computed:    true,
					PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
						objectplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: ReportLevel
				"report_level": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.OneOf(
							"ERRORS_ONLY",
							"SUCCESSES_AND_ERRORS",
						),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Specifies how you want to configure a task report, which provides detailed information about for your Datasync transfer.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Object{ /*START PLAN MODIFIERS*/
				objectplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource schema for AWS::DataSync::Task.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::DataSync::Task").WithTerraformTypeName("awscc_datasync_task")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"action":                             "Action",
		"atime":                              "Atime",
		"bucket_access_role_arn":             "BucketAccessRoleArn",
		"bytes_per_second":                   "BytesPerSecond",
		"cloudwatch_log_group_arn":           "CloudWatchLogGroupArn",
		"deleted":                            "Deleted",
		"destination":                        "Destination",
		"destination_location_arn":           "DestinationLocationArn",
		"destination_network_interface_arns": "DestinationNetworkInterfaceArns",
		"excludes":                           "Excludes",
		"filter_type":                        "FilterType",
		"format":                             "Format",
		"gid":                                "Gid",
		"includes":                           "Includes",
		"key":                                "Key",
		"log_level":                          "LogLevel",
		"manifest_config":                    "ManifestConfig",
		"manifest_object_path":               "ManifestObjectPath",
		"manifest_object_version_id":         "ManifestObjectVersionId",
		"mtime":                              "Mtime",
		"name":                               "Name",
		"object_tags":                        "ObjectTags",
		"object_version_ids":                 "ObjectVersionIds",
		"options":                            "Options",
		"output_type":                        "OutputType",
		"overrides":                          "Overrides",
		"overwrite_mode":                     "OverwriteMode",
		"posix_permissions":                  "PosixPermissions",
		"preserve_deleted_files":             "PreserveDeletedFiles",
		"preserve_devices":                   "PreserveDevices",
		"report_level":                       "ReportLevel",
		"s3":                                 "S3",
		"s3_bucket_arn":                      "S3BucketArn",
		"schedule":                           "Schedule",
		"schedule_expression":                "ScheduleExpression",
		"security_descriptor_copy_flags":     "SecurityDescriptorCopyFlags",
		"skipped":                            "Skipped",
		"source":                             "Source",
		"source_location_arn":                "SourceLocationArn",
		"source_network_interface_arns":      "SourceNetworkInterfaceArns",
		"status":                             "Status",
		"subdirectory":                       "Subdirectory",
		"tags":                               "Tags",
		"task_arn":                           "TaskArn",
		"task_mode":                          "TaskMode",
		"task_queueing":                      "TaskQueueing",
		"task_report_config":                 "TaskReportConfig",
		"transfer_mode":                      "TransferMode",
		"transferred":                        "Transferred",
		"uid":                                "Uid",
		"value":                              "Value",
		"verified":                           "Verified",
		"verify_mode":                        "VerifyMode",
	})

	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
