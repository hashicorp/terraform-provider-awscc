// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package cloudtrail

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_cloudtrail_dashboard", dashboardDataSource)
}

// dashboardDataSource returns the Terraform awscc_cloudtrail_dashboard data source.
// This Terraform data source corresponds to the CloudFormation AWS::CloudTrail::Dashboard resource.
func dashboardDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreatedTimestamp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The timestamp of the dashboard creation.",
		//	  "type": "string"
		//	}
		"created_timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The timestamp of the dashboard creation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DashboardArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the dashboard.",
		//	  "pattern": "^[a-zA-Z0-9._/\\-:]+$",
		//	  "type": "string"
		//	}
		"dashboard_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the dashboard.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the dashboard.",
		//	  "pattern": "^[a-zA-Z0-9_\\-]+$",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the dashboard.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RefreshSchedule
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configures the automatic refresh schedule for the dashboard. Includes the frequency unit (DAYS or HOURS) and value, as well as the status (ENABLED or DISABLED) of the refresh schedule.",
		//	  "properties": {
		//	    "Frequency": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "Unit": {
		//	          "description": "The frequency unit. Supported values are HOURS and DAYS.",
		//	          "enum": [
		//	            "HOURS",
		//	            "DAYS"
		//	          ],
		//	          "type": "string"
		//	        },
		//	        "Value": {
		//	          "description": "The frequency value.",
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "required": [
		//	        "Unit",
		//	        "Value"
		//	      ],
		//	      "type": "object"
		//	    },
		//	    "Status": {
		//	      "description": "The status of the schedule. Supported values are ENABLED and DISABLED.",
		//	      "enum": [
		//	        "ENABLED",
		//	        "DISABLED"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "TimeOfDay": {
		//	      "description": "StartTime of the automatic schedule refresh.",
		//	      "pattern": "^[0-9]{2}:[0-9]{2}",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"refresh_schedule": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Frequency
				"frequency": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: Unit
						"unit": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "The frequency unit. Supported values are HOURS and DAYS.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: Value
						"value": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Description: "The frequency value.",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Status
				"status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The status of the schedule. Supported values are ENABLED and DISABLED.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TimeOfDay
				"time_of_day": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "StartTime of the automatic schedule refresh.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configures the automatic refresh schedule for the dashboard. Includes the frequency unit (DAYS or HOURS) and value, as well as the status (ENABLED or DISABLED) of the refresh schedule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the dashboard. Values are CREATING, CREATED, UPDATING, UPDATED and DELETING.",
		//	  "enum": [
		//	    "CREATING",
		//	    "CREATED",
		//	    "UPDATING",
		//	    "UPDATED",
		//	    "DELETING"
		//	  ],
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the dashboard. Values are CREATING, CREATED, UPDATING, UPDATED and DELETING.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "An arbitrary set of tags (key-value pairs) for this dashboard.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Value",
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: TerminationProtectionEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether the dashboard is protected from termination.",
		//	  "type": "boolean"
		//	}
		"termination_protection_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether the dashboard is protected from termination.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Type
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the dashboard. Values are CUSTOM and MANAGED.",
		//	  "enum": [
		//	    "MANAGED",
		//	    "CUSTOM"
		//	  ],
		//	  "type": "string"
		//	}
		"type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the dashboard. Values are CUSTOM and MANAGED.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: UpdatedTimestamp
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The timestamp showing when the dashboard was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.",
		//	  "type": "string"
		//	}
		"updated_timestamp": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The timestamp showing when the dashboard was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Widgets
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "List of widgets on the dashboard",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The dashboard widget",
		//	    "properties": {
		//	      "QueryParameters": {
		//	        "description": "The placeholder keys in the QueryStatement. For example: $StartTime$, $EndTime$, $Period$.",
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "description": "The value of the QueryParameter. Possible values: $StartTime$, $EndTime$, $Period$.",
		//	          "maxLength": 1024,
		//	          "minLength": 1,
		//	          "pattern": ".*",
		//	          "type": "string"
		//	        },
		//	        "maxItems": 10,
		//	        "minItems": 1,
		//	        "type": "array",
		//	        "uniqueItems": false
		//	      },
		//	      "QueryStatement": {
		//	        "description": "The SQL query statement on one or more event data stores.",
		//	        "maxLength": 10000,
		//	        "minLength": 1,
		//	        "pattern": "(?s).*",
		//	        "type": "string"
		//	      },
		//	      "ViewProperties": {
		//	        "additionalProperties": false,
		//	        "description": "The view properties of the widget.",
		//	        "patternProperties": {
		//	          "": {
		//	            "maxLength": 128,
		//	            "minLength": 1,
		//	            "pattern": "^[a-zA-Z0-9._\\- ]+$",
		//	            "type": "string"
		//	          }
		//	        },
		//	        "type": "object"
		//	      }
		//	    },
		//	    "required": [
		//	      "QueryStatement"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"widgets": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: QueryParameters
					"query_parameters": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "The placeholder keys in the QueryStatement. For example: $StartTime$, $EndTime$, $Period$.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: QueryStatement
					"query_statement": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The SQL query statement on one or more event data stores.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ViewProperties
					"view_properties":   // Pattern: ""
					schema.MapAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "The view properties of the widget.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "List of widgets on the dashboard",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::CloudTrail::Dashboard",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CloudTrail::Dashboard").WithTerraformTypeName("awscc_cloudtrail_dashboard")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"created_timestamp":              "CreatedTimestamp",
		"dashboard_arn":                  "DashboardArn",
		"frequency":                      "Frequency",
		"key":                            "Key",
		"name":                           "Name",
		"query_parameters":               "QueryParameters",
		"query_statement":                "QueryStatement",
		"refresh_schedule":               "RefreshSchedule",
		"status":                         "Status",
		"tags":                           "Tags",
		"termination_protection_enabled": "TerminationProtectionEnabled",
		"time_of_day":                    "TimeOfDay",
		"type":                           "Type",
		"unit":                           "Unit",
		"updated_timestamp":              "UpdatedTimestamp",
		"value":                          "Value",
		"view_properties":                "ViewProperties",
		"widgets":                        "Widgets",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
