// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package notifications

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_notifications_notification_hub", notificationHubDataSource)
}

// notificationHubDataSource returns the Terraform awscc_notifications_notification_hub data source.
// This Terraform data source corresponds to the CloudFormation AWS::Notifications::NotificationHub resource.
func notificationHubDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: CreationTime
		// CloudFormation resource type schema:
		//
		//	{
		//	  "format": "date-time",
		//	  "type": "string"
		//	}
		"creation_time": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType: timetypes.RFC3339Type{},
			Computed:   true,
		}, /*END ATTRIBUTE*/
		// Property: NotificationHubStatusSummary
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "properties": {
		//	    "NotificationHubStatus": {
		//	      "enum": [
		//	        "ACTIVE",
		//	        "REGISTERING",
		//	        "DEREGISTERING",
		//	        "INACTIVE"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "NotificationHubStatusReason": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "required": [
		//	    "NotificationHubStatus",
		//	    "NotificationHubStatusReason"
		//	  ],
		//	  "type": "object"
		//	}
		"notification_hub_status_summary": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: NotificationHubStatus
				"notification_hub_status": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: NotificationHubStatusReason
				"notification_hub_status_reason": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Computed: true,
		}, /*END ATTRIBUTE*/
		// Property: Region
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Region that NotificationHub is present in.",
		//	  "maxLength": 25,
		//	  "minLength": 2,
		//	  "pattern": "^([a-z]{1,2})-([a-z]{1,15}-)+([0-9])$",
		//	  "type": "string"
		//	}
		"region": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Region that NotificationHub is present in.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Notifications::NotificationHub",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Notifications::NotificationHub").WithTerraformTypeName("awscc_notifications_notification_hub")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"creation_time":                   "CreationTime",
		"notification_hub_status":         "NotificationHubStatus",
		"notification_hub_status_reason":  "NotificationHubStatusReason",
		"notification_hub_status_summary": "NotificationHubStatusSummary",
		"region":                          "Region",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
