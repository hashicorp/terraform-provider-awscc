// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package rds

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_rds_db_proxy_target_group", dBProxyTargetGroupDataSourceType)
}

// dBProxyTargetGroupDataSourceType returns the Terraform awscc_rds_db_proxy_target_group data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::RDS::DBProxyTargetGroup resource type.
func dBProxyTargetGroupDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"connection_pool_configuration_info": {
			// Property: ConnectionPoolConfigurationInfo
			// CloudFormation resource type schema:
			// {
			//   "additionalProperties": false,
			//   "properties": {
			//     "ConnectionBorrowTimeout": {
			//       "description": "The number of seconds for a proxy to wait for a connection to become available in the connection pool.",
			//       "type": "integer"
			//     },
			//     "InitQuery": {
			//       "description": "One or more SQL statements for the proxy to run when opening each new database connection.",
			//       "type": "string"
			//     },
			//     "MaxConnectionsPercent": {
			//       "description": "The maximum size of the connection pool for each target in a target group.",
			//       "maximum": 100,
			//       "minimum": 0,
			//       "type": "integer"
			//     },
			//     "MaxIdleConnectionsPercent": {
			//       "description": "Controls how actively the proxy closes idle database connections in the connection pool.",
			//       "maximum": 100,
			//       "minimum": 0,
			//       "type": "integer"
			//     },
			//     "SessionPinningFilters": {
			//       "description": "Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection.",
			//       "insertionOrder": false,
			//       "items": {
			//         "type": "string"
			//       },
			//       "type": "array"
			//     }
			//   },
			//   "type": "object"
			// }
			Attributes: tfsdk.SingleNestedAttributes(
				map[string]tfsdk.Attribute{
					"connection_borrow_timeout": {
						// Property: ConnectionBorrowTimeout
						Description: "The number of seconds for a proxy to wait for a connection to become available in the connection pool.",
						Type:        types.NumberType,
						Computed:    true,
					},
					"init_query": {
						// Property: InitQuery
						Description: "One or more SQL statements for the proxy to run when opening each new database connection.",
						Type:        types.StringType,
						Computed:    true,
					},
					"max_connections_percent": {
						// Property: MaxConnectionsPercent
						Description: "The maximum size of the connection pool for each target in a target group.",
						Type:        types.NumberType,
						Computed:    true,
					},
					"max_idle_connections_percent": {
						// Property: MaxIdleConnectionsPercent
						Description: "Controls how actively the proxy closes idle database connections in the connection pool.",
						Type:        types.NumberType,
						Computed:    true,
					},
					"session_pinning_filters": {
						// Property: SessionPinningFilters
						Description: "Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection.",
						Type:        types.ListType{ElemType: types.StringType},
						Computed:    true,
					},
				},
			),
			Computed: true,
		},
		"db_cluster_identifiers": {
			// Property: DBClusterIdentifiers
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "type": "string"
			//   },
			//   "type": "array"
			// }
			Type:     types.ListType{ElemType: types.StringType},
			Computed: true,
		},
		"db_instance_identifiers": {
			// Property: DBInstanceIdentifiers
			// CloudFormation resource type schema:
			// {
			//   "insertionOrder": false,
			//   "items": {
			//     "type": "string"
			//   },
			//   "type": "array"
			// }
			Type:     types.ListType{ElemType: types.StringType},
			Computed: true,
		},
		"db_proxy_name": {
			// Property: DBProxyName
			// CloudFormation resource type schema:
			// {
			//   "description": "The identifier for the proxy.",
			//   "maxLength": 64,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "The identifier for the proxy.",
			Type:        types.StringType,
			Computed:    true,
		},
		"target_group_arn": {
			// Property: TargetGroupArn
			// CloudFormation resource type schema:
			// {
			//   "description": "The Amazon Resource Name (ARN) representing the target group.",
			//   "type": "string"
			// }
			Description: "The Amazon Resource Name (ARN) representing the target group.",
			Type:        types.StringType,
			Computed:    true,
		},
		"target_group_name": {
			// Property: TargetGroupName
			// CloudFormation resource type schema:
			// {
			//   "description": "The identifier for the DBProxyTargetGroup",
			//   "enum": [
			//     "default"
			//   ],
			//   "type": "string"
			// }
			Description: "The identifier for the DBProxyTargetGroup",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::RDS::DBProxyTargetGroup",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::RDS::DBProxyTargetGroup").WithTerraformTypeName("awscc_rds_db_proxy_target_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"connection_borrow_timeout":          "ConnectionBorrowTimeout",
		"connection_pool_configuration_info": "ConnectionPoolConfigurationInfo",
		"db_cluster_identifiers":             "DBClusterIdentifiers",
		"db_instance_identifiers":            "DBInstanceIdentifiers",
		"db_proxy_name":                      "DBProxyName",
		"init_query":                         "InitQuery",
		"max_connections_percent":            "MaxConnectionsPercent",
		"max_idle_connections_percent":       "MaxIdleConnectionsPercent",
		"session_pinning_filters":            "SessionPinningFilters",
		"target_group_arn":                   "TargetGroupArn",
		"target_group_name":                  "TargetGroupName",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_rds_db_proxy_target_group", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
