// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package rds

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_rds_db_shard_group", dBShardGroupDataSource)
}

// dBShardGroupDataSource returns the Terraform awscc_rds_db_shard_group data source.
// This Terraform data source corresponds to the CloudFormation AWS::RDS::DBShardGroup resource.
func dBShardGroupDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ComputeRedundancy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies whether to create standby instances for the DB shard group.",
		//	  "minimum": 0,
		//	  "type": "integer"
		//	}
		"compute_redundancy": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Specifies whether to create standby instances for the DB shard group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DBClusterIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the primary DB cluster for the DB shard group.",
		//	  "maxLength": 63,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"db_cluster_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the primary DB cluster for the DB shard group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DBShardGroupIdentifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the DB shard group.",
		//	  "maxLength": 63,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"db_shard_group_identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the DB shard group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DBShardGroupResourceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The Amazon Web Services Region-unique, immutable identifier for the DB shard group.",
		//	  "type": "string"
		//	}
		"db_shard_group_resource_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The Amazon Web Services Region-unique, immutable identifier for the DB shard group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Endpoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The connection endpoint for the DB shard group.",
		//	  "type": "string"
		//	}
		"endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The connection endpoint for the DB shard group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MaxACU
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The maximum capacity of the DB shard group in Aurora capacity units (ACUs).",
		//	  "type": "number"
		//	}
		"max_acu": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "The maximum capacity of the DB shard group in Aurora capacity units (ACUs).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MinACU
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The minimum capacity of the DB shard group in Aurora capacity units (ACUs).",
		//	  "type": "number"
		//	}
		"min_acu": schema.Float64Attribute{ /*START ATTRIBUTE*/
			Description: "The minimum capacity of the DB shard group in Aurora capacity units (ACUs).",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PubliclyAccessible
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether the DB shard group is publicly accessible.",
		//	  "type": "boolean"
		//	}
		"publicly_accessible": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether the DB shard group is publicly accessible.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::RDS::DBShardGroup",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::RDS::DBShardGroup").WithTerraformTypeName("awscc_rds_db_shard_group")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"compute_redundancy":         "ComputeRedundancy",
		"db_cluster_identifier":      "DBClusterIdentifier",
		"db_shard_group_identifier":  "DBShardGroupIdentifier",
		"db_shard_group_resource_id": "DBShardGroupResourceId",
		"endpoint":                   "Endpoint",
		"key":                        "Key",
		"max_acu":                    "MaxACU",
		"min_acu":                    "MinACU",
		"publicly_accessible":        "PubliclyAccessible",
		"tags":                       "Tags",
		"value":                      "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
