// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package apigatewayv2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_apigatewayv2_route_response", routeResponseDataSource)
}

// routeResponseDataSource returns the Terraform awscc_apigatewayv2_route_response data source.
// This Terraform data source corresponds to the CloudFormation AWS::ApiGatewayV2::RouteResponse resource.
func routeResponseDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApiId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The API identifier.",
		//	  "type": "string"
		//	}
		"api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The API identifier.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ModelSelectionExpression
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The model selection expression for the route response. Supported only for WebSocket APIs.",
		//	  "type": "string"
		//	}
		"model_selection_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The model selection expression for the route response. Supported only for WebSocket APIs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResponseModels
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The response models for the route response.",
		//	  "type": "object"
		//	}
		"response_models": schema.StringAttribute{ /*START ATTRIBUTE*/
			CustomType:  jsontypes.NormalizedType{},
			Description: "The response models for the route response.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResponseParameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The route response parameters.",
		//	  "patternProperties": {
		//	    "": {
		//	      "additionalProperties": false,
		//	      "description": "Specifies whether the parameter is required.",
		//	      "properties": {
		//	        "Required": {
		//	          "description": "Specifies whether the parameter is required.",
		//	          "type": "boolean"
		//	        }
		//	      },
		//	      "required": [
		//	        "Required"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  }
		//	}
		"response_parameters":     // Pattern: ""
		schema.MapNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Required
					"required": schema.BoolAttribute{ /*START ATTRIBUTE*/
						Description: "Specifies whether the parameter is required.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The route response parameters.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RouteId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The route ID.",
		//	  "type": "string"
		//	}
		"route_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The route ID.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RouteResponseId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"route_response_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RouteResponseKey
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The route response key.",
		//	  "type": "string"
		//	}
		"route_response_key": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The route response key.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ApiGatewayV2::RouteResponse",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ApiGatewayV2::RouteResponse").WithTerraformTypeName("awscc_apigatewayv2_route_response")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"api_id":                     "ApiId",
		"model_selection_expression": "ModelSelectionExpression",
		"required":                   "Required",
		"response_models":            "ResponseModels",
		"response_parameters":        "ResponseParameters",
		"route_id":                   "RouteId",
		"route_response_id":          "RouteResponseId",
		"route_response_key":         "RouteResponseKey",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
