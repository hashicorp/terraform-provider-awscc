// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package apigatewayv2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_apigatewayv2_integration", integrationDataSource)
}

// integrationDataSource returns the Terraform awscc_apigatewayv2_integration data source.
// This Terraform data source corresponds to the CloudFormation AWS::ApiGatewayV2::Integration resource.
func integrationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApiId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The API identifier.",
		//	  "type": "string"
		//	}
		"api_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The API identifier.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectionId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ID of the VPC link for a private integration. Supported only for HTTP APIs.",
		//	  "type": "string"
		//	}
		"connection_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ID of the VPC link for a private integration. Supported only for HTTP APIs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ConnectionType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.",
		//	  "type": "string"
		//	}
		"connection_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ContentHandlingStrategy
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT.",
		//	  "type": "string"
		//	}
		"content_handling_strategy": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CredentialsArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, don't specify this parameter.",
		//	  "type": "string"
		//	}
		"credentials_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, don't specify this parameter.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the integration.",
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the integration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IntegrationId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The integration ID.",
		//	  "type": "string"
		//	}
		"integration_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The integration ID.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IntegrationMethod
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the integration's HTTP method type.",
		//	  "type": "string"
		//	}
		"integration_method": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the integration's HTTP method type.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IntegrationSubtype
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke.",
		//	  "type": "string"
		//	}
		"integration_subtype": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IntegrationType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The integration type of an integration.",
		//	  "type": "string"
		//	}
		"integration_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The integration type of an integration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: IntegrationUri
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "For a Lambda integration, specify the URI of a Lambda function. For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.",
		//	  "type": "string"
		//	}
		"integration_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "For a Lambda integration, specify the URI of a Lambda function. For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PassthroughBehavior
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.",
		//	  "type": "string"
		//	}
		"passthrough_behavior": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PayloadFormatVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Specifies the format of the payload sent to an integration. Required for HTTP APIs. For HTTP APIs, supported values for Lambda proxy integrations are 1.0 and 2.0 For all other integrations, 1.0 is the only supported value.",
		//	  "type": "string"
		//	}
		"payload_format_version": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Specifies the format of the payload sent to an integration. Required for HTTP APIs. For HTTP APIs, supported values for Lambda proxy integrations are 1.0 and 2.0 For all other integrations, 1.0 is the only supported value.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RequestParameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A key-value map specifying parameters.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"request_parameters": // Pattern: ""
		schema.MapAttribute{  /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A key-value map specifying parameters.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RequestTemplates
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "A map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"request_templates": // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "A map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResponseParameters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Parameters that transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.",
		//	  "patternProperties": {
		//	    "": {
		//	      "additionalProperties": false,
		//	      "description": "map of response parameter lists",
		//	      "properties": {
		//	        "ResponseParameters": {
		//	          "description": "list of response parameters",
		//	          "items": {
		//	            "additionalProperties": false,
		//	            "description": "response parameter",
		//	            "properties": {
		//	              "Destination": {
		//	                "type": "string"
		//	              },
		//	              "Source": {
		//	                "type": "string"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"response_parameters":     // Pattern: ""
		schema.MapNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ResponseParameters
					"response_parameters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Destination
								"destination": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Source
								"source": schema.StringAttribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "list of response parameters",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Parameters that transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TemplateSelectionExpression
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The template selection expression for the integration. Supported only for WebSocket APIs.",
		//	  "type": "string"
		//	}
		"template_selection_expression": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The template selection expression for the integration. Supported only for WebSocket APIs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TimeoutInMillis
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Custom timeout between 50 and 29000 milliseconds for WebSocket APIs and between 50 and 30000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.",
		//	  "type": "integer"
		//	}
		"timeout_in_millis": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "Custom timeout between 50 and 29000 milliseconds for WebSocket APIs and between 50 and 30000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: TlsConfig
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.",
		//	  "properties": {
		//	    "ServerNameToVerify": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tls_config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ServerNameToVerify
				"server_name_to_verify": schema.StringAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ApiGatewayV2::Integration",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ApiGatewayV2::Integration").WithTerraformTypeName("awscc_apigatewayv2_integration")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"api_id":                        "ApiId",
		"connection_id":                 "ConnectionId",
		"connection_type":               "ConnectionType",
		"content_handling_strategy":     "ContentHandlingStrategy",
		"credentials_arn":               "CredentialsArn",
		"description":                   "Description",
		"destination":                   "Destination",
		"integration_id":                "IntegrationId",
		"integration_method":            "IntegrationMethod",
		"integration_subtype":           "IntegrationSubtype",
		"integration_type":              "IntegrationType",
		"integration_uri":               "IntegrationUri",
		"passthrough_behavior":          "PassthroughBehavior",
		"payload_format_version":        "PayloadFormatVersion",
		"request_parameters":            "RequestParameters",
		"request_templates":             "RequestTemplates",
		"response_parameters":           "ResponseParameters",
		"server_name_to_verify":         "ServerNameToVerify",
		"source":                        "Source",
		"template_selection_expression": "TemplateSelectionExpression",
		"timeout_in_millis":             "TimeoutInMillis",
		"tls_config":                    "TlsConfig",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
