// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package apigatewayv2

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_apigatewayv2_domain_name", domainNameDataSource)
}

// domainNameDataSource returns the Terraform awscc_apigatewayv2_domain_name data source.
// This Terraform data source corresponds to the CloudFormation AWS::ApiGatewayV2::DomainName resource.
func domainNameDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: DomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The custom domain name for your API in Amazon API Gateway. Uppercase letters and the underscore (``_``) character are not supported.",
		//	  "type": "string"
		//	}
		"domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The custom domain name for your API in Amazon API Gateway. Uppercase letters and the underscore (``_``) character are not supported.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainNameArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"domain_name_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: DomainNameConfigurations
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The domain name configurations.",
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The ``DomainNameConfiguration`` property type specifies the configuration for an API's domain name.\n  ``DomainNameConfiguration`` is a property of the [AWS::ApiGatewayV2::DomainName](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-domainname.html) resource.",
		//	    "properties": {
		//	      "CertificateArn": {
		//	        "description": "An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.",
		//	        "type": "string"
		//	      },
		//	      "CertificateName": {
		//	        "description": "The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.",
		//	        "type": "string"
		//	      },
		//	      "EndpointType": {
		//	        "description": "The endpoint type.",
		//	        "type": "string"
		//	      },
		//	      "IpAddressType": {
		//	        "description": "",
		//	        "type": "string"
		//	      },
		//	      "OwnershipVerificationCertificateArn": {
		//	        "description": "The Amazon resource name (ARN) for the public certificate issued by ACMlong. This ARN is used to validate custom domain ownership. It's required only if you configure mutual TLS and use either an ACM-imported or a private CA certificate ARN as the regionalCertificateArn.",
		//	        "type": "string"
		//	      },
		//	      "SecurityPolicy": {
		//	        "description": "The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are ``TLS_1_0`` and ``TLS_1_2``.",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"domain_name_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: CertificateArn
					"certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: CertificateName
					"certificate_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: EndpointType
					"endpoint_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The endpoint type.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: IpAddressType
					"ip_address_type": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: OwnershipVerificationCertificateArn
					"ownership_verification_certificate_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The Amazon resource name (ARN) for the public certificate issued by ACMlong. This ARN is used to validate custom domain ownership. It's required only if you configure mutual TLS and use either an ACM-imported or a private CA certificate ARN as the regionalCertificateArn.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: SecurityPolicy
					"security_policy": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are ``TLS_1_0`` and ``TLS_1_2``.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The domain name configurations.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MutualTlsAuthentication
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The mutual TLS authentication configuration for a custom domain name.",
		//	  "properties": {
		//	    "TruststoreUri": {
		//	      "description": "An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, ``s3://bucket-name/key-name``. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.",
		//	      "type": "string"
		//	    },
		//	    "TruststoreVersion": {
		//	      "description": "The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"mutual_tls_authentication": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: TruststoreUri
				"truststore_uri": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, ``s3://bucket-name/key-name``. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TruststoreVersion
				"truststore_version": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The mutual TLS authentication configuration for a custom domain name.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RegionalDomainName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"regional_domain_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RegionalHostedZoneId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "",
		//	  "type": "string"
		//	}
		"regional_hosted_zone_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoutingMode
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": "API_MAPPING_ONLY",
		//	  "description": "",
		//	  "enum": [
		//	    "API_MAPPING_ONLY",
		//	    "ROUTING_RULE_THEN_API_MAPPING",
		//	    "ROUTING_RULE_ONLY"
		//	  ],
		//	  "type": "string"
		//	}
		"routing_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The collection of tags associated with a domain name.",
		//	  "patternProperties": {
		//	    "": {
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"tags":              // Pattern: ""
		schema.MapAttribute{ /*START ATTRIBUTE*/
			ElementType: types.StringType,
			Description: "The collection of tags associated with a domain name.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ApiGatewayV2::DomainName",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ApiGatewayV2::DomainName").WithTerraformTypeName("awscc_apigatewayv2_domain_name")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"certificate_arn":                        "CertificateArn",
		"certificate_name":                       "CertificateName",
		"domain_name":                            "DomainName",
		"domain_name_arn":                        "DomainNameArn",
		"domain_name_configurations":             "DomainNameConfigurations",
		"endpoint_type":                          "EndpointType",
		"ip_address_type":                        "IpAddressType",
		"mutual_tls_authentication":              "MutualTlsAuthentication",
		"ownership_verification_certificate_arn": "OwnershipVerificationCertificateArn",
		"regional_domain_name":                   "RegionalDomainName",
		"regional_hosted_zone_id":                "RegionalHostedZoneId",
		"routing_mode":                           "RoutingMode",
		"security_policy":                        "SecurityPolicy",
		"tags":                                   "Tags",
		"truststore_uri":                         "TruststoreUri",
		"truststore_version":                     "TruststoreVersion",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
