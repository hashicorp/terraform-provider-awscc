// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package aps

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_aps_workspace", workspaceDataSource)
}

// workspaceDataSource returns the Terraform awscc_aps_workspace data source.
// This Terraform data source corresponds to the CloudFormation AWS::APS::Workspace resource.
func workspaceDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: AlertManagerDefinition
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AMP Workspace alert manager definition data",
		//	  "type": "string"
		//	}
		"alert_manager_definition": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AMP Workspace alert manager definition data",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Alias
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "AMP Workspace alias.",
		//	  "maxLength": 100,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"alias": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "AMP Workspace alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Workspace arn.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "pattern": "^arn:(aws|aws-us-gov|aws-cn):aps:[a-z0-9-]+:[0-9]+:workspace/[a-zA-Z0-9-]+$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Workspace arn.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: KmsKeyArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "KMS Key ARN used to encrypt and decrypt AMP workspace data.",
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "pattern": "^arn:aws[-a-z]*:kms:[-a-z0-9]+:[0-9]{12}:key/.+$",
		//	  "type": "string"
		//	}
		"kms_key_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "KMS Key ARN used to encrypt and decrypt AMP workspace data.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LoggingConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Logging configuration",
		//	  "properties": {
		//	    "LogGroupArn": {
		//	      "description": "CloudWatch log group ARN",
		//	      "maxLength": 512,
		//	      "minLength": 0,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"logging_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: LogGroupArn
				"log_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "CloudWatch log group ARN",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Logging configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: PrometheusEndpoint
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "AMP Workspace prometheus endpoint",
		//	  "type": "string"
		//	}
		"prometheus_endpoint": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "AMP Workspace prometheus endpoint",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: QueryLoggingConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Query logging configuration",
		//	  "properties": {
		//	    "Destinations": {
		//	      "description": "The destinations configuration for query logging",
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Destinations for query logging",
		//	        "properties": {
		//	          "CloudWatchLogs": {
		//	            "additionalProperties": false,
		//	            "description": "Represents a cloudwatch logs destination for query logging",
		//	            "properties": {
		//	              "LogGroupArn": {
		//	                "description": "The ARN of the CloudWatch Logs log group",
		//	                "maxLength": 512,
		//	                "minLength": 0,
		//	                "type": "string"
		//	              }
		//	            },
		//	            "required": [
		//	              "LogGroupArn"
		//	            ],
		//	            "type": "object"
		//	          },
		//	          "Filters": {
		//	            "additionalProperties": false,
		//	            "description": "Filters for logging",
		//	            "properties": {
		//	              "QspThreshold": {
		//	                "description": "Query logs with QSP above this limit are vended",
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "required": [
		//	              "QspThreshold"
		//	            ],
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "CloudWatchLogs",
		//	          "Filters"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "maxItems": 1,
		//	      "minItems": 1,
		//	      "type": "array"
		//	    }
		//	  },
		//	  "required": [
		//	    "Destinations"
		//	  ],
		//	  "type": "object"
		//	}
		"query_logging_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: Destinations
				"destinations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: CloudWatchLogs
							"cloudwatch_logs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: LogGroupArn
									"log_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
										Description: "The ARN of the CloudWatch Logs log group",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Represents a cloudwatch logs destination for query logging",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Filters
							"filters": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: QspThreshold
									"qsp_threshold": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "Query logs with QSP above this limit are vended",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Filters for logging",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "The destinations configuration for query logging",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Query logging configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: WorkspaceConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Workspace configuration",
		//	  "properties": {
		//	    "LimitsPerLabelSets": {
		//	      "description": "An array of label set and associated limits",
		//	      "insertionOrder": false,
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "description": "Label set and its associated limits",
		//	        "properties": {
		//	          "LabelSet": {
		//	            "description": "An array of series labels",
		//	            "insertionOrder": false,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "Series label",
		//	              "properties": {
		//	                "Name": {
		//	                  "description": "Name of the label",
		//	                  "minLength": 1,
		//	                  "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$",
		//	                  "type": "string"
		//	                },
		//	                "Value": {
		//	                  "description": "Value of the label",
		//	                  "minLength": 1,
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "Name",
		//	                "Value"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "minItems": 0,
		//	            "type": "array",
		//	            "uniqueItems": true
		//	          },
		//	          "Limits": {
		//	            "additionalProperties": false,
		//	            "description": "Limits that can be applied to a label set",
		//	            "properties": {
		//	              "MaxSeries": {
		//	                "description": "The maximum number of active series that can be ingested for this label set",
		//	                "minimum": 0,
		//	                "type": "integer"
		//	              }
		//	            },
		//	            "type": "object"
		//	          }
		//	        },
		//	        "required": [
		//	          "Limits",
		//	          "LabelSet"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "minItems": 0,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    },
		//	    "RetentionPeriodInDays": {
		//	      "description": "How many days that metrics are retained in the workspace",
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"workspace_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: LimitsPerLabelSets
				"limits_per_label_sets": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: LabelSet
							"label_set": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: Name
										"name": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Name of the label",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: Value
										"value": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "Value of the label",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "An array of series labels",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: Limits
							"limits": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: MaxSeries
									"max_series": schema.Int64Attribute{ /*START ATTRIBUTE*/
										Description: "The maximum number of active series that can be ingested for this label set",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "Limits that can be applied to a label set",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Description: "An array of label set and associated limits",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RetentionPeriodInDays
				"retention_period_in_days": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "How many days that metrics are retained in the workspace",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Workspace configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: WorkspaceId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Required to identify a specific APS Workspace.",
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "pattern": "^[a-zA-Z0-9][a-zA-Z0-9_-]{1,99}$",
		//	  "type": "string"
		//	}
		"workspace_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Required to identify a specific APS Workspace.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::APS::Workspace",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::APS::Workspace").WithTerraformTypeName("awscc_aps_workspace")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"alert_manager_definition":    "AlertManagerDefinition",
		"alias":                       "Alias",
		"arn":                         "Arn",
		"cloudwatch_logs":             "CloudWatchLogs",
		"destinations":                "Destinations",
		"filters":                     "Filters",
		"key":                         "Key",
		"kms_key_arn":                 "KmsKeyArn",
		"label_set":                   "LabelSet",
		"limits":                      "Limits",
		"limits_per_label_sets":       "LimitsPerLabelSets",
		"log_group_arn":               "LogGroupArn",
		"logging_configuration":       "LoggingConfiguration",
		"max_series":                  "MaxSeries",
		"name":                        "Name",
		"prometheus_endpoint":         "PrometheusEndpoint",
		"qsp_threshold":               "QspThreshold",
		"query_logging_configuration": "QueryLoggingConfiguration",
		"retention_period_in_days":    "RetentionPeriodInDays",
		"tags":                        "Tags",
		"value":                       "Value",
		"workspace_configuration":     "WorkspaceConfiguration",
		"workspace_id":                "WorkspaceId",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
