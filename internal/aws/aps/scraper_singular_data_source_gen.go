// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package aps

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_aps_scraper", scraperDataSource)
}

// scraperDataSource returns the Terraform awscc_aps_scraper data source.
// This Terraform data source corresponds to the CloudFormation AWS::APS::Scraper resource.
func scraperDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Alias
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Scraper alias.",
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "pattern": "^[0-9A-Za-z][-.0-9A-Z_a-z]*$",
		//	  "type": "string"
		//	}
		"alias": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Scraper alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Scraper ARN.",
		//	  "pattern": "^arn:(aws|aws-us-gov|aws-cn):aps:[a-z0-9-]+:[0-9]+:scraper/s-[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Scraper ARN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Destination
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Scraper metrics destination",
		//	  "oneOf": [
		//	    {
		//	      "required": [
		//	        "AmpConfiguration"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "AmpConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Configuration for Amazon Managed Prometheus metrics destination",
		//	      "properties": {
		//	        "WorkspaceArn": {
		//	          "description": "ARN of an Amazon Managed Prometheus workspace",
		//	          "pattern": "^arn:aws[-a-z]*:aps:[-a-z0-9]+:[0-9]{12}:workspace/.+$",
		//	          "type": "string"
		//	        }
		//	      },
		//	      "required": [
		//	        "WorkspaceArn"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AmpConfiguration
				"amp_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: WorkspaceArn
						"workspace_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "ARN of an Amazon Managed Prometheus workspace",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Configuration for Amazon Managed Prometheus metrics destination",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Scraper metrics destination",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoleArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "IAM role ARN for the scraper.",
		//	  "maxLength": 2048,
		//	  "minLength": 20,
		//	  "pattern": "^arn:(aws|aws-us-gov|aws-cn):iam::[0-9]{12}:role/[a-zA-Z0-9-]+$",
		//	  "type": "string"
		//	}
		"role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "IAM role ARN for the scraper.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RoleConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Role configuration",
		//	  "properties": {
		//	    "SourceRoleArn": {
		//	      "description": "IAM Role in source account",
		//	      "type": "string"
		//	    },
		//	    "TargetRoleArn": {
		//	      "description": "IAM Role in the target account",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"role_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: SourceRoleArn
				"source_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "IAM Role in source account",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: TargetRoleArn
				"target_role_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "IAM Role in the target account",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Role configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ScrapeConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Scraper configuration",
		//	  "oneOf": [
		//	    {
		//	      "required": [
		//	        "ConfigurationBlob"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "ConfigurationBlob": {
		//	      "description": "Prometheus compatible scrape configuration in base64 encoded blob format",
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"scrape_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: ConfigurationBlob
				"configuration_blob": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "Prometheus compatible scrape configuration in base64 encoded blob format",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Scraper configuration",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ScraperId
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Required to identify a specific scraper.",
		//	  "maxLength": 64,
		//	  "minLength": 1,
		//	  "pattern": "^s-[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$",
		//	  "type": "string"
		//	}
		"scraper_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Required to identify a specific scraper.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ScraperLoggingConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Configuration for scraper logging",
		//	  "properties": {
		//	    "LoggingDestination": {
		//	      "additionalProperties": false,
		//	      "description": "Destination for scraper logging",
		//	      "properties": {
		//	        "CloudWatchLogs": {
		//	          "additionalProperties": false,
		//	          "description": "Represents a cloudwatch logs destination for scraper logging",
		//	          "properties": {
		//	            "LogGroupArn": {
		//	              "description": "ARN of the CloudWatch log group",
		//	              "maxLength": 512,
		//	              "minLength": 0,
		//	              "type": "string"
		//	            }
		//	          },
		//	          "type": "object"
		//	        }
		//	      },
		//	      "type": "object"
		//	    },
		//	    "ScraperComponents": {
		//	      "items": {
		//	        "additionalProperties": false,
		//	        "properties": {
		//	          "Config": {
		//	            "additionalProperties": false,
		//	            "properties": {
		//	              "Options": {
		//	                "additionalProperties": false,
		//	                "patternProperties": {
		//	                  "": {
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "Type": {
		//	            "description": "Type of scraper component",
		//	            "enum": [
		//	              "SERVICE_DISCOVERY",
		//	              "COLLECTOR",
		//	              "EXPORTER"
		//	            ],
		//	            "type": "string"
		//	          }
		//	        },
		//	        "required": [
		//	          "Type"
		//	        ],
		//	        "type": "object"
		//	      },
		//	      "minItems": 1,
		//	      "type": "array",
		//	      "uniqueItems": true
		//	    }
		//	  },
		//	  "required": [
		//	    "ScraperComponents",
		//	    "LoggingDestination"
		//	  ],
		//	  "type": "object"
		//	}
		"scraper_logging_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: LoggingDestination
				"logging_destination": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: CloudWatchLogs
						"cloudwatch_logs": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: LogGroupArn
								"log_group_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "ARN of the CloudWatch log group",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Description: "Represents a cloudwatch logs destination for scraper logging",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Destination for scraper logging",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: ScraperComponents
				"scraper_components": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
					NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: Config
							"config": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: Options
									"options":           // Pattern: ""
									schema.MapAttribute{ /*START ATTRIBUTE*/
										ElementType: types.StringType,
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Computed: true,
							}, /*END ATTRIBUTE*/
							// Property: Type
							"type": schema.StringAttribute{ /*START ATTRIBUTE*/
								Description: "Type of scraper component",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
					}, /*END NESTED OBJECT*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Configuration for scraper logging",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Source
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Scraper metrics source",
		//	  "oneOf": [
		//	    {
		//	      "required": [
		//	        "EksConfiguration"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "EksConfiguration": {
		//	      "additionalProperties": false,
		//	      "description": "Configuration for EKS metrics source",
		//	      "properties": {
		//	        "ClusterArn": {
		//	          "description": "ARN of an EKS cluster",
		//	          "pattern": "^arn:aws[-a-z]*:eks:[-a-z0-9]+:[0-9]{12}:cluster/.+$",
		//	          "type": "string"
		//	        },
		//	        "SecurityGroupIds": {
		//	          "description": "List of security group IDs",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "description": "ID of a security group",
		//	            "pattern": "^sg-[0-9a-z]+$",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        },
		//	        "SubnetIds": {
		//	          "description": "List of subnet IDs",
		//	          "insertionOrder": false,
		//	          "items": {
		//	            "description": "ID of a subnet",
		//	            "pattern": "^subnet-[0-9a-z]+$",
		//	            "type": "string"
		//	          },
		//	          "type": "array"
		//	        }
		//	      },
		//	      "required": [
		//	        "ClusterArn",
		//	        "SubnetIds"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"source": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: EksConfiguration
				"eks_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: ClusterArn
						"cluster_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
							Description: "ARN of an EKS cluster",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SecurityGroupIds
						"security_group_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "List of security group IDs",
							Computed:    true,
						}, /*END ATTRIBUTE*/
						// Property: SubnetIds
						"subnet_ids": schema.ListAttribute{ /*START ATTRIBUTE*/
							ElementType: types.StringType,
							Description: "List of subnet IDs",
							Computed:    true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Description: "Configuration for EKS metrics source",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Scraper metrics source",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::APS::Scraper",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::APS::Scraper").WithTerraformTypeName("awscc_aps_scraper")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"alias":                         "Alias",
		"amp_configuration":             "AmpConfiguration",
		"arn":                           "Arn",
		"cloudwatch_logs":               "CloudWatchLogs",
		"cluster_arn":                   "ClusterArn",
		"config":                        "Config",
		"configuration_blob":            "ConfigurationBlob",
		"destination":                   "Destination",
		"eks_configuration":             "EksConfiguration",
		"key":                           "Key",
		"log_group_arn":                 "LogGroupArn",
		"logging_destination":           "LoggingDestination",
		"options":                       "Options",
		"role_arn":                      "RoleArn",
		"role_configuration":            "RoleConfiguration",
		"scrape_configuration":          "ScrapeConfiguration",
		"scraper_components":            "ScraperComponents",
		"scraper_id":                    "ScraperId",
		"scraper_logging_configuration": "ScraperLoggingConfiguration",
		"security_group_ids":            "SecurityGroupIds",
		"source":                        "Source",
		"source_role_arn":               "SourceRoleArn",
		"subnet_ids":                    "SubnetIds",
		"tags":                          "Tags",
		"target_role_arn":               "TargetRoleArn",
		"type":                          "Type",
		"value":                         "Value",
		"workspace_arn":                 "WorkspaceArn",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
