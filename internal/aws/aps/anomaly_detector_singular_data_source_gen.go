// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package aps

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_aps_anomaly_detector", anomalyDetectorDataSource)
}

// anomalyDetectorDataSource returns the Terraform awscc_aps_anomaly_detector data source.
// This Terraform data source corresponds to the CloudFormation AWS::APS::AnomalyDetector resource.
func anomalyDetectorDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Alias
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AnomalyDetector alias.",
		//	  "maxLength": 128,
		//	  "minLength": 1,
		//	  "type": "string"
		//	}
		"alias": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AnomalyDetector alias.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The AnomalyDetector ARN.",
		//	  "pattern": "^arn:(aws|aws-us-gov|aws-cn):aps:[a-z0-9-]+:[0-9]+:anomalydetector/[a-zA-Z0-9-]+/[0-9A-Za-z][-.0-9A-Z_a-z]*$",
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The AnomalyDetector ARN.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Configuration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Determines the anomaly detector's algorithm and its configuration.",
		//	  "properties": {
		//	    "RandomCutForest": {
		//	      "additionalProperties": false,
		//	      "properties": {
		//	        "IgnoreNearExpectedFromAbove": {
		//	          "additionalProperties": false,
		//	          "oneOf": [
		//	            {
		//	              "required": [
		//	                "Amount"
		//	              ]
		//	            },
		//	            {
		//	              "required": [
		//	                "Ratio"
		//	              ]
		//	            }
		//	          ],
		//	          "properties": {
		//	            "Amount": {
		//	              "type": "number"
		//	            },
		//	            "Ratio": {
		//	              "type": "number"
		//	            }
		//	          }
		//	        },
		//	        "IgnoreNearExpectedFromBelow": {
		//	          "additionalProperties": false,
		//	          "oneOf": [
		//	            {
		//	              "required": [
		//	                "Amount"
		//	              ]
		//	            },
		//	            {
		//	              "required": [
		//	                "Ratio"
		//	              ]
		//	            }
		//	          ],
		//	          "properties": {
		//	            "Amount": {
		//	              "type": "number"
		//	            },
		//	            "Ratio": {
		//	              "type": "number"
		//	            }
		//	          }
		//	        },
		//	        "Query": {
		//	          "minLength": 1,
		//	          "type": "string"
		//	        },
		//	        "SampleSize": {
		//	          "default": 256,
		//	          "maximum": 1024,
		//	          "minimum": 256,
		//	          "type": "integer"
		//	        },
		//	        "ShingleSize": {
		//	          "default": 8,
		//	          "maximum": 1024,
		//	          "minimum": 2,
		//	          "type": "integer"
		//	        }
		//	      },
		//	      "required": [
		//	        "Query"
		//	      ],
		//	      "type": "object"
		//	    }
		//	  },
		//	  "required": [
		//	    "RandomCutForest"
		//	  ],
		//	  "type": "object"
		//	}
		"configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: RandomCutForest
				"random_cut_forest": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
					Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
						// Property: IgnoreNearExpectedFromAbove
						"ignore_near_expected_from_above": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Amount
								"amount": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Ratio
								"ratio": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: IgnoreNearExpectedFromBelow
						"ignore_near_expected_from_below": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Amount
								"amount": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
								// Property: Ratio
								"ratio": schema.Float64Attribute{ /*START ATTRIBUTE*/
									Computed: true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: Query
						"query": schema.StringAttribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: SampleSize
						"sample_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
						// Property: ShingleSize
						"shingle_size": schema.Int64Attribute{ /*START ATTRIBUTE*/
							Computed: true,
						}, /*END ATTRIBUTE*/
					}, /*END SCHEMA*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Determines the anomaly detector's algorithm and its configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: EvaluationIntervalInSeconds
		// CloudFormation resource type schema:
		//
		//	{
		//	  "default": 60,
		//	  "description": "The AnomalyDetector period of detection and metric generation.",
		//	  "type": "integer"
		//	}
		"evaluation_interval_in_seconds": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The AnomalyDetector period of detection and metric generation.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Labels
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to provide meta-data.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to provide meta-data and multi-dimensional data analysis for filtering and aggregation.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"labels": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to provide meta-data.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: MissingDataAction
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "The action to perform when running the expression returns no data.",
		//	  "oneOf": [
		//	    {
		//	      "required": [
		//	        "MarkAsAnomaly"
		//	      ]
		//	    },
		//	    {
		//	      "required": [
		//	        "Skip"
		//	      ]
		//	    }
		//	  ],
		//	  "properties": {
		//	    "MarkAsAnomaly": {
		//	      "type": "boolean"
		//	    },
		//	    "Skip": {
		//	      "type": "boolean"
		//	    }
		//	  }
		//	}
		"missing_data_action": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: MarkAsAnomaly
				"mark_as_anomaly": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
				// Property: Skip
				"skip": schema.BoolAttribute{ /*START ATTRIBUTE*/
					Computed: true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "The action to perform when running the expression returns no data.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "An array of key-value pairs to apply to this resource.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate a tag level security for the resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "An array of key-value pairs to apply to this resource.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Workspace
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Required to identify a specific APS Workspace associated with this Anomaly Detector.",
		//	  "pattern": "^arn:(aws|aws-us-gov|aws-cn):aps:[a-z0-9-]+:[0-9]+:workspace/[a-zA-Z0-9-]+$",
		//	  "type": "string"
		//	}
		"workspace": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Required to identify a specific APS Workspace associated with this Anomaly Detector.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::APS::AnomalyDetector",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::APS::AnomalyDetector").WithTerraformTypeName("awscc_aps_anomaly_detector")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"alias":                           "Alias",
		"amount":                          "Amount",
		"arn":                             "Arn",
		"configuration":                   "Configuration",
		"evaluation_interval_in_seconds":  "EvaluationIntervalInSeconds",
		"ignore_near_expected_from_above": "IgnoreNearExpectedFromAbove",
		"ignore_near_expected_from_below": "IgnoreNearExpectedFromBelow",
		"key":                             "Key",
		"labels":                          "Labels",
		"mark_as_anomaly":                 "MarkAsAnomaly",
		"missing_data_action":             "MissingDataAction",
		"query":                           "Query",
		"random_cut_forest":               "RandomCutForest",
		"ratio":                           "Ratio",
		"sample_size":                     "SampleSize",
		"shingle_size":                    "ShingleSize",
		"skip":                            "Skip",
		"tags":                            "Tags",
		"value":                           "Value",
		"workspace":                       "Workspace",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
