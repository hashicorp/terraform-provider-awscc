// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package codepipeline_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-awscc/internal/acctest"
)

func TestAccAWSCodePipelineCustomActionType_success(t *testing.T) {
	td := acctest.NewTestData(t, "AWS::CodePipeline::CustomActionType", "awscc_codepipeline_custom_action_type", "test")
	resourceName := td.ResourceName
	rName := td.RandomName()

	td.ResourceTest(t, []resource.TestStep{
		{
			Config: testAccAWSCodePipelineCustomActionTypeConfig(&td, rName),
			Check: resource.ComposeAggregateTestCheckFunc(
				td.CheckExistsInAWS(),
				resource.TestCheckResourceAttr(resourceName, "category", "Test"),
				resource.TestCheckResourceAttr(resourceName, "input_artifact_details.maximum_count", "5"),
				resource.TestCheckResourceAttr(resourceName, "input_artifact_details.minimum_count", "0"),
				resource.TestCheckResourceAttr(resourceName, "output_artifact_details.maximum_count", "4"),
				resource.TestCheckResourceAttr(resourceName, "output_artifact_details.minimum_count", "1"),
				resource.TestCheckResourceAttr(resourceName, "provider_name", rName),
				resource.TestCheckResourceAttr(resourceName, "version", "1"),
			),
		},
	})
}

func testAccAWSCodePipelineCustomActionTypeConfig(td *acctest.TestData, rName string) string {
	return fmt.Sprintf(`
resource %[1]q %[2]q {
  category = "Test"

  input_artifact_details = {
    maximum_count = 5
    minimum_count = 0
  }

  output_artifact_details = {
    maximum_count = 4
    minimum_count = 1
  }

  provider_name = %[3]q
  version       = "1"
}
`, td.TerraformResourceType, td.ResourceLabel, rName)
}
