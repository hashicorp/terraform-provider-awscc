// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package codepipeline

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_codepipeline_webhook", webhookResource)
}

// webhookResource returns the Terraform awscc_codepipeline_webhook resource.
// This Terraform resource corresponds to the CloudFormation AWS::CodePipeline::Webhook resource.
func webhookResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Authentication
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Supported options are GITHUB_HMAC, IP, and UNAUTHENTICATED.",
		//	  "enum": [
		//	    "GITHUB_HMAC",
		//	    "IP",
		//	    "UNAUTHENTICATED"
		//	  ],
		//	  "type": "string"
		//	}
		"authentication": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Supported options are GITHUB_HMAC, IP, and UNAUTHENTICATED.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.OneOf(
					"GITHUB_HMAC",
					"IP",
					"UNAUTHENTICATED",
				),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: AuthenticationConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Properties that configure the authentication applied to incoming webhook trigger requests",
		//	  "properties": {
		//	    "AllowedIPRange": {
		//	      "description": "The property used to configure acceptance of webhooks in an IP address range. For IP, only the AllowedIPRange property must be set. This property must be set to a valid CIDR range.",
		//	      "maxLength": 100,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    },
		//	    "SecretToken": {
		//	      "description": "The property used to configure GitHub authentication. For GITHUB_HMAC, only the SecretToken property must be set.",
		//	      "maxLength": 100,
		//	      "minLength": 1,
		//	      "type": "string"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"authentication_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: AllowedIPRange
				"allowed_ip_range": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The property used to configure acceptance of webhooks in an IP address range. For IP, only the AllowedIPRange property must be set. This property must be set to a valid CIDR range.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(1, 100),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
				// Property: SecretToken
				"secret_token": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The property used to configure GitHub authentication. For GITHUB_HMAC, only the SecretToken property must be set.",
					Optional:    true,
					Computed:    true,
					Validators: []validator.String{ /*START VALIDATORS*/
						stringvalidator.LengthBetween(1, 100),
					}, /*END VALIDATORS*/
					PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
						stringplanmodifier.UseStateForUnknown(),
					}, /*END PLAN MODIFIERS*/
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Properties that configure the authentication applied to incoming webhook trigger requests",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: Filters
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "A list of rules applied to the body/payload sent in the POST request to a webhook URL",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A list of rules applied to the body/payload sent in the POST request to a webhook URL. All defined rules must pass for the request to be accepted and the pipeline started.",
		//	    "properties": {
		//	      "JsonPath": {
		//	        "description": "A JsonPath expression that is applied to the body/payload of the webhook. The value selected by the JsonPath expression must match the value specified in the MatchEquals field. Otherwise, the request is ignored.",
		//	        "maxLength": 150,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "MatchEquals": {
		//	        "description": "The value selected by the JsonPath expression must match what is supplied in the MatchEquals field. Otherwise, the request is ignored.",
		//	        "maxLength": 150,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "JsonPath"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "type": "array",
		//	  "uniqueItems": false
		//	}
		"filters": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: JsonPath
					"json_path": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A JsonPath expression that is applied to the body/payload of the webhook. The value selected by the JsonPath expression must match the value specified in the MatchEquals field. Otherwise, the request is ignored.",
						Required:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 150),
						}, /*END VALIDATORS*/
					}, /*END ATTRIBUTE*/
					// Property: MatchEquals
					"match_equals": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value selected by the JsonPath expression must match what is supplied in the MatchEquals field. Otherwise, the request is ignored.",
						Optional:    true,
						Computed:    true,
						Validators: []validator.String{ /*START VALIDATORS*/
							stringvalidator.LengthBetween(1, 150),
						}, /*END VALIDATORS*/
						PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
							stringplanmodifier.UseStateForUnknown(),
						}, /*END PLAN MODIFIERS*/
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "A list of rules applied to the body/payload sent in the POST request to a webhook URL",
			Required:    true,
		}, /*END ATTRIBUTE*/
		// Property: Id
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "logical id of the webhook",
		//	  "type": "string"
		//	}
		"webhook_id": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "logical id of the webhook",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Name
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the webhook",
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "pattern": "[A-Za-z0-9.@\\-_]+",
		//	  "type": "string"
		//	}
		"name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the webhook",
			Optional:    true,
			Computed:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 100),
				stringvalidator.RegexMatches(regexp.MustCompile("[A-Za-z0-9.@\\-_]+"), ""),
			}, /*END VALIDATORS*/
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
				stringplanmodifier.RequiresReplaceIfConfigured(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: RegisterWithThirdParty
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Configures a connection between the webhook that was created and the external tool with events to be detected.",
		//	  "type": "boolean"
		//	}
		"register_with_third_party": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Configures a connection between the webhook that was created and the external tool with events to be detected.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Bool{ /*START PLAN MODIFIERS*/
				boolplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// RegisterWithThirdParty is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: TargetAction
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the action in a pipeline you want to connect to the webhook.",
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "pattern": "[A-Za-z0-9.@\\-_]+",
		//	  "type": "string"
		//	}
		"target_action": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the action in a pipeline you want to connect to the webhook.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 100),
				stringvalidator.RegexMatches(regexp.MustCompile("[A-Za-z0-9.@\\-_]+"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: TargetPipeline
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the pipeline you want to connect to the webhook.",
		//	  "maxLength": 100,
		//	  "minLength": 1,
		//	  "pattern": "[A-Za-z0-9.@\\-_]+",
		//	  "type": "string"
		//	}
		"target_pipeline": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the pipeline you want to connect to the webhook.",
			Required:    true,
			Validators: []validator.String{ /*START VALIDATORS*/
				stringvalidator.LengthBetween(1, 100),
				stringvalidator.RegexMatches(regexp.MustCompile("[A-Za-z0-9.@\\-_]+"), ""),
			}, /*END VALIDATORS*/
		}, /*END ATTRIBUTE*/
		// Property: TargetPipelineVersion
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The version number of the pipeline to be connected to the trigger request.",
		//	  "type": "integer"
		//	}
		"target_pipeline_version": schema.Int64Attribute{ /*START ATTRIBUTE*/
			Description: "The version number of the pipeline to be connected to the trigger request.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.Int64{ /*START PLAN MODIFIERS*/
				int64planmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
			// TargetPipelineVersion is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: Url
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The webhook URL generated by AWS CodePipeline",
		//	  "type": "string"
		//	}
		"url": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The webhook URL generated by AWS CodePipeline",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Resource Type definition for AWS::CodePipeline::Webhook",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::CodePipeline::Webhook").WithTerraformTypeName("awscc_codepipeline_webhook")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"allowed_ip_range":             "AllowedIPRange",
		"authentication":               "Authentication",
		"authentication_configuration": "AuthenticationConfiguration",
		"filters":                      "Filters",
		"json_path":                    "JsonPath",
		"match_equals":                 "MatchEquals",
		"name":                         "Name",
		"register_with_third_party":    "RegisterWithThirdParty",
		"secret_token":                 "SecretToken",
		"target_action":                "TargetAction",
		"target_pipeline":              "TargetPipeline",
		"target_pipeline_version":      "TargetPipelineVersion",
		"url":                          "Url",
		"webhook_id":                   "Id",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/TargetPipelineVersion",
		"/properties/RegisterWithThirdParty",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
