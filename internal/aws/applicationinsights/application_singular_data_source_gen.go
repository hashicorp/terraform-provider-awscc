// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package applicationinsights

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_applicationinsights_application", applicationDataSource)
}

// applicationDataSource returns the Terraform awscc_applicationinsights_application data source.
// This Terraform data source corresponds to the CloudFormation AWS::ApplicationInsights::Application resource.
func applicationDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: ApplicationARN
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The ARN of the ApplicationInsights application.",
		//	  "type": "string"
		//	}
		"application_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The ARN of the ApplicationInsights application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AttachMissingPermission
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "If set to true, the managed policies for SSM and CW will be attached to the instance roles if they are missing",
		//	  "type": "boolean"
		//	}
		"attach_missing_permission": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "If set to true, the managed policies for SSM and CW will be attached to the instance roles if they are missing",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: AutoConfigurationEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "If set to true, application will be configured with recommended monitoring configuration.",
		//	  "type": "boolean"
		//	}
		"auto_configuration_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "If set to true, application will be configured with recommended monitoring configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CWEMonitorEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Indicates whether Application Insights can listen to CloudWatch events for the application resources.",
		//	  "type": "boolean"
		//	}
		"cwe_monitor_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "Indicates whether Application Insights can listen to CloudWatch events for the application resources.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ComponentMonitoringSettings
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The monitoring settings of the components.",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The monitoring setting of the component.",
		//	    "oneOf": [
		//	      {
		//	        "required": [
		//	          "ComponentName"
		//	        ]
		//	      },
		//	      {
		//	        "required": [
		//	          "ComponentARN"
		//	        ]
		//	      }
		//	    ],
		//	    "properties": {
		//	      "ComponentARN": {
		//	        "description": "The ARN of the compnonent.",
		//	        "maxLength": 300,
		//	        "minLength": 20,
		//	        "pattern": "^arn:aws(-[\\w]+)*:[\\w\\d-]+:([\\w\\d-]*)?:[\\w\\d_-]*([:/].+)*$",
		//	        "type": "string"
		//	      },
		//	      "ComponentConfigurationMode": {
		//	        "description": "The component monitoring configuration mode.",
		//	        "enum": [
		//	          "DEFAULT",
		//	          "DEFAULT_WITH_OVERWRITE",
		//	          "CUSTOM"
		//	        ],
		//	        "type": "string"
		//	      },
		//	      "ComponentName": {
		//	        "description": "The name of the component.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "^[\\d\\w\\-_.+]*$",
		//	        "type": "string"
		//	      },
		//	      "CustomComponentConfiguration": {
		//	        "additionalProperties": false,
		//	        "description": "The monitoring configuration of the component.",
		//	        "properties": {
		//	          "ConfigurationDetails": {
		//	            "additionalProperties": false,
		//	            "description": "The configuration settings",
		//	            "properties": {
		//	              "AlarmMetrics": {
		//	                "description": "A list of metrics to monitor for the component.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "A metric to be monitored for the component.",
		//	                  "properties": {
		//	                    "AlarmMetricName": {
		//	                      "description": "The name of the metric to be monitored for the component.",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "AlarmMetricName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "Alarms": {
		//	                "description": "A list of alarms to monitor for the component.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "A CloudWatch alarm to be monitored for the component.",
		//	                  "properties": {
		//	                    "AlarmName": {
		//	                      "description": "The name of the CloudWatch alarm to be monitored for the component.",
		//	                      "maxLength": 255,
		//	                      "minLength": 1,
		//	                      "type": "string"
		//	                    },
		//	                    "Severity": {
		//	                      "description": "Indicates the degree of outage when the alarm goes off.",
		//	                      "enum": [
		//	                        "HIGH",
		//	                        "MEDIUM",
		//	                        "LOW"
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "AlarmName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "HAClusterPrometheusExporter": {
		//	                "additionalProperties": false,
		//	                "description": "The HA cluster Prometheus Exporter settings.",
		//	                "properties": {
		//	                  "PrometheusPort": {
		//	                    "description": "Prometheus exporter port.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "HANAPrometheusExporter": {
		//	                "additionalProperties": false,
		//	                "description": "The HANA DB Prometheus Exporter settings.",
		//	                "properties": {
		//	                  "AgreeToInstallHANADBClient": {
		//	                    "description": "A flag which indicates agreeing to install SAP HANA DB client.",
		//	                    "type": "boolean"
		//	                  },
		//	                  "HANAPort": {
		//	                    "description": "The HANA DB port.",
		//	                    "type": "string"
		//	                  },
		//	                  "HANASID": {
		//	                    "description": "HANA DB SID.",
		//	                    "type": "string"
		//	                  },
		//	                  "HANASecretName": {
		//	                    "description": "The secret name which manages the HANA DB credentials e.g. {\n  \"username\": \"\u003c\u003e\",\n  \"password\": \"\u003c\u003e\"\n}.",
		//	                    "type": "string"
		//	                  },
		//	                  "PrometheusPort": {
		//	                    "description": "Prometheus exporter port.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "HANASID",
		//	                  "HANAPort",
		//	                  "HANASecretName",
		//	                  "AgreeToInstallHANADBClient"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "JMXPrometheusExporter": {
		//	                "additionalProperties": false,
		//	                "description": "The JMX Prometheus Exporter settings.",
		//	                "properties": {
		//	                  "HostPort": {
		//	                    "description": "Java agent host port",
		//	                    "type": "string"
		//	                  },
		//	                  "JMXURL": {
		//	                    "description": "JMX service URL.",
		//	                    "type": "string"
		//	                  },
		//	                  "PrometheusPort": {
		//	                    "description": "Prometheus exporter port.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Logs": {
		//	                "description": "A list of logs to monitor for the component.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "A log to be monitored for the component.",
		//	                  "properties": {
		//	                    "Encoding": {
		//	                      "description": "The type of encoding of the logs to be monitored.",
		//	                      "enum": [
		//	                        "utf-8",
		//	                        "utf-16",
		//	                        "ascii"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "LogGroupName": {
		//	                      "description": "The CloudWatch log group name to be associated to the monitored log.",
		//	                      "maxLength": 512,
		//	                      "minLength": 1,
		//	                      "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	                      "type": "string"
		//	                    },
		//	                    "LogPath": {
		//	                      "description": "The path of the logs to be monitored.",
		//	                      "maxLength": 260,
		//	                      "minLength": 1,
		//	                      "pattern": "^([a-zA-Z]:\\\\[\\\\\\S|*\\S]?.*|/[^\"']*)$",
		//	                      "type": "string"
		//	                    },
		//	                    "LogType": {
		//	                      "description": "The log type decides the log patterns against which Application Insights analyzes the log.",
		//	                      "pattern": "^[A-Z][[A-Z]_]*$",
		//	                      "type": "string"
		//	                    },
		//	                    "PatternSet": {
		//	                      "description": "The name of the log pattern set.",
		//	                      "maxLength": 30,
		//	                      "minLength": 1,
		//	                      "pattern": "[a-zA-Z0-9.-_]*",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "LogType"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "NetWeaverPrometheusExporter": {
		//	                "additionalProperties": false,
		//	                "description": "The NetWeaver Prometheus Exporter settings.",
		//	                "properties": {
		//	                  "InstanceNumbers": {
		//	                    "description": "SAP instance numbers for ASCS, ERS, and App Servers.",
		//	                    "items": {
		//	                      "maxLength": 2,
		//	                      "minLength": 1,
		//	                      "pattern": "\\b([0-9]|[0-9][0-9])\\b",
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  },
		//	                  "PrometheusPort": {
		//	                    "description": "Prometheus exporter port.",
		//	                    "type": "string"
		//	                  },
		//	                  "SAPSID": {
		//	                    "description": "SAP NetWeaver SID.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "SAPSID",
		//	                  "InstanceNumbers"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Processes": {
		//	                "description": "A list of processes to monitor for the component. Only Windows EC2 instances can have a processes section.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "A process to be monitored for the component.",
		//	                  "properties": {
		//	                    "AlarmMetrics": {
		//	                      "description": "A list of metrics to monitor for the component.",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "A metric to be monitored for the component.",
		//	                        "properties": {
		//	                          "AlarmMetricName": {
		//	                            "description": "The name of the metric to be monitored for the component.",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "AlarmMetricName"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    },
		//	                    "ProcessName": {
		//	                      "description": "The name of the process to be monitored for the component.",
		//	                      "maxLength": 256,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-zA-Z0-9_,-]+$",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ProcessName",
		//	                    "AlarmMetrics"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "SQLServerPrometheusExporter": {
		//	                "additionalProperties": false,
		//	                "description": "The SQL Prometheus Exporter settings.",
		//	                "properties": {
		//	                  "PrometheusPort": {
		//	                    "description": "Prometheus exporter port.",
		//	                    "type": "string"
		//	                  },
		//	                  "SQLSecretName": {
		//	                    "description": "Secret name which managers SQL exporter connection. e.g. {\"data_source_name\": \"sqlserver://\u003cUSERNAME\u003e:\u003cPASSWORD\u003e@localhost:1433\"}",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "PrometheusPort",
		//	                  "SQLSecretName"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "WindowsEvents": {
		//	                "description": "A list of Windows Events to log.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "A Windows Event to be monitored for the component.",
		//	                  "properties": {
		//	                    "EventLevels": {
		//	                      "description": "The levels of event to log. ",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "description": "The level of event to log.",
		//	                        "enum": [
		//	                          "INFORMATION",
		//	                          "WARNING",
		//	                          "ERROR",
		//	                          "CRITICAL",
		//	                          "VERBOSE"
		//	                        ],
		//	                        "type": "string"
		//	                      },
		//	                      "minItems": 1,
		//	                      "type": "array"
		//	                    },
		//	                    "EventName": {
		//	                      "description": "The type of Windows Events to log.",
		//	                      "maxLength": 260,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-zA-Z0-9_ \\\\/-]+$",
		//	                      "type": "string"
		//	                    },
		//	                    "LogGroupName": {
		//	                      "description": "The CloudWatch log group name to be associated to the monitored log.",
		//	                      "maxLength": 512,
		//	                      "minLength": 1,
		//	                      "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	                      "type": "string"
		//	                    },
		//	                    "PatternSet": {
		//	                      "description": "The name of the log pattern set.",
		//	                      "maxLength": 30,
		//	                      "minLength": 1,
		//	                      "pattern": "[a-zA-Z0-9.-_]*",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "LogGroupName",
		//	                    "EventName",
		//	                    "EventLevels"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "SubComponentTypeConfigurations": {
		//	            "description": "Sub component configurations of the component.",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "One type sub component configurations for the component.",
		//	              "properties": {
		//	                "SubComponentConfigurationDetails": {
		//	                  "additionalProperties": false,
		//	                  "description": "The configuration settings of sub components.",
		//	                  "properties": {
		//	                    "AlarmMetrics": {
		//	                      "description": "A list of metrics to monitor for the component.",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "A metric to be monitored for the component.",
		//	                        "properties": {
		//	                          "AlarmMetricName": {
		//	                            "description": "The name of the metric to be monitored for the component.",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "AlarmMetricName"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    },
		//	                    "Logs": {
		//	                      "description": "A list of logs to monitor for the component.",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "A log to be monitored for the component.",
		//	                        "properties": {
		//	                          "Encoding": {
		//	                            "description": "The type of encoding of the logs to be monitored.",
		//	                            "enum": [
		//	                              "utf-8",
		//	                              "utf-16",
		//	                              "ascii"
		//	                            ],
		//	                            "type": "string"
		//	                          },
		//	                          "LogGroupName": {
		//	                            "description": "The CloudWatch log group name to be associated to the monitored log.",
		//	                            "maxLength": 512,
		//	                            "minLength": 1,
		//	                            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	                            "type": "string"
		//	                          },
		//	                          "LogPath": {
		//	                            "description": "The path of the logs to be monitored.",
		//	                            "maxLength": 260,
		//	                            "minLength": 1,
		//	                            "pattern": "^([a-zA-Z]:\\\\[\\\\\\S|*\\S]?.*|/[^\"']*)$",
		//	                            "type": "string"
		//	                          },
		//	                          "LogType": {
		//	                            "description": "The log type decides the log patterns against which Application Insights analyzes the log.",
		//	                            "pattern": "^[A-Z][[A-Z]_]*$",
		//	                            "type": "string"
		//	                          },
		//	                          "PatternSet": {
		//	                            "description": "The name of the log pattern set.",
		//	                            "maxLength": 30,
		//	                            "minLength": 1,
		//	                            "pattern": "[a-zA-Z0-9.-_]*",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "LogType"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    },
		//	                    "Processes": {
		//	                      "description": "A list of processes to monitor for the component. Only Windows EC2 instances can have a processes section.",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "A process to be monitored for the component.",
		//	                        "properties": {
		//	                          "AlarmMetrics": {
		//	                            "description": "A list of metrics to monitor for the component.",
		//	                            "insertionOrder": true,
		//	                            "items": {
		//	                              "additionalProperties": false,
		//	                              "description": "A metric to be monitored for the component.",
		//	                              "properties": {
		//	                                "AlarmMetricName": {
		//	                                  "description": "The name of the metric to be monitored for the component.",
		//	                                  "type": "string"
		//	                                }
		//	                              },
		//	                              "required": [
		//	                                "AlarmMetricName"
		//	                              ],
		//	                              "type": "object"
		//	                            },
		//	                            "type": "array"
		//	                          },
		//	                          "ProcessName": {
		//	                            "description": "The name of the process to be monitored for the component.",
		//	                            "maxLength": 256,
		//	                            "minLength": 1,
		//	                            "pattern": "^[a-zA-Z0-9_,-]+$",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "ProcessName",
		//	                          "AlarmMetrics"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    },
		//	                    "WindowsEvents": {
		//	                      "description": "A list of Windows Events to log.",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "A Windows Event to be monitored for the component.",
		//	                        "properties": {
		//	                          "EventLevels": {
		//	                            "description": "The levels of event to log. ",
		//	                            "insertionOrder": true,
		//	                            "items": {
		//	                              "description": "The level of event to log.",
		//	                              "enum": [
		//	                                "INFORMATION",
		//	                                "WARNING",
		//	                                "ERROR",
		//	                                "CRITICAL",
		//	                                "VERBOSE"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "minItems": 1,
		//	                            "type": "array"
		//	                          },
		//	                          "EventName": {
		//	                            "description": "The type of Windows Events to log.",
		//	                            "maxLength": 260,
		//	                            "minLength": 1,
		//	                            "pattern": "^[a-zA-Z0-9_ \\\\/-]+$",
		//	                            "type": "string"
		//	                          },
		//	                          "LogGroupName": {
		//	                            "description": "The CloudWatch log group name to be associated to the monitored log.",
		//	                            "maxLength": 512,
		//	                            "minLength": 1,
		//	                            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	                            "type": "string"
		//	                          },
		//	                          "PatternSet": {
		//	                            "description": "The name of the log pattern set.",
		//	                            "maxLength": 30,
		//	                            "minLength": 1,
		//	                            "pattern": "[a-zA-Z0-9.-_]*",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "LogGroupName",
		//	                          "EventName",
		//	                          "EventLevels"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "SubComponentType": {
		//	                  "description": "The sub component type.",
		//	                  "enum": [
		//	                    "AWS::EC2::Instance",
		//	                    "AWS::EC2::Volume"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "SubComponentType",
		//	                "SubComponentConfigurationDetails"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "minItems": 1,
		//	            "type": "array"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "DefaultOverwriteComponentConfiguration": {
		//	        "additionalProperties": false,
		//	        "description": "The overwritten settings on default component monitoring configuration.",
		//	        "properties": {
		//	          "ConfigurationDetails": {
		//	            "additionalProperties": false,
		//	            "description": "The configuration settings",
		//	            "properties": {
		//	              "AlarmMetrics": {
		//	                "description": "A list of metrics to monitor for the component.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "A metric to be monitored for the component.",
		//	                  "properties": {
		//	                    "AlarmMetricName": {
		//	                      "description": "The name of the metric to be monitored for the component.",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "AlarmMetricName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "Alarms": {
		//	                "description": "A list of alarms to monitor for the component.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "A CloudWatch alarm to be monitored for the component.",
		//	                  "properties": {
		//	                    "AlarmName": {
		//	                      "description": "The name of the CloudWatch alarm to be monitored for the component.",
		//	                      "maxLength": 255,
		//	                      "minLength": 1,
		//	                      "type": "string"
		//	                    },
		//	                    "Severity": {
		//	                      "description": "Indicates the degree of outage when the alarm goes off.",
		//	                      "enum": [
		//	                        "HIGH",
		//	                        "MEDIUM",
		//	                        "LOW"
		//	                      ],
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "AlarmName"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "HAClusterPrometheusExporter": {
		//	                "additionalProperties": false,
		//	                "description": "The HA cluster Prometheus Exporter settings.",
		//	                "properties": {
		//	                  "PrometheusPort": {
		//	                    "description": "Prometheus exporter port.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "HANAPrometheusExporter": {
		//	                "additionalProperties": false,
		//	                "description": "The HANA DB Prometheus Exporter settings.",
		//	                "properties": {
		//	                  "AgreeToInstallHANADBClient": {
		//	                    "description": "A flag which indicates agreeing to install SAP HANA DB client.",
		//	                    "type": "boolean"
		//	                  },
		//	                  "HANAPort": {
		//	                    "description": "The HANA DB port.",
		//	                    "type": "string"
		//	                  },
		//	                  "HANASID": {
		//	                    "description": "HANA DB SID.",
		//	                    "type": "string"
		//	                  },
		//	                  "HANASecretName": {
		//	                    "description": "The secret name which manages the HANA DB credentials e.g. {\n  \"username\": \"\u003c\u003e\",\n  \"password\": \"\u003c\u003e\"\n}.",
		//	                    "type": "string"
		//	                  },
		//	                  "PrometheusPort": {
		//	                    "description": "Prometheus exporter port.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "HANASID",
		//	                  "HANAPort",
		//	                  "HANASecretName",
		//	                  "AgreeToInstallHANADBClient"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "JMXPrometheusExporter": {
		//	                "additionalProperties": false,
		//	                "description": "The JMX Prometheus Exporter settings.",
		//	                "properties": {
		//	                  "HostPort": {
		//	                    "description": "Java agent host port",
		//	                    "type": "string"
		//	                  },
		//	                  "JMXURL": {
		//	                    "description": "JMX service URL.",
		//	                    "type": "string"
		//	                  },
		//	                  "PrometheusPort": {
		//	                    "description": "Prometheus exporter port.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "type": "object"
		//	              },
		//	              "Logs": {
		//	                "description": "A list of logs to monitor for the component.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "A log to be monitored for the component.",
		//	                  "properties": {
		//	                    "Encoding": {
		//	                      "description": "The type of encoding of the logs to be monitored.",
		//	                      "enum": [
		//	                        "utf-8",
		//	                        "utf-16",
		//	                        "ascii"
		//	                      ],
		//	                      "type": "string"
		//	                    },
		//	                    "LogGroupName": {
		//	                      "description": "The CloudWatch log group name to be associated to the monitored log.",
		//	                      "maxLength": 512,
		//	                      "minLength": 1,
		//	                      "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	                      "type": "string"
		//	                    },
		//	                    "LogPath": {
		//	                      "description": "The path of the logs to be monitored.",
		//	                      "maxLength": 260,
		//	                      "minLength": 1,
		//	                      "pattern": "^([a-zA-Z]:\\\\[\\\\\\S|*\\S]?.*|/[^\"']*)$",
		//	                      "type": "string"
		//	                    },
		//	                    "LogType": {
		//	                      "description": "The log type decides the log patterns against which Application Insights analyzes the log.",
		//	                      "pattern": "^[A-Z][[A-Z]_]*$",
		//	                      "type": "string"
		//	                    },
		//	                    "PatternSet": {
		//	                      "description": "The name of the log pattern set.",
		//	                      "maxLength": 30,
		//	                      "minLength": 1,
		//	                      "pattern": "[a-zA-Z0-9.-_]*",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "LogType"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "NetWeaverPrometheusExporter": {
		//	                "additionalProperties": false,
		//	                "description": "The NetWeaver Prometheus Exporter settings.",
		//	                "properties": {
		//	                  "InstanceNumbers": {
		//	                    "description": "SAP instance numbers for ASCS, ERS, and App Servers.",
		//	                    "items": {
		//	                      "maxLength": 2,
		//	                      "minLength": 1,
		//	                      "pattern": "\\b([0-9]|[0-9][0-9])\\b",
		//	                      "type": "string"
		//	                    },
		//	                    "type": "array"
		//	                  },
		//	                  "PrometheusPort": {
		//	                    "description": "Prometheus exporter port.",
		//	                    "type": "string"
		//	                  },
		//	                  "SAPSID": {
		//	                    "description": "SAP NetWeaver SID.",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "SAPSID",
		//	                  "InstanceNumbers"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "Processes": {
		//	                "description": "A list of processes to monitor for the component. Only Windows EC2 instances can have a processes section.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "A process to be monitored for the component.",
		//	                  "properties": {
		//	                    "AlarmMetrics": {
		//	                      "description": "A list of metrics to monitor for the component.",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "A metric to be monitored for the component.",
		//	                        "properties": {
		//	                          "AlarmMetricName": {
		//	                            "description": "The name of the metric to be monitored for the component.",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "AlarmMetricName"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    },
		//	                    "ProcessName": {
		//	                      "description": "The name of the process to be monitored for the component.",
		//	                      "maxLength": 256,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-zA-Z0-9_,-]+$",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "ProcessName",
		//	                    "AlarmMetrics"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              },
		//	              "SQLServerPrometheusExporter": {
		//	                "additionalProperties": false,
		//	                "description": "The SQL Prometheus Exporter settings.",
		//	                "properties": {
		//	                  "PrometheusPort": {
		//	                    "description": "Prometheus exporter port.",
		//	                    "type": "string"
		//	                  },
		//	                  "SQLSecretName": {
		//	                    "description": "Secret name which managers SQL exporter connection. e.g. {\"data_source_name\": \"sqlserver://\u003cUSERNAME\u003e:\u003cPASSWORD\u003e@localhost:1433\"}",
		//	                    "type": "string"
		//	                  }
		//	                },
		//	                "required": [
		//	                  "PrometheusPort",
		//	                  "SQLSecretName"
		//	                ],
		//	                "type": "object"
		//	              },
		//	              "WindowsEvents": {
		//	                "description": "A list of Windows Events to log.",
		//	                "insertionOrder": true,
		//	                "items": {
		//	                  "additionalProperties": false,
		//	                  "description": "A Windows Event to be monitored for the component.",
		//	                  "properties": {
		//	                    "EventLevels": {
		//	                      "description": "The levels of event to log. ",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "description": "The level of event to log.",
		//	                        "enum": [
		//	                          "INFORMATION",
		//	                          "WARNING",
		//	                          "ERROR",
		//	                          "CRITICAL",
		//	                          "VERBOSE"
		//	                        ],
		//	                        "type": "string"
		//	                      },
		//	                      "minItems": 1,
		//	                      "type": "array"
		//	                    },
		//	                    "EventName": {
		//	                      "description": "The type of Windows Events to log.",
		//	                      "maxLength": 260,
		//	                      "minLength": 1,
		//	                      "pattern": "^[a-zA-Z0-9_ \\\\/-]+$",
		//	                      "type": "string"
		//	                    },
		//	                    "LogGroupName": {
		//	                      "description": "The CloudWatch log group name to be associated to the monitored log.",
		//	                      "maxLength": 512,
		//	                      "minLength": 1,
		//	                      "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	                      "type": "string"
		//	                    },
		//	                    "PatternSet": {
		//	                      "description": "The name of the log pattern set.",
		//	                      "maxLength": 30,
		//	                      "minLength": 1,
		//	                      "pattern": "[a-zA-Z0-9.-_]*",
		//	                      "type": "string"
		//	                    }
		//	                  },
		//	                  "required": [
		//	                    "LogGroupName",
		//	                    "EventName",
		//	                    "EventLevels"
		//	                  ],
		//	                  "type": "object"
		//	                },
		//	                "type": "array"
		//	              }
		//	            },
		//	            "type": "object"
		//	          },
		//	          "SubComponentTypeConfigurations": {
		//	            "description": "Sub component configurations of the component.",
		//	            "insertionOrder": true,
		//	            "items": {
		//	              "additionalProperties": false,
		//	              "description": "One type sub component configurations for the component.",
		//	              "properties": {
		//	                "SubComponentConfigurationDetails": {
		//	                  "additionalProperties": false,
		//	                  "description": "The configuration settings of sub components.",
		//	                  "properties": {
		//	                    "AlarmMetrics": {
		//	                      "description": "A list of metrics to monitor for the component.",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "A metric to be monitored for the component.",
		//	                        "properties": {
		//	                          "AlarmMetricName": {
		//	                            "description": "The name of the metric to be monitored for the component.",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "AlarmMetricName"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    },
		//	                    "Logs": {
		//	                      "description": "A list of logs to monitor for the component.",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "A log to be monitored for the component.",
		//	                        "properties": {
		//	                          "Encoding": {
		//	                            "description": "The type of encoding of the logs to be monitored.",
		//	                            "enum": [
		//	                              "utf-8",
		//	                              "utf-16",
		//	                              "ascii"
		//	                            ],
		//	                            "type": "string"
		//	                          },
		//	                          "LogGroupName": {
		//	                            "description": "The CloudWatch log group name to be associated to the monitored log.",
		//	                            "maxLength": 512,
		//	                            "minLength": 1,
		//	                            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	                            "type": "string"
		//	                          },
		//	                          "LogPath": {
		//	                            "description": "The path of the logs to be monitored.",
		//	                            "maxLength": 260,
		//	                            "minLength": 1,
		//	                            "pattern": "^([a-zA-Z]:\\\\[\\\\\\S|*\\S]?.*|/[^\"']*)$",
		//	                            "type": "string"
		//	                          },
		//	                          "LogType": {
		//	                            "description": "The log type decides the log patterns against which Application Insights analyzes the log.",
		//	                            "pattern": "^[A-Z][[A-Z]_]*$",
		//	                            "type": "string"
		//	                          },
		//	                          "PatternSet": {
		//	                            "description": "The name of the log pattern set.",
		//	                            "maxLength": 30,
		//	                            "minLength": 1,
		//	                            "pattern": "[a-zA-Z0-9.-_]*",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "LogType"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    },
		//	                    "Processes": {
		//	                      "description": "A list of processes to monitor for the component. Only Windows EC2 instances can have a processes section.",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "A process to be monitored for the component.",
		//	                        "properties": {
		//	                          "AlarmMetrics": {
		//	                            "description": "A list of metrics to monitor for the component.",
		//	                            "insertionOrder": true,
		//	                            "items": {
		//	                              "additionalProperties": false,
		//	                              "description": "A metric to be monitored for the component.",
		//	                              "properties": {
		//	                                "AlarmMetricName": {
		//	                                  "description": "The name of the metric to be monitored for the component.",
		//	                                  "type": "string"
		//	                                }
		//	                              },
		//	                              "required": [
		//	                                "AlarmMetricName"
		//	                              ],
		//	                              "type": "object"
		//	                            },
		//	                            "type": "array"
		//	                          },
		//	                          "ProcessName": {
		//	                            "description": "The name of the process to be monitored for the component.",
		//	                            "maxLength": 256,
		//	                            "minLength": 1,
		//	                            "pattern": "^[a-zA-Z0-9_,-]+$",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "ProcessName",
		//	                          "AlarmMetrics"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    },
		//	                    "WindowsEvents": {
		//	                      "description": "A list of Windows Events to log.",
		//	                      "insertionOrder": true,
		//	                      "items": {
		//	                        "additionalProperties": false,
		//	                        "description": "A Windows Event to be monitored for the component.",
		//	                        "properties": {
		//	                          "EventLevels": {
		//	                            "description": "The levels of event to log. ",
		//	                            "insertionOrder": true,
		//	                            "items": {
		//	                              "description": "The level of event to log.",
		//	                              "enum": [
		//	                                "INFORMATION",
		//	                                "WARNING",
		//	                                "ERROR",
		//	                                "CRITICAL",
		//	                                "VERBOSE"
		//	                              ],
		//	                              "type": "string"
		//	                            },
		//	                            "minItems": 1,
		//	                            "type": "array"
		//	                          },
		//	                          "EventName": {
		//	                            "description": "The type of Windows Events to log.",
		//	                            "maxLength": 260,
		//	                            "minLength": 1,
		//	                            "pattern": "^[a-zA-Z0-9_ \\\\/-]+$",
		//	                            "type": "string"
		//	                          },
		//	                          "LogGroupName": {
		//	                            "description": "The CloudWatch log group name to be associated to the monitored log.",
		//	                            "maxLength": 512,
		//	                            "minLength": 1,
		//	                            "pattern": "[\\.\\-_/#A-Za-z0-9]+",
		//	                            "type": "string"
		//	                          },
		//	                          "PatternSet": {
		//	                            "description": "The name of the log pattern set.",
		//	                            "maxLength": 30,
		//	                            "minLength": 1,
		//	                            "pattern": "[a-zA-Z0-9.-_]*",
		//	                            "type": "string"
		//	                          }
		//	                        },
		//	                        "required": [
		//	                          "LogGroupName",
		//	                          "EventName",
		//	                          "EventLevels"
		//	                        ],
		//	                        "type": "object"
		//	                      },
		//	                      "type": "array"
		//	                    }
		//	                  },
		//	                  "type": "object"
		//	                },
		//	                "SubComponentType": {
		//	                  "description": "The sub component type.",
		//	                  "enum": [
		//	                    "AWS::EC2::Instance",
		//	                    "AWS::EC2::Volume"
		//	                  ],
		//	                  "type": "string"
		//	                }
		//	              },
		//	              "required": [
		//	                "SubComponentType",
		//	                "SubComponentConfigurationDetails"
		//	              ],
		//	              "type": "object"
		//	            },
		//	            "minItems": 1,
		//	            "type": "array"
		//	          }
		//	        },
		//	        "type": "object"
		//	      },
		//	      "Tier": {
		//	        "description": "The tier of the application component.",
		//	        "pattern": "^[A-Z][[A-Z]_]*$",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Tier",
		//	      "ComponentConfigurationMode"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"component_monitoring_settings": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ComponentARN
					"component_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The ARN of the compnonent.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ComponentConfigurationMode
					"component_configuration_mode": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The component monitoring configuration mode.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ComponentName
					"component_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name of the component.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: CustomComponentConfiguration
					"custom_component_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ConfigurationDetails
							"configuration_details": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AlarmMetrics
									"alarm_metrics": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AlarmMetricName
												"alarm_metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the metric to be monitored for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "A list of metrics to monitor for the component.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Alarms
									"alarms": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AlarmName
												"alarm_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the CloudWatch alarm to be monitored for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Severity
												"severity": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "Indicates the degree of outage when the alarm goes off.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "A list of alarms to monitor for the component.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: HAClusterPrometheusExporter
									"ha_cluster_prometheus_exporter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: PrometheusPort
											"prometheus_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Prometheus exporter port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The HA cluster Prometheus Exporter settings.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: HANAPrometheusExporter
									"hana_prometheus_exporter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AgreeToInstallHANADBClient
											"agree_to_install_hanadb_client": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Description: "A flag which indicates agreeing to install SAP HANA DB client.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: HANAPort
											"hana_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The HANA DB port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: HANASID
											"hanasid": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "HANA DB SID.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: HANASecretName
											"hana_secret_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The secret name which manages the HANA DB credentials e.g. {\n  \"username\": \"<>\",\n  \"password\": \"<>\"\n}.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: PrometheusPort
											"prometheus_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Prometheus exporter port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The HANA DB Prometheus Exporter settings.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: JMXPrometheusExporter
									"jmx_prometheus_exporter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: HostPort
											"host_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Java agent host port",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: JMXURL
											"jmxurl": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "JMX service URL.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: PrometheusPort
											"prometheus_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Prometheus exporter port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The JMX Prometheus Exporter settings.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Logs
									"logs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Encoding
												"encoding": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The type of encoding of the logs to be monitored.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: LogGroupName
												"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The CloudWatch log group name to be associated to the monitored log.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: LogPath
												"log_path": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The path of the logs to be monitored.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: LogType
												"log_type": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The log type decides the log patterns against which Application Insights analyzes the log.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: PatternSet
												"pattern_set": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the log pattern set.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "A list of logs to monitor for the component.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: NetWeaverPrometheusExporter
									"net_weaver_prometheus_exporter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: InstanceNumbers
											"instance_numbers": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Description: "SAP instance numbers for ASCS, ERS, and App Servers.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: PrometheusPort
											"prometheus_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Prometheus exporter port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: SAPSID
											"sapsid": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "SAP NetWeaver SID.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The NetWeaver Prometheus Exporter settings.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Processes
									"processes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AlarmMetrics
												"alarm_metrics": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: AlarmMetricName
															"alarm_metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The name of the metric to be monitored for the component.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "A list of metrics to monitor for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: ProcessName
												"process_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the process to be monitored for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "A list of processes to monitor for the component. Only Windows EC2 instances can have a processes section.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: SQLServerPrometheusExporter
									"sql_server_prometheus_exporter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: PrometheusPort
											"prometheus_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Prometheus exporter port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: SQLSecretName
											"sql_secret_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Secret name which managers SQL exporter connection. e.g. {\"data_source_name\": \"sqlserver://<USERNAME>:<PASSWORD>@localhost:1433\"}",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The SQL Prometheus Exporter settings.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: WindowsEvents
									"windows_events": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: EventLevels
												"event_levels": schema.ListAttribute{ /*START ATTRIBUTE*/
													ElementType: types.StringType,
													Description: "The levels of event to log. ",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: EventName
												"event_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The type of Windows Events to log.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: LogGroupName
												"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The CloudWatch log group name to be associated to the monitored log.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: PatternSet
												"pattern_set": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the log pattern set.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "A list of Windows Events to log.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "The configuration settings",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: SubComponentTypeConfigurations
							"sub_component_type_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: SubComponentConfigurationDetails
										"sub_component_configuration_details": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AlarmMetrics
												"alarm_metrics": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: AlarmMetricName
															"alarm_metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The name of the metric to be monitored for the component.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "A list of metrics to monitor for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Logs
												"logs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: Encoding
															"encoding": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The type of encoding of the logs to be monitored.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: LogGroupName
															"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The CloudWatch log group name to be associated to the monitored log.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: LogPath
															"log_path": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The path of the logs to be monitored.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: LogType
															"log_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The log type decides the log patterns against which Application Insights analyzes the log.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: PatternSet
															"pattern_set": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The name of the log pattern set.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "A list of logs to monitor for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Processes
												"processes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: AlarmMetrics
															"alarm_metrics": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																	Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																		// Property: AlarmMetricName
																		"alarm_metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Description: "The name of the metric to be monitored for the component.",
																			Computed:    true,
																		}, /*END ATTRIBUTE*/
																	}, /*END SCHEMA*/
																}, /*END NESTED OBJECT*/
																Description: "A list of metrics to monitor for the component.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: ProcessName
															"process_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The name of the process to be monitored for the component.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "A list of processes to monitor for the component. Only Windows EC2 instances can have a processes section.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: WindowsEvents
												"windows_events": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: EventLevels
															"event_levels": schema.ListAttribute{ /*START ATTRIBUTE*/
																ElementType: types.StringType,
																Description: "The levels of event to log. ",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: EventName
															"event_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The type of Windows Events to log.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: LogGroupName
															"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The CloudWatch log group name to be associated to the monitored log.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: PatternSet
															"pattern_set": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The name of the log pattern set.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "A list of Windows Events to log.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Description: "The configuration settings of sub components.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: SubComponentType
										"sub_component_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The sub component type.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "Sub component configurations of the component.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "The monitoring configuration of the component.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: DefaultOverwriteComponentConfiguration
					"default_overwrite_component_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
						Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
							// Property: ConfigurationDetails
							"configuration_details": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
								Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
									// Property: AlarmMetrics
									"alarm_metrics": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AlarmMetricName
												"alarm_metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the metric to be monitored for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "A list of metrics to monitor for the component.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Alarms
									"alarms": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AlarmName
												"alarm_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the CloudWatch alarm to be monitored for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Severity
												"severity": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "Indicates the degree of outage when the alarm goes off.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "A list of alarms to monitor for the component.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: HAClusterPrometheusExporter
									"ha_cluster_prometheus_exporter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: PrometheusPort
											"prometheus_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Prometheus exporter port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The HA cluster Prometheus Exporter settings.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: HANAPrometheusExporter
									"hana_prometheus_exporter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: AgreeToInstallHANADBClient
											"agree_to_install_hanadb_client": schema.BoolAttribute{ /*START ATTRIBUTE*/
												Description: "A flag which indicates agreeing to install SAP HANA DB client.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: HANAPort
											"hana_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The HANA DB port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: HANASID
											"hanasid": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "HANA DB SID.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: HANASecretName
											"hana_secret_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "The secret name which manages the HANA DB credentials e.g. {\n  \"username\": \"<>\",\n  \"password\": \"<>\"\n}.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: PrometheusPort
											"prometheus_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Prometheus exporter port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The HANA DB Prometheus Exporter settings.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: JMXPrometheusExporter
									"jmx_prometheus_exporter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: HostPort
											"host_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Java agent host port",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: JMXURL
											"jmxurl": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "JMX service URL.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: PrometheusPort
											"prometheus_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Prometheus exporter port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The JMX Prometheus Exporter settings.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Logs
									"logs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: Encoding
												"encoding": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The type of encoding of the logs to be monitored.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: LogGroupName
												"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The CloudWatch log group name to be associated to the monitored log.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: LogPath
												"log_path": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The path of the logs to be monitored.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: LogType
												"log_type": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The log type decides the log patterns against which Application Insights analyzes the log.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: PatternSet
												"pattern_set": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the log pattern set.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "A list of logs to monitor for the component.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: NetWeaverPrometheusExporter
									"net_weaver_prometheus_exporter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: InstanceNumbers
											"instance_numbers": schema.ListAttribute{ /*START ATTRIBUTE*/
												ElementType: types.StringType,
												Description: "SAP instance numbers for ASCS, ERS, and App Servers.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: PrometheusPort
											"prometheus_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Prometheus exporter port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: SAPSID
											"sapsid": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "SAP NetWeaver SID.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The NetWeaver Prometheus Exporter settings.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: Processes
									"processes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AlarmMetrics
												"alarm_metrics": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: AlarmMetricName
															"alarm_metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The name of the metric to be monitored for the component.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "A list of metrics to monitor for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: ProcessName
												"process_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the process to be monitored for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "A list of processes to monitor for the component. Only Windows EC2 instances can have a processes section.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: SQLServerPrometheusExporter
									"sql_server_prometheus_exporter": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
										Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
											// Property: PrometheusPort
											"prometheus_port": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Prometheus exporter port.",
												Computed:    true,
											}, /*END ATTRIBUTE*/
											// Property: SQLSecretName
											"sql_secret_name": schema.StringAttribute{ /*START ATTRIBUTE*/
												Description: "Secret name which managers SQL exporter connection. e.g. {\"data_source_name\": \"sqlserver://<USERNAME>:<PASSWORD>@localhost:1433\"}",
												Computed:    true,
											}, /*END ATTRIBUTE*/
										}, /*END SCHEMA*/
										Description: "The SQL Prometheus Exporter settings.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
									// Property: WindowsEvents
									"windows_events": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
										NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: EventLevels
												"event_levels": schema.ListAttribute{ /*START ATTRIBUTE*/
													ElementType: types.StringType,
													Description: "The levels of event to log. ",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: EventName
												"event_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The type of Windows Events to log.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: LogGroupName
												"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The CloudWatch log group name to be associated to the monitored log.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: PatternSet
												"pattern_set": schema.StringAttribute{ /*START ATTRIBUTE*/
													Description: "The name of the log pattern set.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
										}, /*END NESTED OBJECT*/
										Description: "A list of Windows Events to log.",
										Computed:    true,
									}, /*END ATTRIBUTE*/
								}, /*END SCHEMA*/
								Description: "The configuration settings",
								Computed:    true,
							}, /*END ATTRIBUTE*/
							// Property: SubComponentTypeConfigurations
							"sub_component_type_configurations": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
								NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
									Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
										// Property: SubComponentConfigurationDetails
										"sub_component_configuration_details": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
											Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
												// Property: AlarmMetrics
												"alarm_metrics": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: AlarmMetricName
															"alarm_metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The name of the metric to be monitored for the component.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "A list of metrics to monitor for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Logs
												"logs": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: Encoding
															"encoding": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The type of encoding of the logs to be monitored.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: LogGroupName
															"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The CloudWatch log group name to be associated to the monitored log.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: LogPath
															"log_path": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The path of the logs to be monitored.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: LogType
															"log_type": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The log type decides the log patterns against which Application Insights analyzes the log.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: PatternSet
															"pattern_set": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The name of the log pattern set.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "A list of logs to monitor for the component.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: Processes
												"processes": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: AlarmMetrics
															"alarm_metrics": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
																NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
																	Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
																		// Property: AlarmMetricName
																		"alarm_metric_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																			Description: "The name of the metric to be monitored for the component.",
																			Computed:    true,
																		}, /*END ATTRIBUTE*/
																	}, /*END SCHEMA*/
																}, /*END NESTED OBJECT*/
																Description: "A list of metrics to monitor for the component.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: ProcessName
															"process_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The name of the process to be monitored for the component.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "A list of processes to monitor for the component. Only Windows EC2 instances can have a processes section.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
												// Property: WindowsEvents
												"windows_events": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
													NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
														Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
															// Property: EventLevels
															"event_levels": schema.ListAttribute{ /*START ATTRIBUTE*/
																ElementType: types.StringType,
																Description: "The levels of event to log. ",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: EventName
															"event_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The type of Windows Events to log.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: LogGroupName
															"log_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The CloudWatch log group name to be associated to the monitored log.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
															// Property: PatternSet
															"pattern_set": schema.StringAttribute{ /*START ATTRIBUTE*/
																Description: "The name of the log pattern set.",
																Computed:    true,
															}, /*END ATTRIBUTE*/
														}, /*END SCHEMA*/
													}, /*END NESTED OBJECT*/
													Description: "A list of Windows Events to log.",
													Computed:    true,
												}, /*END ATTRIBUTE*/
											}, /*END SCHEMA*/
											Description: "The configuration settings of sub components.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
										// Property: SubComponentType
										"sub_component_type": schema.StringAttribute{ /*START ATTRIBUTE*/
											Description: "The sub component type.",
											Computed:    true,
										}, /*END ATTRIBUTE*/
									}, /*END SCHEMA*/
								}, /*END NESTED OBJECT*/
								Description: "Sub component configurations of the component.",
								Computed:    true,
							}, /*END ATTRIBUTE*/
						}, /*END SCHEMA*/
						Description: "The overwritten settings on default component monitoring configuration.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Tier
					"tier": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The tier of the application component.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The monitoring settings of the components.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: CustomComponents
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The custom grouped components.",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The custom grouped component.",
		//	    "properties": {
		//	      "ComponentName": {
		//	        "description": "The name of the component.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "pattern": "^[\\d\\w\\-_.+]*$",
		//	        "type": "string"
		//	      },
		//	      "ResourceList": {
		//	        "description": "The list of resource ARNs that belong to the component.",
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "maxLength": 300,
		//	          "minLength": 20,
		//	          "pattern": "^arn:aws(-[\\w]+)*:[\\w\\d-]+:([\\w\\d-]*)?:[\\w\\d_-]*([:/].+)*$",
		//	          "type": "string"
		//	        },
		//	        "minItems": 1,
		//	        "type": "array"
		//	      }
		//	    },
		//	    "required": [
		//	      "ComponentName",
		//	      "ResourceList"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"custom_components": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ComponentName
					"component_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name of the component.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ResourceList
					"resource_list": schema.ListAttribute{ /*START ATTRIBUTE*/
						ElementType: types.StringType,
						Description: "The list of resource ARNs that belong to the component.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The custom grouped components.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: GroupingType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The grouping type of the application",
		//	  "enum": [
		//	    "ACCOUNT_BASED"
		//	  ],
		//	  "type": "string"
		//	}
		"grouping_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The grouping type of the application",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LogPatternSets
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The log pattern sets.",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The log pattern set.",
		//	    "properties": {
		//	      "LogPatterns": {
		//	        "description": "The log patterns of a set.",
		//	        "insertionOrder": true,
		//	        "items": {
		//	          "additionalProperties": false,
		//	          "description": "The log pattern.",
		//	          "properties": {
		//	            "Pattern": {
		//	              "description": "The log pattern.",
		//	              "maxLength": 50,
		//	              "minLength": 1,
		//	              "type": "string"
		//	            },
		//	            "PatternName": {
		//	              "description": "The name of the log pattern.",
		//	              "maxLength": 50,
		//	              "minLength": 1,
		//	              "pattern": "[a-zA-Z0-9.-_]*",
		//	              "type": "string"
		//	            },
		//	            "Rank": {
		//	              "description": "Rank of the log pattern.",
		//	              "type": "integer"
		//	            }
		//	          },
		//	          "required": [
		//	            "PatternName",
		//	            "Pattern",
		//	            "Rank"
		//	          ],
		//	          "type": "object"
		//	        },
		//	        "minItems": 1,
		//	        "type": "array"
		//	      },
		//	      "PatternSetName": {
		//	        "description": "The name of the log pattern set.",
		//	        "maxLength": 30,
		//	        "minLength": 1,
		//	        "pattern": "[a-zA-Z0-9.-_]*",
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "PatternSetName",
		//	      "LogPatterns"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"log_pattern_sets": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: LogPatterns
					"log_patterns": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
						NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
							Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
								// Property: Pattern
								"pattern": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The log pattern.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: PatternName
								"pattern_name": schema.StringAttribute{ /*START ATTRIBUTE*/
									Description: "The name of the log pattern.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
								// Property: Rank
								"rank": schema.Int64Attribute{ /*START ATTRIBUTE*/
									Description: "Rank of the log pattern.",
									Computed:    true,
								}, /*END ATTRIBUTE*/
							}, /*END SCHEMA*/
						}, /*END NESTED OBJECT*/
						Description: "The log patterns of a set.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: PatternSetName
					"pattern_set_name": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The name of the log pattern set.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The log pattern sets.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OpsCenterEnabled
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "When set to true, creates opsItems for any problems detected on an application.",
		//	  "type": "boolean"
		//	}
		"ops_center_enabled": schema.BoolAttribute{ /*START ATTRIBUTE*/
			Description: "When set to true, creates opsItems for any problems detected on an application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: OpsItemSNSTopicArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The SNS topic provided to Application Insights that is associated to the created opsItem.",
		//	  "maxLength": 300,
		//	  "minLength": 20,
		//	  "pattern": "^arn:aws(-[\\w]+)*:[\\w\\d-]+:([\\w\\d-]*)?:[\\w\\d_-]*([:/].+)*$",
		//	  "type": "string"
		//	}
		"ops_item_sns_topic_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The SNS topic provided to Application Insights that is associated to the created opsItem.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceGroupName
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The name of the resource group.",
		//	  "maxLength": 256,
		//	  "minLength": 1,
		//	  "pattern": "[a-zA-Z0-9.-_]*",
		//	  "type": "string"
		//	}
		"resource_group_name": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The name of the resource group.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: SNSNotificationArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Application Insights sends notifications to this SNS topic whenever there is a problem update in the associated application.",
		//	  "maxLength": 300,
		//	  "minLength": 20,
		//	  "pattern": "^arn:aws(-[\\w]+)*:[\\w\\d-]+:([\\w\\d-]*)?:[\\w\\d_-]*([:/].+)*$",
		//	  "type": "string"
		//	}
		"sns_notification_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Application Insights sends notifications to this SNS topic whenever there is a problem update in the associated application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The tags of Application Insights application.",
		//	  "insertionOrder": true,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "A key-value pair to associate with a resource.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "minItems": 1,
		//	  "type": "array"
		//	}
		"tags": schema.ListNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. ",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "The tags of Application Insights application.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::ApplicationInsights::Application",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ApplicationInsights::Application").WithTerraformTypeName("awscc_applicationinsights_application")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"agree_to_install_hanadb_client":            "AgreeToInstallHANADBClient",
		"alarm_metric_name":                         "AlarmMetricName",
		"alarm_metrics":                             "AlarmMetrics",
		"alarm_name":                                "AlarmName",
		"alarms":                                    "Alarms",
		"application_arn":                           "ApplicationARN",
		"attach_missing_permission":                 "AttachMissingPermission",
		"auto_configuration_enabled":                "AutoConfigurationEnabled",
		"component_arn":                             "ComponentARN",
		"component_configuration_mode":              "ComponentConfigurationMode",
		"component_monitoring_settings":             "ComponentMonitoringSettings",
		"component_name":                            "ComponentName",
		"configuration_details":                     "ConfigurationDetails",
		"custom_component_configuration":            "CustomComponentConfiguration",
		"custom_components":                         "CustomComponents",
		"cwe_monitor_enabled":                       "CWEMonitorEnabled",
		"default_overwrite_component_configuration": "DefaultOverwriteComponentConfiguration",
		"encoding":                                  "Encoding",
		"event_levels":                              "EventLevels",
		"event_name":                                "EventName",
		"grouping_type":                             "GroupingType",
		"ha_cluster_prometheus_exporter":            "HAClusterPrometheusExporter",
		"hana_port":                                 "HANAPort",
		"hana_prometheus_exporter":                  "HANAPrometheusExporter",
		"hana_secret_name":                          "HANASecretName",
		"hanasid":                                   "HANASID",
		"host_port":                                 "HostPort",
		"instance_numbers":                          "InstanceNumbers",
		"jmx_prometheus_exporter":                   "JMXPrometheusExporter",
		"jmxurl":                                    "JMXURL",
		"key":                                       "Key",
		"log_group_name":                            "LogGroupName",
		"log_path":                                  "LogPath",
		"log_pattern_sets":                          "LogPatternSets",
		"log_patterns":                              "LogPatterns",
		"log_type":                                  "LogType",
		"logs":                                      "Logs",
		"net_weaver_prometheus_exporter":            "NetWeaverPrometheusExporter",
		"ops_center_enabled":                        "OpsCenterEnabled",
		"ops_item_sns_topic_arn":                    "OpsItemSNSTopicArn",
		"pattern":                                   "Pattern",
		"pattern_name":                              "PatternName",
		"pattern_set":                               "PatternSet",
		"pattern_set_name":                          "PatternSetName",
		"process_name":                              "ProcessName",
		"processes":                                 "Processes",
		"prometheus_port":                           "PrometheusPort",
		"rank":                                      "Rank",
		"resource_group_name":                       "ResourceGroupName",
		"resource_list":                             "ResourceList",
		"sapsid":                                    "SAPSID",
		"severity":                                  "Severity",
		"sns_notification_arn":                      "SNSNotificationArn",
		"sql_secret_name":                           "SQLSecretName",
		"sql_server_prometheus_exporter":            "SQLServerPrometheusExporter",
		"sub_component_configuration_details":       "SubComponentConfigurationDetails",
		"sub_component_type":                        "SubComponentType",
		"sub_component_type_configurations":         "SubComponentTypeConfigurations",
		"tags":                                      "Tags",
		"tier":                                      "Tier",
		"value":                                     "Value",
		"windows_events":                            "WindowsEvents",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
