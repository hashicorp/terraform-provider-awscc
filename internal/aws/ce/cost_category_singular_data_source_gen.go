// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package ce

import (
	"context"

	hclog "github.com/hashicorp/go-hclog"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tflog "github.com/hashicorp/terraform-plugin-log"
	. "github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceTypeFactory("awscc_ce_cost_category", costCategoryDataSourceType)
}

// costCategoryDataSourceType returns the Terraform awscc_ce_cost_category data source type.
// This Terraform data source type corresponds to the CloudFormation AWS::CE::CostCategory resource type.
func costCategoryDataSourceType(ctx context.Context) (tfsdk.DataSourceType, error) {
	attributes := map[string]tfsdk.Attribute{
		"arn": {
			// Property: Arn
			// CloudFormation resource type schema:
			// {
			//   "description": "Cost category ARN",
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "Cost category ARN",
			Type:        types.StringType,
			Computed:    true,
		},
		"default_value": {
			// Property: DefaultValue
			// CloudFormation resource type schema:
			// {
			//   "description": "The default value for the cost category",
			//   "maxLength": 50,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Description: "The default value for the cost category",
			Type:        types.StringType,
			Computed:    true,
		},
		"effective_start": {
			// Property: EffectiveStart
			// CloudFormation resource type schema:
			// {
			//   "description": "ISO 8601 date time with offset format",
			//   "maxLength": 25,
			//   "minLength": 20,
			//   "pattern": "",
			//   "type": "string"
			// }
			Description: "ISO 8601 date time with offset format",
			Type:        types.StringType,
			Computed:    true,
		},
		"name": {
			// Property: Name
			// CloudFormation resource type schema:
			// {
			//   "maxLength": 50,
			//   "minLength": 1,
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"rule_version": {
			// Property: RuleVersion
			// CloudFormation resource type schema:
			// {
			//   "enum": [
			//     "CostCategoryExpression.v1"
			//   ],
			//   "type": "string"
			// }
			Type:     types.StringType,
			Computed: true,
		},
		"rules": {
			// Property: Rules
			// CloudFormation resource type schema:
			// {
			//   "description": "JSON array format of Expression in Billing and Cost Management API",
			//   "type": "string"
			// }
			Description: "JSON array format of Expression in Billing and Cost Management API",
			Type:        types.StringType,
			Computed:    true,
		},
	}

	attributes["id"] = tfsdk.Attribute{
		Description: "Uniquely identifies the resource.",
		Type:        types.StringType,
		Required:    true,
	}

	schema := tfsdk.Schema{
		Description: "Data Source schema for AWS::CE::CostCategory",
		Version:     1,
		Attributes:  attributes,
	}

	var opts DataSourceTypeOptions

	opts = opts.WithCloudFormationTypeName("AWS::CE::CostCategory").WithTerraformTypeName("awscc_ce_cost_category")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":             "Arn",
		"default_value":   "DefaultValue",
		"effective_start": "EffectiveStart",
		"name":            "Name",
		"rule_version":    "RuleVersion",
		"rules":           "Rules",
	})

	singularDataSourceType, err := NewSingularDataSourceType(ctx, opts...)

	if err != nil {
		return nil, err
	}

	tflog.Debug(ctx, "Generated schema", "tfTypeName", "awscc_ce_cost_category", "schema", hclog.Fmt("%v", schema))

	return singularDataSourceType, nil
}
