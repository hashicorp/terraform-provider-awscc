// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package acmpca

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddResourceFactory("awscc_acmpca_certificate_authority_activation", certificateAuthorityActivationResource)
}

// certificateAuthorityActivationResource returns the Terraform awscc_acmpca_certificate_authority_activation resource.
// This Terraform resource corresponds to the CloudFormation AWS::ACMPCA::CertificateAuthorityActivation resource.
func certificateAuthorityActivationResource(ctx context.Context) (resource.Resource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Certificate
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Certificate Authority certificate that will be installed in the Certificate Authority.",
		//	  "type": "string"
		//	}
		"certificate": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Certificate Authority certificate that will be installed in the Certificate Authority.",
			Required:    true,
			// Certificate is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: CertificateAuthorityArn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Arn of the Certificate Authority.",
		//	  "type": "string"
		//	}
		"certificate_authority_arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Arn of the Certificate Authority.",
			Required:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.RequiresReplace(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: CertificateChain
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Certificate chain for the Certificate Authority certificate.",
		//	  "type": "string"
		//	}
		"certificate_chain": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Certificate chain for the Certificate Authority certificate.",
			Optional:    true,
			// CertificateChain is a write-only property.
		}, /*END ATTRIBUTE*/
		// Property: CompleteCertificateChain
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The complete certificate chain, including the Certificate Authority certificate.",
		//	  "type": "string"
		//	}
		"complete_certificate_chain": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The complete certificate chain, including the Certificate Authority certificate.",
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The status of the Certificate Authority.",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The status of the Certificate Authority.",
			Optional:    true,
			Computed:    true,
			PlanModifiers: []planmodifier.String{ /*START PLAN MODIFIERS*/
				stringplanmodifier.UseStateForUnknown(),
			}, /*END PLAN MODIFIERS*/
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	// Corresponds to CloudFormation primaryIdentifier.
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}

	schema := schema.Schema{
		Description: "Used to install the certificate authority certificate and update the certificate authority status.",
		Version:     1,
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::ACMPCA::CertificateAuthorityActivation").WithTerraformTypeName("awscc_acmpca_certificate_authority_activation")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"certificate":                "Certificate",
		"certificate_authority_arn":  "CertificateAuthorityArn",
		"certificate_chain":          "CertificateChain",
		"complete_certificate_chain": "CompleteCertificateChain",
		"status":                     "Status",
	})

	opts = opts.WithWriteOnlyPropertyPaths([]string{
		"/properties/Certificate",
		"/properties/CertificateChain",
	})
	opts = opts.WithCreateTimeoutInMinutes(0).WithDeleteTimeoutInMinutes(0)

	opts = opts.WithUpdateTimeoutInMinutes(0)

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
