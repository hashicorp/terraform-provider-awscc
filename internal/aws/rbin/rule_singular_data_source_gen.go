// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package rbin

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("awscc_rbin_rule", ruleDataSource)
}

// ruleDataSource returns the Terraform awscc_rbin_rule data source.
// This Terraform data source corresponds to the CloudFormation AWS::Rbin::Rule resource.
func ruleDataSource(ctx context.Context) (datasource.DataSource, error) {
	attributes := map[string]schema.Attribute{ /*START SCHEMA*/
		// Property: Arn
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Rule Arn is unique for each rule.",
		//	  "maxLength": 1011,
		//	  "minLength": 0,
		//	  "type": "string"
		//	}
		"arn": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "Rule Arn is unique for each rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Description
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The description of the retention rule.",
		//	  "maxLength": 255,
		//	  "type": "string"
		//	}
		"description": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The description of the retention rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ExcludeResourceTags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Information about the exclude resource tags used to identify resources that are excluded by the retention rule.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The resource tag of the rule.",
		//	    "properties": {
		//	      "ResourceTagKey": {
		//	        "description": "The tag key of the resource.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "ResourceTagValue": {
		//	        "description": "The tag value of the resource",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "ResourceTagKey",
		//	      "ResourceTagValue"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 5,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"exclude_resource_tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ResourceTagKey
					"resource_tag_key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The tag key of the resource.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ResourceTagValue
					"resource_tag_value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The tag value of the resource",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Information about the exclude resource tags used to identify resources that are excluded by the retention rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Identifier
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The unique ID of the retention rule.",
		//	  "pattern": "[0-9a-zA-Z]{11}",
		//	  "type": "string"
		//	}
		"identifier": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The unique ID of the retention rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LockConfiguration
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Information about the retention rule lock configuration.",
		//	  "properties": {
		//	    "UnlockDelayUnit": {
		//	      "description": "The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.",
		//	      "enum": [
		//	        "DAYS"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "UnlockDelayValue": {
		//	      "description": "The unlock delay period, measured in the unit specified for UnlockDelayUnit.",
		//	      "maximum": 30,
		//	      "minimum": 7,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "type": "object"
		//	}
		"lock_configuration": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: UnlockDelayUnit
				"unlock_delay_unit": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The unit of time in which to measure the unlock delay. Currently, the unlock delay can be measure only in days.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: UnlockDelayValue
				"unlock_delay_value": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The unlock delay period, measured in the unit specified for UnlockDelayUnit.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Information about the retention rule lock configuration.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: LockState
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The lock state for the retention rule.",
		//	  "pattern": "locked|pending_unlock|unlocked",
		//	  "type": "string"
		//	}
		"lock_state": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The lock state for the retention rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceTags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Information about the resource tags used to identify resources that are retained by the retention rule.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "The resource tag of the rule.",
		//	    "properties": {
		//	      "ResourceTagKey": {
		//	        "description": "The tag key of the resource.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "ResourceTagValue": {
		//	        "description": "The tag value of the resource",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "ResourceTagKey",
		//	      "ResourceTagValue"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 50,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"resource_tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: ResourceTagKey
					"resource_tag_key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The tag key of the resource.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: ResourceTagValue
					"resource_tag_value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "The tag value of the resource",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Information about the resource tags used to identify resources that are retained by the retention rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: ResourceType
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The resource type retained by the retention rule.",
		//	  "enum": [
		//	    "EBS_SNAPSHOT",
		//	    "EC2_IMAGE"
		//	  ],
		//	  "type": "string"
		//	}
		"resource_type": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The resource type retained by the retention rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: RetentionPeriod
		// CloudFormation resource type schema:
		//
		//	{
		//	  "additionalProperties": false,
		//	  "description": "Information about the retention period for which the retention rule is to retain resources.",
		//	  "properties": {
		//	    "RetentionPeriodUnit": {
		//	      "description": "The retention period unit of the rule",
		//	      "enum": [
		//	        "DAYS"
		//	      ],
		//	      "type": "string"
		//	    },
		//	    "RetentionPeriodValue": {
		//	      "description": "The retention period value of the rule.",
		//	      "maximum": 3650,
		//	      "minimum": 1,
		//	      "type": "integer"
		//	    }
		//	  },
		//	  "required": [
		//	    "RetentionPeriodValue",
		//	    "RetentionPeriodUnit"
		//	  ],
		//	  "type": "object"
		//	}
		"retention_period": schema.SingleNestedAttribute{ /*START ATTRIBUTE*/
			Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
				// Property: RetentionPeriodUnit
				"retention_period_unit": schema.StringAttribute{ /*START ATTRIBUTE*/
					Description: "The retention period unit of the rule",
					Computed:    true,
				}, /*END ATTRIBUTE*/
				// Property: RetentionPeriodValue
				"retention_period_value": schema.Int64Attribute{ /*START ATTRIBUTE*/
					Description: "The retention period value of the rule.",
					Computed:    true,
				}, /*END ATTRIBUTE*/
			}, /*END SCHEMA*/
			Description: "Information about the retention period for which the retention rule is to retain resources.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Status
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "The state of the retention rule. Only retention rules that are in the available state retain resources.",
		//	  "pattern": "pending|available",
		//	  "type": "string"
		//	}
		"status": schema.StringAttribute{ /*START ATTRIBUTE*/
			Description: "The state of the retention rule. Only retention rules that are in the available state retain resources.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
		// Property: Tags
		// CloudFormation resource type schema:
		//
		//	{
		//	  "description": "Information about the tags assigned to the retention rule.",
		//	  "insertionOrder": false,
		//	  "items": {
		//	    "additionalProperties": false,
		//	    "description": "Metadata of a retention rule, consisting of a key-value pair.",
		//	    "properties": {
		//	      "Key": {
		//	        "description": "A unique identifier for the tag.",
		//	        "maxLength": 128,
		//	        "minLength": 1,
		//	        "type": "string"
		//	      },
		//	      "Value": {
		//	        "description": "String which you can use to describe or define the tag.",
		//	        "maxLength": 256,
		//	        "minLength": 0,
		//	        "type": "string"
		//	      }
		//	    },
		//	    "required": [
		//	      "Key",
		//	      "Value"
		//	    ],
		//	    "type": "object"
		//	  },
		//	  "maxItems": 200,
		//	  "type": "array",
		//	  "uniqueItems": true
		//	}
		"tags": schema.SetNestedAttribute{ /*START ATTRIBUTE*/
			NestedObject: schema.NestedAttributeObject{ /*START NESTED OBJECT*/
				Attributes: map[string]schema.Attribute{ /*START SCHEMA*/
					// Property: Key
					"key": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "A unique identifier for the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
					// Property: Value
					"value": schema.StringAttribute{ /*START ATTRIBUTE*/
						Description: "String which you can use to describe or define the tag.",
						Computed:    true,
					}, /*END ATTRIBUTE*/
				}, /*END SCHEMA*/
			}, /*END NESTED OBJECT*/
			Description: "Information about the tags assigned to the retention rule.",
			Computed:    true,
		}, /*END ATTRIBUTE*/
	} /*END SCHEMA*/

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "Data Source schema for AWS::Rbin::Rule",
		Attributes:  attributes,
	}

	var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("AWS::Rbin::Rule").WithTerraformTypeName("awscc_rbin_rule")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
		"arn":                    "Arn",
		"description":            "Description",
		"exclude_resource_tags":  "ExcludeResourceTags",
		"identifier":             "Identifier",
		"key":                    "Key",
		"lock_configuration":     "LockConfiguration",
		"lock_state":             "LockState",
		"resource_tag_key":       "ResourceTagKey",
		"resource_tag_value":     "ResourceTagValue",
		"resource_tags":          "ResourceTags",
		"resource_type":          "ResourceType",
		"retention_period":       "RetentionPeriod",
		"retention_period_unit":  "RetentionPeriodUnit",
		"retention_period_value": "RetentionPeriodValue",
		"status":                 "Status",
		"tags":                   "Tags",
		"unlock_delay_unit":      "UnlockDelayUnit",
		"unlock_delay_value":     "UnlockDelayValue",
		"value":                  "Value",
	})

	v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
