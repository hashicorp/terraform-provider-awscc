// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/resource/main.go; DO NOT EDIT.

package {{ .PackageName }}

import (
	"context"
	{{if .ImportRegexp }}"regexp"{{- end}}

	{{- range .FrameworkValidatorsPackages }}
	"github.com/hashicorp/terraform-plugin-framework-validators/{{ . }}"
	{{- end}}
	{{if .ImportFrameworkValidator }}"github.com/hashicorp/terraform-plugin-framework/schema/validator"{{- end}}
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	{{if gt (len .FrameworkPlanModifierPackages) 0 }}"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"{{- end}}
	{{- range .FrameworkPlanModifierPackages }}
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/{{ . }}"
	{{- end}}
	{{if .ImportFrameworkTypes }}"github.com/hashicorp/terraform-plugin-framework/types"{{end -}}
	{{if .ImportFrameworkTypesJsonType }}
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	{{- end}}
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
	{{if .ImportInternalValidate }}"github.com/hashicorp/terraform-provider-awscc/internal/validate"{{- end }}
)

func init() {
	registry.AddResourceFactory("{{ .TerraformTypeName }}", {{ .FactoryFunctionName }})
}

// {{ .FactoryFunctionName }} returns the Terraform {{ .TerraformTypeName }} resource.
// This Terraform resource corresponds to the CloudFormation {{ .CloudFormationTypeName }} resource.
func {{ .FactoryFunctionName }}(ctx context.Context) (resource.Resource, error) {
	attributes := {{ .RootPropertiesSchema }}

{{ if .SyntheticIDAttribute }}
	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Computed:    true,
		PlanModifiers: []planmodifier.String{
			stringplanmodifier.UseStateForUnknown(),
		},
	}
{{- end }}

	schema := schema.Schema{
		Description: {{ .SchemaDescription | printf "%q" }},
		Version:     {{ .SchemaVersion }},
		Attributes:  attributes,
	}

	var opts generic.ResourceOptions

	opts = opts.WithCloudFormationTypeName("{{ .CloudFormationTypeName }}").WithTerraformTypeName("{{ .TerraformTypeName }}")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithSyntheticIDAttribute({{ .SyntheticIDAttribute }})
	opts = opts.WithAttributeNameMap(map[string]string{
{{- range $key, $value := .AttributeNameMap }}
		"{{ $key }}": "{{ $value }}",
{{- end }}
	})
{{ if not .HasUpdateMethod }}
	opts = opts.IsImmutableType(true)
{{- end }}
{{ if .WriteOnlyPropertyPaths }}
	opts = opts.WithWriteOnlyPropertyPaths([]string{
	{{- range .WriteOnlyPropertyPaths }}
		"{{ . }}",
	{{- end }}
	})
{{- end }}
	opts = opts.WithCreateTimeoutInMinutes({{ .CreateTimeoutInMinutes }}).WithDeleteTimeoutInMinutes({{ .DeleteTimeoutInMinutes }})
{{ if .HasUpdateMethod }}
	opts = opts.WithUpdateTimeoutInMinutes({{ .UpdateTimeoutInMinutes }})
{{- end }}

	v, err := generic.NewResource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
