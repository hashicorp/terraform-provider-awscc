// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by generators/singular-data-source/main.go; DO NOT EDIT.

package {{ .PackageName }}

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	{{- if .ImportFrameworkTypes }}
	"github.com/hashicorp/terraform-plugin-framework/types"
	{{- end}}
	{{- if .ImportFrameworkJSONTypes }}
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	{{- end}}
	{{- if .ImportFrameworkTimeTypes }}
	"github.com/hashicorp/terraform-plugin-framework-timetypes/timetypes"
	{{- end}}
	"github.com/hashicorp/terraform-provider-awscc/internal/generic"
	"github.com/hashicorp/terraform-provider-awscc/internal/registry"
)

func init() {
	registry.AddDataSourceFactory("{{ .TerraformTypeName }}", {{ .FactoryFunctionName }})
}

// {{ .FactoryFunctionName }} returns the Terraform {{ .TerraformTypeName }} data source.
// This Terraform data source corresponds to the CloudFormation {{ .CloudFormationTypeName }} resource.
func {{ .FactoryFunctionName }}(ctx context.Context) (datasource.DataSource, error) {
	attributes := {{ .RootPropertiesSchema }}

	attributes["id"] = schema.StringAttribute{
		Description: "Uniquely identifies the resource.",
		Required:    true,
	}

	schema := schema.Schema{
		Description: "{{ .SchemaDescription }}",
		Attributes:  attributes,
	}

    var opts generic.DataSourceOptions

	opts = opts.WithCloudFormationTypeName("{{ .CloudFormationTypeName }}").WithTerraformTypeName("{{ .TerraformTypeName }}")
	opts = opts.WithTerraformSchema(schema)
	opts = opts.WithAttributeNameMap(map[string]string{
{{- range $key, $value := .AttributeNameMap }}
		"{{ $key }}": "{{ $value }}",
{{- end }}
	})

    v, err := generic.NewSingularDataSource(ctx, opts...)

	if err != nil {
		return nil, err
	}

	return v, nil
}
